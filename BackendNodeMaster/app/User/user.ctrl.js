const QRCode = require("qrcode");
const { PDFDocument } = require('pdf-lib');
const XLSX = require('xlsx');
const { BlobServiceClient } = require('@azure/storage-blob');
const mime = require('mime-types');
const JsBarcode = require("jsbarcode");
const { createCanvas, loadImage, Canvas, Image } = require("canvas");
const mergeImages = require('merge-images');
var path = require('path');
const pdfparse = require('pdf-parse');
const request_native = require("request-promise-native");
var pngitxt = require('png-itxt');
const getUuid = require('uuid-by-string');
const UUID = require('uuid');
var readline = require('readline');
var stream = require('stream');
const https = require('https');
var fs = require('fs'); 
var AdmZip = require("adm-zip");
var multiparty = require('multiparty');
const axios = require('axios');
const { Poppler } = require("node-poppler");
var IMAGES = require("images");


var common_content = fs.readFileSync("../backend-common-lib/commonfuncs.js");
common_content = common_content.toString();
fs.writeFileSync("../backend-node-master/app/User/commonfuncs.js", common_content);
var common_lib = require("./commonfuncs.js");
var module_1_content = fs.readFileSync("../backend-common-lib/template_module_1.js");
module_1_content = module_1_content.toString();
fs.writeFileSync("../backend-node-master/app/User/template_module_1.js", module_1_content);
var template_module_1 = require("./template_module_1.js");
const fsExtra = require('fs-extra');
const extfs = require('extfs');
const {promisify} = require("util");
const writeFile = promisify(fs.writeFile);
var csvWriter = require('csv-write-stream')
//const exec = promisify(require('child_process').exec);
const exec = require('child_process').exec;
var user = {};
const pool = require('../../config/database');
const format = require('pg-format');
var config = require("../../config/config");
var bcrypt = require('bcryptjs');
var jwt = require('jsonwebtoken');
var verifier = require('email-verify');
var infoCodes = verifier.infoCodes;

var mailler = require("../../config/mailer");
var mailler_forinvite = require("../../config/mailer_forinvite");

var multer = require('multer');
var extract = require('extract-zip');

const puppeteer = require('puppeteer');
const hb = require('handlebars');
const fetch = require('node-fetch');

var validator = require("email-validator");
const ethWallet = require('ethereumjs-wallet');

var aws = require("aws-sdk");
aws.config.update({
  accessKeyId: config.accessKeyId,
  secretAccessKey: config.secretAccessKey,
  region: config.region,
});
const kms = new aws.KMS({
  accessKeyId: config.accessKeyId,
  secretAccessKey: config.secretAccessKey,
  region: config.region,
});
const s3 = new aws.S3({
  accessKeyId: config.accessKeyId,
  secretAccessKey: config.secretAccessKey,
  region: config.region,
});
///
var aws_new = require("aws-sdk");
aws.config.update({
  accessKeyId: process.env.AWS_SDK_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: 'ap-south-1',
});
var s3_new = new aws_new.S3({apiVersion: '2006-03-01'});
// New Structure
const utils = require("../utils.js");

const GALGOTIAS_IMAGE_PATH = "/home/ubuntu/certificate_manage/Galgotias-Image/";
const MANAV_IMAGE_PATH = "/home/ubuntu/certificate_manage/Manav-Image/";
const CUTM_IMAGE_PATH = "/home/ubuntu/certificate_manage/CUTM-Image/";
const DOWNLOAD_ZIP_PATH = "/var/www/html/download/";
const DOWNLOAD_TEMP_PATH = "/tmp/download_certificate/";
var myip="https://www.certonce.com";
//var myverifyip="https://verify.certonce.com";
var homedir="/home/ubuntu";
var wwwdir="/var/www/html";
var subwwwurl="";
var containerid = "f445c216c420";
var containeridgs = "a6295fa568d0";

var jsonbasepathgs=homedir+"/datags/"
//var verifier_url=myverifyip+subwwwurl+"/verifier.php";
//var verifier_url_direct=myverifyip+subwwwurl+"/verifier/";
var verifier_url=myip+subwwwurl+"/verifier.php";
var verifier_url_direct=myip+subwwwurl+"/verify/";

var bucket_name="certonce";
var bucket_region="us-east-2";
var bucket_key="signedcertificates/education/json/";
var bucket_key_pdf="signedcertificates/education/pdf/";
var bucket_key_img="signedcertificates/education/img/";
var bucket_object_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";
//////////////////////////////////live params//////////////////////
var issuer_revocation_base_url=myip+subwwwurl+"/blockchain/";
var issuer_revocation_base_path=wwwdir+subwwwurl+"/blockchain/";


/////////openbadges issuer//////////
var issuer_revocation_openbadges_base_url=myip+subwwwurl+"/openbadges/issuer/";
var issuer_revocation_openbadges_base_path=wwwdir+subwwwurl+"/openbadges/issuer/";
var openbadges_base_path=wwwdir+subwwwurl+"/openbadges/baked/";
var openbadges_api_base_path=wwwdir+subwwwurl+"/openbadges/api/";
////////////////////////////////////

var introport=":5000";

var receipientsbasedir=homedir+"/cert-tools/sample_data/rosters/";
var receipientsfilename="roster_testnet.csv";
var certtemplatebasedir=homedir+"/cert-tools/sample_data/certificate_templates/";
var certtemplatefilename="test.json";


var unsignedcertificatetemppath=homedir+"/cert-tools/sample_data/unsigned_certificates/"
var unsignedcertificatepath=wwwdir+subwwwurl+"/blockchain/certificates/unsignedcertificate/"
var unsignedcertificatebaseurl=myip+subwwwurl+"/blockchain/certificates/unsignedcertificate/"
var signedcertificatepath=wwwdir+subwwwurl+"/blockchain/certificates/signedcertificate/"
var signedcertificatebaseurl=myip+subwwwurl+"/blockchain/certificates/signedcertificate/"



var issuerfilename="issuer.json";
var revokelistfilename="revocation-list.json";
var issuercontent = require("../../issuer_revocation/"+issuerfilename);
var revokelistcontent = require("../../issuer_revocation/"+revokelistfilename);
////////////////////////////////live params end/////////////////////
//////////////////////////Get started params////////////////////////
var templatecontentgs = require("../../getstarted/unsignedtemplate/template.json");
var unsignedcertificatepathgs=wwwdir+subwwwurl+"/blockchain/certificates/gs/unsignedcertificate/"
var signedcertificatepathgs=wwwdir+subwwwurl+"/blockchain/certificates/gs/signedcertificate/"
var unsignedcertificatebaseurlgs=myip+subwwwurl+"/blockchain/certificates/gs/unsignedcertificate/"
var signedcertificatebaseurlgs=myip+subwwwurl+"/blockchain/certificates/gs/signedcertificate/"
//////////////////////////Get started params end////////////////////


var logfiledir="/home/ubuntu/logs/";

var generator = require('generate-password');
const { string } = require("pg-format");
var password = generator.generate({
  length: 10,
  numbers: true
});

async function getS3BucketInformation(accountid)
{
  try {
      var puserid=await getParentAccountIdFromId(accountid);
      var certonceorcustomer="certonce";        
      var awsaccesskey=config.accessKeyId;
      var awssecretkey=config.secretAccessKey;
      var s3bucketname=config.bucket_name;
      var awsregion=config.region;
      var azureconnectionstring = "";
      var gdrivecredential = "";
      var gdrivetoken = "";
      var ftphost = "";
      var ftpuser = "";
      var ftppassword = "";
      var localstoragepath = "";   
      var baseurl = "" ;
      var storagetype = "";

      var query = format(`SELECT * FROM setting where accountid='${puserid}';`);    
      var result=await pool.query(query);      
      if (result.rows && result.rows.length != 0) 
      {
        if(result.rows[0].certonceorcustomer!="" && result.rows[0].certonceorcustomer!=null &&
          result.rows[0].awsaccesskey!="" && result.rows[0].awsaccesskey!=null &&
          result.rows[0].awssecretkey!="" && result.rows[0].awssecretkey!=null &&
          result.rows[0].s3bucketname!="" && result.rows[0].s3bucketname!=null &&
          result.rows[0].awsregion!="" && result.rows[0].awsregion!=null)
        {
          
          certonceorcustomer=result.rows[0].certonceorcustomer;
          console.log(certonceorcustomer);
          awsaccesskey=result.rows[0].awsaccesskey;
          awssecretkey=result.rows[0].awssecretkey;
          s3bucketname=result.rows[0].s3bucketname;
          awsregion=result.rows[0].awsregion;
        }      
        else if(result.rows[0].certonceorcustomer!="" && result.rows[0].certonceorcustomer!=null &&
          (result.rows[0].awsaccesskey=="" || result.rows[0].awsaccesskey==null ||
          result.rows[0].awssecretkey=="" || result.rows[0].awssecretkey==null ||
          result.rows[0].s3bucketname=="" || result.rows[0].s3bucketname==null ||
          result.rows[0].awsregion=="" || result.rows[0].awsregion==null))
        {          
          certonceorcustomer="certonce";
          console.log(certonceorcustomer);
          awsaccesskey=config.accessKeyId;
          awssecretkey=config.secretAccessKey;
          s3bucketname=config.bucket_name;
          awsregion=config.region;
        }
        else
        {
          console.log(certonceorcustomer);
        }
        azureconnectionstring = result.rows[0].azureConnectionString;
        gdrivecredential = result.rows[0].gdriveCredential;
        gdrivetoken = result.rows[0].gdriveToken;
        ftphost = result.rows[0].ftphost;
        ftpuser = result.rows[0].ftpuser;
        ftppassword = result.rows[0].ftppassword;
        localstoragepath = result.rows[0].localstoragepath;
        baseurl = result.rows[0].baseurl;
        storagetype = result.rows[0].storagetype;
      }
      var awssdk = require("aws-sdk");
      awssdk.config.update({
        accessKeyId: awsaccesskey,
        secretAccessKey: awssecretkey,
        region: awsregion,
      });
      var s3obj = new awssdk.S3({apiVersion: '2006-03-01'});
      var ret={
        certonceorcustomer:certonceorcustomer,
        awsaccesskey:awsaccesskey,
        awssecretkey:awssecretkey,
        s3bucketname:s3bucketname,
        awsregion:awsregion,
        s3obj:s3obj,
        azureconnectionstring: azureconnectionstring,
        gdrivecredential: gdrivecredential,
        gdrivetoken: gdrivetoken,
        ftphost: ftphost,
        ftpuser: ftpuser,
        ftppassword: ftppassword,
        localstoragepath: localstoragepath,
        baseurl: baseurl,
        storagetype: storagetype
      };
      return ret;
    } 
    catch (error) 
    {
      console.log(error);
      return {};    
    }
}

async function createBucket(s3obj,bucket_name="certonce")
{  
  try
  {     
    if(bucket_name=="") return "";
    var bucketParams = {
      Bucket : bucket_name,
      // ACL : 'public-read'
    };
    var data=await s3obj.createBucket(bucketParams).promise();
    //console.log("createbucekt ",data);
    return "success";
  }
  catch(err)
  {
    console.log("err createbucket ",err);    
  }
}

async function fileUpload( s3obj, bucket_region, bucket_file, collegeid, p_BucketKey, bucket_name="certonce" ) {
  if(bucket_name=="") return "";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: '', ContentType: 'application/json'};
  try {
    var fileStream = fs.createReadStream(bucket_file);  
    uploadParams.Body = fileStream;
    var path = require('path');
    var filename= path.basename(bucket_file);
    var suburl=bucket_key+collegeid;
    if(p_BucketKey!="") {
      suburl=p_BucketKey;
    }
    uploadParams.Key = suburl+"/"+filename;
    var data=await s3obj.putObject(uploadParams).promise();
    var bucket_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";
    return bucket_base_url+suburl+"/"+filename;
  }
  catch(err) {
    console.log("err uploading ",err);
  }
}

async function filUploadLocal(baseurl, encodedFile, targetPath, originalFileName, contentType="application/json") {
  try {
    const response = await axios.post(`${baseurl}/upload.php`, 
      { file: encodedFile, fileName: originalFileName, targetPath: targetPath },
      { maxBodyLength: 1048576000, maxContentLength: 1048576000, headers: { 'Content-Type':  contentType }
    });
    console.log(response.data);
    return "success";
  } catch (error) {
    console.log(error)
    console.log("filUploadLocal error : = ", error?.message || "failed to upload filUploadLocal");
    return "fail"
  }
}

async function fileUploadPdf(s3obj,bucket_region,bucket_file,collegeid,p_BucketKey,bucket_name="certonce")
{ 
  if(bucket_name=="") return "";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: '', ContentType: 'application/pdf'};
  try
  {
    var fileStream = fs.createReadStream(bucket_file);  
    uploadParams.Body = fileStream;
    var path = require('path');
    var filename= path.basename(bucket_file);
    var suburl=bucket_key_pdf+collegeid;
    if(p_BucketKey!="") {
      suburl=p_BucketKey;
    }
    uploadParams.Key = suburl+"/"+filename;
    var data=await s3obj.putObject(uploadParams).promise();        
    var bucket_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";
    return bucket_base_url+suburl+"/"+filename;
  }
  catch(err)
  {
    console.log("err uploading ",err);    
  }
}

async function createContainer(containername, connectionstring) {
  const blobServiceClient = BlobServiceClient.fromConnectionString(connectionstring);
  const containerClient = blobServiceClient.getContainerClient(containername);
  const createContainerResponse = await containerClient.createIfNotExists();  
  console.log(`Created container ${containername} successfully.`);
}

async function fileUploadAzure(fullPath,containername, connectionstring, subdir="") {
  try {
    await createContainer(containername, connectionstring);
    const blobServiceClient = BlobServiceClient.fromConnectionString(connectionstring);
    const containerClient = blobServiceClient.getContainerClient(containername);
    await containerClient.setAccessPolicy("container");
    var fileName = path.basename(fullPath); // Extract the filename from the full path
    if (subdir != "") fileName = `${subdir}/${fileName}`;
    const blockBlobClient = containerClient.getBlockBlobClient(fileName);
    const contenttype = mime.lookup(fullPath);
    console.log(contenttype);
    const readableStream = fs.createReadStream(fullPath);
    const options = { blobHTTPHeaders: { blobContentType: contenttype } };
    const uploadBlobResponse = await blockBlobClient.uploadStream(readableStream, undefined, undefined, options);
    //$blobUri = 'https://'.$storageAccountName.'.blob.core.windows.net/'.$container_name.'/'.$file_name;
    var arr = connectionstring.split(";");
    var accountNameArr = arr[1].split("=");
    var accountName = accountNameArr[1];
    var blobUri = `https://${accountName}.blob.core.windows.net/${containername}/${fileName}`;
    console.log(`Uploaded blob ${fileName} successfully, url=${blobUri}`);
    return blobUri;
  }
  catch(err) {
    console.error(err);  
    return "";
  }
}

async function uploadCertificatePng(s3obj, collegeid, certificatepngcontent, filename, p_BucketKey, url, bucket_name = "certonce", region) {
  if (collegeid == "" || collegeid == null) return "error";
  var uploadParams = { Bucket: bucket_name, Key: '', Body: '' };
  try {
      //console.log(certificatepngcontent);
      certificatepngcontent = await resizeBase64(certificatepngcontent, 640, 628);
      uploadParams.Body = certificatepngcontent;
      var suburl = "certificatepng/" + collegeid;
      if (p_BucketKey != "") {
          suburl = p_BucketKey;
      }
      uploadParams.Key = suburl + "/" + filename;
      var data = await s3obj.putObject(uploadParams).promise();
      if (url != "")
          return url + "/" + filename.replace(".png","");
      else{
        if (bucket_name == "certonce") return myip + "/certificatepng/" + collegeid + "/" + filename;
        else return `https://${bucket_name}.s3.${region}.amazonaws.com/certificatepng/${collegeid}/${filename}`;
      }
        
  }
  catch (err) {
      console.log("err uploading ", err);
  }
}


async function readPhotoFile(s3obj,collegeid,cohortid,studentid,bucket_name="certonce", photourl="",bucket_region="ap-south-1", p_BucketKey="")
{
  if(photourl=="" || photourl==null) photourl = "https://www.certonce.com/images/memberphoto.png";
  if(collegeid == "11")
  {    
    return photourl;
  }
  if(bucket_name=="") return "";
  var getParams  = {Bucket: bucket_name, Key: ''};
  try
  {     
    var suburl = "education_photo/"+collegeid+"/"+cohortid+"/"+studentid;
    if (p_BucketKey != "") {
        suburl = p_BucketKey+"/"+ studentid;
    }
    getParams.Key = suburl;
    //console.log(getParams.Key);
    var data=await s3obj.getObject(getParams).promise();    
    
    return data.Body.toString(); 
  }
  catch(err)
  {
    console.log(err);
    return photourl; 
  }
}
async function uploadPhotoFile(s3obj, collegeid, cohortid, studentid, photocontent, bucket_name="certonce",bucket_region="ap-south-1", p_BucketKey="")
{
  if(collegeid==""||collegeid==null||cohortid==""||cohortid==null||studentid==""||studentid==null) return "error";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: ''};
  try
  {    

    uploadParams.Body = photocontent;
    var suburl = "education_photo/"+collegeid+"/"+cohortid+"/"+studentid;
    if (p_BucketKey != "") {
        suburl = p_BucketKey+"/"+ studentid;
    }        
    
    uploadParams.Key = suburl;
    var data=await s3obj.putObject(uploadParams).promise();

    var bucket_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";
    console.log("image url: ", bucket_base_url+suburl)
    return bucket_base_url+suburl;

  }
  catch(err)
  {
    console.log("err uploading ",err);
    return "";
  }
}

async function getImageHeightFromBase64(base64Image) {
  return new Promise((resolve, reject) => {
     const img = new Image();
     img.onload = () => resolve(img.height);
     img.onerror = () => reject(new Error('Failed to load image'));
     img.src = base64Image;
  });
 }

async function resizeBase64(base64Image, maxWidth = 640, maxHeight = 640) {
  const sharp = require('sharp');
  var sizeOf = require('image-size');
  base64Image = base64Image.replace(/<img style="width:100%;" src="/g, '');
  base64Image = base64Image.replace(/<img style="width:100%;height:100%;" src="/g, '');
  base64Image = base64Image.replace(/" \/>/g, '');
  // base64Image = base64Image.replace('<br>', '');
 
  var destructImage = base64Image.split("<br>");
  var imageHeight = 0;
  var totalHeight = 0;
  var imageList = [];
  var imageData;
  for(let index=0; index<destructImage.length; index++){
    imageList.push({src: destructImage[index], x: 0, y: imageHeight });
    imageHeight = await getImageHeightFromBase64(destructImage[index]);
    totalHeight += imageHeight;
  }
  await mergeImages(imageList, {
   Canvas: Canvas,
   Image: Image,
   direction: true,
   height: totalHeight
  }).then(b64 => {
    imageData = b64.replace(/^data:image\/png;base64,/, "");
  });
  // await fs.writeFileSync('/home/ubuntu/testpngbase64.txt', imageData, {flag: 'w'});
  // var mimType = destructImage[0].split(":")[1];
  // var imageData = destructImage[1].split(",")[1];

  try {

      let resizedImage = Buffer.from(imageData, "base64");
      var dimensions = sizeOf(resizedImage);
      let ratio = 1;
      let max_length = maxHeight > maxWidth ? maxHeight : maxWidth;
      if (dimensions.width > max_length || dimensions.height > max_length) {  //need to scale

          ratio = max_length / dimensions.width;

          if (dimensions.height > dimensions.width) {
              ratio = max_length / dimensions.height;
          }
      }
      resizedImage = await sharp(resizedImage).resize(parseInt(dimensions.width * ratio), parseInt(dimensions.height * ratio)).toBuffer()

      //return `data:${mimType};base64,${resizedImage.toString("base64")}`;
      return resizedImage;
  } catch (error) {
      console.log(error);
  }
}

async function uploadOpenBadgesFile(s3obj,bucket_region,collegeid,cohortid,badge_file_name,bucket_name="certonce",is_file=false)
{
  if(collegeid==""||collegeid==null||cohortid==""||cohortid==null||badge_file_name==""||badge_file_name==null) return "error";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: ''};
  try
  {
    var path = require('path');
    if(is_file==false)
    {
       //uploadParams.Body = badge_file_name;
       uploadParams.ContentType="application/json";
       var fileStream = fs.createReadStream(badge_file_name);  
       uploadParams.Body = fileStream;
    }
    else
    {      
      var fileStream = fs.createReadStream(badge_file_name);       
      uploadParams.Body = fileStream;
      uploadParams.ContentType="image/png";
       
    }    
    var filename= path.basename(badge_file_name);
    uploadParams.Key = "openbadges/api/"+collegeid+"/"+cohortid+"/"+filename;
    var data=await s3obj.putObject(uploadParams).promise();  
    var bucket_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";  
    return bucket_base_url+"openbadges/api/"+collegeid+"/"+cohortid+"/"+filename;
  }
  catch(err)
  {
    console.log("err uploading ",err);
    return "error";
  }
}
async function kullarFileUploadPdf(s3obj,bucket_region,bucket_file,collegeid,cohortid,bucket_name="certonce")
{
  if(bucket_name=="") return "";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: '', ContentType: 'application/pdf'};
  try
  { 
    
    var fileStream = fs.createReadStream(bucket_file);  
    uploadParams.Body = fileStream;
    var path = require('path');
    var filename= path.basename(bucket_file);
    uploadParams.Key = "openbadges/api/"+collegeid+"/"+cohortid+"/"+filename;
    var data=await s3obj.putObject(uploadParams).promise();    
    var bucket_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";  
    return bucket_base_url+"openbadges/api/"+collegeid+"/"+cohortid+"/"+filename;
  }
  catch(err)
  {
    console.log("err uploading ",err);    
  }
}
async function uploadOpenBadgesObject(s3obj,openbadgeskey,content,bucket_name="certonce",is_file=false)
{
  if(openbadgeskey==""||openbadgeskey==null) return "error";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: ''};
  try
  {
    
    if(is_file==false)
    {       
       uploadParams.ContentType="application/json";       
       uploadParams.Body = content;
    }
    else
    {      
      var fileStream = fs.createReadStream(content);       
      uploadParams.Body = fileStream;
      uploadParams.ContentType="image/png";
       
    }
    uploadParams.Key = openbadgeskey;
    var data=await s3obj.putObject(uploadParams).promise();    
    return "success";
  }
  catch(err)
  {
    console.log("err uploading ",err);
    return "error";
  }
}
async function apiUploadOpenBadgesFile(openbadgeidpath,badge_file_name,is_file=false)
{
  if(openbadgeidpath==""||openbadgeidpath==null||badge_file_name==""||badge_file_name==null) return "error";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: ''};
  try
  {
    var path = require('path');
    if(is_file==false)
    {
       //uploadParams.Body = badge_file_name;
       uploadParams.ContentType="application/json";
       var fileStream = fs.createReadStream(badge_file_name);  
       uploadParams.Body = fileStream;
    }
    else
    {      
      var fileStream = fs.createReadStream(badge_file_name);       
      uploadParams.Body = fileStream;
      uploadParams.ContentType="image/png";
    }    
    var filename= path.basename(badge_file_name);
    uploadParams.Key = "openbadges/api/"+openbadgeidpath+"/"+filename;
    var data=await s3.putObject(uploadParams).promise();    
    return bucket_object_base_url+"openbadges/api/"+openbadgeidpath+"/"+filename;
  }
  catch(err)
  {
    console.log("err uploading ",err);
    return "error";
  }
}
/////////////////////////////////////get started function//////////////////////////////////////////
user.sendscheduledemoGS=async (req, res, next) => {
  try {                
      
      if ( req.body.firstName && req.body.lastName && req.body.emailAddress ) {
        let firstname=req.body.firstName;
        let lastname=req.body.lastName;
        let emailaddress=req.body.emailAddress;
        let phonenumber=req.body.phoneNumber;
        let organizationname=req.body.organizationName;
        let role=req.body.role;
        let describe=req.body.describe;
        let findus=req.body.findUs;
        let questions=req.body.questions;
        let onetimecode="";
        var loopflag=1;
        while(loopflag==1)
        {
          onetimecode = getOnetimecode(5)
          let getExistStudent = format(`SELECT id FROM potentialcustomer WHERE onetimecode='${onetimecode}';`);
          studentsforonetimecode = await pool.query(getExistStudent);
          if (studentsforonetimecode.rowCount == 0) {
              loopflag=0
          }
        }   
      
      
        var query = format(`select * from potentialcustomer where LOWER(firstname)=LOWER('${firstname}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${emailaddress}')`);
        
        var receipients = await pool.query(query);
        if ( receipients.rowCount > 0 ) {
          var updatequery = format(`update potentialcustomer set phonenumber='${phonenumber}',organizationname='${organizationname}',role='${role}',describe='${describe}',findus='${findus}',questions='${questions}' where LOWER(firstname)=LOWER('${firstname}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${emailaddress}')`);
          var updatestate = await pool.query(updatequery);
          for ( const row of receipients.rows ) { 
            const email_subject = "Schedule a demo";
            const email_body="<p>Mail: "+emailaddress+"</p><br><p>First Name: "+firstname+"</p><br><p>Last Name: "+lastname+"</p><br><p>Phone Number: "+phonenumber+"</p><br><p>Organization Name: "+organizationname+"</p><br><p>Role: "+role+"</p><br><p>Describe: "+describe+"</p><br><p>How did find us?: "+findus+"</p><br><p>Question: "+questions+"</p><br>";
            var logfilename=logfiledir+req.user.user_id+"/sendscheduleGS.log";
            mailler_forinvite(email_body, email_subject, "admin@certonce.com","","","","","","","","","",logfilename);
            var obj = {
            Status: 200,
            message: 'Receipient already exist',
            Data: {"onetimecode":row.onetimecode},          
            }
            res.json(obj);
            return;
          }
        }
        else
        {
                
                addreceipientquery = format(`INSERT INTO potentialcustomer(firstname,lastname,emailaddress,onetimecode,phonenumber,organizationname,role,describe,findus,questions) VALUES('${firstname}','${lastname}','${emailaddress}','${onetimecode}','${phonenumber}','${organizationname}','${role}','${describe}','${findus}','${questions}') RETURNING onetimecode;`);                
                
                //Insert data to student table
                try {
                    receipients = await pool.query(addreceipientquery);
                    if (receipients.rowCount > 0) {
                        onetimecode = receipients.rows[0].onetimecode;
                        console.log(onetimecode+"::")
                    }
                } catch (err) {
                  var obj = {
                      Status: 400,
                      message: err.message
                  };
                  return res.json(obj);
                }
                const email_subject = "Schedule a demo";
                const email_body="<p>Mail: "+emailaddress+"</p><br><p>First Name: "+firstname+"</p><br><p>Last Name: "+lastname+"</p><br><p>Phone Number: "+phonenumber+"</p><br><p>Organization Name: "+organizationname+"</p><br><p>Role: "+role+"</p><br><p>Describe: "+describe+"</p><br><p>How did find us?: "+findus+"</p><br><p>Question: "+questions+"</p><br>";
                var logfilename=logfiledir+req.user.user_id+"/sendscheduleGS.log";
                mailler_forinvite(email_body, email_subject, "admin@certonce.com","","","","","","","","","",logfilename);
                var obj = {
                Status: 200,
                message: 'Receipient is inserted successfully',
                Data: {"onetimecode":onetimecode},          
                }
                res.json(obj);
                return;
        }
        

      }
      else
      {
        var obj = {
            Status: 400,
            message: 'Incorrect request',
            Data: {},            
        }
        res.json(obj);
      }

    } catch (err) {
      var obj = {
        Status: 400,
          message: err.message
      };
      res.json(obj);
    }
}
user.insertReceipientForGS = async (req, res, next) => {
    try {                
      
      if ( req.body.firstname && req.body.emailaddress ) {
        let firstname=req.body.firstname;
        let lastname=req.body.lastname;
        let emailaddress=req.body.emailaddress;
        let onetimecode="";
        var loopflag=1;
        while(loopflag==1)
        {
          onetimecode = getOnetimecode(5)
          let getExistStudent = format(`SELECT id FROM potentialcustomer WHERE onetimecode='${onetimecode}';`);
          studentsforonetimecode = await pool.query(getExistStudent);
          if (studentsforonetimecode.rowCount == 0) {
              loopflag=0
          }
        }   
      
      
        var query = format(`select * from potentialcustomer where LOWER(firstname)=LOWER('${firstname}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${emailaddress}')`);
        
        var receipients = await pool.query(query);
        if ( receipients.rowCount > 0 ) {
          for ( const row of receipients.rows ) { 
            console.log(row.onetimecode+"**") 
            var obj = {
            Status: 200,
            message: 'Receipient already exist',
            Data: {"onetimecode":row.onetimecode},          
            }
            res.json(obj);
            return;
          }
        }
        else
        {
                
                addreceipientquery = format(`INSERT INTO potentialcustomer(firstname,lastname,emailaddress,onetimecode) VALUES('${firstname}','${lastname}','${emailaddress}','${onetimecode}') RETURNING onetimecode;`);                
                
                //Insert data to student table
                try {
                    receipients = await pool.query(addreceipientquery);
                    if (receipients.rowCount > 0) {
                        onetimecode = receipients.rows[0].onetimecode;
                        console.log(onetimecode+"::")
                    }
                } catch (err) {
                  var obj = {
                      Status: 400,
                      message: err.message
                  };
                  return res.json(obj);
                }          
            var obj = {
            Status: 200,
            message: 'Receipient is inserted successfully',
            Data: {"onetimecode":onetimecode},          
            }
            res.json(obj);
            return;
        }
        

      }
      else
      {
        var obj = {
            Status: 400,
            message: 'Incorrect request',
            Data: {},            
        }
        res.json(obj);
      }

    } catch (err) {
      var obj = {
        Status: 400,
          message: err.message
      };
      res.json(obj);
    }
}
//introduction
user.introductiongs= async (req,res, next) => {
  var bitcoinaddress=req.body.bitcoinAddress;
  var onetimecode=req.body.nonce;
  var query = format(`UPDATE potentialcustomer SET publickey = '${bitcoinaddress}'  WHERE onetimecode = '${onetimecode}'`);            

  pool.query(query, function (err, result) {
    if (err) {
      var obj = {
        Status: 400,
        message: err.message
      }
      res.json(obj)
    }
    else{
      var obj = {
        Status: 200,
        message: "Issuer is added successfully",
        
      }
      console.log(obj);
      res.json(obj)
    }
  });
 
}
// Send invitation
user.sendInvitationGS = async (req,res, next) => {    
    var params = req.body;    
    try {
      if(params.onetimecode&&params.emailaddress&&params.emailbody)
      {
        const introduction_email_subject = "Add us as a Blockcerts issuer";
        var logfilename=logfiledir+req.user.user_id+"/inviteemailGS.log";
        mailler_forinvite(email_body, email_subject, "admin@certonce.com","","","","","","","","","",logfilename);
        var query = format(`UPDATE potentialcustomer SET invitationsent = true WHERE onetimecode = '${params.onetimecode}' and emailaddress='${params.emailaddress}'`);
        await pool.query(query);
        var obj = {
            Status: 200,
            message: 'The invitation is sent successfully',            
        }
        res.json(obj);
      }
  }
   catch (err) {
    var obj = {
          Status: 400,
          message: err.message
          }
          res.json(obj);
  }
}
user.getpublickey = async (req,res, next) => {    
    var params = req.body;    
    try {
      if(params.onetimecode&&params.emailaddress)
      {
        
        var query = format(`SELECT * FROM potentialcustomer WHERE onetimecode = '${params.onetimecode}' and emailaddress='${params.emailaddress}'`);
        
        var receipients = await pool.query(query);
        if ( receipients.rowCount > 0 ) {
          for ( const row of receipients.rows ) { 
            console.log(row.publickey+":pubkey") 
            var obj = {
            Status: 200,
            message: 'Get publickey',
            Data: {"publickey":row.publickey},          
            }
            res.json(obj);
            return;
          }
        }
        else
        {
          var obj = {
            Status: 200,
            message: 'Get publickey',
            Data: {},          
            }
            res.json(obj);
            return;
        }
      }
  }
   catch (err) {
    var obj = {
          Status: 400,
          message: err.message
          }
          res.json(obj);
  }
}
// Issue certificate
function getIso8601Time()
{
    var timezone_offset_min = new Date().getTimezoneOffset(),
    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
    offset_min = Math.abs(timezone_offset_min%60),
    timezone_standard;

    if(offset_hrs < 10)
      offset_hrs = '0' + offset_hrs;

    if(offset_min < 10)
      offset_min = '0' + offset_min;

    // Add an opposite sign to the offset
    // If offset is 0, it means timezone is UTC
    if(timezone_offset_min < 0)
      timezone_standard = '+' + offset_hrs + ':' + offset_min;
    else if(timezone_offset_min > 0)
      timezone_standard = '-' + offset_hrs + ':' + offset_min;
    else if(timezone_offset_min == 0)
      timezone_standard = 'Z';

      var dt = new Date(),
      current_date = dt.getDate(),
      current_month = dt.getMonth() + 1,
      current_year = dt.getFullYear(),
      current_hrs = dt.getHours(),
      current_mins = dt.getMinutes(),
      current_secs = dt.getSeconds(),
      current_datetime;

    // Add 0 before date, month, hrs, mins or secs if they are less than 0
    current_date = current_date < 10 ? '0' + current_date : current_date;
    current_month = current_month < 10 ? '0' + current_month : current_month;
    current_hrs = current_hrs < 10 ? '0' + current_hrs : current_hrs;
    current_mins = current_mins < 10 ? '0' + current_mins : current_mins;
    current_secs = current_secs < 10 ? '0' + current_secs : current_secs;

    // Current datetime
    // String such as 2016-07-16T19:20:30
    current_datetime = current_year + '-' + current_month + '-' + current_date + 'T' + current_hrs + ':' + current_mins + ':' + current_secs;
    return (current_datetime + timezone_standard);
}
user.issueGS = async (req,res, next) => {
    var params = req.body;    
    
    try {      
      if(params.onetimecode&&params.unsignedcertificate&&params.emailaddress)
      {
        
        var query = format(`select * from potentialcustomer where onetimecode='${params.onetimecode}'`);
        
        var receipients = await pool.query(query);
        if ( receipients.rowCount > 0 ) {
          for ( const row of receipients.rows ) { 
           if(row.signedcertificateurl&&row.signedcertificateurl!=null&&row.signedcertificateurl!="")
           {
            console.log(row.signedcertificateurl+"**");             
            var signedcerturl=row.signedcertificateurl;
            var obj = {
            Status: 200,
            message: 'Certificate Issued successfully.',
            Data: {"signedcerturl":signedcerturl},          
            }
            res.json(obj);
            return;
           }
           else
           {
              var date = new Date().getDate(); //Current Date
              var month = new Date().getMonth() + 1; //Current Month
              var year = new Date().getFullYear(); //Current Year
              var hours = new Date().getHours(); //Current Hours
              var min = new Date().getMinutes(); //Current Minutes
              var sec = new Date().getSeconds(); //Current Seconds
              var millisec = new Date().getMilliseconds();
              unsignedfname=date + '-' + month + '-' + year + '-' + hours + '-' + min + '-' + sec+'-' + millisec + ".json";
              
              
              templatecontentgs.issuedOn=getIso8601Time();
              templatecontentgs.id=signedcertificatebaseurlgs+unsignedfname;
              templatecontentgs.recipient.identity=row.emailaddress;
              templatecontentgs.recipientProfile.name=row.firstname+' '+row.lastname;
              templatecontentgs.recipientProfile.publicKey='ecdsa-koblitz-pubkey:'+row.publickey;
              templatecontentgs.badge.issuer.id=myip+subwwwurl+"/blockchain/issuergs.json";
              templatecontentgs.badge.issuer.revocationList=myip+subwwwurl+"/blockchain/revocation-list-gs.json";
              templatecontentgs.displayHtml=params.unsignedcertificate;
              //console.log(templatecontentgs);
              
              var unsignedjson = JSON.stringify(templatecontentgs);
              //test//
              //jsonbasepathgs="d:/test_dir/a/";        
              //end//
              unsignedtemppath=jsonbasepathgs+'unsigned_certificates';
              signedtemppath=jsonbasepathgs+'blockchain_certificates';
              fsExtra.emptyDirSync(unsignedtemppath);
              fsExtra.emptyDirSync(signedtemppath);
              await writeFile(unsignedtemppath+'/'+unsignedfname,unsignedjson);
              
              
              var os = new os_func();
              await os.execCommand('sudo cp '+unsignedtemppath+'/*.json '+unsignedcertificatepathgs);
              
              await os.execCommand('sudo docker exec -i '+containeridgs+' find  /etc/cert-issuer/data/unsigned_certificates/ -name "*.json" -type f -exec rm  {} \\;');                    
              await os.execCommand('sudo docker exec -i '+containeridgs+' find  /etc/cert-issuer/data/blockchain_certificates/ -name "*.json" -type f -exec rm  {} \\;');
              await os.execCommand('sudo docker cp '+unsignedtemppath+' '+containeridgs+':/etc/cert-issuer/data/');        
              await os.execCommand('sudo docker exec -i '+containeridgs+' cert-issuer -c /etc/cert-issuer/conf.ini');
              await os.execCommand('sudo docker cp '+containeridgs+':/etc/cert-issuer/data/blockchain_certificates/ '+jsonbasepathgs);
              await os.execCommand('sudo cp '+signedtemppath+'/*.json '+signedcertificatepathgs);
              
              var contents = fs.readFileSync(signedtemppath+'/'+unsignedfname, 'utf8');
              
              {
                //  upload stringcontents in S3 -> migration
                const fileName = `json/unsignedjson/${studentid}-${uuidv4()}.json`;
                const s3_URL = await utils.uploadJsonToS3('certonce', fileName, contents);
                // var updatesql= format(`UPDATE potentialcustomer SET signedcertificatejsonurl = '${contents}',signedcertificateurl='${signedcertificatebaseurlgs+unsignedfname}',unsignedcertificationjsonurl = '${s3_URL}',unsignedcertificateurl='${unsignedcertificatebaseurlgs+unsignedfname}'   WHERE onetimecode = '${params.onetimecode}'`);                                                                          
                var updatesql= format(`UPDATE potentialcustomer SET signedcertificatejsonurl = '${contents}',signedcertificateurl='${signedcertificatebaseurlgs+unsignedfname}',unsignedcertificationjsonurl = '${s3_URL}'  WHERE onetimecode = '${params.onetimecode}'`);                                                                          
                
                await pool.query(updatesql);
                console.log(params.onetimecode);
              }
                            
                var signedcerturl=signedcertificatebaseurlgs+unsignedfname;
                var obj = {
                      Status: 200,
                      message: 'Certificate Issued successfully.',
                      Data: {"signedcerturl":signedcerturl},          
                      }
                      res.json(obj);
                      return;
              }
            }//for
          }
          else
          {
            var obj = {
              Status: 400,
              message: 'Certificate Issued failed.',
              Data: {"signedcerturl":''},          
              }
              res.json(obj);
              return;
                }
      }
      else
      {
        var obj = {
        Status: 400,
        message: 'Certificate Issued failed.',
        Data: {"signedcerturl":''},          
        }
        res.json(obj);
        return;
      }
    }
        
   catch (err) {
    var obj = {
          Status: 400,
          message: err.message        
          }
          res.json(obj);      
     }
}

// Send Certificate
user.sendCertificateGS = async (req,res, next) => {    
    var params = req.body;    
    try {
      if(params.onetimecode&&params.emailaddress&&params.emailbody)
      {
        const cert_email_subject = "We have issued you a Blockcert";
        var logfilename=logfiledir+req.user.user_id+"/sendcertificateGS.log";
        mailler_forinvite(params.emailbody, cert_email_subject, params.emailaddress,"","","","","","","","","",logfilename);
        var query = format(`UPDATE potentialcustomer SET certsent = true WHERE onetimecode = '${params.onetimecode}' and emailaddress='${params.emailaddress}'`);
        await pool.query(query);
        var obj = {
            Status: 200,
            message: 'Certificate is sent successfully',            
        }
        res.json(obj);
      }
  }
   catch (err) {
    var obj = {
          Status: 400,
          message: err.message
          }
          res.json(obj);
  }
}
/////////////////////////////////////get started function end//////////////////////////////////////
user.fetchCertificateTemplate = async (req, res, next) => {
    try {      
      var currentUser = req.user;
      var cohortid=req.query.cohortid;
      if(req.user.business_is_verified==false)
      {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
      }
      var permission=await getPermission(req.user.user_id,"fetchCertificateTemplate");
      if(permission==false)
      {
          var obj = {
            Status: 400,
              message: "Access denied."
          };
          res.json(obj);
          return;
      }
      var puserid=await getParentAccountIdFromId(req.user.user_id);  


       if ( cohortid == '') {
            var obj = {
              Status: 400,
                message: "Select cohort."
            };
            res.json(obj);
            return;
         }
          var whereClause =  "WHERE c.cohortid='"+ cohortid +"' and c.accountid='"+puserid+"';"
          var fetchQuery = format(`SELECT c.*,d.* FROM cohort_group c
                                          LEFT JOIN certtemplate d ON d.id=c.certtemplateid ${whereClause}
                                          `);
          console.log(fetchQuery);                                       
          var result=await pool.query(fetchQuery);  
          if (result.rows && result.rows.length != 0) {
            
              if(result.rows[0]['certjson']!=null&&result.rows[0]['certjson']!="")
              {
                parsedata=JSON.parse(result.rows[0]['certjson']);              
                var obj = {
                  Status: 200,
                  message: parsedata.displayHtml,                
                }              
                res.json(obj)
              }
              else
              {
                var obj = {
                Status: 401,
                  message: "There is no saved template."
                };
                res.json(obj);
              }
          }
          else
          {
            var obj = {
                Status: 401,
                  message: "There is no saved template."
              };
              res.json(obj);
          }      
       
    } catch (err) {
      var obj = {
        Status: 400,
          message: err.message
      };
      res.json(obj);
    }
}

async function getCohortidFromName(cohortname,accountid)
{
  var searchQuery = format(`select * from cohort_group where cohortid='${cohortname}' and accountid='${accountid}'`);
  var cohort = await pool.query(searchQuery);
  return cohort.rows[0].id;
}

user.getCohortsByKey= async (req,res, next) => 
{
  var cohorts=[];
  try
  {
    var api_key=req.query.apikey;
    
    if(api_key=="" || api_key==null ||  api_key==undefined)
    {
      var obj = {
            Status: 400,
              message: "Invalid request parameters"
          };
      res.json(obj);
      return;
    }
    
    /*
    var napikey=await getApiKeyFromUserID("1");
    var obj = {
            Status: 200,
              message: napikey
          };
    res.json(obj);
    return;  
    */
    var userid=await getUserIDFromApiKey(api_key); 
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }   
    
    var puserid=await getParentAccountIdFromId(userid);  
    var searchQuery = format(`select * from cohort_group where accountid='${puserid}'`);
    var result = await pool.query(searchQuery);
    if ( result.rowCount > 0 ) 
    {
      for ( var i = 0 ; i < result.rowCount; i++ )
      {
          cohorts.push({
              'name' : result.rows[i].name,
              'value' : result.rows[i].cohortid
          });
      }
    }
  }
  catch (error)
  {
    var obj = {
          Status: 400,
            message: error
        };
    res.json(obj);
    return; 
  }
  
  var obj = {
          Status: 200,
            cohorts: cohorts
        };
  res.json(obj);
    
}

user.updateCertificateTemplate = async (req,res, next) => {  
  try {
        var currentUser = req.user;        
        var organization_name=currentUser.organization_name;
        var updatetemplate=req.body.template;
        var openbadge_template=req.body.openbadge_template;
        var savetype = req.body.type;       

        var cohort_id=req.body.cohortid;        
        var isopenbadge=req.body.isopenbadge;
        var ismailtemplate=req.body.ismailtemplate;

        if(req.user.business_is_verified==false)
        {
        var obj = {
              Status: 400,
                message: "Your account is currently under verification, please contact certonce team."
            };
            res.json(obj);
            return;
        }
        var permission=await getPermission(req.user.user_id,"updateCertificateTemplate");
        if(permission==false)
        {
            var obj = {
              Status: 400,
                message: "Access denied."
            };
            res.json(obj);
            return;
        }
        var puserid=await getParentAccountIdFromId(req.user.user_id);
        var settingInfo = await getProfileFromAccountId(puserid);
        var awsinfo=await getS3BucketInformation(puserid)
        var cohort_group_ids=[];
        var main_cohort_ids=[];
        
        var cohortdropdownclause = "";
        var selectedCohortJson = req.body.selectedCohortJson;           
        if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
        {
          try {
            selectedCohortJson = JSON.parse(selectedCohortJson);
            if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
            else
            {
              Object.keys(selectedCohortJson).forEach((key, value) => {
                if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
                else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
              });
            }
          } catch (error) {
            
          }
          
        }
        if(cohortdropdownclause!=="")
        {
          var certtype = req.body.certtype;
          if(certtype == "" || certtype == undefined || certtype == null) certtype = "degree";  
          var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
          var cohorttablename = certtypes[certtype];
          let pageQuery = format(`select c.cohortid as cohortfullid, c.id as cohortintid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.accountid='${puserid}' and ${cohortdropdownclause}`);
          let pageResult = await pool.query(pageQuery);
          if (pageResult.rowCount > 0){
            for(let index=0; index<pageResult.rowCount; index++)
            {
              main_cohort_ids.push(pageResult.rows[index].cohortfullid);
              cohort_group_ids.push(await getCohortidFromName(pageResult.rows[index].cohortfullid,puserid));
             
            }
          }
        }
        //console.log(main_cohort_ids, cohort_group_ids);
       
        if (Array.isArray(cohort_id)) {    
          main_cohort_ids=cohort_id;
          for(const cohortitem of cohort_id)
          {
            cohort_group_ids.push(await getCohortidFromName(cohortitem,puserid));
          }
        } else {
          main_cohort_ids.push(cohort_id);
          cohort_group_ids.push(await getCohortidFromName(cohort_id,puserid));
        }
        var updateflag=false;
        for(var cindex=0; cindex<cohort_group_ids.length; cindex++)
        {
          var cohort_group_id = cohort_group_ids[cindex]; 
          var main_cohort_id = main_cohort_ids[cindex]; 
          if ( cohort_group_id == '') {
            var obj = {
              Status: 400,
                message: "Select cohort."
            };
            res.json(obj);
            return;
          }

          if(isopenbadge == "true")
          {
            
              var openbadges_info=JSON.parse(updatetemplate);            
              var my_issuer_revocation_openbadges_base_path=issuer_revocation_openbadges_base_path+puserid+"/"+cohort_group_id;
              var my_issuer_path=my_issuer_revocation_openbadges_base_path+"/issuer.json";                
              
              var issuer_url=myip+"/openbadgesissuer/"+puserid+"/"+cohort_group_id;
              
              var os = new os_func();
              var issuercontent_new={};
              
              if (!fs.existsSync(my_issuer_revocation_openbadges_base_path))
              {
                  await os.execCommand('sudo mkdir -p "'+my_issuer_revocation_openbadges_base_path+'"');
                  await os.execCommand('sudo chmod -R 777 "'+my_issuer_revocation_openbadges_base_path+'"');
              }
              
              try
              {
                issuercontent_new.type="issuer";
                issuercontent_new.id=issuer_url;
                issuercontent_new.url=myip;
                issuercontent_new.name=organization_name;//openbadges_info.issuer_name;                 
                issuercontent_new.description=organization_name;//openbadges_info.issuer_description;     
                issuercontent_new.email="admin@certonce.com";
                if(puserid=="20025")
                {
                  issuercontent_new.email="hi@growthschool.io";  
                  issuercontent_new.url="https://growthschool.io";
                }
                if(puserid=="20002")
                {
                  issuercontent_new.email="vikas@vikasbansal.com";  
                  issuercontent_new.url="https://www.vikasbansal.com";
                }
                issuercontent_new["@context"]="https://w3id.org/openbadges/v2";
                var status=await uploadOpenBadgesObject(awsinfo.s3obj,"openbadges/api/"+puserid+"/"+cohort_group_id+"/issuer.json",JSON.stringify(issuercontent_new),awsinfo.s3bucketname);
                
              
                if(status=="error")
                {
                  var obj = {
                      Status: 400,
                        message: "Put issuer Error"
                    };
                  res.json(obj);
                  return;
                }

                //if (!await fs.existsSync(my_issuer_path))
                {
                  await writeFile(my_issuer_path,JSON.stringify(issuercontent_new));
                }
              }
              catch(err)
              {
                console.log(err);
              }  
              
              ////////////////////writing issuer end///////////////
              var searchQuery = format(`select * from cohort_group where id='${cohort_group_id}'`);
              var cohort = await pool.query(searchQuery);
              if ( cohort.rowCount > 0 ) {
                var template_id = cohort.rows[0].openbadgesid;
                if(savetype == "preview"){
                  if (template_id == null || template_id == "") {
                    
                    const buff = Buffer.from(openbadges_info.badge_file, 'utf-8');
                    const base64 = buff.toString('base64');
                    
                    const buff1 = Buffer.from(openbadge_template, 'utf-8');
                    const base641 = buff1.toString('base64');
                    //const buff2 = Buffer.from(base64, 'base64');
                    //const str = buff2.toString('utf-8');
                    //console.log(str);
                    /*
                    let insertTemplateQuery = format(`INSERT INTO openbadges_setting (issuer_name, issuer_description, badge_name, badge_description,badge_file, template, badge_base64_file, issuer_url) VALUES ('${openbadges_info.issuer_name}','${openbadges_info.issuer_description}','${openbadges_info.badge_name}','${openbadges_info.badge_description}','${base64}','${base641}','${openbadges_info.badge_base64_file}','${issuer_url}') RETURNING id`);
                    */
                    //let insertTemplateQuery = format(`INSERT INTO openbadges_setting (issuer_name, issuer_description, badge_name, badge_description,badge_file, template, badge_base64_file, issuer_url) VALUES ('${organization_name}','${organization_name}','${openbadges_info.badge_name}','${openbadges_info.badge_description}','${base64}','${base641}','${openbadges_info.badge_base64_file}','${issuer_url}') RETURNING id`);
                    let insertTemplateQuery = format(`INSERT INTO openbadges_setting (issuer_name, issuer_description, badge_name, badge_description,badge_file, previewtemplate, badge_base64_file, issuer_url) VALUES ('${organization_name}','${organization_name}','${openbadges_info.badge_name}','${openbadges_info.badge_description}','${base64}','${base641}','${openbadges_info.badge_base64_file}','${issuer_url}') RETURNING id`);
                    let template = await pool.query(insertTemplateQuery);
                    if ( template.rowCount > 0 ) {
                      let template_id = template.rows[0].id;
                      let updateCohortQuery = format(`UPDATE cohort_group SET openbadgesid = '${template_id}'  WHERE id = '${cohort_group_id}'`);
                      let result = await pool.query(updateCohortQuery); console.log('pass3');
                      if ( result.rowCount > 0 ) {
                        updateflag=true;
                      }
                    }
                  } else {
                    const buff = Buffer.from(openbadges_info.badge_file, 'utf-8');
                    const base64 = buff.toString('base64');
                    
                    const buff1 = Buffer.from(openbadge_template, 'utf-8');
                    const base641 = buff1.toString('base64');
                    //const buff2 = Buffer.from(base64, 'base64');
                    //const str = buff2.toString('utf-8');
                    //console.log(str);
                    //let updateTemplateQuery = format(`UPDATE openbadges_setting SET issuer_name = '${openbadges_info.issuer_name}',issuer_description = '${openbadges_info.issuer_description}',badge_name = '${openbadges_info.badge_name}',badge_description = '${openbadges_info.badge_description}',badge_file = '${base64}', template='${base641}', badge_base64_file='${openbadges_info.badge_base64_file}', issuer_url='${issuer_url}' WHERE id='${template_id}'`);
                    let updateTemplateQuery = format(`UPDATE openbadges_setting SET issuer_name = '${organization_name}',issuer_description = '${organization_name}',badge_name = '${openbadges_info.badge_name}',badge_description = '${openbadges_info.badge_description}',badge_file = '${base64}', previewtemplate='${base641}', badge_base64_file='${openbadges_info.badge_base64_file}', issuer_url='${issuer_url}' WHERE id='${template_id}'`);
                    let result = await pool.query(updateTemplateQuery);
                    if ( result.rowCount > 0 ) {
                      updateflag=true;
                    }
                  }
                }
                else if(savetype=="save"){
                  let updateTemplateQuery = format(`UPDATE openbadges_setting SET template=previewtemplate WHERE id='${template_id}'`);
                  let result = await pool.query(updateTemplateQuery);
                  if ( result.rowCount > 0 ) {
                    updateflag=true;
                  }
                }             

              } else {
                var obj = {
                  Status: 400,
                  message: "The Cohort doesn't exist"
                }
                return res.json(obj);
              }

                
          }
          else if(ismailtemplate == "true")
          {
            var emailtemplate_info=JSON.parse(updatetemplate);
            var subject_field_name="certificateemail_subject";
            var content_field_name="certificateemail_content";
            if(emailtemplate_info.mail_type=="invitation")
            {
              subject_field_name="invitationemail_subject";
              content_field_name="invitationemail_content";
            }
            else if(emailtemplate_info.mail_type=="openbadge")
            {
              subject_field_name="openbadgeemail_subject";
              content_field_name="openbadgeemail_content";
            }   
            var selectquery=format(`select * from emailtemplate where cohortid='${cohort_group_id}';`);
            var emailtemplates = await pool.query(selectquery);
            if ( emailtemplates.rowCount > 0 ) {
                let updateQuery = format(`UPDATE emailtemplate SET ${subject_field_name} = '${emailtemplate_info.subject}',${content_field_name} = '${emailtemplate_info.mail_content}'  WHERE cohortid = '${cohort_group_id}'`);
                let result = await pool.query(updateQuery);
                if ( result.rowCount > 0 ) {
                  updateflag=true;
                }
            }
            else
            {
                let insertQuery = format(`INSERT INTO emailtemplate (cohortid,${subject_field_name},${content_field_name}) VALUES ('${cohort_group_id}','${emailtemplate_info.subject}','${emailtemplate_info.mail_content}');`);
                let result = await pool.query(insertQuery);
                if ( result.rowCount > 0 ) {
                  updateflag=true;
                }
            }
          }
          else
          {
            updatetemplate=updatetemplate.replace(/(\r\n|\n|\r|\t)/gm,"");
            let templatecontent = require(`../../template/template_${settingInfo.version}.json`);
            let tmptemplatecontent=templatecontent;
            if(settingInfo.version=="v2")
              tmptemplatecontent.displayHtml=updatetemplate;                     
            if(settingInfo.version=="v3")
              tmptemplatecontent.display.content=updatetemplate;                     
            var data = JSON.stringify(tmptemplatecontent);
            fs.writeFileSync(`/home/ubuntu/template_${settingInfo.version}.json`,data,"utf-8"); 
            var searchQuery = format(`select * from cohort_group where id='${cohort_group_id}'`);
            var cohort = await pool.query(searchQuery);
            if ( cohort.rowCount > 0 ) {
              var template_id = cohort.rows[0].certtemplateid;
            
              if(savetype == "preview"){
              
                if ("partner" in req.body){
                  
                  let logoData = req.body.partner.logo;
                  let signatureData = req.body.partner.signature;
                  for (let index=0; index < logoData.length; index++){
                    let element = logoData[index];
                    let logoQuery = format(`insert into partnerlogo (accountid, partnercompanyname, logoimage) select '${puserid}', '${element[0]}', '${element[1]}' on conflict (accountid, partnercompanyname) do update set logoimage='${element[1]}'`);
                    await pool.query(logoQuery);
                  }
                  for (let index=0; index < signatureData.length; index++){
                    let element = signatureData[index];
                    let signatureQuery = format(`insert into partnersignature (accountid, signaturename, signername, partnercompanyname, signatureimage) select '${puserid}', '${element[0]}', '${element[1]}', '${element[2]}', '${element[3]}' on conflict (accountid, signaturename, partnercompanyname) do update set signatureimage='${element[3]}', signername='${element[1]}'`);
                    // console.log(signatureQuery);
                    await pool.query(signatureQuery);
                  }
                }
                console.log("template_id=",template_id);    
                if (req.body.backgroundfilename != undefined && req.body.backgroundfilename != null && req.body.backgroundfilename != ""){
                  let updateQuery = format(`update cohort set backgroundfilename='${req.body.backgroundfilename}' where cohortid='${main_cohort_id}' and accountid='${puserid}'`);
                  await pool.query(updateQuery);
                }
                if (req.body.trbackgroundfilename != undefined && req.body.trbackgroundfilename != null && req.body.trbackgroundfilename != ""){
                  let updateQuery = format(`update cohort set trbackgroundfilename='${req.body.trbackgroundfilename}' where cohortid='${main_cohort_id}' and accountid='${puserid}'`);
                  await pool.query(updateQuery);
                }
                
                if (template_id == null) {
                
                  //let insertTemplateQuery = format(`INSERT INTO certtemplate (certjson) VALUES ('${data}') RETURNING id`);
                  //await fs.writeFileSync("/home/ubuntu/updatecertifi.json", data,"utf-8");
                  let insertTemplateQuery = format(`INSERT INTO certtemplate (previewtemplate) VALUES ('${data}') RETURNING id`);
                  let template = await pool.query(insertTemplateQuery);
                  if ( template.rowCount > 0 ) {
                    let template_id_1 = template.rows[0].id;
                    if(template_id_1!=null && template_id_1!="" && typeof template_id_1!=='undefined')
                    {
                      let updateCohortQuery = format(`UPDATE cohort_group SET certtemplateid = '${template_id_1}'  WHERE id = '${cohort_group_id}'`);
                      let result = await pool.query(updateCohortQuery); 
                      console.log(updateCohortQuery);

                      if ( result.rowCount > 0 ) {
                        updateflag=true;
                      }
                    }
                    else
                    {
                      if ( result.rowCount > 0 ) {
                        var obj = {
                          Status : 400,
                          message: 'Failed save template. try again!'
                        }
                        return res.json(obj);
                      }
                    }
                    
                  }
                } else {
                
                  //let updateTemplateQuery = format(`UPDATE certtemplate SET certjson = '${data}' WHERE id='${template_id}'`);
                  let updateTemplateQuery = format(`UPDATE certtemplate SET previewtemplate = '${data}' WHERE id='${template_id}' RETURNING id`);                  
                  let result = await pool.query(updateTemplateQuery);
                  console.log("result.rowCount="+result.rowCount);    
                  if ( result.rowCount > 0 ) {
                    updateflag=true;
                  }
                }
              }
              else if(savetype=="save"){
                let updateTemplateQuery = format(`UPDATE certtemplate SET certjson = previewtemplate WHERE id='${template_id}' RETURNING id`);
                console.log(updateTemplateQuery);
                let result = await pool.query(updateTemplateQuery);
                if ( result.rowCount > 0 ) {
                  updateflag=true;
                }
              }             
            } else {
              var obj = {
                Status: 400,
                message: "The Cohort doesn't exist"
              }
              return res.json(obj);
            }          
          } 
        }
        var obj = {
          Status : 200,
          message: 'Success'
        }
        return res.json(obj);  

    }
   catch (err) { 
    console.log(err);
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }
}
//introduction
user.introduction= async (req,res, next) => {
  var bitcoinaddress=req.body.bitcoinAddress;
  var onetimecode=req.body.nonce;

  var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
  for (const key in certtypes){
      var certtypename = key;
      var tablenameforcerttype = certtypes[key];
      var query = format(`UPDATE ${tablenameforcerttype} SET publickey = '${bitcoinaddress}'  WHERE onetimeblockcertscode = '${onetimecode}'`);
      let result = await pool.query(query);
  }
  var obj = {
        Status: 200,
        message: "Issuer is added successfully",
        
      }
      console.log(obj);
      res.json(obj);
  
  /*
  var query = format(`UPDATE cohortmembers SET publickey = '${bitcoinaddress}'  WHERE onetimeblockcertscode = '${onetimecode}'`);
  
  pool.query(query, function (err, result) {
    if (err) {
      var obj = {
        Status: 400,
        message: err.message
      }
      res.json(obj)
    }
    else{
      var obj = {
        Status: 200,
        message: "Issuer is added successfully",
        
      }
      console.log(obj);
      res.json(obj)
    }
  });
  */
}
function os_func() {
  /*
    this.execCommand =async function (cmd) {
      
      const { stdout, stderr } = await exec(cmd);
      if (stderr) {
        var err=`${stderr}`;
        if(err.indexOf("InsufficientFundsError")!==-1||err.indexOf("Broadcasting failed")!==-1)
        {
          return "InsufficientFundsError";
        }
        return "success";

      }
      var stdmessage=`${stderr}`;
      if(stdmessage.indexOf("InsufficientFundsError")!==-1||stdmessage.indexOf("Broadcasting failed")!==-1)
      {
          return "InsufficientFundsError";
      }
      return "success";
      
      
  }
  */
   //*
    this.execCommand = function (cmd) {
        return new Promise((resolve, reject)=> {
           exec(cmd, (error, stdout, stderr) => {
             if (error) {
                reject(error);
                return;
            }
            resolve(stdout)
           });
       })
   }
   //*/
}

// preview certificate
user.previewCertificate = async (req,res, next) => {    
  var params = req.body.selectedItems;
  var certtype = req.body.certtype;
  var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
  var cohorttablename="cohortmembers_degree";
  if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined) {
    cohorttablename=certtypes[certtype];
  }
  var previewecertitem=[];
  if(req.user.business_is_verified==false) {
    return res.json({Status: 400, message: "Your account is currently under verification, please contact certonce team."});
  }
  var permission=await getPermission(req.user.user_id,"previewCertificate");
  if(permission==false) {
    return res.json({Status: 400, message: "Access denied."});
  }
  var puserid=await getParentAccountIdFromId(req.user.user_id);  
  try {
    for (let index = 0; index < params.length; index++) {
      const element = params[index];
      let cohortid=element.split("=")[0];
      let studentid=element.split("=")[1];
      console.log("cohort : ", cohortid, "student : ", studentid);
      ///////////////////////////////////////////
      if ( cohortid == '' || studentid == '') {continue;}
      var whereClause =  "WHERE b.id='"+studentid+"';"
      var studentQuery = format(`SELECT a.*, c.*,b.*,b.id as cohortmemberid,b.is_validated as is_validated,d.* FROM student a LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid LEFT JOIN certtemplate d ON d.id=c.certtemplateid ${whereClause}`);
      
      var students = await pool.query(studentQuery);
      // console.log(students);
      if ( students.rowCount > 0 ) {
        for ( const student of students.rows ) {
          // Migration
          // console.log("studen: ", student)
          console.log("CHECKING S3 URL", student["unsignedcertificationjsonurl"])
          const certjson = student["unsignedcertificationjsonurl"];
          const params = utils.parseS3Url(student["unsignedcertificationjsonurl"])
          ////
          let temp_data = '';
          if(params.Bucket == 'certonce-v2')
            temp_data = await s3_new.getObject(params).promise();
          else
            temp_data = await s3.getObject(params).promise();
          const data = temp_data;
          ////
          // const data = await s3.getObject(params).promise();
          const parsedata = JSON.parse(data.Body.toString('utf-8'));

          // certjson=student['unsignedcertificationjson'];
          // console.log("certjson---->>> ", certjson)
          if(certjson==""||certjson==null) continue;
          cohortmemberid=student['cohortmemberid'];
          is_validated=student['is_validated'];
          // parsedata=JSON.parse(certjson); // commented for migration
          // console.log(parsedata);
          previewecertitem.push({"certitem":"<div style='text-align:center;'>"+parsedata.displayHtml+"</div>","cohortmemberid":cohortmemberid,"is_validated":is_validated});
        }
      }
    } 

    res.json({Status: 200, message: 'Preview certification', PreviewCert:previewecertitem});
  }
  catch (err) {
    console.log(err)
    console.log(err.message);
    res.json({Status: 400, message: err.message, PreviewCert:[]});
  }
}

user.downloadPreviewImage = async (req, res, next) =>{
  try{
    var params = req.body.selectedItems;
    var certtype = req.body.certtype;
    // var save_path = req.body.save_path;
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined) {
      cohorttablename=certtypes[certtype];
    }
    var downloadlist=[];
    if(req.user.business_is_verified==false) {
      return res.json({Status: 400, message: "Your account is currently under verification, please contact certonce team."});
    }
    var permission=await getPermission(req.user.user_id,"previewCertificate");
    if(permission==false) {
      return res.json({Status: 400, message: "Access denied." });
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var zip_file_name = "";
    let base_path_file = `/home/ubuntu/Download_Preview_Image/${puserid}/image`;
    let base_path_zip = `/home/ubuntu/Download_Preview_Image/${puserid}/zip`;
    var os = new os_func();
    if (!fs.existsSync(base_path_file)) {
      await os.execCommand('sudo mkdir -p "'+base_path_file+'"');
      await os.execCommand('sudo chmod -R 777 "'+base_path_file+'"');
    }
    if (!fs.existsSync(base_path_zip)) {
      await os.execCommand('sudo mkdir -p "'+base_path_zip+'"');
      await os.execCommand('sudo chmod -R 777 "'+base_path_zip+'"');
    }
    var empty = extfs.isEmptySync(base_path_file);
    if(empty==false) {
      res.status(400).send('Same account is downloading now.');
      return;
    }
    fsExtra.emptyDirSync(base_path_zip);
    for (let index = 0; index < params.length; index++) {
      const element = params[index];
      let cohortid=element.split("=")[0];
      let studentid=element.split("=")[1];
      ///////////////////////////////////////////
      if ( cohortid == '' || studentid == '') { continue; }
      var whereClause =  "WHERE b.id='"+studentid+"';"
      var studentQuery = format(`SELECT a.*, c.*,b.*, c.cohortid as main_cohortid, a.studentid as main_studentid, b.id as cohortmemberid,b.is_validated as is_validated, d.* FROM student a
        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid LEFT JOIN certtemplate d ON d.id=c.certtemplateid ${whereClause}`);
      var students = await pool.query(studentQuery);
      if ( students.rowCount > 0 ) {
        for ( const student of students.rows ) {
          let fullname = "";
          let first_name = student['firstname'];
          let middle_name = student['middlename'];
          let last_name = student['lastname'];
          let studentid = student['main_studentid'];
          zip_file_name = student['main_cohortid'];
          if (middle_name == null || middle_name == "") {
            fullname = first_name + " " + last_name;
          }
          else {
            fullname = first_name + " " + middle_name + " " + last_name;
          }
          var downloadfilename=`${fullname}-${studentid}`;
          if(puserid=="20131" || puserid=="29") { //snu
            downloadfilename=`${studentid}`;
          }
          if(puserid=="20103" || puserid=="32") { //medi
            fullname = fullname.trim().replace(/ /g, "-");
            downloadfilename=`${studentid.trim()}-${fullname}`;
          }
          // certjson=student['unsignedcertificationjson'];
          // migration
          console.log("downloadPreview S3 URL", student["unsignedcertificationjsonurl"])
          const certjson = student["unsignedcertificationjsonurl"];
          const params = utils.parseS3Url(student["unsignedcertificationjsonurl"]);
          // console.log("downloadPreview S3 URL", student["unsignedcertificateurl"])
          // const certjson = student["unsignedcertificateurl"];
          // const params = utils.parseS3Url(student["unsignedcertificateurl"]);
          // const data = await s3.getObject(params).promise();
          ////
          let temp_data = '';
          if(params.Bucket == 'certonce-v2'){
            console.log("11111");
            temp_data = await s3_new.getObject(params).promise();
          }
          else
            { console.log("11112");
              temp_data = await s3.getObject(params).promise();}
          const data = temp_data;
          ////
          const parsedata = JSON.parse(data.Body.toString('utf-8')); 
          if(certjson==""||certjson==null) 
            {
              console.log("11113");
              continue;
            }

          downloadfilename = downloadfilename.replace(/\//g, '-');
          // parsedata=JSON.parse(certjson); // commented for migration
          let temp_list = parsedata.displayHtml.split(" ");
          let image_data = [];
          for (const ele of temp_list){
            if (ele.indexOf("data:image/png;base64") != -1){
              let temp = ele.split("data:image/png;base64,");
              image_data.push(temp[temp.length-1].toString().trim().replace("/>", "").replace(/"/g, ""));
            }
          }
          console.log(image_data.length);
          if (image_data.length > 0){
            if (image_data.length > 1){
              for(let index1= 1; index1 <= image_data.length; index1 ++){
                fs.writeFileSync(`${base_path_file}/${downloadfilename}-${index1}.png`, image_data[index1-1], 'base64');
              }
            }
            else {
              console.log(`${base_path_file}/${downloadfilename}.png`);
              fs.writeFileSync(`${base_path_file}/${downloadfilename}.png`, image_data[0], 'base64');
            }
          }
        }
      }
    }
    let zip = new AdmZip();
    zip.addLocalFolder(base_path_file);
    await zip.writeZipPromise(`${base_path_zip}/file.zip`);
    fsExtra.emptyDirSync(base_path_file);
    console.log("success to make zip file with preview images.")
    res.status(200).download(`${base_path_zip}/file.zip`);
  }
  catch(err){
    console.log(err.message);
    res.json({ Status: 400, message: err.message });
  }
}

// revoke certificate
user.revokeCertificate = async (req, res, next) => {
  var params = req.body.selectedItems;
  var revokereason = req.body.revokereason;
  var certtype = req.body.certtype;
  var certtypes = { "degree": "cohortmembers_degree", "transcript": "cohortmembers_transcript", "openbadges": "cohortmembers_openbadges", "migration": "cohortmembers_degree", "bonafide": "cohortmembers_degree", "transfer": "cohortmembers_degree", "relieving": "cohortmembers_degree", "awards": "cohortmembers_degree", "semesterwisegradecard": "cohortmembers_degree", "medal": "cohortmembers_degree", "or": "cohortmembers_degree" };
  var cohorttablename = "cohortmembers_degree";
  if (certtype && certtype != "" && certtype !== "null" && certtype !== undefined) {
    cohorttablename = certtypes[certtype];
  }
  var currentUser = req.user;
  if (req.user.business_is_verified == false) {
    return res.json({ Status: 400, message: "Your account is currently under verification, please contact certonce team." });
  }
  var puserid = await getParentAccountIdFromId(req.user.user_id);
  var revokeQuery = format(`select revocationurl from setting where accountid='${puserid}'`);
  var revokeResult = await pool.query(revokeQuery);
  var revokeUrl = revokeResult.rows[0].revocationurl;
  console.log("revokeURL = : ", revokeUrl);
  if (revokeUrl == null || revokeUrl == "" || revokeUrl == "undefined" || revokeUrl == undefined) {
    return res.json({ Status: 400, message: "Revocation base url is not defined. Please set it on MY PROFILE/Setting." });
  }
  
  var revokeUrlWithAdd = `${revokeUrl}/addrevoke.php`;
  if (puserid == "20107") revokeUrlWithAdd = `${revokeUrl}/addrevokeap.php`;
  try {
    for (let index = 0; index < params.length; index++) {
      const element = params[index];
      let cohortid = element.split("=")[0];
      let studentid = element.split("=")[1];
      // console.log("cohortid = " + cohortid + ", studentid = " + studentid, revokeUrlWithAdd);
      if (cohortid == '' || studentid == '') continue;
      var whereClause = "WHERE c.cohortid='" + cohortid + "' and b.id='" + studentid + "';"
      var studentQuery = format(`SELECT a.*, c.*,b.*,d.* FROM student a LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid LEFT JOIN certtemplate d ON d.id=c.certtemplateid ${whereClause}`);
      let students = await pool.query(studentQuery);
      if (students.rowCount > 0) {
        for (const student of students.rows) {
          let signedcertificateurl = student['signedcertificateurl'];
          if (signedcertificateurl == null || signedcertificateurl == "") continue;
          let parts = signedcertificateurl.split("/");
          let student_uuid = parts.pop().replace(".json", "");
          let revokeid = common_lib.generateVerifyUrl(revokeUrl, puserid, student_uuid, student['name'], cohortid);
          console.log("Revoke ID - ",revokeid);
          // let parsesigned = JSON.parse(signedcertificationjson); revokeid = parsesigned.id;
          try {
            let revokeResult = await axios.get(`${revokeUrlWithAdd}?id=${revokeid}&revokereason=${revokereason}`);
             console.log("revokeResult = : ", revokeResult.data);
            if (revokeResult.data.indexOf("Error writing to file") != -1) {
              return res.json({ Status: 400, message: 'Error writing to file.' });
            }
            else if (revokeResult.data.indexOf("success") != -1) {
              console.log("revokeResult = : ", revokeResult.data);
              let updatesql = format(`UPDATE ${cohorttablename} SET certificaterevoked = true  WHERE id=${studentid}`);
              console.log("updatesql = : ", updatesql);
              await pool.query(updatesql);
            }
            else if (revokeResult.data.indexOf("fail") != -1) {
              return res.json({ Status: 400, message: 'Revoke is not existed. Please ask to administrator' });
            }
          }
          catch (err) {
            console.log("err = : ", err);
            return res.json({ Status: 400, message: `There is no addrevoke.php. Please ask to administrator- ${err}` });
          }
        }
      }
    }
    res.json({ Status: 200, message: 'Revoked successfully.' });
  }
  catch (err) {
    console.log("err = : ", err);
    res.json({ Status: 400, message: err.message });
  }
}

user.revokeCertificate_old = async (req,res, next) => {

  var params = req.body.selectedItems;
  var certtype = req.body.certtype;
  var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
  var cohorttablename="cohortmembers_degree";
  if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined)
  {      
    cohorttablename=certtypes[certtype];
  }
  var currentUser = req.user; 
  if(req.user.business_is_verified==false)
  {
    var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
        };
        res.json(obj);
        return;
  }  
  var puserid=await getParentAccountIdFromId(req.user.user_id); 
  try {      
   
    for (let index = 0; index < params.length; index++) {
       const element = params[index];
       let cohortid=element.split("=")[0];
       let studentid=element.split("=")[1];
       console.log("cohortid="+cohortid+",studentid="+studentid);
       ///////////////////////////////////////////
          if ( cohortid == '' || studentid == '') {continue;}
          //var whereClause =  "WHERE c.id='"+ cohortid +"' and b.id='"+studentid+"';"
          var whereClause =  "WHERE c.cohortid='"+ cohortid +"' and b.id='"+studentid+"';"
          var studentQuery = format(`SELECT a.*, c.*,b.*,d.* FROM student a 
                                        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                        LEFT JOIN cohort c ON c.id=b.cohortid 
                                        LEFT JOIN certtemplate d ON d.id=c.certtemplateid ${whereClause}
                                        `);
          
          let students = await pool.query(studentQuery);            
          if ( students.rowCount > 0 ) { 
                      
              for ( const student of students.rows ) {
                 
                  email=student['emailaddress'];
                  //console.log("email:"+email);
                  first_name = student['firstname'];
                  middle_name = student['middlename'];
                  last_name = student['lastname'];
                  onetimecode = student['onetimeblockcertscode'];                    
                  signedcertificateurl = student['signedcertificateurl'];
                  signedcertificationjson = student['signedcertificatejson'];
                  if(signedcertificateurl==null||signedcertificateurl=="") continue;
                  if(signedcertificationjson==null||signedcertificationjson=="") continue;
                  
                         
                  var my_issuer_revocation_base_path=issuer_revocation_base_path+puserid;

                
                  var revokelistfullpath=my_issuer_revocation_base_path+"/revocation-list.json";
                  var parsesigned=JSON.parse(signedcertificationjson);
                  if(parsesigned.verification.publicKey.indexOf("ecdsa-koblitz-pubkey:0x")!=-1)
                  {
                    revokelistfullpath=my_issuer_revocation_base_path+"/revocation-list-eth.json";
                  }
                
                  var revokelistcontentlocal = require(revokelistfullpath);

                  //revokelistfullpath=revokebasepath+revokelistfilename;

                  revokedAssertions=revokelistcontentlocal.revokedAssertions;

                  let isexist=false;
                  for (let revokeindex = 0; revokeindex < revokedAssertions.length; revokeindex++) {
                    const revokeelement = revokedAssertions[revokeindex];
                    if(parsesigned.id==revokeelement.id)
                    {
                       isexist=true;
                    }
                    
                  }
                  if(isexist==false)
                  {
                    revokedAssertions.push({
                          //'id' : signedcertificateurl,
                          'id' : parsesigned.id,
                          'revocationReason' : 'Revoked by Issuer'}
                    );
                  }
                  revokelistcontentlocal.revokedAssertions=revokedAssertions;
                  
                  //console.log(revokelistcontent);
                  
                  var revokejson = JSON.stringify(revokelistcontentlocal, null, " ");
                  
                  //await fs.unlinkSync(revokelistfullpath)
                  await writeFile(revokelistfullpath,revokejson);
                  //var updatesql= format(`UPDATE ${cohorttablename} SET certificaterevoked = true  WHERE cohortid = '${cohortid}' and studentid=${studentid}`);
                  var updatesql= format(`UPDATE ${cohorttablename} SET certificaterevoked = true  WHERE id=${studentid}`);
                  await pool.query(updatesql);
                  
                  //Revoke status
                  /*
                  let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status)
                  SELECT '${puserid}','${cohortid}','${studentid}','revokecertificate','done'
                  WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${cohortid}' and studentid='${studentid}' and processtype='revokecertificate' ) ;`);
                  await pool.query(updateStatusQuery);
                  */
                  ///////////////////////////////////////////
                    
              }
          }
          
     }
   
  var obj = {
                Status: 200,
                message: 'Revoked successfully.',              
            }
            res.json(obj);
  } 
 catch (err) {
  var obj = {
        Status: 400,
        message: err.message        
        }
        res.json(obj);      
}
}


async function fileToBase64(url) {
  const response = await axios.get(url, { responseType: 'arraybuffer' });
  return Buffer.from(response.data, 'binary').toString('base64');
}
async function getOffice365AcessToken(clientId, clientSecret, tenantId)
{
  const msal = require('@azure/msal-node');
 
  const aadEndpoint = 'https://login.microsoftonline.com';
  const graphEndpoint = 'https://graph.microsoft.com';
  
  const msalConfig = {
    auth: {
      clientId,
      clientSecret,
      authority: `${aadEndpoint}/${tenantId}`,
    },
  };
  console.log(msalConfig);
  const cca = new msal.ConfidentialClientApplication(msalConfig);
  const tokenRequest = {
    scopes: [`${graphEndpoint}/.default`],
  };

  try {
    const tokenResponse = await cca.acquireTokenByClientCredential(tokenRequest);
    console.log(tokenResponse.accessToken);
    if(tokenResponse.accessToken==null || tokenResponse.accessToken==undefined || tokenResponse.accessToken=="") return false;
    return tokenResponse.accessToken;
    
  } catch (error) {
    console.error('Error acquiring token:', error);
    return false;
  }

}
// send certificate
user.sendCertificate = async (req,res, next) => {
  await template_module_1.sendcertificate(req, res, next);  
}

// send certificate for review
user.sendCertificateforReview = async (req,res, next) => {

  try {   
    var os = new os_func(); 
    var params = req.body.selectedItems;
    var certtype=req.body.certtype;
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    
    if(certtype && certtype!="" && certtype!=="null" && certtype!==undefined && certtype!=null)
    {      
      cohorttablename=certtypes[certtype];
    }
    
    var currentUser = req.user;  
    var organization_name=currentUser.organization_name;
    var organization_verify_uri=currentUser.organization_verify_uri;
    if(organization_verify_uri==""||organization_verify_uri=="null"||organization_verify_uri==null|| organization_verify_uri==undefined) organization_verify_uri="certonce";
    if(req.user.business_is_verified==false)
    {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
    }
    var permission=await getPermission(req.user.user_id,"sendCertificate");
    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);

    //////////smtp information/////////
    var smtpaccount = {
      'type' : true,
      'username' : "", 
      'clientid' : "",
      'clientsecret' : "",
      'refreshtoken' : "",
      'from': ""
    };
    var smtphost="";
    var smtpport="";
    var smtpusername="";
    var smtppassword="";
    var smtpfrom="";
    var cc="";
    var contact_email = "";
    var s_baseurl = "";
    var s_issuerurl = "";
    var s_revocationurl = "";
    var s_issuername = "";
    var s_issueremail = "";
    var s_verifybaseurl = "";

    var settingInfo = await getProfileFromAccountId(puserid);    
    s_baseurl = settingInfo.baseurl;
    s_issuerurl = settingInfo.issuerurl;
    s_revocationurl = settingInfo.revocationurl;
    s_issuername = settingInfo.issuername;
    s_issueremail = settingInfo.issueremail;
    s_verifybaseurl = settingInfo.verifybaseurl;      

    smtpaccount['type'] = settingInfo.smtptype;
    smtpaccount['host'] = settingInfo.smtphost;
    smtpaccount['port'] = settingInfo.smtpport;
    smtpaccount['username'] = settingInfo.smtpusername;
    smtpaccount['password'] = settingInfo.smtppassword;
    smtpaccount['from'] = settingInfo.smtpfrom;
    smtpaccount['clientid'] = settingInfo.smtpclientid;
    smtpaccount['clientsecret'] = settingInfo.smtpclientsecret;
    smtpaccount['refreshtoken'] = settingInfo.smtprefreshtoken;
    smtpaccount['isoffice365'] = settingInfo.isoffice365;
    smtpaccount['office365accesstoken'] =settingInfo.office365accesstoken;
    cc=settingInfo.smtpcc;
    contact_email = settingInfo.contact_email;
    if (contact_email == null || contact_email == undefined) contact_email = "";

    
    if(contact_email=="") {
      var obj = {
        Status: 400,
        message: 'Contact Email is not defined. Please set contact email in /My PROFILE/Setting/CONTACT INFORMATION ',
      }
      res.json(obj);
      return;
    }
    /////////////////////////////////// 
    var obj = {
      Status: 200,
      message: 'Please wait while sending email',
      // downloadIitems:downloadIitems
    }
    res.json(obj);  

    let isTotal=false; 
    let glcohortid="";
    for (let index = 0; index <params.length; index++) 
    {
      const element = params[index];
      let cohortid=element.split("=")[0];
      let studentid=element.split("=")[1];
      glcohortid=cohortid;
      if(studentid=='') 
      {
        isTotal=true;           
        break;
      }
    }
    isTotal=false;     
    
    if(isTotal==false)
    {
      var stop_flag = false;
      var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
      console.log('Your IP address is ' + clientIp);
      let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress,userid) values ('sendcertificateforreview (${params.length} students are selects)','${clientIp}','${puserid}');`);
      await pool.query(ipQuery);

      for (let index = 0; index < params.length; index++) 
      {
        if (stop_flag) break;
        const element = params[index]; 
        let cohortid=element.split("=")[0];       
        let studentid=element.split("=")[1];
        if ( studentid == '') {continue;}
        
        /////////////////////////////////////////////
        //if ( cohortid == '' || studentid == '') {continue;}
        //let whereClause =  "WHERE c.cohortid='"+ cohortid +"' and b.id='"+studentid+"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"' and b.certificatesendstate=1;"
        let whereClause =  "WHERE c.cohortid='"+ cohortid +"' and b.id='"+studentid+"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
        let studentQuery = format(`SELECT a.*, c.*,b.*,d.*,c.cohortid as cohortfullid FROM student a 
                                      LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                      LEFT JOIN cohort c ON c.id=b.cohortid 
                                      LEFT JOIN cohort_group e ON e.cohortid=c.cohortid 
                                      LEFT JOIN certtemplate d ON d.id=e.certtemplateid ${whereClause}
                                      `);
        
        let students = await pool.query(studentQuery);   
        if ( students.rowCount > 0 ) {                            
          for ( const student of students.rows ) {               
            let email=student['emailaddress'];
            let secondemailaddress=student['secondemailaddress'];
            
            let cc2=student['cc2'];
            let cc3=student['cc3'];                        
          
            var smtpcc=[];
            if(cc!="" && cc!=null && cc!==undefined)
            {
              //'smtpcc.push(smtpaccount['cc']);
              smtpcc.push(cc);
            }
            if(secondemailaddress!="" && secondemailaddress!=null && secondemailaddress!==undefined)
            {                          
              smtpcc.push(secondemailaddress);
            }
            if(cc2!="" && cc2!=null && cc2!==undefined)
            {                          
              smtpcc.push(cc2);
            }
            if(cc3!="" && cc3!=null && cc3!==undefined)
            {                          
              smtpcc.push(cc3);
            }
            if(smtpcc.length>0)
            {                  
              smtpaccount['cc']=smtpcc.join(",");
            }
            
            
            let unsignedcertificationjsonurl = student['unsignedcertificationjsonurl']; // Migration
            // read from S3
            const params = await utils.parseS3Url(unsignedcertificationjsonurl)
            // const data = await s3.getObject(params).promise();
            ////
            let temp_data = '';
            if(params.Bucket == 'certonce-v2')
              temp_data = await s3_new.getObject(params).promise();
            else
              temp_data = await s3.getObject(params).promise();
            const data = temp_data;
            ////
            const unsignedcertificateurl = JSON.parse(data.Body.toString('utf-8'));

            // let unsignedcertificateurl = student['unsignedcertificateurl'];
            
            let first_name = student['firstname'];
            
            let middle_name = student['middlename'];
            let last_name = student['lastname'];
            let fullname="";                    
            if(middle_name==null||middle_name=="")
            {
              fullname=first_name+" "+last_name;
            }
            else
            {
              fullname=first_name+" "+middle_name+" "+last_name;
            }
            
            let cert_email_subject="";
            let email_body="";
            let preview_image=unsignedcertificateurl.displayHtml;
            let imagetmpforemail="/var/www/html/images/tmpforemail/";

            let previewHtmlUrl = `${myip}/images/tmpforemail/${fullname.trim().replace(/ /g,"_")}.html`;
            let previewFilePath = imagetmpforemail+fullname.trim().replace(/ /g,"_")+".html";
            if (!fs.existsSync(imagetmpforemail))
            {
                await os.execCommand('sudo mkdir -p "'+imagetmpforemail+'"');
                await os.execCommand('sudo chmod -R 777 "'+imagetmpforemail+'"');
            }    
            fs.writeFileSync(previewFilePath, preview_image, 'utf8');            
            if(email)
            {

              if(puserid == "20088" || puserid == "20")//ljku
              { 
                cert_email_subject = "Verify Your Semester Performance Report LJKU";  
                email_body=`
                <!DOCTYPE html>
                  <html>
                    <body>
                    <p>Dear ${first_name},</p>
                   
                    <p>We hope this email finds you well. We are pleased to inform you that your semester performance report has been generated. As part of our commitment to maintaining the accuracy of our academic records, we request you to review your report and ensure that all details are correct.</p>
                    
                    <p>What to Do: Please find your semester performance report attached to this email. Click on the <a href="${previewHtmlUrl}">link.</a></p>
                  
                    <p>Review the report carefully, checking for accuracy in: Course names and codes Grades Credits earned and any other relevant information.</p>
                   
                    <p>If You Find Any Discrepancies: Please reply to coe@ljku.edu.in with detailed information about the discrepancies.</p>
                   
                    <p>Deadline: Kindly complete your review and report any discrepancies.</p>
                    
                    <p>Once we receive and address all feedback, we will finalize the reports. The final version of your semester performance report will be issued using blockchain technology, ensuring its authenticity and security. You will receive the finalized report via email.</p>
                    
                    <p>Thank you for your cooperation and prompt attention to this matter.</p>
                    <p>Best regards,</p>
                    <p>Registrar</p>
                    <p>LJKU</p>
                  </body>
                  </html>
                `;                    
              }
              else
              {
                cert_email_subject = "A Digital certificate has been issued by "+organization_name;  
                email_body=`
                <!DOCTYPE html>
                  <html>
                    <body>
                    <p style="color: black;">Hi ${first_name},</p>
                    <a href="${previewHtmlUrl}">See full preview</a>
                  </body>
                  </html>
                `;                           
              }
              
              
              const mailer_sendcertificate = require("../../config/mailer_sendcertificate_forreview");
              let logfilename=logfiledir+req.user.user_id+"/sendcertificateforreview.log";
              
              let attachment_files = [];
              let mailer_result = await mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, cohorttablename, studentid);
              if (mailer_result.status == "400"){
                const mailer_certonce = require("../../config/mailer_certonce");
                let logfilename=logfiledir+puserid+"/sendcertificateforreview.log";
                let email_body = `<p style="color: black;">There is an error in sending certificates.</p>
                <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
                let email_subject = "SendCertificate Result";
                mailer_certonce(email_body, email_subject, contact_email, logfilename);
                stop_flag = true;
              } else {
                console.log("UPDATING DB.", glcohortid, cohorttablename, studentid)
                let updateStateQuery = format(`
                  UPDATE ${cohorttablename}
                  SET certificatesendstate = 4
                  WHERE hold != 'y'
                    AND hold != 'yes'
                    AND id = ${studentid}
                    AND cohortid IN (
                        SELECT id
                        FROM cohort
                        WHERE cohortid = '${glcohortid}'
                          AND accountid = '${puserid}'
                    );
                  `
                );
                console.log("updateStateQuery", updateStateQuery);
                const res = await pool.query(updateStateQuery);
                console.log("Updated the DB.", res)
              }
            }
          }
        }                
        ///////////////////////////////////////////
      }
    }
    else //istotal true
    {
      if(glcohortid=="")
      {       
        const mailer_certonce = require("../../config/mailer_certonce");
        let logfilename=logfiledir+puserid+"/sendcertificate.log";
        let email_body = `<p style="color: black;">Invalid selected students.</p>`
        let email_subject = "SendCertificate Result";
        mailer_certonce(email_body, email_subject, contact_email, logfilename);
      }
      
      //let updateStateQuery = format(`UPDATE ${cohorttablename} b	SET b.certificatesendstate=1	WHERE b.cohortid in (select id from cohort where cohortid='${glcohortid}' and accountid='${puserid}') and b.certificatesendstate!=2;`);
      let updateStateQuery = format(`UPDATE ${cohorttablename} b	SET b.certificatesendstate=1	WHERE b.hold !='y' and b.hold!='yes' and b.cohortid in (select id from cohort where cohortid='${glcohortid}' and accountid='${puserid}');`);
      await pool.query(updateStateQuery);

      var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"' and b.certificatesendstate!=2;"
      //var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
      var studentQuery = format(`SELECT a.*, c.*, b.*, d.*, b.id as studentidentify, c.cohortid as cohortfullid FROM student a 
                                    LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                    LEFT JOIN cohort c ON c.id=b.cohortid 
                                    LEFT JOIN cohort_group e ON e.cohortid=c.cohortid 
                                    LEFT JOIN certtemplate d ON d.id=e.certtemplateid ${whereClause}
                                    `);
                
      
    }
        
  } 
  catch (err) {
    console.log(err.message);
    const mailer_certonce = require("../../config/mailer_certonce");
    let logfilename=logfiledir+puserid+"/sendcertificate.log";
    let email_body = `<p style="color: black;">${err.message }</p>`
    let email_subject = "SendCertificate Result";
    mailer_certonce(email_body, email_subject, contact_email, logfilename);
  }
}

user.verifyrequest = async (req, res, next) => {
  try{
    let documentid = req.body.id;
    let verifiername = req.body.fullname;
    let designation = req.body.designation;
    let organization = req.body.organization;
    let email = req.body.email;
    let contactnumber = req.body.contactnumber;
    let razororderid = req.body.orderid;
    if(razororderid == null || razororderid == undefined) razororderid = "";
    if(documentid == null || documentid == undefined) documentid = "";
    console.log(documentid, verifiername, designation, organization, email, contactnumber, razororderid);
    var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var loopcount = 0;
    while (loopcount !== Object.keys(certtypes).length) {
      for (const key1 in certtypes) {
        var tablenameforcerttype1 = certtypes[key1];
        let degreeQuery = format(`select c.id as studentid, a.firstname, a.middlename, a.lastname, b.accountid, b.cohortid, b.competencyname, a.studentid as studentmainid, c.signedcertificatepdfurl, c.signedcertificateurl, c.other1 as subother1 from ${tablenameforcerttype1} c left join student a on c.studentid=a.id left join cohort b on c.cohortid=b.id where c.signedcertificatepdfurl like '%${documentid}%'`);
        console.log(degreeQuery);
        let degreeResult = await pool.query(degreeQuery);
        if (degreeResult.rowCount > 0){
          let studentid = degreeResult.rows[0].studentid;
          let studentmainid = degreeResult.rows[0].studentmainid;
          let puserid = degreeResult.rows[0].accountid;
          let cohortid = degreeResult.rows[0].cohortid;
          let pdfurl = degreeResult.rows[0].signedcertificatepdfurl;
          let signedcertificateurl = degreeResult.rows[0].signedcertificateurl;          
          let competencyname = degreeResult.rows[0].competencyname;
          let lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];          
          
          if (degreeResult.rows[0].firstname == null) degreeResult.rows[0].firstname = "";
          if (degreeResult.rows[0].middlename == null) degreeResult.rows[0].middlename = "";
          if (degreeResult.rows[0].lastname == null) degreeResult.rows[0].lastname = "";
          let fullname = `${degreeResult.rows[0].firstname} ${degreeResult.rows[0].middlename} ${degreeResult.rows[0].lastname}`.trim();
          let insertQuery = format(`insert into verifyrequest (fullname, payer_name, designation, organization, email, contactnumber, accountid, cohortid, studentid, pdfurl, documentid, razorpay_order_id, enrollnumber, certificatetype, isofficalemail) values ('${fullname}', '${verifiername}', '${designation}', '${organization}', '${email}', '${contactnumber}', '${puserid}', '${cohortid}', '${studentid}', '${pdfurl}' , '${documentid}', '${razororderid}', '${studentmainid}', '${key1}', true) returning id`);
          let insertResult = await pool.query(insertQuery);
          var smtpaccount = {'type' : true, 'username' : "", 'clientid' : "", 'clientsecret' : "", 'refreshtoken' : "", 'from': ""};          
          var cc="";
          var querySmtp=format(`SELECT * FROM setting where accountid='${puserid}';`);
          let smtpresult = await pool.query(querySmtp);
          
          if(smtpresult && smtpresult.rowCount > 0){
            organization_name = smtpresult.rows[0].organization_name;
            smtpaccount['type'] = smtpresult.rows[0].smtptype;
            smtpaccount['host'] = smtpresult.rows[0].smtphost;
            smtpaccount['port'] = smtpresult.rows[0].smtpport;
            smtpaccount['username'] = smtpresult.rows[0].smtpusername;
            smtpaccount['password'] = smtpresult.rows[0].smtppassword;
            smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
      
            smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
            smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
            smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
      
            smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
            smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
            cc=smtpresult.rows[0].smtpcc;             
          }
          var smtpcc=[];
          if(cc!="" && cc!=null && cc!==undefined) {
            smtpcc.push(cc);
          }            
          if(smtpcc.length>0) {
            smtpaccount['cc']=smtpcc.join(",");
          }

          var cert_email_subject = "Official Certificate Verification";
          email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p><br>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>          
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>          
              </body></html>`;
          if (puserid =="20094") { // miet
            cert_email_subject = `Official Certificate Verification from MIET`; 
            email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p><br>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from MIET. We can confirm the authenticity of the certificate which has been duly issued by our Institute. The certificate has been attached to this email for your reference.</p>
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>
              <p style="color:black;">Model Institute of Engineering and Technology</p>
              </body></html>`;
          }
          else if (puserid =="20091" || puserid =="30") //galgotias
          {
            cert_email_subject = `Official Certificate Verification from Galgotias University`; 
            email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p><br>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from Galgotias University. We can confirm the authenticity of the certificate which has been duly issued by our University. The certificate has been attached to this email for your reference.</p>
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>
              <p style="color:black;">Registrar</p>
              <p style="color:black;">Galgotias University</p>
              </body></html>`;
          }
          else if (puserid =="20110")//Jain University
          {
            cert_email_subject = `Official Certificate Verification of ${fullname} from Jain University`; 
            email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p><br>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements from Jain University.</p>
              <p style="color:black;">We can confirm the authenticity of the certificate which has been duly issued by our University.</p>
              <p style="color:black;">The certificate has been attached to this email for your reference.</p>
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>
              <p style="color:black;">Jain University</p>
              <p style="color:black;">Phone number: 08046650100</p>
              <p style="color:black;">44/4, District Fund Rd, behind Big Bazaar, Kottapalya, Jayanagara 9th Block, Jayanagar,
              Bengaluru, Karnataka 560069</p>
              <img src="https://www.certonce.com/images/JAIN/jain_logo.png" style="width:100px;" />              
              </body></html>`;
          }
          else if (puserid =="20109") //IILM Gurugram
          {
            pdfurl=`https://digi-record.iilm.edu.in/pdf/${lastelement.replace(".json","")}`;
            cert_email_subject = `Official Certificate Verification from IILM University, Gurugram`; 
            email_body=`<html><body>
              <p>Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p><br /> We are pleased to confirm and inform you that ${fullname}, has successfully completed the program requirements and has been awarded the ${competencyname} Certificate from IILM University, Gurugram.</p>
              <p>We confirm the authenticity of the certificate which has been duly issued by our University.</p>
              <p>The certificate has been attached to this email for your reference.</p>
              <p>Thank you for your interest in verifying the credentials of our student.</p>
              <p>Best Regards</p>
              <p>&nbsp;</p>
              <p>Registrar</p>
              <p>IILM University, Gurugram</p>
              <p>0124-2775637</p>
              <p>1, Knowledge Centre, Golf Course Road, Sector 53, Gurugram, Haryana-122003</p>
              <img src="https://www.certonce.com/images/IILM/gurugram_main_logo.png" style="width:100px;" />              
              </body></html>`;
          }       
          else if (puserid =="20117") //iilm lucknow
          {
            pdfurl=`https://digi-record.iilmlko.ac.in/pdf/${lastelement.replace(".json","")}`;
            cert_email_subject = `Official Certificate Verification from IILM Lucknow`; 
            email_body=`<html><body>
              <p>Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p><br /> We are pleased to confirm and inform you that ${fullname}, has successfully completed the program requirements and has been awarded the ${competencyname} Certificate from IILM Lucknow.</p>
              <p>We confirm the authenticity of the certificate which has been duly issued by our University.</p>
              <p>The certificate has been attached to this email for your reference.</p>
              <p>Thank you for your interest in verifying the credentials of our student.</p>
              <p>Best Regards</p>
              <p>&nbsp;</p>
              <p>Registrar</p>
              <p>IILM Lucknow</p>
              <p></p>
              <p></p>
              <img src="https://www.certonce.com/images/IILM/lucknow_main_logo.png" style="width:100px;" />              
              </body></html>`;
          } 
          else if (puserid =="20113")//dy patil
          {
            pdfurl=`https://verification.dypunik.edu.in/pdf/${lastelement.replace(".json","")}`;
            cert_email_subject = `Official Certificate Verification from D. Y. Patil Education Society (Deemed to be University), Kolhapur`; 
            email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p><br>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from D. Y. Patil Education Society (Deemed to be University), Kolhapur.</p>
              <p style="color:black;">We can confirm the authenticity of the certificate which has been duly issued by our University.</p>
              <p style="color:black;">The certificate has been attached to this email for your reference.</p>
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>
              <p style="color:black;">Controller of Examinations</p>
              <p style="color:black;">D. Y. Patil Education Society (Deemed to be University), Kolhapur</p>
              <p style="color:black;">Phone No.: 0231-2601235/36 Ext. 211</p>
              <p style="color:black;">869, E, D. Y. Patil Vidyanagar, Line Bazar,</p>
              <p style="color:black;">Kolhapur – 416 006</p>
              <img src="https://www.certonce.com/images/D_Y_Patil/logo.png" style="width:100px;" />              
              </body></html>`;
          } 
          else if (puserid =="20123" || puserid =="23")//ctu
          {
            pdfurl=`https://verification.ctuniversity.in/pdf/${lastelement.replace(".json","")}`;
            cert_email_subject = `Official Certificate Verification from CT University`; 
            email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from CT University.</p>
              <p style="color:black;">We can confirm the authenticity of the certificate which has been duly issued by our University.</p>
              <p style="color:black;">The certificate has been attached to this email for your reference.</p>
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>
              <p style="color:black;">Registrar</p>
              <p style="color:black;">CT University</p>              
              <img class="image_resized" style="width:250px;" src="https://www.certonce.com/images/CTU/ct_fulllogo.png">  
              </body></html>`;
          } 
          else if (puserid =="20131" || puserid =="29")//snu
          {
            let uuid = lastelement.replace(".json","");
            pdfurl=`https://verification.snu.edu.in/pdf/${uuid}`;
            cert_email_subject = `Official Certificate Verification from Shiv Nadar (Institute of Eminence Deemed to be University) (“Shiv Nadar IOE”)`; 
            email_body=`<html><body>
              <p style="color:black;">Dear ${verifiername},</p><br>
              <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
              <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from Shiv Nadar (Institute of Eminence Deemed to be University) (“Shiv Nadar IOE”).</p>
              <p style="color:black;">We can confirm the authenticity of the certificate which has been duly issued by our University.</p>
              <p style="color:black;">The certificate has been attached to this email for your reference.</p>
              <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
              <p style="color:black;">Best Regards</p>
              <p style="color:black;">Registrar</p>
              <p style="color:black;">Shiv Nadar IOE</p>
              <img src="https://www.certonce.com/images/snu/snulogo.png" style="width:100px;" />              
              </body></html>`;
          }
          else if(puserid=="20102" || puserid=="24")//gcu
          {
          pdfurl=`https://verify.gardencity.university/pdf/${lastelement.replace(".json","")}`;
          cert_email_subject = `Official Certificate Verification from Garden City University`; 
          email_body=`<html><body>
            <p style="color:black;">   <p>
            <meta charset="utf-8">
            </p>Dear ${verifiername},</p><br>
                      
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</span></span><br><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from Garden City University.</span></span></p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We can confirm the authenticity of the certificate which has been duly issued by our University. The certificate has been attached to this email for your reference.</span></span></p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for your interest in verifying the credentials of our student.</span></span></p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Best Regards</span></span></p>
            <p style="line-height:1.38;margin-bottom:0pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Registrar</span></span></p>
            <p style="line-height:1.38;margin-bottom:0pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Garden City University</span></span></p>
            <p><img src="https://www.certonce.com/images/GCU/gcu_logo.png" height="110px"></p>    
            </body></html>`;
          }
          else if(puserid=="20122" || puserid=="25")//rv
          {
            pdfurl=`https://documentverification.rvce.edu.in/pdf/${lastelement.replace(".json","")}`;
            cert_email_subject = `Official Certificate Verification from RV College of Engineering`; 
            email_body=`
            <p>
                <meta charset="utf-8">
            </p>
            <p>Dear ${verifiername},</p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr">
                <meta charset="utf-8"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for your verification request to officially verify the certificate of our student,&nbsp;${fullname}.</span></span><br><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements from RV College of Engineering.</span></span>
            </p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr">
                <meta charset="utf-8"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We can confirm the authenticity of the transcript which has been duly issued by our University. The certificate has been attached to this email for your reference.</span></span>
            </p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for your interest in verifying the credentials of our student.</span></span></p>
            <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Best Regards</span></span></p>
            <p style="line-height:1.38;margin-bottom:0pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Registrar</span></span></p>
            <p style="line-height:1.38;margin-bottom:0pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">RV College of Engineering</span></span></p>
            <p>&nbsp;</p>
            <p><img src="https://www.certonce.com/images/RV/rv_whitelogo.png" height="110px"></p>`;
          } 
          else if(puserid=="20145")//nicmar
          {
            let cgpa = degreeResult.rows[0].subother1;
            cert_email_subject = `Official Certificate Verification from NICMAR University`; 
            email_body=`<p>
                  <meta charset="utf-8">
              </p>
              <p>Dear ${verifiername},</p>
              <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr">
                  <meta charset="utf-8">
                  <meta charset="utf-8"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for your verification request to officially verify the certificate of our student,&nbsp;</span></span><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">&nbsp;${fullname}.</span></span>
              </p>
              <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr">
                  <meta charset="utf-8"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We are pleased to confirm and inform you that </span></span><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:11pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">${fullname}, </span></span>
                  <meta charset="utf-8"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">&nbsp;PRN No: ${studentmainid} has successfully completed and has been awarded the ${competencyname} Certificate from NICMAR University with CGPA ${cgpa}.</span></span>
              </p>
              <p style="background-color:#ffffff;line-height:1.38;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr">
                  <meta charset="utf-8">
                  <meta charset="utf-8">
              </p>
              <p style="background-color:#ffffff;line-height:1.3800000000000001;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We can confirm the authenticity of the certificate which has been duly issued by our University. The certificate has been attached to this email for your reference.</span></span></p>
              <p style="background-color:#ffffff;line-height:1.3800000000000001;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for your interest in verifying the credentials of our student.</span></span></p>
              <p style="background-color:#ffffff;line-height:1.3800000000000001;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Best Regards</span></span></p>
              <p style="line-height:1.3800000000000001;margin-bottom:0pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Controller of Examinations</span></span></p>
              <p style="line-height:1.3800000000000001;margin-bottom:0pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#222222;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">NICMAR University, Pune</span></span></p>
              <p>&nbsp;</p>
              <p><img class="image_resized" style="width:200px;" src="https://www.certonce.com/images/nicmar/nicmarlogo.png"></p>`;
          }  
          const mailer_sendcertificate = require("../../config/mailer_verifyrequest");
          let logfilename = logfiledir + puserid + "/verifyrequest.log";
          let attachment_files = [];
          console.log(pdfurl);
          if(smtpaccount['isoffice365']==undefined || smtpaccount['isoffice365']==null || smtpaccount['isoffice365']==0) {
            attachment_files.push({path: pdfurl,filename:`certificate.pdf`}); 
          }
          else {
            let pdfBase64 = await fileToBase64(pdfurl);    
            attachment_files.push({
              "@odata.type": "#microsoft.graph.fileAttachment",
              "Name": `certificate.pdf`,
              "ContentType": "application/pdf",
              "ContentBytes": pdfBase64,
              "IsInline": false
            });
          }              
          let mailer_result = await mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, insertResult.rows[0].id);
          if (mailer_result.status == "400"){
            const mailer_certonce = require("../../config/mailer_certonce");
            let logfilename=logfiledir+puserid+"/sendcertificate.log";
            let email_body = `<p style="color: black;">There is an error in sending onetime code. </p>
            <p style="color: black;">Account: ${puserid}</p>
            <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
            let email_subject = "Sending onetime code";
            mailer_certonce(email_body, email_subject, "meenoy@certonce.com", logfilename);              
          }
          return res.json({Status: 200, message: "Success"});
        }
      }
      loopcount  = Object.keys(certtypes).length;
    }
    return res.json({Status: 400, message: "Invalid Certificate."});
  }
  catch(err){
    console.log(err.message);
    res.json({Status: 400, message: err.message});     
  }
}

user.razorpaymentsendemail = async (req, res, next) => {
  try{
   
    let razorpay_payment_id = req.body.razorpay_payment_id;
    let razorpay_order_id = req.body.razorpay_order_id;
    let razorpay_signature = req.body.razorpay_signature;
    console.log("req.body.razorpay_payment_id=",razorpay_payment_id, "razorpay_order_id=",razorpay_order_id, "razorpay_signature=", razorpay_signature);
    if(razorpay_order_id==null || razorpay_order_id==undefined || razorpay_order_id=="" || razorpay_payment_id==null || razorpay_payment_id==undefined || razorpay_payment_id=="" || razorpay_signature==null || razorpay_signature==undefined || razorpay_signature=="")
    {
      var obj = {
        Status: 400,
        message: "Payment failed!"        
      }
      return res.json(obj);     
    }

    
    
    let updateQuery = format(`update verifyrequest set razorpay_payment_id='${razorpay_payment_id}', razorpay_signature='${razorpay_signature}' where razorpay_order_id='${razorpay_order_id}' returning id`);
    let updateResult = await pool.query(updateQuery);
      
    let degreeQuery = format(`select * from verifyrequest where razorpay_order_id = '${razorpay_order_id}'`);    
    let degreeResult = await pool.query(degreeQuery);
    if (degreeResult.rowCount > 0){     
      let documentid = degreeResult.rows[0].documentid;
      if(documentid=="" || documentid==null || documentid==undefined)
      {
        var obj = {
          Status: 400,
          message: "Invalid request!"        
        }
        return res.json(obj);     
      }
      let verifiername = degreeResult.rows[0].payer_name;
      let email = degreeResult.rows[0].email;
      let verifyid = degreeResult.rows[0].id;
      let certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
      var loopcount = 0;
      while (loopcount !== Object.keys(certtypes).length) {
        for (const key1 in certtypes) {
          var tablenameforcerttype1 = certtypes[key1];
          let degreeQuery = format(`select a.studentid, a.firstname, a.middlename, a.lastname, b.accountid, b.cohortid, b.competencyname, c.signedcertificatepdfurl, c.signedcertificateurl from ${tablenameforcerttype1} c left join student a on c.studentid=a.id left join cohort b on c.cohortid=b.id where c.signedcertificatepdfurl like '%${documentid}%'`);
          console.log(degreeQuery);
          let degreeResult = await pool.query(degreeQuery);
          if (degreeResult.rowCount > 0){            
            let puserid = degreeResult.rows[0].accountid;             
            let pdfurl = degreeResult.rows[0].signedcertificatepdfurl;
            let signedcertificateurl = degreeResult.rows[0].signedcertificateurl;              
            let competencyname = degreeResult.rows[0].competencyname;    
            let lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];  
            if (degreeResult.rows[0].firstname == null) degreeResult.rows[0].firstname = "";
            if (degreeResult.rows[0].middlename == null) degreeResult.rows[0].middlename = "";
            if (degreeResult.rows[0].lastname == null) degreeResult.rows[0].lastname = "";
            let fullname = `${degreeResult.rows[0].firstname} ${degreeResult.rows[0].middlename} ${degreeResult.rows[0].lastname}`.trim();
  
          
            
            var smtpaccount = {
              'type' : true,
              'username' : "", 
              'clientid' : "",
              'clientsecret' : "",
              'refreshtoken' : "",
              'from': ""
            };
            
            var cc="";
            var querySmtp=format(`SELECT * FROM setting where accountid='${puserid}';`);
            let smtpresult = await pool.query(querySmtp);
            console.log(querySmtp);
            let razor_key_id="";
            let razor_secret="";
            if(smtpresult && smtpresult.rowCount > 0){
              organization_name = smtpresult.rows[0].organization_name;
              smtpaccount['type'] = smtpresult.rows[0].smtptype;
              smtpaccount['host'] = smtpresult.rows[0].smtphost;
              smtpaccount['port'] = smtpresult.rows[0].smtpport;
              smtpaccount['username'] = smtpresult.rows[0].smtpusername;
              smtpaccount['password'] = smtpresult.rows[0].smtppassword;
              smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
        
              smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
              smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
              smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
        
              smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
              smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
              razor_key_id = smtpresult.rows[0].razor_key_id;
              razor_secret = smtpresult.rows[0].razor_secret;
              cc=smtpresult.rows[0].smtpcc;             
            }
            var smtpcc=[];

            ///////////////razor payment verification///////////////
           

            const CryptoJS = require('crypto-js');
            const message = razorpay_order_id + '|' + razorpay_payment_id;
            const hash = CryptoJS.HmacSHA256(message, razor_secret).toString();
            console.log(hash, razorpay_signature);
            if(hash!==razorpay_signature)
            {              
              var obj = {
                Status: 400,
                message: "Invalid request!"        
              }
              return res.json(obj);     
            }
            ////////////////////////////////////////////////////////

            if(cc!="" && cc!=null && cc!==undefined)
            {              
              smtpcc.push(cc);
            }            
            if(smtpcc.length>0)
            {                  
              smtpaccount['cc']=smtpcc.join(",");
            }
            
            var cert_email_subject = "Official Certificate Verification";
            email_body=`<html><body>
                <p style="color:black;">Dear ${verifiername},</p><br>
                <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>          
                <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
                <p style="color:black;">Best Regards</p>          
                </body></html>
              `;

            if (puserid =="20131" || puserid =="29")//snu
              {
              pdfurl=`https://verification.snu.edu.in/pdf/${lastelement.replace(".json","")}`;
              cert_email_subject = `Official Certificate Verification from Shiv Nadar (Institute of Eminence Deemed to be University) (“Shiv Nadar IOE”)`; 
              email_body=`<html><body>
                <p style="color:black;">Dear ${verifiername},</p><br>
                <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
                <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from Shiv Nadar (Institute of Eminence Deemed to be University) (“Shiv Nadar IOE”).</p>
                <p style="color:black;">We can confirm the authenticity of the certificate which has been duly issued by our University.</p>
                <p style="color:black;">The certificate has been attached to this email for your reference.</p>
                <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
                <p style="color:black;">Best Regards</p>
                <p style="color:black;">Registrar</p>
                <p style="color:black;">Shiv Nadar IOE</p>              
                <img src="https://www.certonce.com/images/snu/snulogo.png" style="width:100px;" />              
                </body></html>
              `;
            }

            const mailer_sendcertificate = require("../../config/mailer_verifyrequest");
            let logfilename = logfiledir + puserid + "/verifyrequest.log";
  
            let attachment_files = [];
            
  
            if(smtpaccount['isoffice365']==undefined || smtpaccount['isoffice365']==null || smtpaccount['isoffice365']==0)
            {
              attachment_files.push({path: pdfurl,filename:`certificate.pdf`}); 
            }
            else
            {
              let pdfBase64 = await fileToBase64(pdfurl);    
              attachment_files.push({
                "@odata.type": "#microsoft.graph.fileAttachment",
                "Name": `certificate.pdf`,
                "ContentType": "application/pdf",
                "ContentBytes": pdfBase64,
                "IsInline": false
              });
            }
            let mailer_result = await mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, verifyid);
            if (mailer_result.status == "400"){
              console.log(mailer_result);
              const mailer_certonce = require("../../config/mailer_certonce");
              let logfilename=logfiledir+puserid+"/sendcertificate.log";
              let email_body = `<p style="color: black;">There is an error in sending onetime code. </p>
              <p style="color: black;">Account: ${puserid}</p>
              <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
              let email_subject = "Sending onetime code";
              mailer_certonce(email_body, email_subject, "meenoy@certonce.com", logfilename);              
            }
  
            var obj = {
              Status: 200,
              message: "Success"
            }
            return res.json(obj);
          }
        }
        loopcount  = Object.keys(certtypes).length;
      }
    }
 
    var obj = {
      Status: 400,
      message: "Invalid Certificate."
    };
    return res.json(obj);
    
  }
  catch(err){
    console.log(err.message);
    var obj = {
      Status: 400,
      message: err.message        
    }
    res.json(obj);     
  }
}

user.getverifyrequest = async (req, res, next) => {
  try{
    let onetimecode = req.body.id;   
   console.log(onetimecode);
    if (onetimecode == "" || onetimecode == null || onetimecode == undefined)
    {      
      var obj = {
        Status: 400,
        message: "Bad request"
      };
      return res.json(obj);
    }
    let degreeQuery = format(`SELECT * FROM verifyrequest where onetimecode ='${onetimecode}' and isused=false`);
    let degreeResult = await pool.query(degreeQuery);
    if (degreeResult.rowCount > 0){
      let pdfurl =  degreeResult.rows[0].pdfurl;
      
      let lastelement= "";
      if(pdfurl=="" || pdfurl==null|| pdfurl==undefined)
      {
        lastelement="no_pdfurl";
      } 
      else
      {
        lastelement = pdfurl.split("/")[pdfurl.split("/").length-1];
      }
      console.log(lastelement);
      let obj = {
        Status: 200,
        message: "ok_exist",
        certificateid:lastelement.replace(".pdf","")
      }
      return res.json(obj);
    }
    else
    {
      var obj = {
        Status: 200,
        message: "noexist",
        certificateid:"no_certificateid"
      }
      return res.json(obj);
    }
  }
  catch(err){
    console.log(err.message);
    var obj = {
      Status: 400,
      message: err.message        
    }
    res.json(obj);     
  }
}

user.checkpaymentforverify = async (req, res, next) => {
  try{
    let onetimecode = req.body.id;
    let documentid = req.body.documentid;
    let category = req.body.category;
    let code = req.body.code;
    let receive_email = req.body.email;
    let payer_name = req.body.payer_name;
    let verification_portal_url = req.body.home_url;
    let designation = req.body.designation;
    let organization = req.body.organization;
    let contactnumber = req.body.contactnumber;
    let updateflag =  req.body.updateflag;
    let transactionid =  req.body.transactionid;
    if(transactionid==null || transactionid=="" || transactionid==undefined) transactionid="";
    let amountofpayment =  req.body.amountofpayment;
    if(amountofpayment==null || amountofpayment=="" || amountofpayment==undefined) amountofpayment="";
    if(updateflag==null || updateflag=="" || updateflag==undefined) updateflag="";
    if(code==null || code=="" || code==undefined) code="true";
    if(category==null || category=="" || category==undefined) category="-1";
    if(updateflag.trim()=="yes")
    {
      let updateQuery=format(`update verifyrequest set isused=true where onetimecode='${onetimecode}';`);
      console.log(updateQuery);
      await pool.query(updateQuery);
    }
    console.log("code=",code,"updateflag=",updateflag, "documentid=", documentid);
    var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var loopcount = 0;
    var organization_name = "";
    
    while (loopcount !== Object.keys(certtypes).length) {      
      for (const key1 in certtypes) {
        var tablenameforcerttype1 = certtypes[key1];
        if (code == "true"){
          if((documentid==null || documentid=="" || documentid==undefined || onetimecode==null || onetimecode=="" || onetimecode==undefined))
          {
            return res.json({Status: 400, certificateid:"no_pdfurl", message: "Bad request."});
          }
          console.log("true true");
          //let codeQuery = format(`select b.id from ${tablenameforcerttype1} c left join verifyrequest b on c.signedcertificatepdfurl=b.pdfurl where c.onetimeblockcertscode='${onetimecode}';`);
          let codeQuery = format(`select timeadded, accountid, isused, payerlevel, pdfurl from verifyrequest where onetimecode='${onetimecode}' and documentid='${documentid}' and payerlevel='${category}';`);
          let codeResult = await pool.query(codeQuery);
          console.log(codeQuery);
          if (codeResult.rowCount > 0){
            let puserid = codeResult.rows[0].accountid;
            let isused = codeResult.rows[0].isused;
            let payerlevel = codeResult.rows[0].payerlevel;
            let pdfurl = codeResult.rows[0].pdfurl;
            let lastelement= "";
            if(pdfurl=="" || pdfurl==null|| pdfurl==undefined) {
              lastelement="no_pdfurl";
            } 
            else {
              lastelement = pdfurl.split("/")[pdfurl.split("/").length-1];
            }
            if(lastelement==null || lastelement==undefined) lastelement = "";
            lastelement = lastelement.replace(".pdf","");
            if(puserid == "20122" || puserid=="25" || puserid == "20102" || puserid == "24" || puserid == "20123" || puserid == "23" || puserid == "20103" || puserid == "32") //rv, gcu, ct, medi
            {
              if(payerlevel == 0) {
                if(isused == true) {
                  return res.json({Status: 400, message: "You have already used that onetime code."});
                }
              }
              if(payerlevel == 1) {
                console.log("payerlevel = ",payerlevel);
                let timeadded = codeResult.rows[0].timeadded;
                const parsedDate = new Date(timeadded);
                const currentDate = new Date();
                const millisecondsIn15Days = 15 * 24 * 60 * 60 * 1000;
                const differenceInMilliseconds = currentDate - parsedDate;
                // console.log("differenceInMilliseconds=", differenceInMilliseconds, "millisecondsIn15Days=", millisecondsIn15Days);
                if (differenceInMilliseconds > millisecondsIn15Days) {
                  var obj = {Status: 400, certificateid:lastelement, message: "The date of one time code has expired by 15 days"};
                  return res.json(obj);
                }
              }
            }
            else {
              let timeadded = codeResult.rows[0].timeadded;
              const parsedDate = new Date(timeadded);
              const currentDate = new Date();
              const millisecondsIn30Days = 30 * 24 * 60 * 60 * 1000;
              const differenceInMilliseconds = currentDate - parsedDate;
              console.log("differenceInMilliseconds=",differenceInMilliseconds,"millisecondsIn30Days=",millisecondsIn30Days);
              if (differenceInMilliseconds > millisecondsIn30Days) {
                var obj = {Status: 400, certificateid:lastelement, message: "The date of one time code has expired by 30 days"};
                return res.json(obj);
              }
            }
            console.log("documentid=",lastelement);       
            var obj = { Status: 200, certificateid:lastelement, message: "Success" };
            return res.json(obj);
          }
        }
        else if (code == "false") {
          if(documentid==null || documentid=="" || documentid==undefined) {
            return res.json({Status: 400, message: "Bad request."});
          }
          console.log("false false");
          let degreeQuery = format(`select c.id as studentid, a.firstname, a.middlename, a.lastname, a.emailaddress, b.accountid, b.cohortid, b.competencyname, a.studentid as studentmainid, c.signedcertificatepdfurl, c.signedcertificateurl, c.onetimeblockcertscode from ${tablenameforcerttype1} c left join student a on c.studentid=a.id left join cohort b on c.cohortid=b.id where c.signedcertificatepdfurl like '%${documentid}%'`);
          let degreeResult = await pool.query(degreeQuery);
          console.log(degreeQuery);
          if (degreeResult.rowCount > 0){
            let studentid = degreeResult.rows[0].studentid;
            let studentmainid = degreeResult.rows[0].studentmainid;
            let puserid = degreeResult.rows[0].accountid;
            let payerlevel=0;//0: student 1:verifier
            //if(puserid=="20122" || puserid=="25" || puserid=="20102" || puserid=="24")
            {
              payerlevel=1;
            }
            let cohortid = degreeResult.rows[0].cohortid;
            let pdfurl = degreeResult.rows[0].signedcertificatepdfurl;   
            let jsonurl = degreeResult.rows[0].signedcertificateurl;              
            if(jsonurl==null||jsonurl=="") continue;    
            let lastelement=jsonurl.split("/")[jsonurl.split("/").length-1];//jsonurl.split("/").pop();
            if(lastelement==null || lastelement==undefined) lastelement = "";
            lastelement = lastelement.replace(".json","");
            let onetimeblockcertscode = degreeResult.rows[0].onetimeblockcertscode;
            let onetimecode = "";
            // email = degreeResult.rows[0].emailaddress;
            while (true) {
              onetimecode = getOnetimecode(15);             
              let getExistStudent = format(`SELECT id FROM verifyrequest WHERE onetimecode='${onetimecode}';`);
              studentsforonetimecode = await pool.query(getExistStudent);
              if (studentsforonetimecode.rowCount == 0) {
                break;
              }
            }
            if (degreeResult.rows[0].firstname == null) degreeResult.rows[0].firstname = "";
            if (degreeResult.rows[0].middlename == null) degreeResult.rows[0].middlename = "";
            if (degreeResult.rows[0].lastname == null) degreeResult.rows[0].lastname = "";
            let fullname = `${degreeResult.rows[0].firstname} ${degreeResult.rows[0].middlename} ${degreeResult.rows[0].lastname}`.trim();
            let attachment_name="certificate";
            let insertQuery = format(`insert into verifyrequest (fullname, accountid, cohortid, studentid, pdfurl, payer_name, onetimecode,onetimeblockcertscode, designation, organization, email, contactnumber, payerlevel, documentid, transactionid, amountofpayment, enrollnumber, certificatetype) values ('${fullname}', '${puserid}', '${cohortid}', '${studentid}', '${pdfurl}','${payer_name}','${onetimecode}','${onetimeblockcertscode}', '${designation}', '${organization}','${receive_email}','${contactnumber}','${payerlevel}','${lastelement}', '${transactionid}', '${amountofpayment}', '${studentmainid}','${key1}') returning id`);
            if (puserid == "20103" || puserid == "32" ) {
              let status = false;
              amountofpayment = 0;
              let resErp = {data:  { status: 0, message: "Amount must be greater than zero.", data: null}};
              let currentTimeAdded = new Date();
              if (req.body.payHeader) {
                let payHeader = req.body.payHeader;
                console.log("QUERYING GATEWAY......")
                // let url = `https://smartgatewayuat.hdfcbank.com/orders/${transactionid}`; // UAT
                let url = `https://smartgateway.hdfcbank.com/orders/${transactionid}`; // prod
                let config = {method: 'get', url: url, headers: payHeader};
                try {
                  let reshdfc = await axios.request(config);
                  if ( reshdfc?.data?.status == "CHARGED" ) { // && (reshdfc?.data.payment_gateway_response?.resp_code == "Success" || reshdfc?.data.payment_gateway_response?.resp_message == "Transaction success"
                    console.log("Medicap Order Status Logs ===== : ", reshdfc?.data.order_id, reshdfc?.data?.amount, reshdfc?.data.payment_gateway_response?.resp_code, reshdfc?.data?.status);
                    if (reshdfc?.data?.amount >= 1 ) { // TODO make it 500
                      status = true;
                      // let erpUrl = "https://portal.medicaps.ac.in/MobileApp_MEDIU_Demo/api/CertOnce/GenerateCertOnceReceipt";
                      
                      let erpUrl = "https://portal.medicaps.ac.in/MobileApp_MEDIU/api/CertOnce/GenerateCertOnceReceipt";
                      let erpConfig = {
                        method: 'post', url: erpUrl, headers: {"Content-Type": "application/json"}, 
                        data: { verifierName: payer_name, designation: designation, organization: organization, emailID: receive_email,
                          contactNo: contactnumber, studentName: fullname, enrollmentNo: studentmainid, programName: "", programLevel: payerlevel, amount: reshdfc?.data?.amount,
                          transactionDate: template_module_1.formatDateString(currentTimeAdded, 'dd-MMM-yyyy'), transactionID: transactionid, key: "1D6F3793-FD44-4C52-8F09-506FD5D6DC6B"
                        }
                      };
                      console.log("Request sent to ERP.")
                      resErp = await axios.request(erpConfig);

                      console.log("ERP Response ===== : ", resErp.data);
                    }
                    amountofpayment = reshdfc?.data?.amount;
                  }
                } catch (err) {
                  console.log(err.message);
                }
              }
              if (!status) {
                console.log("STATUS NOT FOUND.")
                let insertResult = await pool.query(insertQuery);
                return res.json({ Status: 400, message: "Transaction was failed!", orderStatus: null });
              }
              let checkOrderExistingQuery = format(`select * from verifyrequest where transactionid = '${transactionid}';`);
              let checkOrderExistingResult = await pool.query(checkOrderExistingQuery);
              if (checkOrderExistingResult.rowCount > 0 ) {
                insertQuery = `update verifyrequest set fullname = '${fullname}', accountid = '${puserid}', cohortid = '${cohortid}', studentid = '${studentid}', status = ${status}, timeadded = '${template_module_1.formatDateString(currentTimeAdded.toString(), 'CURRENT_TIMESTAMP')}', pdfurl = '${pdfurl}', payer_name = '${payer_name}', onetimecode = '${onetimecode}', onetimeblockcertscode = '${onetimeblockcertscode}', designation = '${designation}', organization = '${organization}', email = '${receive_email}', contactnumber = '${contactnumber}', payerlevel = '${payerlevel}', documentid = '${lastelement}', amountofpayment = '${amountofpayment}', enrollnumber = '${studentmainid}', certificatetype = '${key1}', razorpay_payment_id = '${resErp?.data?.message}' where transactionid = '${transactionid}' RETURNING id;`;
              } else {
                insertQuery = format(`insert into verifyrequest (fullname, accountid, cohortid, studentid, status, timeadded, pdfurl, payer_name, onetimecode,onetimeblockcertscode, designation, organization, email, contactnumber, payerlevel, documentid, transactionid, amountofpayment, enrollnumber, certificatetype, razorpay_payment_id) values ('${fullname}', '${puserid}', '${cohortid}', '${studentid}', ${status}, '${template_module_1.formatDateString(currentTimeAdded.toString(), 'CURRENT_TIMESTAMP')}', '${pdfurl}','${payer_name}','${onetimecode}','${onetimeblockcertscode}', '${designation}', '${organization}','${receive_email}','${contactnumber}','${payerlevel}','${lastelement}', '${transactionid}', '${amountofpayment}', '${studentmainid}','${key1}', '${resErp?.data?.message}') returning id`);
              }
            }
            console.log(insertQuery);
            let insertResult = await pool.query(insertQuery);
            var smtpaccount = { 'type': true, 'username': "", 'clientid': "", 'clientsecret': "", 'refreshtoken': "", 'from': "" };
            var cc="";
            var querySmtp=format(`SELECT a.*, b.organization_name FROM setting a left join usermaster b on CAST(a.accountid AS INTEGER)=b.user_id where a.accountid='${puserid}';`);
            let smtpresult = await pool.query(querySmtp);
            if(smtpresult && smtpresult.rowCount > 0){
              organization_name = smtpresult.rows[0].organization_name;
              smtpaccount['type'] = smtpresult.rows[0].smtptype;
              smtpaccount['host'] = smtpresult.rows[0].smtphost;
              smtpaccount['port'] = smtpresult.rows[0].smtpport;
              smtpaccount['username'] = smtpresult.rows[0].smtpusername;
              smtpaccount['password'] = smtpresult.rows[0].smtppassword;
              smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
        
              smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
              smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
              smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
        
              smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
              smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
              cc=smtpresult.rows[0].smtpcc;             
            }
            var smtpcc=[];
            if(cc != "" && cc != null && cc !== undefined) { 
              smtpcc.push(cc);
            }            
            if(smtpcc.length>0) {                  
              smtpaccount['cc']=smtpcc.join(",");
            }
            var cert_email_subject = ""; 
            var email_body="";
            if (puserid =="20094") {
              cert_email_subject = `Official Certificate Verification from MIET`; 
              email_body=`<html><body>
                <p style="color:black;">Dear ${payer_name},</p><br>
                <p style="color:black;">Thank you for your verification request to officially verify the certificate of our student, ${fullname}.</p>
                <p style="color:black;">We are pleased to confirm and inform you that ${fullname}, has successfully completed the course requirements and has been awarded the ${competencyname} Certificate from MIET. We can confirm the authenticity of the certificate which has been duly issued by our Institute. The certificate has been attached to this email for your reference.</p>
                <p style="color:black;">Thank you for your interest in verifying the credentials of our student.</p>
                <p style="color:black;">Best Regards</p>
                <p style="color:black;">Model Institute of Engineering and Technology</p>
                </body></html>`;
            }
            else if(puserid == "20102" || puserid == "24") // gcu
            {
              cert_email_subject = `Verification Successful for ${fullname} from Garden City University`;
              email_body=`<p>
                <meta charset="utf-8">
                </p><p style="background-color:white;line-height:150%;margin:10.0pt 0in;"><span style="font-family:&quot;Cambria&quot;,serif;font-size:12.0pt;"><span style="line-height:150%;" lang="EN" dir="ltr">Dear ${payer_name},</span></span></p>
                
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for verifying student credentials from Garden City University. We have received your payment. Your dedication to ensuring accurate academic qualifications is highly valued. As part of the verification process, we are providing you with the one-time verification code below:</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">One Time Code:&nbsp;</span><span style="font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;"><strong>${onetimecode}</strong></span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We are pleased to confirm the student credentials for ${fullname} from Garden City University. This code is exclusively for verifying this student’s credentials and will remain valid for 15 days.&nbsp;</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">To complete the verification, please click on the following URL:&nbsp;</span></span><a style="text-decoration:none;" target="_blank" rel="noopener noreferrer" href="https://verify.gardencity.university/verify/${lastelement}"><span style="background-color:transparent;color:#1155cc;font-family:Cambria,serif;font-size:12pt;"><span style="-webkit-text-decoration-skip:none;font-style:normal;font-variant:normal;font-weight:400;text-decoration-skip-ink:none;vertical-align:baseline;white-space:pre-wrap;"><u>https://verify.gardencity.university/verify/${lastelement}</u></span></span></a></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">You will be redirected to a secure portal where you can enter the provided OTC.</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">If you have any questions or need further assistance, please feel free to contact us at [University number] or [University email address].</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Best Regards</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Registrar</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:10pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Garden City University</span></span></p>
                <p><img  src="https://www.certonce.com/images/GCU/gcu_logo.png" height="100px"></p>`;
            }
            else if(puserid == "20103" || puserid == "32") // medicaps
            {
              cert_email_subject = `Verification Successful for ${fullname} from Medi-Caps University`;
              email_body=`   <p>
                <meta charset="utf-8">
                </p><p style="background-color:white;line-height:150%;margin:10.0pt 0in;"><span style="font-family:&quot;Cambria&quot;,serif;font-size:12.0pt;"><span style="line-height:150%;" lang="EN" dir="ltr">Dear ${payer_name},</span></span></p>
                
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:10pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you for verifying student credentials from Medi-Caps University. We have received your payment. Your dedication to ensuring accurate academic qualifications is highly valued. As part of the verification process, we are providing you with the one-time verification code below:</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">One Time Code:&nbsp;</span><span style="font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;"><strong>${onetimecode}</strong></span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">We are pleased to confirm the student credentials for ${fullname} from Medi-Caps University. This code is exclusively for verifying this student’s credentials and will remain valid for 15 days.&nbsp;</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">To complete the verification, please click on the following URL:&nbsp;</span></span><a style="text-decoration:none;" target="_blank" rel="noopener noreferrer" href="https://verification.medicaps.ac.in/verify/${lastelement}"><span style="background-color:transparent;color:#1155cc;font-family:Cambria,serif;font-size:12pt;"><span style="-webkit-text-decoration-skip:none;font-style:normal;font-variant:normal;font-weight:400;text-decoration-skip-ink:none;vertical-align:baseline;white-space:pre-wrap;"><u>https://verification.medicaps.ac.in/verify/${lastelement}</u></span></span></a></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">You will be redirected to a secure portal where you can enter the provided OTC.</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">If you have any questions or need further assistance, please feel free to contact us at [University number] or [University email address].</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Thank you</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Best Regards</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:0pt;margin-top:0pt;padding:0pt 0pt 10pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Registrar</span></span></p>
                <p style="background-color:#ffffff;line-height:1.7999999999999998;margin-bottom:10pt;margin-top:0pt;" dir="ltr"><span style="background-color:transparent;color:#000000;font-family:Cambria,serif;font-size:12pt;"><span style="font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;">Medi-Caps University</span></span></p>
                <p><img  src="https://www.certonce.com/images/MEDI/medi_logo.png" height="100px"></p>`;
            }
            else if(puserid=="20122" || puserid=="25")//rv
            {
              pdfurl=`https://documentverification.rvce.edu.in/pdf/${lastelement.replace(".json","")}`;
              jsonurl=`https://documentverification.rvce.edu.in/certificate/${lastelement.replace(".json","")}`;
              cert_email_subject = `Verification Successful for ${fullname} from RVCE`;
              email_body=`<html><body>
                <p style="color:black;">Dear ${payer_name},</p>
                <p style="color:black;">Thank you for verifying student credentials from RVCE. We have received your payment. </p>
                <p style="color:black;">Your dedication to ensuring accurate academic qualifications is highly valued.</p>                
                <p style="color:black;">As part of the verification process, we are providing you with the one-time verification code below:</p>
                <p style="color:black;">One Time Code: <span style ="font-weight:bold;">${onetimecode}</span></p>
                <p style="color:black;">We are pleased to confirm the student credentials for ${fullname} from RVCE.</p>
                <p style="color:black;">This code is exclusively for verifying this student’s credentials and will remain valid for 15 days.</p>
                <p style="color:black;">To complete the verification, please click on the following URL:</p>
                <p style="color:black;"><a href="https://documentverification.rvce.edu.in/verify/${documentid}">https://documentverification.rvce.edu.in/verify/${documentid}</a></p>
                <p style="color:black;">You will be redirected to a secure portal where you can enter the provided OTC.</p>
                <p style="color:black;">If you have any questions or need further assistance, please feel free to contact us at 080-68188132 or coe1@rvce.edu.in.</p>                
                <p style="color:black;">Thank you</p>     
                <p style="color:black;">Best Regards</p>
                <p style="color:black;">Controller of Examiniations</p>
                <p style="color:black;">RV College of Engineering, Bangalore</p>
                </body></html>`;
            }
            else if (puserid =="20131" || puserid =="29") //snu
            {              
              cert_email_subject = `Verification Successful for ${fullname} from Shiv Nadar (Institution of Eminence Deemed to be University)`;
              email_body=`<html><body>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">Dear ${payer_name},</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">Thank you for verifying student credentials from Shiv Nadar (Institution of Eminence Deemed to be University). We have received your payment. Your dedication to ensuring accurate academic qualifications is highly valued. As part of the verification process, we are providing you with the one-time verification code below:</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">One Time Code:&nbsp;</span><strong><span style="font-family:Cambria;line-height:150%;font-size:16px;">${onetimecode}</span></strong></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">We are pleased to confirm the student credentials for ${fullname} from Shiv Nadar (Institution of Eminence Deemed to be University). This code is exclusively for verifying this student&rsquo;s credentials and will remain valid for 15 days.&nbsp;</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">To complete the verification, please click on the following URL:&nbsp;</span><a href="${verification_portal_url}"><u><span style="font-family:Cambria;line-height:150%;color:rgb(17,85,204);text-decoration:underline;font-size:16px;">${verification_portal_url}</span></u></a><span style="font-family:Cambria;line-height:150%;font-size:16px;">&nbsp;</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">You will be redirected to a secure portal where you can enter the provided OTC.</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">If you have any questions or need further assistance, please feel free to contact us at 0120-7170638/854/749/811 or&nbsp;</span><u><span style="font-family:Cambria;line-height:150%;color:rgb(17,85,204);text-decoration:underline;font-size:16px;">registraroffice@snu.edu.in</span></u><span style="font-family:Cambria;line-height:150%;font-size:16px;">.</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">Thank you</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">Best Regards</span></p>
              <p style="margin-top:10pt; margin-bottom: 10pt;line-height:150%;background:rgb(255,255,255);"><span style="font-family:Cambria;line-height:150%;font-size:16px;">Registrar</span></p>
              <img src="https://www.certonce.com/images/snu/snulogo.png" style="width:300px;" />
              </body></html>`;
            }
            else
            {              
              cert_email_subject = `Your One Time Code for Blockchain Certificate Verification for ${fullname}`;
              email_body=`<html><body>
                <p style="color:black;">Dear ${payer_name},</p>
                <p style="color:black;">We are pleased to provide you with your one-time code for verification of the blockchain certificate for ${fullname} from ${organization_name}.</p>
                <p style="color:black;">This code is unique and can be used to confirm the authenticity of the Blockchain certificate.</p>                
                <p style="color:black;">Please keep this one-time code confidential to maintain the security of the student’s certificate.</p>
                <p style="color:black;">Your OneTimeCode is: <span style ="font-weight:bold;">${onetimecode}</span></p>
                <p style="color:black;">Add the URL: ${verification_portal_url} on your web browser and enter your OneTimeCode</p>
                <p style="color:black;">If you have any questions and require any further assistance, please do not hesitate to contact us at university@email.ac.in</p>
                <p style="color:black;">Thank you for verifying our student’s certificate.</p>     
                <p style="color:black;">Best Regards</p>
                <p style="color:black;">${organization_name}</p>
                </body></html>`;
            }
            console.log("puserid=",puserid);   
                  
            const mailer_sendcertificate = require("../../config/mailer_verifyrequest");
            let logfilename = logfiledir + puserid + "/verifyrequest.log";            
            let attachment_files = [];               
            if(smtpaccount['isoffice365']==undefined || smtpaccount['isoffice365']==null || smtpaccount['isoffice365']==0) {
              attachment_files.push({path: jsonurl,filename:`${attachment_name}.json`});
              attachment_files.push({path: pdfurl,filename:`${attachment_name}.pdf`});     
            } else {
              let pdfBase64 = await fileToBase64(pdfurl);    
              attachment_files.push({
                "@odata.type": "#microsoft.graph.fileAttachment",
                "Name": `${attachment_name}.pdf`,
                "ContentType": "application/pdf",
                "ContentBytes": pdfBase64,
                "IsInline": false
              });

              let jsonBase64 = await fileToBase64(jsonurl);
              attachment_files.push({
                "@odata.type": "#microsoft.graph.fileAttachment",
                "Name": `${attachment_name}.json`,
                "ContentType": "application/json",
                "ContentBytes": jsonBase64,
                "IsInline": false
              });
            }
            let mailer_result = await mailer_sendcertificate(email_body, cert_email_subject, receive_email, smtpaccount, attachment_files, logfilename, insertResult.rows[0].id);
            if (mailer_result.status == "400"){
              const mailer_certonce = require("../../config/mailer_certonce");
              let logfilename=logfiledir+puserid+"/sendcertificate.log";
              let email_body = `<p style="color: black;">There is an error in sending onetime code. </p>
              <p style="color: black;">Account: ${puserid}</p>
              <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
              let email_subject = "Sending onetime code";
              mailer_certonce(email_body, email_subject, "meenoy@certonce.com", logfilename);              
            }
            res.cookie('certificateid', documentid, { maxAge: 900000, httpOnly: true });
            return res.json({ Status: 200, message: "Success" });
          }
        }        
      }
      loopcount  = Object.keys(certtypes).length;
    }

    if (code == "true" && category=="0") { // Student
      var obj = { Status: 400, message: "The One time code you have entered is incorrect.Please enter the correct one time code for the student."};
      return res.json(obj);
    } else if (code == "true" && category=="1") {
      var obj = { Status: 400, message: "The One time code you have entered is incorrect.Please enter the correct one time code for the verifier." };
      return res.json(obj);
    }

    if (code == "true") {
      return res.json({ Status: 400, message: "Please check your entered one time code" });
    } else {
      return res.json({ Status: 400, message: "Invalid Certificate."});
    }    
  }
  catch(err){
    console.log(err.message);
    return res.json({ Status: 400, message: err.message });
  }
}

async function readyForGenerate(dir_id)
{  
    var os = new os_func();
    var workdir=homedir+"/workdir/education/"+dir_id;
    var returnjson={
          "workdir":workdir,
          "confpath":workdir+"/conf.ini",
          "certtemplatefullpath":workdir+"/sample_data/certificate_templates/test.json",
          "receipientsfilepath":workdir+"/sample_data/rosters/roster_testnet.csv",
          "unsignedcertificatetemppath":workdir+"/sample_data/unsigned_certificates/",
          "qrcodepath": workdir+"/sample_data/qrcode/"
    };
    if (!await fs.existsSync(workdir))
    {
      try{     
        await os.execCommand('mkdir -p '+workdir);
        await os.execCommand('cp -r '+homedir+'/workdir/sample_data '+workdir);
        await os.execCommand('cp -r '+homedir+'/workdir/conf.ini '+workdir);        
        return returnjson;
      }
      catch{
        return false;
      }
    }
    // else
    // {
    //     // console.log(returnjson.unsignedcertificatetemppath); 
    //     // var empty = extfs.isEmptySync(returnjson.unsignedcertificatetemppath);
    //     // extfs.isEmptySync(returnjson.qrcodepath);
    //     // if(empty==false) return true;
        
    // }
    return returnjson;
}

// bake openbadges
async function bake(s3obj, bucket_region, bucket_name, imageToBake, openbadges_content, bakedImage,collegeid,glcohortid,studentid) {
  try {
    fs.createReadStream(imageToBake)
      .on('end',async function () {
          //var baked_bucket_url=await uploadOpenBadgesFile(collegeid,glcohortid,bakedImage,true);
              //var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificateurl = '${baked_bucket_url}'  WHERE cohortid = '${glcohortid}' and id=${studentid}`);
          //var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificateurl = '${baked_bucket_url}' WHERE  id=${studentid}`);
          //await pool.query(updatesql);
      })
      .pipe(pngitxt.set('openbadges', openbadges_content))
      .pipe(fs.createWriteStream(bakedImage)
          .on('finish',async function () {
            var baked_bucket_url=await uploadOpenBadgesFile(s3obj, bucket_region, collegeid,glcohortid,bakedImage, bucket_name,true);
                //var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificateurl = '${baked_bucket_url}'  WHERE cohortid = '${glcohortid}' and id=${studentid}`);
            //var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificateurl = '${baked_bucket_url}' WHERE  id=${studentid}`);
            //await pool.query(updatesql);
          })
        );
  } catch (error) {
    console.log(error);
  }       
}

async function apibake(imageToBake, openbadges_content, bakedImage,badgekey) {
  try {
    //*
    fs.createReadStream(imageToBake)
          .on('end',async function () {
            //var status=await uploadOpenBadgesObject(badgekey,bakedImage,true);
          })
          .pipe(pngitxt.set('openbadges', openbadges_content))
          .pipe(fs.createWriteStream(bakedImage)
            .on('finish',async function () {
              var status=await uploadOpenBadgesObject(badgekey,bakedImage,true);
            })
          );
    
  } catch (error) {
     console.log(error)
  }
}

async function aa()
{
  var filename="/var/www/openbadges/baked/101/4/standard_badge_file.png";
  var baked_filename="/var/www/openbadges/baked/101/4/new_baked.png";
  var badge_content={};
  badge_content["@context"]="https://w3id.org/openbadges/v2";
  badge_content["id"]= myip + "/aa.json";
  badge_content["type"]="Assertion";
  badge_content["verification"]={};
  badge_content["verification"]["type"]="hosted";
  await bake(filename, JSON.stringify(badge_content), baked_filename)
}

async function getStudentInfoFromName(cohortid, studentid,tablename)
{
  try {
    var searchQuery = format(`SELECT id,onetimeblockcertscode FROM ${tablename} WHERE cohortid='${cohortid}' and studentid='${studentid}'`);
    var students = await pool.query(searchQuery);
    var retjson={};
    retjson.id=students.rows[0].id;
    retjson.onetimeblockcertscode=students.rows[0].onetimeblockcertscode;
    return retjson;
  } catch (error) {
    return null; 
  }  
}
async function getChortidFromCohortAndCompetency(cohortid, competencyname, accountid)
{
  try {
    var searchQuery = format(`select * from cohort where cohortid='${cohortid}' and competencyname='${competencyname}' and accountid='${accountid}'`);
    console.log(searchQuery)    
    var cohort = await pool.query(searchQuery);
    return cohort.rows[0].id;
  } catch (error) {
    return null; 
  }  
}
async function getUserIDFromApiKey(apikey)
{  
  try 
  {
    //console.log("apikey=", decodeURIComponent(apikey));
    let decdata= await decrypt(decodeURIComponent(apikey));   
    return decdata;
  }
  catch(ex)
  {
    console.log(ex);
    return null;
  }
}


async function getUnBakedImage(accountid, cohortid, competencyname)
{
  try {
    var searchQuery = format(`SELECT imagetobake FROM bakeimages WHERE accountid='${accountid}' and cohortid='${cohortid}' and competencyname='${competencyname}'`);
    var imagetobake = await pool.query(searchQuery);
    var retjson={};
    return imagetobake.rows[0].imagetobake;
  } catch (error) {
    return null; 
  }  
}

user.apiverify = async (req,res, next) => {  
  try {
      
      var certcontent=req.body.certcontent; 
      var certfilename=req.body.certfilename; 
      var os = new os_func();
      var jsonfrompdfpath="/var/www/html/pdfjson/";
      if (!fs.existsSync(jsonfrompdfpath))
      {
          await os.execCommand('sudo mkdir -p "'+jsonfrompdfpath+'"');
          await os.execCommand('sudo chmod -R 777 "'+jsonfrompdfpath+'"');
      }    
      fs.writeFileSync(jsonfrompdfpath+certfilename+".json", certcontent, {flag: 'w'});
      //console.log("request parameter"+JSON.stringify(req.body));
      //res.send("success");
      var obj = {
            Status: 200,
              message: "Success"
          };
      res.json(obj);
      
      return;
  } catch (error) {  
    console.log("apiverify=",error);  
  }
  
}  

user.apiGetCertificate = async (req,res, next) => {
  
  var api_key=req.headers.apikey;  
  var cohortid=req.headers.cohortid;
  var competencyname=req.headers.competencyname;
  var firstname=req.headers.firstname;
  var middlename=req.headers.middlename;
  var lastname=req.headers.lastname;
  var email=req.headers.email;
  var signedcertificatepdfurl="";
  //console.log(req) 
  if(cohortid=="" ||  cohortid==undefined || cohortid==null || competencyname=="" || competencyname==null ||  competencyname==undefined || email=="" || email==null  ||  email==undefined || 
  api_key=="" || api_key==null ||  api_key==undefined || ((firstname=="" || firstname==null ||  firstname==undefined) && (middlename=="" || middlename==null ||  middlename==undefined) && (lastname=="" || lastname==null ||  lastname==undefined)))
  {
      var obj = {
            Status: 400,
              message: "Invalid request parameter"
          };
      res.json(obj);
      return;
  }
  if(firstname=="" || firstname==null ||  firstname==undefined) firstname="";
  if(middlename=="" || middlename==null ||  middlename==undefined) middlename="";
  if(lastname=="" || lastname==null ||  lastname==undefined) lastname="";

  try
  {
    var studentid=null;
    var userid=await getUserIDFromApiKey(api_key); 
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }     
    var puserid=await getParentAccountIdFromId(userid); 
    var cohort_id=await getChortidFromCohortAndCompetency(cohortid, competencyname, puserid);
    if(cohort_id=="" || cohort_id==null)
    {
      var obj = {
            Status: 400,
              message: "There is no selected cohortid"
          };
      res.json(obj);
      return; 
    }

    var getExistStudent = format(`SELECT id FROM STUDENT WHERE LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}';`);
    console.log(getExistStudent);
    students = await  pool.query(getExistStudent);
    if (students.rowCount > 0) {
        studentid = students.rows[0].id;
    }
    else
    {
      var obj = {
            Status: 400,
            message: "There is no registered recipient"
        };
        res.json(obj);
        return;
    }
    
    var getCertificate=format(`SELECT * FROM cohortmembers_degree WHERE cohortid='${cohort_id}' and studentid='${studentid}';`);
    console.log(getCertificate);
    certresult = await  pool.query(getCertificate);
    if (certresult.rowCount > 0) {
        signedcertificatepdfurl = certresult.rows[0].signedcertificatepdfurl;
    }
    else
    {
      var obj = {
            Status: 400,
            message: "There is no registered recipient-1"
        };
        res.json(obj);
        return;
    }
    if(signedcertificatepdfurl!="" && signedcertificatepdfurl!=null)
    {
      var pdfurl=myip+subwwwurl+"/certificatepdf/";
      var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];                          
      var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];
      var pdfid=pdflastelement.replace(".pdf","");
      signedcertificatepdfurl=pdfurl+pdfcollegeid+"/"+pdfid;
    }
    /*
    var obj = {
          Status: 200,
          pdf: signedcertificatepdfurl
        };
    res.json(obj);
    //*/
    let pdfBuffer = await request_native.get({uri: signedcertificatepdfurl, encoding: null});
    res.setHeader('Content-disposition', 'attachment; filename=certificate.pdf');
    res.setHeader('Content-type', 'application/pdf');
    console.log("Writing PDF file to client");
    res.send(pdfBuffer);
  } 
  catch(err)
  {
    var obj = {
          Status: 200,
          pdf: err
        };
    res.json(obj);
  }
}


user.apiRegisterStudent = async (req,res, next) => {
  
  var api_key=req.body.apikey;  
  var cohortid=req.body.cohortid;
  var competencyname=req.body.competencyname;
  var firstname=req.body.firstname;
  var middlename=req.body.middlename;
  var lastname=req.body.lastname;
  var email=req.body.email;
  
  if(cohortid=="" ||  cohortid==undefined || cohortid==null || competencyname=="" || competencyname==null ||  competencyname==undefined || email=="" || email==null  ||  email==undefined || 
  api_key=="" || api_key==null ||  api_key==undefined || ((firstname=="" || firstname==null ||  firstname==undefined) && (middlename=="" || middlename==null ||  middlename==undefined) && (lastname=="" || lastname==null ||  lastname==undefined)))
  {
      var obj = {
            Status: 400,
              message: "Invalid request parameter"
          };
      res.json(obj);
      return;
  }
  if(firstname=="" || firstname==null ||  firstname==undefined) firstname="";
  if(middlename=="" || middlename==null ||  middlename==undefined) middlename="";
  if(lastname=="" || lastname==null ||  lastname==undefined) lastname="";
  try {    
    //var napikey=await getApiKeyFromUserID("1");
    var userid=await getUserIDFromApiKey(api_key);
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }      
    var puserid=await getParentAccountIdFromId(userid); 
    var cohort_id=await getChortidFromCohortAndCompetency(cohortid, competencyname, puserid);
    if(cohort_id=="" || cohort_id==null)
    {
      var obj = {
            Status: 400,
              message: "There is no selected cohortid"
          };
      res.json(obj);
      return; 
    }
    var studentid=null

    var addStudentQuery = format(`INSERT INTO STUDENT (firstname,middlename,lastname,emailaddress,accountid)
                            SELECT '${firstname}','${middlename}', '${lastname}', '${email}','${puserid}'
                            WHERE NOT EXISTS (SELECT 1 FROM STUDENT WHERE  LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}')
                            RETURNING id;`);
      students = await pool.query(addStudentQuery);
      if (students.rowCount > 0) {
          studentid = students.rows[0].id;
      } 
    else {
          var getExistStudent = format(`SELECT id FROM STUDENT WHERE LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}';`);
          students = await  pool.query(getExistStudent);
          if (students.rowCount > 0) {
              studentid = students.rows[0].id;
          }
    }
    
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var studentsforonetimecode;                      
    var onetimecode="";
    var loopcount=0; 
    while(loopcount!==Object.keys(certtypes).length)
    {
      onetimecode = getOnetimecode(8);
      loopcount=0;
      for (const key in certtypes){         
          var tablenameforcerttype = certtypes[key];                            
          let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
          studentsforonetimecode = await pool.query(getExistStudent);
          if (studentsforonetimecode.rowCount == 0) {                                
              loopcount++;
          }
        }
    }
    
    var addPivotQuery = format(`INSERT INTO cohortmembers_degree (cohortid,studentid,onetimeblockcertscode)
        SELECT '${cohort_id}','${studentid}','${onetimecode}' WHERE NOT EXISTS ( SELECT 1 FROM cohortmembers_degree WHERE cohortid='${cohort_id}' and studentid='${studentid}');`);
    await pool.query(addPivotQuery);
    
    var studentinfo=await getStudentInfoFromName(cohort_id,studentid,"cohortmembers_degree");
    if(studentinfo==null)
    {
       var obj = {
            Status: 400,
              message: "Error"
          };
        res.json(obj);
        return;
    }
    console.log(studentinfo.id);
    console.log(studentinfo.onetimeblockcertscode);
   
    
    
    var obj = {
          Status: 200,
          message: "Success"
        };
    res.json(obj);
    


  } catch (error) {
    var obj = {
            Status: 400,
              message: error
          };
      res.json(obj);
      return;
  }  
  
}


async function getChortidFromCohortInfo(cohortname, cohortid, competencyname, competencystartdate, competencyenddate, accountid, country)
{
  try 
  {
      var cohortId=null;
      var addCohortGroupQuery = format(`INSERT INTO COHORT_GROUP (name, cohortid,accountid)
                          SELECT '${cohortname}', '${cohortid}', '${accountid}' WHERE NOT EXISTS ( SELECT 1 FROM COHORT_GROUP where cohortid='${cohortid}' AND name='${cohortname}' AND accountid='${accountid}')
                          RETURNING id;`);
      cohortgroups = await pool.query(addCohortGroupQuery);
      
      var addCohortQuery = format(`INSERT INTO COHORT (accountid,cohortid,name,competencyname,competencystartdate,competencyenddate,country)
                          SELECT '${accountid}','${cohortid}','${cohortname}', '${competencyname}', '${competencystartdate}','${competencyenddate}','${country}'
                          WHERE NOT EXISTS ( SELECT 1 FROM COHORT WHERE cohortid='${cohortid}' AND competencyname='${competencyname}' AND accountid='${accountid}')
                          RETURNING id;`);      
      
      cohorts = await pool.query(addCohortQuery);
      if (cohorts.rowCount > 0) {
          cohortId = cohorts.rows[0].id;
      } else {
        let getExistCohort = format(`SELECT id FROM COHORT WHERE cohortid='${cohortid}' AND competencyname='${competencyname}' AND accountid='${accountid}';`);
        cohorts = await pool.query(getExistCohort);
        cohortId = cohorts.rows[0].id;
      }

      return cohortId;      
    
  }
  catch (err)
  {
    return null;
  }
}

user.getAllCohortsFromApiKey = async (req,res, next) => {
  try
  {
    var api_key=req.body.apikey;
    var userid=await getUserIDFromApiKey(api_key); 
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }
    var puserid=await getParentAccountIdFromId(userid);
    var cohortData=[];      
    var cohortQuery = format(`select distinct on (cohortid) * from cohort where accountid='${puserid}'`);
    var defaultCohort="";
    var cohortindex=0;
    var cohorts = await pool.query(cohortQuery);
    if ( cohorts.rowCount > 0 ) 
    {
      for ( const row of cohorts.rows ) 
      {
        if(row['cohortid']=="" || row['cohortid']==null) continue;
        let competencyQuery = format(`select competencyname from cohort where cohortid='${row['cohortid']}' and accountid='${puserid}'`);
        let competencies = await pool.query(competencyQuery);
        if(cohortindex==0) defaultCohort=row['cohortid'];
        let competencyData=[];
        if ( competencies.rowCount > 0 ) 
        {
          for ( const cmtrow of competencies.rows ) 
          {
            if(cmtrow['competencyname']=="" || cmtrow['competencyname']==null) continue;          
            competencyData.push(cmtrow['competencyname']);         
          }
        }
        cohortData.push({
                  'cohortname' : row['name'],
                  'cohortid' : row['cohortid'],
                  'competencyname':competencyData
              });
        cohortindex++;      
      }
    }
    var obj = {
        Status: 200,
        message: 'Success',
        Data: cohortData
        
    }
    res.json(obj);
    return;  
  }
  catch(err)
  {
    var obj = {
        Status: 400,
          message: err.message
      };
    res.json(obj);
  }
  
}

user.createCohortWithStudents = async (req, res, next) => {
  try 
  {
    console.log("Requested API call");
    var api_key = req.body.apikey;
    var cohortname = req.body.cohortname;    
    var cohortid = req.body.cohortid;
    var competencyname = req.body.coursename;
    if (competencyname == null || competencyname == undefined) competencyname = "";
    var competencystartdate = req.body.coursestartdate;
    var competencyenddate = req.body.courseenddate;
    var competencydetail = req.body.competencydetail;
    var country = req.body.country;
    var istranscript = req.body.istranscript;  
   
   

    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};

    var cohorttablename="cohortmembers_degree";    
    var selectedcerttypeid = req.body.certificatetype; 
    if(selectedcerttypeid == "" || selectedcerttypeid == undefined || selectedcerttypeid == null) selectedcerttypeid = "degree";  
    selectedcerttypeid=selectedcerttypeid.trim();
    cohorttablename=certtypes[selectedcerttypeid];

    if (istranscript == undefined || typeof istranscript === 'undefined' || istranscript == null) istranscript = false;

    if (country == undefined || typeof country === 'undefined') {
      country = "";
    }

    if (api_key == "" || api_key == null || api_key == undefined) {
      var obj = {
        Status: 400,
        message: "Invalid API Key"
      };
      res.json(obj);
      return;
    }
    var userid = await getUserIDFromApiKey(api_key);
    console.log("createCohortWithStudents=", userid);
    if (userid == null) {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }

    var puserid = await getParentAccountIdFromId(userid);

    var smtpaccount = {
      'type' : true,
      'username' : "", 
      'clientid' : "",
      'clientsecret' : "",
      'refreshtoken' : "",
      'from': ""
    };
    
    var organization_name = "";
    var contact_email = "";   
    var querySmtp = format(`SELECT * FROM setting  where accountid='${puserid}';`);
    console.log(querySmtp);
    let smtpresult = await pool.query(querySmtp);

    if(smtpresult && smtpresult.rowCount > 0){
      smtpaccount['type'] = smtpresult.rows[0].smtptype;
      smtpaccount['host'] = smtpresult.rows[0].smtphost;
      smtpaccount['port'] = smtpresult.rows[0].smtpport;
      smtpaccount['username'] = smtpresult.rows[0].smtpusername;
      smtpaccount['password'] = smtpresult.rows[0].smtppassword;
      smtpaccount['from'] = smtpresult.rows[0].smtpfrom;

      smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
      smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
      smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;

      smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
      smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
      
      contact_email = smtpresult.rows[0].contact_email;      
      if (contact_email == null || contact_email == undefined) contact_email = "";
      if (contact_email == ""){
        var obj = {
          Status: 400,
          message: `Contact Email is not defined. Please set contact email in /My PROFILE/Setting/CONTACT INFORMATION`
        };
        return res.json(obj);
      }      
    }
    else {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }
    
    
    smtpaccount['cc'] = ["meenoy@certonce.com", "pawan.khurana@certonce.com", "bernetta.lobo@certonce.com"];
    var queryOrg = format(`SELECT * FROM usermaster WHERE user_id=${puserid}`);
    let orgresult = await pool.query(queryOrg);
    if (orgresult && orgresult.rowCount > 0) {
      organization_name = orgresult.rows[0].organization_name;
      //organization_verify_uri = orgresult.rows[0].organization_verify_uri;
      // temp_user['organization_verify_uri'] = orgresult.rows[0].organization_verify_uri;
      // temp_user['blockchain'] = orgresult.rows[0].blockchain;
      // temp_user['user_id'] = orgresult.rows[0].user_id;
      // temp_user['country'] = country;
      // temp_user['organization_name'] = orgresult.rows[0].organization_name;
      // temp_user['isAPI'] = 1;
    }
    logfilename ="/home/ubuntu/logs/"+puserid+"/createCohortWithStudents.txt"
    var logdirpath = path.dirname(logfilename);    
    if (!fs.existsSync(logdirpath))
    {
        await os.execCommand('sudo mkdir -p "'+logdirpath+'"');
        await os.execCommand('sudo chmod -R 777 "'+logdirpath+'"');
    }
    var today = new Date();    
    fs.appendFileSync(logfilename, '\nStart section on '+today + '\n');    
    fs.appendFileSync(logfilename, JSON.stringify(req.body));    
    fs.appendFileSync(logfilename, '\nEnd section on '+today + '\n');    
    if(istranscript){
      var transcriptdata = req.body.transcriptdata;
      var successcount = 0;
      transcriptdata = change_excel_column_name_for_student(transcriptdata);
      for (let index = 0; index < transcriptdata.length; index++){
        var studentid = transcriptdata[index].studentid;
        if (studentid == null || studentid == undefined) studentid = "";
        studentid = studentid.toString();
        studentid = studentid.trim();
        var cohortid = transcriptdata[index].cohortid;
        if (cohortid == null || cohortid == undefined) cohortid = "";
        cohortid = cohortid.toString();
        cohortid = cohortid.trim();
        cohortid = cohortid.replace("'", "`")
        if(studentid == "" || cohortid == ""){
          var obj = {
            Status: 400,
            message: "Invalid request parameters."
          };
          res.json(obj);
          return;
        }
        var cgpa = transcriptdata[index].cgpa;
        if (cgpa == null || cgpa == undefined) cgpa = "";
        var cpi = transcriptdata[index].cpi;
        if (cpi == null || cpi == undefined) cpi = "";
        var specializationone = transcriptdata[index].specializationone;
        if (specializationone == null || specializationone == undefined) specializationone = "";
        var specializationtwo = transcriptdata[index].specializationtwo;
        if (specializationtwo == null || specializationtwo == undefined) specializationtwo = "";
        var modeofdelivery = transcriptdata[index].modeofdelivery;
        if (modeofdelivery == null || modeofdelivery == undefined ) modeofdelivery = "";
        var mediumofstudy = transcriptdata[index].mediumofstudy;
        if (mediumofstudy == null || mediumofstudy == undefined) mediumofstudy = "";
        var preparedby = transcriptdata[index].preparedby;
        if (preparedby == null || preparedby == undefined) preparedby = "";
        var verifiedby = transcriptdata[index].verifiedby;
        if (verifiedby == null || verifiedby == undefined) verifiedby = "";
        var serialnumber = transcriptdata[index].serialnumber;
        if (serialnumber == null || serialnumber == undefined) serialnumber = "";
        serialnumber = serialnumber.toString();
        serialnumber = serialnumber.trim();
        var semesternumber = transcriptdata[index].semesternumber;
        if (semesternumber == null || semesternumber == undefined) semesternumber = "";
        var subjecttype = transcriptdata[index].subjecttype;
        if (subjecttype == null || subjecttype == undefined) subjecttype = "";
        var subjectname = transcriptdata[index].subjectname;
        if (subjectname == null || subjectname == undefined) subjectname = "";
        var marks = transcriptdata[index].marks;
        if (marks == null || marks == undefined) marks = "";
        var credit = transcriptdata[index].credit;
        if (credit == null || credit == undefined) credit = "";
        var grade = transcriptdata[index].grade;
        if (grade == null || grade == undefined) grade = "";
        var point = transcriptdata[index].point;
        if (point == null || point == undefined) point = "";
        var other1 = transcriptdata[index].other1;
        if (other1 == null || other1 == undefined) other1 = "";
        var other2 = transcriptdata[index].other2;
        if (other2 == null || other2 == undefined) other2 = "";
        var other3 = transcriptdata[index].other3;
        if (other3 == null || other3 == undefined) other3 = "";
        var other4 = transcriptdata[index].other4;
        if (other4 == null || other4 == undefined) other4 = "";
        var other5 = transcriptdata[index].other5;
        if (other5 == null || other5 == undefined) other5 = "";
        var other6 = transcriptdata[index].other6;
        if (other6 == null || other6 == undefined) other6 = "";

        var dateofissue = transcriptdata[index].dateofissue;      
        if (dateofissue == null || dateofissue == undefined) dateofissue = "";
        if (dateofissue != "") {
          //console.log(xlsxsdateofissue);
          var isodate = getIso8601TimeForIssue(dateofissue + " UTC");
          if (isodate !== "NaN-NaN-NaNTNaN:NaN:NaN-NaN:NaN") {
            console.log("Incorrect date format!", dateofissue);
            if (dateofissue.split("/").length > 2) {
              dateofissue = dateofissue.split("/")[1] + "/" + dateofissue.split("/")[0] + "/" + dateofissue.split("/")[2];
            }
            //xlsxsdateofissue=isodate;
          }
          if (dateofissue.split("-").length > 2 && dateofissue.indexOf("T") == -1) {
            dateofissue = dateofissue.split("-")[2] + "/" + dateofissue.split("-")[1] + "/" + dateofissue.split("-")[0];
          }
          if (dateofissue.split("-").length > 2 && dateofissue.indexOf("T") !== -1) {
            dateofissue = dateofissue.split("T")[0];
            dateofissue = dateofissue.split("-")[2] + "/" + dateofissue.split("-")[1] + "/" + dateofissue.split("-")[0];
          }
        }

        cgpa = cgpa.replace("'", "`");
        cpi = cpi.replace("'", "`");
        specializationone = specializationone.replace("'", "`");
        specializationtwo = specializationtwo.replace("'", "`");
        modeofdelivery = modeofdelivery.replace("'", "`");
        mediumofstudy = mediumofstudy.replace("'", "`");
        dateofissue = dateofissue.replace("'", "`");
        preparedby = preparedby.replace("'", "`");
        verifiedby = verifiedby.replace("'", "`");
        semesternumber = semesternumber.replace("'", "`");
        subjecttype = subjecttype.toString().replace("'", "`");
        subjectname = subjectname.replace("'", "`");

        var addSemesterQuery = format(`INSERT INTO SEMESTERTRANSCRIPT (cohortid,studentid,semesternumber,subjecttype,subjectcode,marks,credit,grade,point,accountid)
                                      SELECT '${cohortid}','${studentid}','${semesternumber}','${subjecttype}', '${subjectname}', '${marks}','${credit}','${grade}','${point}','${puserid}' on conflict (accountid, cohortid, studentid, semesternumber, subjecttype, subjectcode) do update set cohortid='${cohortid}' RETURNING id;`);

        await pool.query(addSemesterQuery);

        var addTranscriptDescribeQuery = format(`INSERT INTO transcriptdescribe (cohortid,studentid, semesternumber, cgpa,cpi,specializationone,specializationtwo,modeofdelivery,mediumofstudy,dateofissue,preparedby,verifiedby,accountid,other1,other2,other3,other4,other5,other6)
                                          SELECT '${cohortid}','${studentid}','${semesternumber}','${cgpa}','${cpi}','${specializationone}','${specializationtwo}', '${modeofdelivery}', '${mediumofstudy}','${dateofissue}','${preparedby}','${verifiedby}','${puserid}','${other1}','${other2}','${other3}','${other4}','${other5}','${other6}' on conflict (accountid, cohortid, studentid, semesternumber) do update set cohortid='${cohortid}'  RETURNING id;`);
        // console.log(addTranscriptDescribeQuery);
        await pool.query(addTranscriptDescribeQuery);
        successcount++;
      }
    }
    else{
      if (cohortname == "" || cohortname == undefined || cohortname == null ||
        cohortid == "" || cohortid == undefined || cohortid == null) {
        var obj = {
          Status: 400,
          message: "Invalid request parameters"
        };
        res.json(obj);
        return;
      } 
      // console.log(req.body);
      if (puserid == 20027 && country == "") {
        var obj = {
          Status: 400,
          message: "Invalid requests parameter for country."
        };
        res.json(obj);
        return;
      }
      if(puserid == "20088" || puserid == "20") //ljku spr
      {
        var templatetype = req.body.templatetype;
        if (templatetype == null || templatetype == undefined ) templatetype="";        
        var awsinfo=await getS3BucketInformation(puserid);

        var pdfurl = req.body.pdfurl;
        if(pdfurl!=null && pdfurl!=undefined && pdfurl!="" && templatetype!="")
        {
          await uploadPdftoGdriveLJKU(puserid, templatetype, cohorttablename, "", "", cohortid, awsinfo, pdfurl, contact_email);
        }
      }
      
      
      //temp_user['organization_verify_uri'] = organization_verify_uri;

      var recipients = req.body.recipientinformation;
      recipients = change_excel_column_name_for_student(recipients);
      var successcount = 0;
      for (let index = 0; index < recipients.length; index++) {
        var firstname = recipients[index].firstname;
        var middlename = recipients[index].middlename;
        var lastname = recipients[index].lastname;
        var email = recipients[index].email;
        var completiondate = recipients[index].completiondate;
        if (completiondate == null || completiondate == undefined) completiondate = "";
        var institutename = recipients[index].institutename;
        if (institutename == null || institutename == undefined) institutename = "";
        var other1 = recipients[index].other1;
        if (other1 == null || other1 == undefined) other1 = "";
        var other2 = recipients[index].other2;
        if (other2 == null || other2 == undefined) other2 = "";
        var other3 = recipients[index].other3;
        if (other3 == null || other3 == undefined) other3 = "";
        var serialnumber = recipients[index].serialnumber;
        if (serialnumber == null || serialnumber == undefined) serialnumber = "";
        var dateofissue = recipients[index].dateofissue;
        if (dateofissue == null || dateofissue == undefined) dateofissue = "";
        var pstudentid = recipients[index].studentid;
        if (pstudentid == "" || pstudentid == null || pstudentid == undefined) pstudentid = "";
        pstudentid = pstudentid.replace("'", "`").trim();
        var certificateid = recipients[index].certificateid;
        if (certificateid == "" || certificateid == null || certificateid == undefined) certificateid = "";
        certificateid = certificateid.replace("'", "`").trim();
        var certificationcategory = recipients[index].certificationcategory;
        if (certificationcategory == null || certificationcategory == undefined) certificationcategory = "";
        var coursename = recipients[index].coursename;
        if (coursename == null || coursename == undefined) coursename = "";
        var coursecompletiondate = recipients[index].coursecompletiondate;
        if (coursecompletiondate == null || coursecompletiondate == undefined) coursecompletiondate == "";
        var serialnumber = recipients[index].serialnumber;
        if (serialnumber == null || serialnumber == undefined) serialnumber = "";
        var tempcompetencyname = recipients[index].competencyname;
        if (tempcompetencyname == null || tempcompetencyname == undefined) tempcompetencyname = competencyname;

        var subother1 = recipients[index]['subother1'];
        var subother2 = recipients[index]['subother2'];
        var subother3 = recipients[index]['subother3'];
        var subother4 = recipients[index]['subother4'];
        var subother5 = recipients[index]['subother5'];
        var subother6 = recipients[index]['subother6'];
        var subother7 = recipients[index]['subother7'];
        var subother8 = recipients[index]['subother8'];
        var subother9 = recipients[index]['subother9'];
        var subother10 = recipients[index]['subother10'];
        var subother11 = recipients[index]['subother11'];
        var subother12 = recipients[index]['subother12'];
        var subother13 = recipients[index]['subother13'];
        var subother14 = recipients[index]['subother14'];
        var subother15 = recipients[index]['subother15'];
        var subother16 = recipients[index]['subother16'];
        var subother17 = recipients[index]['subother17'];
        var subother18 = recipients[index]['subother18'];
        var subother19 = recipients[index]['subother19'];
        var subother20 = recipients[index]['subother20'];
        var subother21 = recipients[index]['subother21'];
        var subother22 = recipients[index]['subother22'];
        var subother23 = recipients[index]['subother23'];
        var subother24 = recipients[index]['subother24'];
        var subother25 = recipients[index]['subother25'];


        
        if ( subother1 == null || subother1 == undefined) subother1 = "";
        
        if ( subother2 == null || subother2 == undefined) subother2 = "";
        
        if ( subother3 == null || subother3 == undefined) subother3 = "";
        
        if ( subother4 == null || subother4 == undefined) subother4 = "";
        
        if ( subother5 == null || subother5 == undefined) subother5 = "";
        
        if ( subother6 == null || subother6 == undefined) subother6 = "";
        
        if ( subother7 == null || subother7 == undefined) subother7 = "";
        
        if ( subother8 == null || subother8 == undefined) subother8 = "";
        
        if ( subother9 == null || subother9 == undefined) subother9 = "";
        
        if ( subother10 == null || subother10 == undefined) subother10 = "";
        
        if ( subother11 == null || subother11 == undefined) subother11 = "";
        
        if ( subother12 == null || subother12 == undefined) subother12 = "";
        
        if ( subother13 == null || subother13 == undefined) subother13 = "";
        
        if ( subother14 == null || subother14 == undefined) subother14 = "";
        
        if ( subother15 == null || subother15 == undefined) subother15 = "";
        
        if ( subother16 == null || subother16 == undefined) subother16 = "";
        
        if ( subother17 == null || subother17 == undefined) subother17 = "";
        
        if ( subother18 == null || subother18 == undefined) subother18 = "";
        
        if ( subother19 == null || subother19 == undefined) subother19 = "";
        
        if ( subother20 == null || subother20 == undefined) subother20 = "";
        
        if ( subother21 == null || subother21 == undefined) subother21 = "";
        
        if ( subother22 == null || subother22 == undefined) subother22 = "";
        
        if ( subother23 == null || subother23 == undefined) subother23 = "";
        
        if ( subother24 == null || subother24 == undefined) subother24 = "";
      
        if ( subother25 == null || subother25 == undefined) subother25 = "";

        if (email == "" || email == null || email == undefined ||
          ((firstname == "" || firstname == null || firstname == undefined) && (middlename == "" || middlename == null || middlename == undefined) && (lastname == "" || lastname == null || lastname == undefined))) {
          var obj = {
            Status: 400,
            message: "Invalid request parameters"
          };
          res.json(obj);
          return;
        }


        if (firstname == "" || firstname == null || firstname == undefined) firstname = "";
        if (middlename == "" || middlename == null || middlename == undefined) middlename = "";
        if (lastname == "" || lastname == null || lastname == undefined) lastname = "";

        firstname = firstname.replace("'", "`").trim();
        middlename = middlename.replace("'", "`").trim();
        lastname = lastname.replace("'", "`").trim();
        email = email.replace("'", "`").trim();
        if (validator.validate(email) == false) {
          console.log(email)
          var obj = {
            Status: 400,
            message: email + " email format is incorrect."
          };
          return res.json(obj);
        }

        try {
          var cohort_id = await getChortidFromCohortInfo(cohortname, cohortid, tempcompetencyname, competencystartdate, competencyenddate, puserid, country);
          if (cohort_id == "" || cohort_id == null) {
            var obj = {
              Status: 400,
              message: "Failed to adding cohort"
            };
            res.json(obj);
            return;
          }
          if (competencydetail == "" || competencydetail == undefined || competencydetail == null) {
            competencydetail = [];
          }
          else {
            await createCompetencyDetail(competencyname.replace(/'/g, "’"), competencydetail);
          }

          var studentid = null;

          var addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,accountid,completiondate,institute_name,other1,other2,other3,serialnumber,enrollnumber)
                                  SELECT '${pstudentid}','${firstname}','${middlename}', '${lastname}', '${email}','${puserid}','${completiondate}','${institutename}','${other1}','${other2}','${other3}','${serialnumber}','${pstudentid}' on conflict (accountid, studentid,firstname,middlename,lastname,emailaddress) do update set emailaddress='${email}' RETURNING id;`);
          students = await pool.query(addStudentQuery);
          if (students.rowCount > 0) {
            studentid = students.rows[0].id;        
            console.log("userid, studentid , count, cohortname===" + puserid + ", " + studentid + ", " + successcount + ", " + cohortname);
            
            var studentsforonetimecode;
            var onetimecode = "";
            var loopcount = 0;
            while (loopcount !== Object.keys(certtypes).length) {
              onetimecode = getOnetimecode(15);
              loopcount = 0;
              for (const key in certtypes) {
                var tablenameforcerttype = certtypes[key];
                let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
                studentsforonetimecode = await pool.query(getExistStudent);
                if (studentsforonetimecode.rowCount == 0) {
                  loopcount++;
                }
              }
            }
            
            var cohortmembers = null;
            var addPivotQuery = format(`INSERT INTO ${cohorttablename} (cohortid,studentid,certificateid,certificatetype,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated,issueddate,certificationcategory,coursecompletiondate,coursename,serialnumber,other1,other2,other3,other4,other5,other6,other7,other8,other9,other10,other11,other12,other13,other14,other15,other16,other17,other18,other19,other20,other21,other22,other23,other24,other25) SELECT '${cohort_id}','${studentid}','${certificateid}','${selectedcerttypeid}','${onetimecode}','${email}','true','true','${dateofissue}','${certificationcategory}','${coursecompletiondate}','${coursename}','${serialnumber}','${subother1}', '${subother2}', '${subother3}', '${subother4}', '${subother5}', '${subother6}', '${subother7}', '${subother8}', '${subother9}', '${subother10}', '${subother11}', '${subother12}', '${subother13}', '${subother14}', '${subother15}', '${subother16}', '${subother17}', '${subother18}', '${subother19}', '${subother20}', '${subother21}', '${subother22}', '${subother23}', '${subother24}', '${subother25}' on conflict (studentid, cohortid, certificaterevoked, certificatetype) do update set is_validated='true' returning id;`);
            cohortmembers = await pool.query(addPivotQuery);
            
            if (cohortmembers.rowCount > 0) {
              if (puserid == 20027) {            
                var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
                      SELECT '${puserid}','${cohortmembers.rows[0].id}', 'processing', '${selectedcerttypeid}','${cohortid}'
                      WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortmembers.rows[0].id}' and status='processing' and cohortid='${cohortid}')
                      RETURNING id;`);
                await pool.query(addgeneratestatusquery);
              }
              var studentinfo = await getStudentInfoFromName(cohort_id, studentid,cohorttablename);
              if (studentinfo == null) {
                var obj = {
                  Status: 400,
                  message: "Error"
                };
                res.json(obj);
                return;
              }
              successcount++;
            }
          }
        }
        catch (error) {
          console.log(error)
          const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
          let logfilename = logfiledir + puserid + "/createcohortresult.log";
          var email_body = `<p style="color:black;">There is an error in creating cohort with students data</p>  
          <ul>
            <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
            <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
            <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>
            <li type= "none" style="color:black;">  &ndash; Competency Detail : ${competencydetail}</a></li>
            <li type= "none" style="color:black;">  &ndash; Number of Students : ${recipients.length}</a></li>
            <li type= "none" style="color:black;">  &ndash; Error Message : ${error}</a></li>
          </ul>  
          `;
          //mailer_createcohortresult(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com",smtphost, smtpport, smtpusername, smtppassword, smtpfrom, ["nayjanta201813@gmail.com", "pawan.khurana@certonce.com"], logfilename); 
          mailer_createcohortresult(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
          var obj = {
            Status: 400,
            message: error
          };
          res.json(obj);
          return;
        }
      }//for end
    }
    if (successcount > 0) {
      ////////////////////////// Send Email Alert about creating cohort and students

      const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
      let logfilename = logfiledir + puserid + "/createcohortresult.log";
      var email_body="";
      if(!istranscript)
      {
        email_body = `<p style="color:black;">Students are added to database by API.</p>  
      <ul>
        <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
        <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
        <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>
        <li type= "none" style="color:black;">  &ndash; Competency Detail : ${competencydetail}</a></li>
        <li type= "none" style="color:black;">  &ndash; Number of Students : ${recipients.length}</a></li>
      </ul>  
    `;
      }
      else
      {
      email_body = `<p style="color:black;">Students are added to database by API.</p>  
      <ul>
        <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
        <li type= "none" style="color:black;">  &ndash; Transcript-Cohort : ${cohortname}</a></li>
        
        <li type= "none" style="color:black;">  &ndash; Number of Students : ${transcriptdata.length}</a></li>
      </ul>  
    `;
      }    
      mailer_downloadcertificate(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
      ///////////////////////////// End 
      var obj = {
        Status: 200,
        message: "Success"
      };
      res.json(obj);
    }
    else {
      const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
      let logfilename = logfiledir + puserid + "/createcohortresult.log";
      var email_body = `Something wrong in payload!`;
      console.log(smtphost, smtpusername, smtpfrom);    
      
      mailer_createcohortresult(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
      
      var obj = {
        Status: 400,
        message: "Something wrong in payload!"
      };
      res.json(obj);
    }
  } catch (error) {
  console.log(error);
  var obj = {
    Status: 400,
    message: error
  };
  res.json(obj);
  }  
}

async function uploadPdftoGdriveLJKU(puserid, templatetype, cohorttablename, newfilefullpath, newfolderfullpath, glcohortid, awsinfo, pdfurl, contact_email)
{
  var os = new os_func(); 
  const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
  var logfilename=logfiledir+puserid+"/sendcertificate.log";
  if(templatetype=="")
  {
    const mailer_certonce = require("../../config/mailer_certonce");        
    let email_body = `<p style="color: black;">templatetype parameter is empty</p>`;   
    let email_subject = "Upload Result";
    mailer_certonce(email_body, email_subject, contact_email, logfilename);
    return;
  }
  console.log("pdfurl=",pdfurl);
  if(pdfurl==null || pdfurl ==undefined || pdfurl=="")
  {
    if(templatetype=="spr")
    {
      const poppler = new Poppler('/usr/bin');
      const options = {
          pngFile: true,
      transparentPageColor: true,
      };
      
      let pageQuery = format(`select a.studentid, b.other1,b.secondpage from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and b.other1!='' and b.other1 is not null and b.other1!='undefined'`);
      let pageResult = await pool.query(pageQuery);
      if (pageResult.rowCount > 0){
        let mainPdfBytes = fs.readFileSync(newfilefullpath);
        let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
        let pageCount = mainPdfDoc.getPages().length;

        let tmpSecondPdfDoc = await PDFDocument.create();
        let [tmpSecondPage] = await tmpSecondPdfDoc.copyPages(mainPdfDoc, [pageCount - 1]);
        tmpSecondPdfDoc.addPage(tmpSecondPage);
        let tmpSecondPdfBytes = await tmpSecondPdfDoc.save();
        fs.writeFileSync(`${newfolderfullpath}/template124secondpage.pdf`, tmpSecondPdfBytes);
        
        for(let index=0; index < pageResult.rowCount; index++){
          if (pageResult.rows[index].other1 < (pageCount -1)){
            try {
              let secondpage = pageResult.rows[index].secondpage;
              if(secondpage==null || secondpage=="" || secondpage==undefined) secondpage="BG";
              await poppler.pdfToCairo(`${newfolderfullpath}/template124secondpage.pdf`, `${newfolderfullpath}/template124secondpage${secondpage}_temp`, options);
              fs.rename(`${newfolderfullpath}/template124secondpage${secondpage}_temp-1.png`, `${wwwdir}/images/LJKU/template124secondpage${secondpage}.png`, function(err) {
                if (err) {
                    console.error('Error renaming file:', err);
                } else {
                    console.log('File renamed successfully');
                }
              });

              let tmpPdfDoc = await PDFDocument.create();
              let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
              tmpPdfDoc.addPage(tmpPage);
              let tmpPdfBytes = await tmpPdfDoc.save();

              fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);                
              await poppler.pdfToCairo(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `${newfolderfullpath}/${pageResult.rows[index].studentid}_temp`, options);
              await IMAGES(`${wwwdir}/images/LJKU/template124background.png`)
              .draw(IMAGES(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`).resize(3150,4455), 0, 0)
              .save(`${newfolderfullpath}/${pageResult.rows[index].studentid}.png`);
              
              let uploadresult = await common_lib.UploadToGDrive(path, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, "backgroundimage", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
              console.log("upload ljkuspr: ", uploadresult);            
              if (uploadresult == ""){
                let email_body = `<p style="color: black;">There are some errors in uploading file to GDrive. `;
                let email_subject = "Upload LJKU SPR Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return false;
              }
            } catch (error) {
              console.log(error);   
              let email_body = `<p style="color: black;">There are some errors in uploading file to GDrive.${error} `;
              let email_subject = "Upload LJKU SPR Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return false;
            }
            
          }
        }
        var os = new os_func();
        await os.execCommand('rm '+newfilefullpath);
        await os.execCommand('sudo rm -r '+newfolderfullpath);
        return true;
      }
      else
      {
        let email_body = `<p style="color: black;">There is no selected cohort. Please upload the student data through createCohortWithStudent API`;
        let email_subject = "Upload LJKU SPR Error";
        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
        return false;
      }
    }//end spr
  }
  else  //download file from the url
  {
    if(templatetype=="spr")
    {
      let temp_path = `${DOWNLOAD_TEMP_PATH}${puserid}/pdf`;
      if (!fs.existsSync(temp_path))
      {
          await os.execCommand('sudo mkdir -p "'+temp_path+'"');
          await os.execCommand('sudo chmod -R 777 "'+temp_path+'"');
      }
      var lastelement=pdfurl.split("/")[pdfurl.split("/").length-1];
      lastelement=lastelement.replace(".pdf","").replace(".json","").replace(".png","");
      console.log("downloading...");
      await os.execCommand(`wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O ${temp_path}/${lastelement}.pdf "${pdfurl}"`);
      console.log("downloaded");
      await os.execCommand('sudo chmod -R 777 "'+temp_path+'"');
      newfilefullpath = `${temp_path}/${lastelement}.pdf`;
      newfolderfullpath = temp_path;
      const poppler = new Poppler('/usr/bin');
      const options = {
          pngFile: true,
      transparentPageColor: true,
      };
      
      let pageQuery = format(`select a.studentid, b.other1,b.secondpage from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and b.other1!='' and b.other1 is not null and b.other1!='undefined'`);
      let pageResult = await pool.query(pageQuery);
      if (pageResult.rowCount > 0){
        let mainPdfBytes = fs.readFileSync(newfilefullpath);
        let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
        let pageCount = mainPdfDoc.getPages().length;

        let tmpSecondPdfDoc = await PDFDocument.create();
        let [tmpSecondPage] = await tmpSecondPdfDoc.copyPages(mainPdfDoc, [pageCount - 1]);
        tmpSecondPdfDoc.addPage(tmpSecondPage);
        let tmpSecondPdfBytes = await tmpSecondPdfDoc.save();
        fs.writeFileSync(`${newfolderfullpath}/template124secondpage.pdf`, tmpSecondPdfBytes);
        
        for(let index=0; index < pageResult.rowCount; index++){
          if (pageResult.rows[index].other1 < (pageCount -1)){
            try {
              let secondpage = pageResult.rows[index].secondpage;
              if(secondpage==null || secondpage=="" || secondpage==undefined) secondpage="BG";
              await poppler.pdfToCairo(`${newfolderfullpath}/template124secondpage.pdf`, `${newfolderfullpath}/template124secondpage${secondpage}_temp`, options);
              fs.rename(`${newfolderfullpath}/template124secondpage${secondpage}_temp-1.png`, `${wwwdir}/images/LJKU/template124secondpage${secondpage}.png`, function(err) {
                if (err) {
                    console.error('Error renaming file:', err);
                } else {
                    console.log('File renamed successfully');
                }
              });

              let tmpPdfDoc = await PDFDocument.create();
              let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
              tmpPdfDoc.addPage(tmpPage);
              let tmpPdfBytes = await tmpPdfDoc.save();

              fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);                
              await poppler.pdfToCairo(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `${newfolderfullpath}/${pageResult.rows[index].studentid}_temp`, options);
              await IMAGES(`${wwwdir}/images/LJKU/template124background.png`)
              .draw(IMAGES(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`).resize(3150,4455), 0, 0)
              .save(`${newfolderfullpath}/${pageResult.rows[index].studentid}.png`);
              
              let uploadresult = await common_lib.UploadToGDrive(path, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, "backgroundimage", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
              console.log("upload ljkuspr: ", uploadresult);            
              if (uploadresult == ""){
                let email_body = `<p style="color: black;">There are some errors in uploading file to GDrive. `;
                let email_subject = "Upload LJKU SPR Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return false;
              }
            } catch (error) {
              console.log(error);   
              let email_body = `<p style="color: black;">There are some errors in uploading file to GDrive.${error} `;
              let email_subject = "Upload LJKU SPR Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return false;
            }
            
          }
        }
        
        await os.execCommand('rm '+newfilefullpath);
        await os.execCommand('sudo rm -r '+newfolderfullpath);
        return true;
      }
      else
      {
        let email_body = `<p style="color: black;">There is no selected cohort. Please upload the student data through createCohortWithStudent API`;
        let email_subject = "Upload LJKU SPR Error";
        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
        return false;
      }
    }//end spr
  }
}

user.uploadZipPdf = async(req, res, next) => {
  
  
  upload(req, res,async function (err) {
    if (err instanceof multer.MulterError) {
      console.log(err);
       var obj = {
       Status: 400,
       message: err.message
       }
       return res.json(obj);
        
    } else if (err) {
      console.log(err.message);
       var obj = {
       Status: 400,
       message: err.message
       }
       return res.json(obj);
    }
    var puserid="";  
    try
    {
      var api_key = req.body.apikey;
      var glcohortid = req.body.cohortid;
      var templatetype = req.body.templatetype;
      var certtype = req.body.certtype;

      if(certtype==null || certtype==undefined || certtype=="") certtype="degree";      
      var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
      var cohorttablename = certtypes[certtype];

      if (templatetype == null || templatetype == undefined ) templatetype="";
      if (glcohortid == null || glcohortid == undefined || glcohortid == "")
      {
        var obj = {
          Status: 400,
          message: "The cohort parameter is empty"
        };
        return res.json(obj);
      }
      console.log("glohortid: ", glcohortid);
      if (api_key == "" || api_key == null || api_key == undefined) {
        var obj = {
          Status: 400,
          message: "Invalid API Key"
        };
        return res.json(obj);
      }

      var userid = await getUserIDFromApiKey(api_key);
      if (userid == null) {
        var obj = {
          Status: 400,
          message: "Invalid api key"
        };
        res.json(obj);
        return;
      }
      puserid=await getParentAccountIdFromId(userid);  
      console.log("uploadZipPdf", puserid);
      var awsinfo=await getS3BucketInformation(puserid);

      var smtpaccount = {
        'type' : true,
        'username' : "", 
        'clientid' : "",
        'clientsecret' : "",
        'refreshtoken' : "",
        'from': ""
      };
      
      var baseurl = "";
      var contact_email = "";
      
      var querySmtp = format(`SELECT * FROM setting  where accountid='${puserid}';`);
      console.log(querySmtp);
      let smtpresult = await pool.query(querySmtp);
    
      if(smtpresult && smtpresult.rowCount > 0){
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['host'] = smtpresult.rows[0].smtphost;
        smtpaccount['port'] = smtpresult.rows[0].smtpport;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['password'] = smtpresult.rows[0].smtppassword;
        smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
  
        smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
        smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
        smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
  
        smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
        smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
        cc=smtpresult.rows[0].smtpcc;
        contact_email = smtpresult.rows[0].contact_email;      
        if (contact_email == null || contact_email == undefined) contact_email = "";
        if (contact_email == ""){
          var obj = {
            Status: 400,
            message: `Contact Email is not defined. Please set contact email in /My PROFILE/Setting/CONTACT INFORMATION`
          };
          return res.json(obj);
        }
        baseurl = smtpresult.rows[0].baseurl;
        
      }
      else {
        var obj = {
          Status: 400,
          message: "Invalid Email Account."
        };
        res.json(obj);
        return;
      }

      smtpaccount['cc'] = ["meenoy@certonce.com", "pawan.khurana@certonce.com", "bernetta.lobo@certonce.com", "certificates@mietjammu.in", "certificates@mietjammu.in"];

      var obj = {
        Status: 200,
        message: 'Please wait the file is being uploaded , on completion you will receive an email.',
      }
      res.json(obj);
      
      const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
      var logfilename=logfiledir+puserid+"/sendcertificate.log";

      var newfilename=req.file.filename;
      var newfoldername=newfilename.split(".")[0];
      var newfilefullpath=college_photos_path+"/"+newfilename;
      var newfolderfullpath=college_photos_path+"/"+newfoldername;
      try
      {
        var os = new os_func();
        await os.execCommand('mkdir '+newfolderfullpath);
        await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
      }
      catch(err)
      {        
        console.log(err);
        let email_body = `<p style="color: black;">There are some errors in uploading file. Below are error list.</p>${err}`;
        let email_subject = "Upload Photos Error";
        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
        return;  
      }


      if(newfilename.toLowerCase().indexOf(".pdf")!==-1)
      {
        if(puserid == "20088" || puserid == "20") //ljku spr
        {
          await uploadPdftoGdriveLJKU(puserid, templatetype, cohorttablename, newfilefullpath, newfolderfullpath, glcohortid, awsinfo, "", contact_email);
        }
      }
      else if(newfilename.toLowerCase().indexOf(".zip")!==-1)
      {
        var extractresult= await extract(newfilefullpath, { dir: newfolderfullpath });
        //////////////////list  image files and upload///////////////////
        await os.execCommand('rm '+newfilefullpath);
        //var filenames = fs.readdirSync(newfolderfullpath); 
        const filenames = getAllFiles(newfolderfullpath);
        //console.log("filenames",filenames);
        for (i = 0; i < filenames.length; i++) {            
          var filenamewithoutext=(filenames[i].split("/")[filenames[i].split("/").length-1]).split(".")[0];
          var studentid=filenamewithoutext.split("_")[0];
              
          console.log("studentid="+studentid+",cohortid="+glcohortid);
          let uploadedurl="";
          if(ismemberphotourlmode=="no")
          {
            
            
            if(awsinfo.storagetype == 1)
            {        
              var bitmap = fs.readFileSync(filenames[i], { encoding: 'base64' });
              if(filenames[i].toLowerCase().indexOf(".png")!=-1)
              {
                  var base64content="data:image/png;base64,"+bitmap;
                  uploadedurl=await uploadPhotoFile(awsinfo.s3obj, puserid, glcohortid, studentid, base64content, awsinfo.s3bucketname, awsinfo.awsregion);
              }
              else if(filenames[i].toLowerCase().indexOf(".jpeg")!=-1 || filenames[i].toLowerCase().indexOf(".jpg")!=-1)
              {
                  var base64content="data:image/jpeg;base64,"+bitmap;
                  uploadedurl= await uploadPhotoFile(awsinfo.s3obj, puserid, glcohortid, studentid, base64content, awsinfo.s3bucketname, awsinfo.awsregion);
              }
            }
            else if (awsinfo.storagetype == 2){//azure
              
            }
            else if (awsinfo.storagetype == 3){//azure
              
            }
            else if (awsinfo.storagetype == 4){//ftp
              
            }
            else if (awsinfo.storagetype == 5){//local
              
            }

          }
          else
          {
            if(awsinfo.storagetype == 1)
            {        
              uploadedurl = await fileUploadPng(awsinfo.s3obj,awsinfo.awsregion,filenames[i],"","memberphoto", awsinfo.s3bucketname);
              console.log(uploadedurl);
            }
            else if (awsinfo.storagetype == 2){//azure
              
            }
            else if (awsinfo.storagetype == 3){//azure
              
            }
            else if (awsinfo.storagetype == 4){//ftp
              
            }
            else if (awsinfo.storagetype == 5){//local
              
            }
            
          }

          try
          {
            let photoQuery = format(`update ${cohorttablename} set photo='yes', photourl='${uploadedurl}' where id in (select b.id from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where a.studentid='${studentid}' and c.cohortid='${glcohortid}')`);
            // console.log(photoQuery);
            await pool.query(photoQuery);
          }
          catch(err0)
          {
            console.log("err0:",err0);
          }
        }
        console.log('sudo rm -r '+newfolderfullpath);
        await os.execCommand('sudo rm -r '+newfolderfullpath);
      }
      let email_body = `<p style="color: black;">Files were uploaded successfully for cohort ${glcohortid}.</p>`;
      let email_subject = "Upload File Successfully";
      let mailer_result = await mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename)
      
      if (mailer_result.status == "400"){
        const mailer_certonce = require("../../config/mailer_certonce");        
        let email_body = `<p style="color: black;">There is an error in uploading files.</p>
        <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
        let email_subject = "Upload Result";
        mailer_certonce(email_body, email_subject, contact_email, logfilename);
      }
      return;
    }
    catch(err1)
    {
      console.log(err1);
      const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
      var logfilename=logfiledir+puserid+"/sendcertificate.log";
      let email_body = `<p style="color: black;">There are some errors in uploading file. Below are error list.</p>${err1}`;
      let email_subject = "Upload File Error";      
      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
      return;
    }  
  });
}

user.createMIETDegree = async (req, res, next) => {
  try{
    var api_key = req.body.apikey;
    var cohortname = req.body.cohortname;
    var cohortid = req.body.cohortid;
    var competencyname = req.body.competencyname;
    var istranscript = req.body.istranscript;
    if(istranscript == null || istranscript == undefined) istranscript = false;
    var successcount = 0;

    if (api_key == "" || api_key == null || api_key == undefined) {
      var obj = {
        Status: 400,
        message: "Invalid API Key"
      };
      res.json(obj);
      return;
    }
    var userid = await getUserIDFromApiKey(api_key);
    console.log("createMIETDegree=", userid);
    if (userid == null) {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }

    var puserid = await getParentAccountIdFromId(userid);

    var smtpaccount = {
      'type' : true,
      'username' : "", 
      'clientid' : "",
      'clientsecret' : "",
      'refreshtoken' : "",
      'from': ""
    };
    var smtphost = "";
    var smtpport = "";
    var smtpusername = "";
    var smtppassword = "";
    var smtpfrom = "";
    var smtpcc = "";
    var organization_name = "";
    var organization_verify_uri = "";
    var querySmtp = format(`SELECT * FROM setting  where accountid='${puserid}';`);
    console.log(querySmtp);
    let smtpresult = await pool.query(querySmtp);
  
    if (smtpresult && smtpresult.rowCount > 0) {
      if (smtpresult.rows[0].smtptype == true) {
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
        smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
        smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;      
      }
      else if (smtpresult.rows[0].smtptype == false) {
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['host'] = smtpresult.rows[0].smtphost;
        smtpaccount['port'] = smtpresult.rows[0].smtpport;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['password'] = smtpresult.rows[0].smtppassword;      
      }
      smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
    }  
    else {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }
    
    //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
    smtpaccount['cc'] = ["meenoy@certonce.com", "pawan.khurana@certonce.com", "bernetta.lobo@certonce.com"];
    var queryOrg = format(`SELECT * FROM usermaster WHERE user_id=${puserid}`);
    let orgresult = await pool.query(queryOrg);
    if (orgresult && orgresult.rowCount > 0) {
      organization_name = orgresult.rows[0].organization_name;
    }

    var students = req.body.students;

    logfilename ="/home/ubuntu/logs/"+puserid+"/createMIETDegree.txt"
    var logdirpath = path.dirname(logfilename);    
    if (!await fs.existsSync(logdirpath))
    {
        await os.execCommand('sudo mkdir -p "'+logdirpath+'"');
        await os.execCommand('sudo chmod -R 777 "'+logdirpath+'"');
    }
    var today = new Date();    
    fs.appendFileSync(logfilename, '\nStart section on '+today + '\n');    
    fs.appendFileSync(logfilename, JSON.stringify(req.body));    
    fs.appendFileSync(logfilename, '\nEnd section on '+today + '\n');    
    let check_result = "";

    for(let index=0; index < students.length; index++) {
      let element = students[index];
      Object.keys(element).forEach(function(key, value){
        if (element[key] == undefined || element[key] == null) element[key] = "";
        if (element[key] == ""){
          check_result = `${key} field is missing, cohort upload failed. Please upload again with complete data`;
          return;
        }
      });
      if (check_result != ""){
        var obj = {
          Status: 400,
          message: check_result
        };
        res.json(obj);
        return;
      }
      let rollnumber = element.studentid;
      if (rollnumber == null || rollnumber == undefined) rollnumber = "";
      rollnumber = rollnumber.replace(/'/g, "’");
      let firstname = element.firstname;
      if (firstname == null || firstname == undefined) firstname = "";
      firstname = firstname.replace(/'/g, "’");
      let middlename = element.middlename;
      if (middlename == null || middlename == undefined) middlename = "";
      middlename = middlename.replace(/'/g, "’");
      let lastname = element.lastname;
      if (lastname == null || lastname == undefined) lastname = "";
      lastname = lastname.replace(/'/g, "’");
      let email = element.email;
      if (email == null || email == undefined) email = "";
      email = email.replace(/'/g, "’");
      let sex = element.sex;
      if (sex == null || sex == undefined) sex = "";
      sex = sex.replace(/'/g, "’");
      let fathername = element.fathername;
      if (fathername == null || fathername == undefined) fathername = "";
      fathername = fathername.replace(/'/g, "’");
      // let registrationnumber = element.registrationnumber;
      // if (registrationnumber == null || registrationnumber == undefined) registrationnumber = "";
      let examinationdate = element.examinationdate;
      if (examinationdate == null || examinationdate == undefined) examinationdate = "";
      examinationdate = examinationdate.replace(/'/g, "’");
      let resultnumber = element.resultnumber;
      if (resultnumber == null || resultnumber == undefined) resultnumber = "";
      resultnumber = resultnumber.replace(/'/g, "’");
      let resultdate = element.resultdate;
      if (resultdate == null || resultdate == undefined) resultdate = "";
      resultdate = resultdate.replace(/'/g, "’");
      let pc = element.pc;
      if (pc == null || pc == undefined) pc = "";
      pc = pc.replace(/'/g, "’");
      let cgpa = element.cgpa;
      if (cgpa == null || cgpa == undefined) cgpa = "";
      cgpa = cgpa.replace(/'/g, "’");
      let division = element.division;
      if (division == null || division == undefined) division = "";
      division = division.replace(/'/g, "’");
      let status = element.status;
      if (status == null || status == undefined) status = "";
      status = status.replace(/'/g, "’");
      let bdate = element.date;
      if (bdate == null || bdate == undefined) bdate = "";
      bdate = bdate.replace(/'/g, "’");

      // firstname = firstname.replace("'", "`").trim();
      // middlename = middlename.replace("'", "`").trim();
      // lastname = lastname.replace("'", "`").trim();
      // email = email.replace("'", "`").trim();

      if (email == "" || email == null || email == undefined ||
        ((firstname == "" || firstname == null || firstname == undefined) && (middlename == "" || middlename == null || middlename == undefined) && (lastname == "" || lastname == null || lastname == undefined))) {
        var obj = {
          Status: 400,
          message: "Invalid request parameters"
        };
        res.json(obj);
        return;
      }

      if (rollnumber == "") {      
        var obj = {
          Status: 400,
          message: "Invalid request parameters. StudentID is required."
        };
        res.json(obj);
        return;
      }
      
      if (sex == "") {
        var obj = {
          Status: 400,
          message: "Invalid request parameters. Sex is required"
        };
        res.json(obj);
        return;
      }

      if (validator.validate(email) == false) {
        console.log(email)
        var obj = {
          Status: 400,
          message: email + " email format is incorrect."
        };
        return res.json(obj);
      }      

      try{
        var cohort_id = await getChortidFromCohortInfo(cohortname, cohortid, competencyname, "", "", puserid, "");
        if (cohort_id == "" || cohort_id == null) {
          var obj = {
            Status: 400,
            message: "Failed to adding cohort"
          };
          res.json(obj);
          return;
        }
        
        var studentid = null;

        var addStudentQuery = format(`INSERT INTO STUDENT (studentid,enrollnumber,firstname,middlename,lastname,fathername,emailaddress,sex,accountid,other2,other3,other4,other5,other6,other7,other8,other9)
                                SELECT '${rollnumber}','${rollnumber}','${firstname}','${middlename}', '${lastname}', '${fathername}', '${email}', '${sex}', '${puserid}','${examinationdate}','${resultnumber}','${resultdate}','${pc}','${cgpa}','${division}','${status}','${bdate}' on conflict (accountid, studentid, firstname,middlename,lastname,emailaddress) do update set fathername='${fathername}', emailaddress='${email}', sex='${sex}', other2='${examinationdate}', other3='${resultnumber}', other4='${resultdate}', other5='${pc}', other6='${cgpa}', other7='${division}', other8='${status}', other9='${bdate}' RETURNING id;`);
        let tempstudent1 = await pool.query(addStudentQuery);
        console.log("studet;", tempstudent1.rows[0]);
        if (tempstudent1.rowCount > 0) {
          studentid = tempstudent1.rows[0].id;        
          console.log("userid, studentid , count, cohortname===" + puserid + ", " + studentid + ", " + successcount + ", " + cohortname);
          var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
          var studentsforonetimecode;
          var onetimecode = "";
          var loopcount = 0;
          while (loopcount !== Object.keys(certtypes).length) {
            onetimecode = getOnetimecode(15);
            loopcount = 0;
            for (const key in certtypes) {
              var tablenameforcerttype = certtypes[key];
              let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
              studentsforonetimecode = await pool.query(getExistStudent);
              if (studentsforonetimecode.rowCount == 0) {
                loopcount++;
              }
            }
          }
          var cohortmembers = null;
          var addPivotQuery = format(`INSERT INTO cohortmembers_degree (cohortid,studentid,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated, certificateid)
              SELECT '${cohort_id}','${studentid}','${onetimecode}','${email}','true','true','${istranscript}' on conflict (cohortid, studentid, certificatetype,certificaterevoked) do update set is_validated='true' returning id;`);
          cohortmembers = await pool.query(addPivotQuery);
          if (cohortmembers.rowCount > 0) {
            var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
                  SELECT '${puserid}','${cohortmembers.rows[0].id}', 'processing', 'degree','${cohortid}'
                  WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortmembers.rows[0].id}' and status='processing' and cohortid='${cohortid}')
                  RETURNING id;`);
            await pool.query(addgeneratestatusquery);
          }
          else {
            var tempquery = format(`select id from cohortmembers_degree where cohortid='${cohort_id}' and studentid='${studentid}'`);
            var cohortstudents = await pool.query(tempquery);
            var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
                  SELECT '${puserid}','${cohortstudents.rows[0].id}', 'processing', 'degree','${cohortid}'
                  WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortstudents.rows[0].id}' and status='processing' and cohortid='${cohortid}')
                  RETURNING id;`);
            await pool.query(addgeneratestatusquery);
          }
          var studentinfo = await getStudentInfoFromName(cohort_id, studentid, "cohortmembers_degree");
          if (studentinfo == null) {
            var obj = {
              Status: 400,
              message: "Error"
            };
            res.json(obj);
            return;
          }
          successcount++;
        }
      }
      catch (error) {
        console.log(error)
        const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
        let logfilename = logfiledir + puserid + "/createcohortresult.log";
        var email_body = `<p style="color:black;">There is an error in creating MIET Degree</p>  
        <ul>
          <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
          <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
          <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>
          <li type= "none" style="color:black;">  &ndash; Number of Students : ${students.length}</a></li>
          <li type= "none" style="color:black;">  &ndash; Error Message : ${error}</a></li>
        </ul>  
        `;
        mailer_createcohortresult(email_body, "Alert for createMIETDegree", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
        var obj = {
          Status: 400,
          message: error
        };
        res.json(obj);
        return;
      }

    }
    if (successcount > 0) {
      const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
      let logfilename = logfiledir + puserid + "/createcohortresult.log";
      var email_body="";
      email_body = `<p style="color:black;">Students are added to database by API.</p>  
        <ul>
          <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
          <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</li>
          <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</li>
          <li type= "none" style="color:black;">  &ndash; Number of Students : ${successcount}</li>
        </ul>  
      `;
      mailer_createcohortresult(email_body, "Alert for createMIETDegree", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
      var obj = {
        Status: 200,
        message: "Success"
      };
      res.json(obj);
      
    }
    else {
      const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
      let logfilename = logfiledir + puserid + "/createcohortresult.log";
      var email_body = `Something wrong in creating MIET Degree!`;
      console.log(smtphost, smtpusername, smtpfrom);
      
      mailer_createcohortresult(email_body, "Alert for createMIETDegree", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
      var obj = {
        Status: 400,
        message: "Something wrong in creating MIET Degree!"
      };
      res.json(obj);
      
    }
  }
  catch(err){
    console.log(err.message);
    var obj = {
      Status: 400,
      message: "Something wrong in creating MIET Degree!"
    };
    res.json(obj);
    }
  
}

user.createMIETTranscript = async (req, res, next) => {
  try{
    var api_key = req.body.apikey;
    var cohortname = req.body.cohortname;
    var cohortid = req.body.cohortid;
    var competencyname = req.body.competencyname;
    var istranscript = req.body.istranscript;
    if(istranscript == null || istranscript == undefined) istranscript = false;
    var successcount = 0;

    if (api_key == "" || api_key == null || api_key == undefined) {
      var obj = {
        Status: 400,
        message: "Invalid API Key"
      };
      res.json(obj);
      return;
    }
    var userid = await getUserIDFromApiKey(api_key);
    console.log("createMIETTranscript=", userid);
    if (userid == null) {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }

    var puserid = await getParentAccountIdFromId(userid);
    var awsinfo = await getS3BucketInformation(puserid);
    // let checkQuery = format(`select id from cohort where cohortid='${cohortid}' and accountid='${puserid}'`);
    // let checkResult = await pool.query(checkQuery);
    // if (checkResult.rowCount == 0){
    //   var obj = {
    //     Status: 400,
    //     message: "There is no selected cohort. Please retry after upload student excel sheet."
    //   };
    //   res.json(obj);
    //   return;
    // }

    var smtpaccount = {
      'type' : true,
      'username' : "", 
      'clientid' : "",
      'clientsecret' : "",
      'refreshtoken' : "",
      'from': ""
    };
    var smtphost = "";
    var smtpport = "";
    var smtpusername = "";
    var smtppassword = "";
    var smtpfrom = "";
    var smtpcc = "";
    var organization_name = "";
    var organization_verify_uri = "";
    var querySmtp = format(`SELECT * FROM setting  where accountid='${puserid}';`);
    console.log(querySmtp);
    let smtpresult = await pool.query(querySmtp);
  
    if (smtpresult && smtpresult.rowCount > 0) {
      if (smtpresult.rows[0].smtptype == true) {
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
        smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
        smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;      
      }
      else if (smtpresult.rows[0].smtptype == false) {
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['host'] = smtpresult.rows[0].smtphost;
        smtpaccount['port'] = smtpresult.rows[0].smtpport;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['password'] = smtpresult.rows[0].smtppassword;      
      }
      smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
    }  
    else {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }
    
    //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
    smtpaccount['cc'] = ["meenoy@certonce.com", "pawan.khurana@certonce.com", "bernetta.lobo@certonce.com", "certificates@mietjammu.in"];
    var queryOrg = format(`SELECT * FROM usermaster WHERE user_id=${puserid}`);
    let orgresult = await pool.query(queryOrg);
    if (orgresult && orgresult.rowCount > 0) {
      organization_name = orgresult.rows[0].organization_name;
    }

    var mainStudents = req.body.students;
    logfilename ="/home/ubuntu/logs/"+puserid+"/createMIETTranscript.txt"
    var logdirpath = path.dirname(logfilename);    
    if (!fs.existsSync(logdirpath))
    {
        await os.execCommand('sudo mkdir -p "'+logdirpath+'"');
        await os.execCommand('sudo chmod -R 777 "'+logdirpath+'"');
    }
    var today = new Date();
    fs.appendFileSync(logfilename, '\nStart section on '+today + '\n');    
    fs.appendFileSync(logfilename, JSON.stringify(req.body));    
    fs.appendFileSync(logfilename, '\nEnd section on '+today + '\n');
    console.log("mainStudents.length=",mainStudents.length);
    if(mainStudents.length == undefined || mainStudents.length == null)
    {
      var obj = {
        Status: 400,
        message: "Invalid student data array"
      };
      res.json(obj);
      return;
    }
    else if(mainStudents.length>65)
    {
      var obj = {
        Status: 400,
        message: "Max limit reached : 65 students"
      };
      res.json(obj);
      return;
    }
    let data_check_result = check_miet_transcript_data(mainStudents);
    if ( data_check_result == ""){
      var obj = {
        Status: 200,
        message: `Please wait the transcript data is being uploaded to ${cohortid}, on completion you will receive an email.`
      };
      res.json(obj);
    }
    else {
      var obj = {
        Status: 400,
        message: data_check_result
      };
      res.json(obj);
      return;
    }

    let error_message = "Something wrong in creating MIET Transcript!";
    


    for(let index=0; index < mainStudents.length; index++) {
      let element = mainStudents[index];
      
      let rollnumber = element.studentid;
      //console.log("rollnumber=",rollnumber);
      if (rollnumber == null || rollnumber == undefined) rollnumber = "";
      rollnumber = rollnumber.replace(/'/g, "’");

      let firstname = element.firstname;
      if (firstname == null || firstname == undefined) firstname = "";
      firstname = firstname.replace(/'/g, "’");

      let middlename = element.middlename;
      if (middlename == null || middlename == undefined) middlename = "";
      middlename = middlename.replace(/'/g, "’");

      let lastname = element.lastname;
      if (lastname == null || lastname == undefined) lastname = "";
      lastname = lastname.replace(/'/g, "’");

      let email = element.email;
      if (email == null || email == undefined) email = "";
      email = email.replace(/'/g, "’");

      let fathername = element.fathername;
      if (fathername == null || fathername == undefined) fathername = "";
      fathername= fathername.replace(/'/g, "’");

      let registrationnumber = element.registrationnumber;
      if (registrationnumber == null || registrationnumber == undefined) registrationnumber = "";
      registrationnumber = registrationnumber.replace(/'/g, "’");

      let examinationdate = element.examinationdate;
      if (examinationdate == null || examinationdate == undefined) examinationdate = "";
      examinationdate = examinationdate.replace(/'/g, "’");

      let programme = element.programme;
      if (programme == null || programme == undefined) programme = "";
      programme = programme.replace(/'/g, "’");

      let classification = element.classification;
      if (classification == null || classification == undefined) classification = "";
      classification = classification.replace(/'/g, "’");

      let cgpa = element.cgpa;
      if (cgpa == null || cgpa == undefined) cgpa = "";
      cgpa = cgpa.replace(/'/g, "’");

      let dateofissue = element.dateofissue;
      if (dateofissue == null || dateofissue == undefined) dateofissue = "";
      dateofissue = dateofissue.replace(/'/g, "’");
      

      // firstname = firstname.replace("'", "`").trim();
      // middlename = middlename.replace("'", "`").trim();
      // lastname = lastname.replace("'", "`").trim();
      // email = email.replace("'", "`").trim();      

      try{
        var cohort_id = await getChortidFromCohortInfo(cohortname, cohortid, competencyname, "", "", puserid, "");
        if (cohort_id == "" || cohort_id == null) {
          // var obj = {
          //   Status: 400,
          //   message: "Failed to adding cohort"
          // };
          // res.json(obj);
          // return;          
          miet_transcript_error_mail(puserid, smtpaccount, "Failed to adding cohort", "Alert for createMIETTranscript");
          return;
        }
        
        var studentid = null;
        var addStudentQuery = format(`INSERT INTO STUDENT (studentid,enrollnumber,firstname,middlename,lastname,emailaddress,fathername,accountid,other1,other2)
                                SELECT '${rollnumber}','${rollnumber}','${firstname}','${middlename}', '${lastname}', '${email}', '${fathername}', '${puserid}','${registrationnumber}','${examinationdate}' on conflict (accountid,  studentid, firstname,middlename,lastname,emailaddress ) do update set emailaddress='${email}', fathername='${fathername}', other1='${registrationnumber}', other2='${examinationdate}' RETURNING id;`);
        var students = await pool.query(addStudentQuery);
        
        if (students.rowCount > 0) {
          studentid = students.rows[0].id;        
          console.log("userid, studentid , count, cohortname===" + puserid + ", " + studentid + ", " + successcount + ", " + cohortname);
          var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
          var studentsforonetimecode;
          var onetimecode = "";
          var loopcount = 0;
          while (loopcount !== Object.keys(certtypes).length) {
            onetimecode = getOnetimecode(15);
            loopcount = 0;
            for (const key in certtypes) {
              var tablenameforcerttype = certtypes[key];
              let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
              studentsforonetimecode = await pool.query(getExistStudent);
              if (studentsforonetimecode.rowCount == 0) {
                loopcount++;
              }
            }
          }
          var cohortmembers = null;
          try{
            var addPivotQuery = format(`INSERT INTO cohortmembers_transcript (cohortid,studentid,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated, certificateid, issueddate, isphotorequired)
              SELECT '${cohort_id}','${studentid}','${onetimecode}','${email}','true','true','${istranscript}','${dateofissue}','yes' on conflict (cohortid, studentid, certificatetype,certificaterevoked) do update set is_validated='true' returning id;`);
            cohortmembers = await pool.query(addPivotQuery);
          }
          catch(err){
            
          }        
          
          try{
            var addTranscriptDescribeQuery = format(`INSERT INTO transcriptdescribe (cohortid,studentid,cgpa,accountid,other1,other2,semesternumber) 
                                            SELECT '${cohortid}','${rollnumber}','${cgpa}','${puserid}','${classification}','${programme}','1' RETURNING id;`);
            await pool.query(addTranscriptDescribeQuery);
          }
          catch(err){

          }
          var transcripts = element.transcript;
          for (let index1=0; index1 < transcripts.length; index1++){
            let element1 = transcripts[index1];
            let semesternumber = element1.semesternumber;
            if (semesternumber == null || semesternumber == undefined) semesternumber = "";
            semesternumber = semesternumber.replace(/'/g, "’");

            let coursecode = element1.coursecode;
            if (coursecode == null || coursecode == undefined) coursecode = "";
            coursecode = coursecode.replace(/'/g, "’");
            
            let course = element1.course;
            if (course == null || course == undefined) course = "";
            course = course.replace(/'/g, "’");

            let grade = element1.grade;
            if (grade == null || grade == undefined) grade = "";
            grade = grade.replace(/'/g, "’");

            let point = element1.point;
            if (point == null || point == undefined) point = "";
            point = point.replace(/'/g, "’");

            let credit = element1.credit;
            if (credit == null || credit == undefined) credit = "";
            credit = credit.replace(/'/g, "’");

            let examdate = element1.examdate;
            if (examdate == null || examdate == undefined) examdate = "";
            examdate = examdate.replace(/'/g, "’");
            try{
              let addSemesterQuery = format(`INSERT INTO SEMESTERTRANSCRIPT (cohortid,studentid,semesternumber,subjecttype,subjectcode,credit,grade,point,accountid,other1)
                                        SELECT '${cohortid}','${rollnumber}','${semesternumber}','${course}', '${coursecode}', '${credit}','${grade}','${point}','${puserid}','${examdate}' RETURNING id;`);
              await pool.query(addSemesterQuery);
            }
            catch(err){

            }
            
            // successcount ++;
          }        
          
          //let tempphotocontent = await readPhotoFile(awsinfo.s3obj, puserid, cohortid, rollnumber, awsinfo.s3bucketname);
          //if (tempphotocontent != '')
          if (cohortmembers != null)
          {
            if (cohortmembers.rowCount > 0) {            
                var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
                    SELECT '${puserid}','${cohortmembers.rows[0].id}', 'processing', 'transcript','${cohortid}'
                    WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortmembers.rows[0].id}' and status='processing' and cohortid='${cohortid}')
                    RETURNING id;`);
                await pool.query(addgeneratestatusquery);
              }
            else {
              var tempquery = format(`select id from cohortmembers_transcript where cohortid='${cohort_id}' and studentid='${studentid}'`);
              var cohortstudents = await pool.query(tempquery);
              var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
                    SELECT '${puserid}','${cohortstudents.rows[0].id}', 'processing', 'transcript','${cohortid}'
                    WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortstudents.rows[0].id}' and status='processing' and cohortid='${cohortid}')
                    RETURNING id;`);
              await pool.query(addgeneratestatusquery);
            }
          }
          
          // var studentinfo = await getStudentInfoFromName(cohort_id, studentid, "cohortmembers_transcript");
          // if (studentinfo == null) {
          //   miet_transcript_error_mail(puserid, smtpaccount, `There is an error in studentid=${studentid})`, "Alert for createMIETTranscript");
          //   return;
          // }
          successcount++;
        }
      }
      catch (error) {
        console.log(error)
        const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
        let logfilename = logfiledir + puserid + "/createcohortresult.log";
        var email_body = `<p style="color:black;">There is an error in creating MIET Transcript</p>  
        <ul>
          <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
          <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
          <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>
          <li type= "none" style="color:black;">  &ndash; Number of Students : ${mainStudents.length}</a></li>
          <li type= "none" style="color:black;">  &ndash; Error Message : ${error}</a></li>
        </ul>  
        `;
        //mailer_createcohortresult(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com",smtphost, smtpport, smtpusername, smtppassword, smtpfrom, ["nayjanta201813@gmail.com", "pawan.khurana@certonce.com"], logfilename); 
        mailer_createcohortresult(email_body, "Alert for CreateTranscriptForMIET", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
        return;
      }

    }
    
    if (successcount > 0) {
      const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
      let logfilename = logfiledir + puserid + "/createcohortresult.log";
      var email_body="";
      email_body = `<p style="color:black;">Students are added to database by API.</p>  
        <ul>
          <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
          <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</li>
          <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</li>
          <li type= "none" style="color:black;">  &ndash; Number of Students : ${successcount}</li>
        </ul>  
      `;
      mailer_createcohortresult(email_body, "Alert for CreateTranscriptForMIET", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);     
      return;      
    }
    else {
      const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
      let logfilename = logfiledir + puserid + "/createcohortresult.log";
      var email_body = `Something wrong in payload!`;
      console.log(smtphost, smtpusername, smtpfrom);
      
      mailer_createcohortresult(email_body, "Alert for CreateTranscriptForMIET", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
      return;      
    }
  }
  catch(err){
    console.log(err.message);
    // var obj = {
    //   Status: 400,
    //   message: err.message
    // };
    // res.json(obj);
    miet_transcript_error_mail(puserid, smtpaccount, err.message, "Alert for createMIETTranscript");
  }
  
}

function check_miet_transcript_data(mainStudents,){
  let roman_list = ['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII','XIX','XX'];
  let result = "";
  try{
    for(let index=0; index < mainStudents.length; index++) {
      let element = mainStudents[index];
      
      Object.keys(element).forEach(function(key, value){
        if (key !== "transcript") {
          if (element[key] == undefined || element[key] == null) element[key] = "";
          if (element[key] == ""){        
            result = `${key} field of is missing, cohort upload failed. Please upload again with complete data`;
            return;
          }
        }     
        else {
          for (let index1 = 0; index1 < element['transcript'].length; index1++){
            let element1 = element['transcript'][index1];
            Object.keys(element1).forEach(function(key1, value1){              
              if (element1[key1] == undefined || element1[key1] == null) element1[key1] = "";
              if (key1 == "semesternumber") {
                if (!roman_list.includes(element1[key1])) {
                  result = `The format of semesternumber of studentid ${element['studentid']} is incorrect, cohort upload failed. Please upload again with complete data`;
                  return;
                }
              }
              if (element1[key1] == ""){        
                result = `${key1} field of studentid ${element['studentid']} is missing, cohort upload failed. Please upload again with complete data`;
                return;
              }
            });
          }
        } 
      });
      if (result != "") return result;
      let rollnumber = element.studentid;
      //console.log("rollnumber=",rollnumber);
      if (rollnumber == null || rollnumber == undefined) rollnumber = "";
      rollnumber = rollnumber.replace(/'/g, "’");
  
      let firstname = element.firstname;
      if (firstname == null || firstname == undefined) firstname = "";
      firstname = firstname.replace(/'/g, "’");
  
      let middlename = element.middlename;
      if (middlename == null || middlename == undefined) middlename = "";
      middlename = middlename.replace(/'/g, "’");
  
      let lastname = element.lastname;
      if (lastname == null || lastname == undefined) lastname = "";
      lastname = lastname.replace(/'/g, "’");
  
      let email = element.email;
      if (email == null || email == undefined) email = "";
      email = email.replace(/'/g, "’");
  
      let fathername = element.fathername;
      if (fathername == null || fathername == undefined) fathername = "";
      fathername= fathername.replace(/'/g, "’");
  
      let registrationnumber = element.registrationnumber;
      if (registrationnumber == null || registrationnumber == undefined) registrationnumber = "";
      registrationnumber = registrationnumber.replace(/'/g, "’");
  
      let examinationdate = element.examinationdate;
      if (examinationdate == null || examinationdate == undefined) examinationdate = "";
      examinationdate = examinationdate.replace(/'/g, "’");
  
      let programme = element.programme;
      if (programme == null || programme == undefined) programme = "";
      programme = programme.replace(/'/g, "’");
  
      let classification = element.classification;
      if (classification == null || classification == undefined) classification = "";
      classification = classification.replace(/'/g, "’");
  
      let cgpa = element.cgpa;
      if (cgpa == null || cgpa == undefined) cgpa = "";
      cgpa = cgpa.replace(/'/g, "’");
  
      let dateofissue = element.dateofissue;
      if (dateofissue == null || dateofissue == undefined) dateofissue = "";
      dateofissue = dateofissue.replace(/'/g, "’");
      
  
      // firstname = firstname.replace("'", "`").trim();
      // middlename = middlename.replace("'", "`").trim();
      // lastname = lastname.replace("'", "`").trim();
      // email = email.replace("'", "`").trim();
  
      if (email == "" || email == null || email == undefined ||
        ((firstname == "" || firstname == null || firstname == undefined) && (middlename == "" || middlename == null || middlename == undefined) && (lastname == "" || lastname == null || lastname == undefined))) {      
        result = "Invalid request parameters";
        return result;
      }
  
      if (rollnumber == "") {      
        result = " StudentId is required.";
        return result;
      }
  
      if (validator.validate(email) == false) {      
        result = email + " email format is incorrect.";
        return result;
      }
  
      if (registrationnumber == ""){      
        result = "Registrationnumber is required."
        return result;
      }
  
      if (examinationdate == ""){   
        result = "Examinationdate is required.";
        return result;
      }
  
      if (dateofissue == ""){
        result = "Date of issue is required.";
        return result;
      }
    }
    return result;
  }
  catch(err){
    return err.message;
  }
  
}

function miet_transcript_error_mail(puserid, smtpaccount, email_body, email_subject){
  const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
  let logfilename = logfiledir + puserid + "/createcohortresult.log";    
  mailer_downloadcertificate(email_body, email_subject, "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
}

user.createPoliticalInvoice = async (req, res, next) => {

  var api_key = req.body.apikey;
  var cohortname = req.body.cohortname;
  var cohortid = req.body.cohortid;
  var fname = req.body.fname;
  var lname = req.body.lname;
  var payid = req.body.payid;
  var paymethod = req.body.paymethod;
  var payamount = req.body.payamount;
  var paydate = req.body.paydate;
  var email = req.body.email;

  if (fname == "" || fname == undefined || fname == null ||
    lname == "" || lname == undefined || lname == null ||
    payid == "" || payid == null || payid == undefined ||
    api_key == "" || api_key == null || api_key == undefined ||
    paymethod == "" || paymethod == null || paymethod == undefined ||
    payamount == "" || payamount == null || payamount == undefined ||
    paydate == "" || paydate == null || paydate == undefined ||
    cohortname == "" || cohortname == null || cohortname == undefined ||
    cohortid == "" || cohortid == null || cohortid == undefined 
  ) {
    var obj = {
      Status: 400,
      message: "Invalid request parameters"
    };
    res.json(obj);
    return;
  }
  var userid = await getUserIDFromApiKey(api_key);
  console.log("createCohortWithStudents=", userid);
  console.log(req.body);
  if (userid == null) {
    var obj = {
      Status: 400,
      message: "Invalid api key"
    };
    res.json(obj);
    return;
  }

  var puserid = await getParentAccountIdFromId(userid);

  

  var successcount = 0;

  try {
    var cohort_id = await getChortidFromCohortInfo(cohortname, cohortid, "", "", "", puserid, "");
    if (cohort_id == "" || cohort_id == null) {
      var obj = {
        Status: 400,
        message: "Failed to adding cohort"
      };
      res.json(obj);
      return;
    }
   
    var studentid = null;
    var addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,lastname,emailaddress,accountid,other1,other2,other3)
                            SELECT '${payid}','${fname}', '${lname}', '${email}', '${puserid}' ,'${paymethod}', '${payamount}', '${paydate}' 
                            WHERE NOT EXISTS (SELECT 1 FROM STUDENT WHERE studentid='${payid}' and LOWER(firstname)=LOWER('${fname}') and LOWER(lastname)=LOWER('${lname}') and accountid='${puserid}')
                            RETURNING id;`);
                            console.log(addStudentQuery);
    students = await pool.query(addStudentQuery);
    if (students.rowCount > 0) {
      studentid = students.rows[0].id;
    }
    else {
      var getExistStudent = format(`SELECT id FROM STUDENT WHERE studentid='${payid}' and LOWER(firstname)=LOWER('${fname}') and LOWER(lastname)=LOWER('${lname}') and accountid='${puserid}';`);
      students = await pool.query(getExistStudent);
      if (students.rowCount > 0) {
        studentid = students.rows[0].id;
      }
    }
    //console.log("userid, studentid , count, cohortname===" + puserid + ", " + studentid + ", " + successcount + ", " + cohortname);
    var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var studentsforonetimecode;
    var onetimecode = "";
    var loopcount = 0;
    while (loopcount !== Object.keys(certtypes).length) {
      onetimecode = getOnetimecode(8);
      loopcount = 0;
      for (const key in certtypes) {
        var tablenameforcerttype = certtypes[key];
        let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
        studentsforonetimecode = await pool.query(getExistStudent);
        if (studentsforonetimecode.rowCount == 0) {
          loopcount++;
        }
      }
    }
    var cohortmembers = null;
    var addPivotQuery = format(`INSERT INTO cohortmembers_degree (cohortid,studentid,certificateid,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated)
        SELECT '${cohort_id}','${studentid}','','${onetimecode}','${onetimecode}','true','true' WHERE NOT EXISTS ( SELECT 1 FROM cohortmembers_degree WHERE cohortid='${cohort_id}' and studentid='${studentid}') returning id;`);
    cohortmembers = await pool.query(addPivotQuery);
    
    if (puserid == 20027) {
      if (cohortmembers.rowCount > 0) {
        var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
              SELECT '${puserid}','${cohortmembers.rows[0].id}', 'processing', 'degree','${cohortid}'
              WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortmembers.rows[0].id}' and status='processing' and cohortid='${cohortid}')
              RETURNING id;`);
        await pool.query(addgeneratestatusquery);
      }
      else {
        var tempquery = format(`select id from cohortmembers_degree where cohortid='${cohort_id}' and studentid='${studentid}'`);
        var cohortstudents = await pool.query(tempquery);
        var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
              SELECT '${puserid}','${cohortstudents.rows[0].id}', 'processing', 'degree','${cohortid}'
              WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortstudents.rows[0].id}' and status='processing' and cohortid='${cohortid}')
              RETURNING id;`);
        await pool.query(addgeneratestatusquery);
        //temp_params.push(cohortid + "=" + cohortstudents.rows[0].id);
      }

    }
    var studentinfo = await getStudentInfoFromName(cohort_id, studentid, "cohortmembers_degree");
    if (studentinfo == null) {
      var obj = {
        Status: 400,
        message: "Error"
      };
      return res.json(obj);      
    }
    var obj = {
      Status: 200,
      message: "Success"
    };
    res.json(obj);
  }
  catch (error) {
    console.log(error)
    const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
    let logfilename = logfiledir + puserid + "/createcohortresult.log";
    var email_body = `<p style="color:black;">There is an error in creating cohort with students data</p>  
    <ul>
      <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
      <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
      <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>
      <li type= "none" style="color:black;">  &ndash; Competency Detail : ${competencydetail}</a></li>
      <li type= "none" style="color:black;">  &ndash; Number of Students : ${recipients.length}</a></li>
      <li type= "none" style="color:black;">  &ndash; Error Message : ${error}</a></li>
    </ul>  
    `;
    //mailer_createcohortresult(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com",smtphost, smtpport, smtpusername, smtppassword, smtpfrom, ["nayjanta201813@gmail.com", "pawan.khurana@certonce.com"], logfilename); 
    mailer_createcohortresult(email_body, "Alert for CreateChortByAPI", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
    var obj = {
      Status: 400,
      message: error
    };
    res.json(obj);
    return;
  }
  
}


async function createCompetencyDetail(competencyname, detail_content) {  
  if (detail_content.length != []) {
    var detail_header = `<p style="font-size:6pt;font-family:Roboto, sans-serif;color:rgb(88, 89, 91);margin:0px;">${competencyname}</p><p style="font-size:6pt;font-family:Roboto, sans-serif;color:rgb(88, 89, 91);margin:0px;">Consists of the following modules</p>`;
    var detail_body = "";
    for (let index=0; index < detail_content.length; index++) {
      detail_body += `<li><p style="font-size:6pt;font-family:Roboto, sans-serif;color:rgb(88, 89, 91);margin:0px;">${detail_content[index]}</p></li>`;
    }
    detail_body = `<ul style="margin: 0px;margin-left: -24px;">${detail_body}</ul>`;
    var detail_result = detail_header + detail_body;
    detail_result=detail_result.replace(/'/g,"’");
    //console.log(detail_result);
    var findquery = format(`select * from competencypartner where competencyname='${competencyname}'`);
    var findresult = await pool.query(findquery);
    if (findresult.rowCount > 0) {
      var updatequery = format(`update competencypartner set detail='${detail_result}' where competencyname='${competencyname}'`);
      await pool.query(updatequery);
    }
    else {      
      var insertquery = format(`INSERT INTO competencypartner (competencyname, detail) VALUES ('${competencyname}', '${detail_result}');`);      
      //console.log(insertquery);
      await pool.query(insertquery);
    }
  }  
}

user.retrieveCertificatesByCohort = async (req,res, next) => {
  try {      
    var ret=[];
    var glcohortid=req.body.cohortid;
    var api_key=req.body.apikey;
    var istranscript=req.body.istranscript;
    var selectedcerttypeid = req.body.certificatetype; 
    if(istranscript==null || istranscript==undefined) istranscript="false";
    
    // var cohorttablename="cohortmembers_degree";
    if(api_key=="" || api_key==null ||  api_key==undefined || glcohortid=="" || glcohortid==null ||  glcohortid==undefined)
    {
      var obj = {
            Status: 400,
              message: "Invalid request parameters"
          };
      res.json(obj);
      return;
    }
    glcohortid=glcohortid.replace(/'/g,"’");
    var cohorttablename="cohortmembers_degree";   
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};

    if(selectedcerttypeid == "" || selectedcerttypeid == undefined || selectedcerttypeid == null) selectedcerttypeid = "degree";  
    selectedcerttypeid=selectedcerttypeid.trim();
    cohorttablename=certtypes[selectedcerttypeid];

    if(istranscript=="true") cohorttablename="cohortmembers_transcript";     
    /*
    var napikey=await getApiKeyFromUserID("1");
    var obj = {
            Status: 200,
              message: napikey
          };
    res.json(obj);
    return;  
    */
    var userid=await getUserIDFromApiKey(api_key); 
    console.log("retrieveCertificatesByCohort=",userid);
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }   
    
    
    var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
    var result = await pool.query(usermasterQuery);
    var business_is_verified=false;      
    if ( result.rowCount > 0 ) 
    {
      business_is_verified=result.rows[0].business_is_verified;
    }
    else
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }

    if(business_is_verified==false)
    {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
    }
    var puserid=await getParentAccountIdFromId(userid); 
    var recipients=req.body.studentids;      
    var recipientinformation=req.body.recipientinformation;

    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
    var yyyy = today.getFullYear();
    today = yyyy+"-"+mm+"-"+dd;
    
    if(recipientinformation !==null && recipientinformation !== undefined && recipientinformation !== ""  && typeof recipientinformation!=='undefined')
    {
      let item={};  
      
      if ( glcohortid == '') {
        var obj = {
          Status: 400,
          message: "Empty cohortid error!"        
          }
          res.json(obj);      
          return;
      }
      let firstname = recipientinformation['firstname'];
      if (firstname == null || firstname == undefined) firstname = "";
      if ( firstname == '') {
        var obj = {
          Status: 400,
          message: "Empty firstname error!"        
          }
          res.json(obj);      
          return;
      }
      let lastname = recipientinformation['lastname'];
      if (lastname == null || lastname == undefined) lastname = "";
      let email = recipientinformation['email'];        
      if (email == null || email == undefined) email = "";
      if ( email == '') {
        var obj = {
          Status: 400,
          message: "Empty email error!"        
          }
          res.json(obj);      
          return;
      }

      let whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and a.firstname='"+ firstname +"' and a.lastname='"+ lastname +"' and a.emailaddress='"+ email +"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
      let studentQuery = format(`SELECT a.*, c.*, b.*, b.id as bid, a.studentid as main_studentid FROM student a 
                                    LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                    LEFT JOIN cohort c ON c.id=b.cohortid 
                                    LEFT JOIN cohort_group e ON e.cohortid=c.cohortid ${whereClause}                                       
                                    `);
        console.log(studentQuery);

      let students = await pool.query(studentQuery);            
      if ( students.rowCount > 0 ) {                            
        for ( const student of students.rows ) {              
          let signedcertificateurl = student['signedcertificateurl'];
          let signedcertificatepdfurl = student['signedcertificatepdfurl'];                
          let first_name = student['firstname'];                
          let middle_name = student['middlename'];
          let last_name = student['lastname'];
          let emailaddress = student['emailaddress'];
          let certificateid = student['certificateid'];
          let issueddate = student['issueddate'];
          let bid=student['bid'];
          let photo_required = student['isphotorequired'];
          let photo_exist = student['photo'];
          let main_studentid = student['main_studentid'];
          let printpdf = student['printpdf'];
          let fullname="";
          if(middle_name==null||middle_name=="")
          {
            fullname=first_name+" "+last_name;
          }
          else
          {
            fullname=first_name+" "+middle_name+" "+last_name;
          }
          var competency_name=student['competencyname'];
          var attachment_name=fullname+" - "+competency_name; 

          if(signedcertificateurl==null||signedcertificateurl=="" || signedcertificatepdfurl==null||signedcertificatepdfurl=="") 
          {
            if (photo_required == "yes"){
              if (photo_exist == null || photo_exist == ""){                      
                item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student has no photo. Please upload the photo."};
                ret.push(item); 
              }
              else{
                item={"certificateid": certificateid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student is not issued yet."};
                ret.push(item); 
              }
            }
            else {
              item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student is not issued yet."};
              ret.push(item); 
            }
            // var item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":"","json":"","dateofissue":""};
            // ret.push(item);    
          }
          else {
            var jsonurl=myip+subwwwurl+"/certificatejson/";
            var pdfurl=myip+subwwwurl+"/certificatepdf/";
            var printurl = "";
            
            
            var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];//signedcertificateurl.split("/").pop();
            var jsoncollegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
            var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];//signedcertificatepdfurl.split("/").pop();
            var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
            
            var verifyid=lastelement.replace(".json","");
            var pdfid=pdflastelement.replace(".pdf","");
          
            
            var pdfurl=`${pdfurl}${pdfcollegeid}/${pdfid}`;
            var jsonurl=`${jsonurl}${jsoncollegeid}/${verifyid}`;
            if(puserid == "20001" || puserid == "1" || puserid == "2")
            {
              //pdfurl=`https://certification.mitwpu.edu.in/pdf/${pdfid}`;
              //jsonurl=`https://certification.mitwpu.edu.in/certificate/${verifyid}`;
            }
            else if(puserid =="20027")
            {
              pdfurl=`https://360digitmg.com/certificatepdf/${pdfid}`;
              jsonurl=`https://360digitmg.com/certificatejson/${pdfid}`;
            }
            else if(puserid=="20094")
            {   
              var printpdfname=printpdf.split("/")[printpdf.split("/").length-1];//signedcertificatepdfurl.split("/").pop();  
              printpdfname = printpdfname.replace(".pdf","");         
              pdfurl=`https://certification.mietjmu.in/pdf/${jsoncollegeid}/${pdfid}`;
              jsonurl=`https://certification.mietjmu.in/certificate${jsoncollegeid}/${pdfid}`;
              printurl = `https://certification.mietjmu.in/print/${jsoncollegeid}/${printpdfname}`;
            }
            let updateQuery = format(`update ${cohorttablename} set retrievestate=true, retrievedate='${today}', certificatesendstate = 2 where id='${bid}'`);
            await pool.query(updateQuery);
            //item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl,"dateofissue": issueddate};
            if (printurl ==""){
              item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl,"dateofissue": issueddate};
            }
            else {
              item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl, "dateofissue": issueddate};
            }
            
            
            ret.push(item);
          }
        }
      }
      else
      {         
          ret.push({"firstname":recipientinformation['firstname'],"lastname":recipientinformation['lastname'],"email":email, "result": "This student is not existed in current cohort."}) ;
      }
      
    }
    else 
    {      
      if(recipients!==null && recipients!==undefined && recipients!=="" && typeof recipients!=='undefined')
      {
        for(let index=0; index<recipients.length; index++)
        {
          let item={};          
          if(istranscript=="true") cohorttablename="cohortmembers_transcript"; 
          let studentid=recipients[index];
          if ( glcohortid == '' || studentid == '') {continue;}
          let whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and a.studentid='"+studentid+"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
          let studentQuery = format(`SELECT a.*, c.*, b.*, b.id as bid, a.studentid as main_studentid FROM student a 
                                        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                        LEFT JOIN cohort c ON c.id=b.cohortid 
                                        LEFT JOIN cohort_group e ON e.cohortid=c.cohortid ${whereClause}                                       
                                        `);
          console.log(studentQuery);

          let students = await pool.query(studentQuery);            
          if ( students.rowCount > 0 ) {                            
            for ( const student of students.rows ) {                
              let signedcertificateurl = student['signedcertificateurl'];
              let signedcertificatepdfurl = student['signedcertificatepdfurl'];                
              let first_name = student['firstname'];                
              let middle_name = student['middlename'];
              let last_name = student['lastname'];
              let emailaddress = student['emailaddress'];
              let certificateid = student['certificateid'];
              let issueddate = student['issueddate'];
              let bid=student['bid'];
              let photo_required = student['isphotorequired'];
              let photo_exist = student['photo'];
              let main_studentid = student['main_studentid'];
              let printpdf = student['printpdf'];
              let fullname="";
              if(middle_name==null||middle_name=="")
              {
                fullname=first_name+" "+last_name;
              }
              else
              {
                fullname=first_name+" "+middle_name+" "+last_name;
              }
              let competency_name=student['competencyname'];
              let attachment_name=fullname+" - "+competency_name; 

              if(signedcertificateurl==null||signedcertificateurl=="" || signedcertificatepdfurl==null||signedcertificatepdfurl=="") 
              {
                if (photo_required == "yes"){
                  if (photo_exist == null || photo_exist == ""){                    
                    item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student has no photo. Please upload the photo."};
                    ret.push(item); 
                  }
                  else{
                    item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student is not issued yet."};
                    ret.push(item); 
                  }
                }
                else {
                  item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student is not issued yet."};
                  ret.push(item); 
                }
                // var item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"issueddate":"","pdf":"","json":""};
                // ret.push(item);    
              }
              else
              {
                var jsonurl=myip+subwwwurl+"/certificatejson/";
                var pdfurl=myip+subwwwurl+"/certificatepdf/";
                var printurl = "";
                
                var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];//signedcertificateurl.split("/").pop();
                var jsoncollegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
                var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];//signedcertificatepdfurl.split("/").pop();
                var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
                
                var verifyid=lastelement.replace(".json","");
                var pdfid=pdflastelement.replace(".pdf","");
              
                
                var pdfurl=`${pdfurl}${pdfcollegeid}/${pdfid}`;
                var jsonurl=`${jsonurl}${jsoncollegeid}/${verifyid}`;
                
                if(puserid == "20001" || puserid == "1" || puserid == "2")
                {
                  //pdfurl=`https://certification.mitwpu.edu.in/pdf/${pdfid}`;
                  //jsonurl=`https://certification.mitwpu.edu.in/certificate/${verifyid}`;
                }
                else if(puserid =="20027")
                {
                  pdfurl=`https://360digitmg.com/certificatepdf/${pdfid}`;
                  jsonurl=`https://360digitmg.com/certificatejson/${pdfid}`;
                }
                else if(puserid=="20094")
                {
                  var printpdfname=printpdf.split("/")[printpdf.split("/").length-1];//signedcertificatepdfurl.split("/").pop();  
                  printpdfname = printpdfname.replace(".pdf","");         
                  pdfurl=`https://certification.mietjmu.in/pdf/${jsoncollegeid}/${pdfid}`;
                  jsonurl=`https://certification.mietjmu.in/certificate${jsoncollegeid}/${pdfid}`;
                  printurl = `https://certification.mietjmu.in/print/${jsoncollegeid}/${printpdfname}`;
                }
                let updateQuery = format(`update ${cohorttablename} set retrievestate=true, retrievedate='${today}' where id='${bid}'`);
                await pool.query(updateQuery);
                //item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"issueddate":issueddate,"pdf":pdfurl,"json":jsonurl};
                if (printurl ==""){
                  item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl,"dateofissue": issueddate};
                }
                else {
                  item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl, "printurl": printurl,"dateofissue": issueddate};
                }
                ret.push(item);
              }
            }
          }
          else
          {
            ret.push({"studentid": studentid, "error": "This student is not existed in current cohort."});
          }
        
        }
      }
      else // search by cohortid
      {        
          let item={};          
          if(istranscript=="true") cohorttablename="cohortmembers_transcript";
          let whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"';"
          let studentQuery = format(`SELECT a.*, c.*, b.*, b.id as bid, a.studentid as main_studentid FROM student a 
                                        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                        LEFT JOIN cohort c ON c.id=b.cohortid 
                                        LEFT JOIN cohort_group e ON e.cohortid=c.cohortid ${whereClause}                                       
                                        `);
          console.log(studentQuery);

          let students = await pool.query(studentQuery);            
          if ( students.rowCount > 0 ) {                            
            for ( const student of students.rows ) {                
              let signedcertificateurl = student['signedcertificateurl'];
              let signedcertificatepdfurl = student['signedcertificatepdfurl'];                
              let first_name = student['firstname'];                
              let middle_name = student['middlename'];
              let last_name = student['lastname'];
              let emailaddress = student['emailaddress'];
              let certificateid = student['certificateid'];
              let issueddate = student['issueddate'];
              let bid=student['bid'];
              let photo_required = student['isphotorequired'];
              let photo_exist = student['photo'];
              
              let printpdf = student['printpdf'];
              let fullname="";
              if(middle_name==null||middle_name=="")
              {
                fullname=first_name+" "+last_name;
              }
              else
              {
                fullname=first_name+" "+middle_name+" "+last_name;
              }
              let competency_name=student['competencyname'];
              let attachment_name=fullname+" - "+competency_name; 

              if(signedcertificateurl==null||signedcertificateurl=="" || signedcertificatepdfurl==null||signedcertificatepdfurl=="") 
              {
                if (photo_required == "yes"){
                  if (photo_exist == null || photo_exist == ""){                    
                    item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student has no photo. Please upload the photo."};
                    ret.push(item); 
                  }
                  else{
                    item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student is not issued yet."};
                    ret.push(item); 
                  }
                }
                else {
                  item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"result":"This student is not issued yet."};
                  ret.push(item); 
                }
                // var item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"issueddate":"","pdf":"","json":""};
                // ret.push(item);    
              }
              else
              {
                var jsonurl=myip+subwwwurl+"/certificatejson/";
                var pdfurl=myip+subwwwurl+"/certificatepdf/";
                var printurl = "";
                
                var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];//signedcertificateurl.split("/").pop();
                var jsoncollegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
                var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];//signedcertificatepdfurl.split("/").pop();
                var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
                
                var verifyid=lastelement.replace(".json","");
                var pdfid=pdflastelement.replace(".pdf","");
              
                
                var pdfurl=`${pdfurl}${pdfcollegeid}/${pdfid}`;
                var jsonurl=`${jsonurl}${jsoncollegeid}/${verifyid}`;
                
                if(puserid == "20001" || puserid == "1" || puserid == "2")
                {
                  //pdfurl=`https://certification.mitwpu.edu.in/pdf/${pdfid}`;
                  //jsonurl=`https://certification.mitwpu.edu.in/certificate/${verifyid}`;
                }
                else if(puserid =="20027")
                {
                  pdfurl=`https://360digitmg.com/certificatepdf/${pdfid}`;
                  jsonurl=`https://360digitmg.com/certificatejson/${pdfid}`;
                }
                else if(puserid=="20094")
                {
                  var printpdfname=printpdf.split("/")[printpdf.split("/").length-1];//signedcertificatepdfurl.split("/").pop();  
                  printpdfname = printpdfname.replace(".pdf","");         
                  pdfurl=`https://certification.mietjmu.in/pdf/${jsoncollegeid}/${pdfid}`;
                  jsonurl=`https://certification.mietjmu.in/certificate${jsoncollegeid}/${pdfid}`;
                  printurl = `https://certification.mietjmu.in/print/${jsoncollegeid}/${printpdfname}`;
                }
                let updateQuery = format(`update ${cohorttablename} set retrievestate=true, retrievedate='${today}' where id='${bid}'`);
                await pool.query(updateQuery);
                //item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"issueddate":issueddate,"pdf":pdfurl,"json":jsonurl};
                if (printurl ==""){
                  item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl,"dateofissue": issueddate};
                }
                else {
                  item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl, "printurl": printurl,"dateofissue": issueddate};
                }
                ret.push(item);
              }
            }
          }
          else
          {
            ret.push({"studentid": studentid, "error": "This student is not existed in current cohort."});
          }  
      }
    }
    res.json({Status: 200, result:ret, message: "Success"});
  }
  catch (error) {
    res.json({Status: 400, message: error.message});
  }
}

user.downloadCertificates = async (req,res, next) => {
  try {
    var ret=[];
    var glcohortid=req.body.cohortid;
    var api_key=req.body.apikey;
    var cohorttablename="cohortmembers_degree";
    if(api_key=="" || api_key==null ||  api_key==undefined || glcohortid=="" || glcohortid==null ||  glcohortid==undefined)
    {
      res.json({ Status: 400, message: "Invalid request parameters"});
      return;
    }
    glcohortid=glcohortid.replace(/'/g,"’");
    var userid=await getUserIDFromApiKey(api_key); 
    console.log("downloadCertificates=",userid);
    if(userid==null)
    {
      res.json({ Status: 400, message: "Invalid api key"});
      return; 
    }
    var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
    var result = await pool.query(usermasterQuery);
    var business_is_verified=false;      
    if ( result.rowCount > 0 ) {
      business_is_verified=result.rows[0].business_is_verified;
    }
    else {
      res.json({ Status: 400, message: "Invalid api key"});
      return; 
    }

    if(business_is_verified==false)
    {
      res.json({Status: 400, message: "Your account is currently under verification, please contact certonce team."});
      return;
    }
    var puserid = await getParentAccountIdFromId(userid);
    var recipients=req.body.studentids;      
    var recipientinformation=req.body.recipientinformation;
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
    var yyyy = today.getFullYear();
    today = yyyy+"-"+mm+"-"+dd;

    if(recipientinformation !==null && recipientinformation !== undefined && recipientinformation !== "")
    {
      var item={};          
      if ( glcohortid == '') {
        res.json({Status: 400, message: "Empty cohortid error!"});      
        return;
      }
      for(let index=0; index<recipientinformation.length; index++){
        firstname = recipientinformation[index].firstname;
        lastname = recipientinformation[index].lastname;
        email = recipientinformation[index].email;
        downloadstate = recipientinformation[index].downloadstate;
        var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and a.firstname='"+firstname+"' and a.lastname='"+lastname+"' and a.emailaddress='"+email+"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
        var studentQuery = format(`SELECT a.*, c.*, b.*, b.id as bid FROM student a 
                                      LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                      LEFT JOIN cohort c ON c.id=b.cohortid 
                                      LEFT JOIN cohort_group e ON e.cohortid=c.cohortid ${whereClause}`);
        console.log(downloadstate, studentQuery);
        let students = await pool.query(studentQuery);            
        if ( students.rowCount > 0 ) {                            
          for ( const student of students.rows ) {
            var signedcertificateurl = student['signedcertificateurl'];
            var signedcertificatepdfurl = student['signedcertificatepdfurl'];                
            var first_name = student['firstname'];                
            var middle_name = student['middlename'];
            var last_name = student['lastname'];
            var emailaddress = student['emailaddress'];
            var certificateid = student['certificateid'];
            var issueddate = student['issueddate'];
            var bid=student['bid'];
            var fullname="";
            if(middle_name==null||middle_name=="") {
              fullname=first_name+" "+last_name;
            } else {
              fullname=first_name+" "+middle_name+" "+last_name;
            }
            var competency_name=student['competencyname'];
            var attachment_name=fullname+" - "+competency_name; 

            if(signedcertificateurl==null||signedcertificateurl=="" || signedcertificatepdfurl==null||signedcertificatepdfurl=="") 
            {
              let updateQuery = format(`update ${cohorttablename} set retrievestate=true, retrievedate='${today}', certificatesendstate = 2, downloadstate=${downloadstate} where id='${bid}'`);
              await pool.query(updateQuery);
              var item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":"","json":"","dateofissue":"","downloadstate": downloadstate};
              ret.push(item);    
            } 
            else {
              var jsonurl=myip+subwwwurl+"/certificatejson/";
              var pdfurl=myip+subwwwurl+"/certificatepdf/";
              var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];//signedcertificateurl.split("/").pop();
              var jsoncollegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
              var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];//signedcertificatepdfurl.split("/").pop();
              var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
              
              var verifyid=lastelement.replace(".json","");
              var pdfid=pdflastelement.replace(".pdf","");
            
              var pdfurl=`${pdfurl}${pdfcollegeid}/${pdfid}`;
              var jsonurl=`${jsonurl}${jsoncollegeid}/${verifyid}`;
              if(puserid == "20001" || puserid == "1" || puserid == "2")
              {
                //pdfurl=`https://certification.mitwpu.edu.in/pdf/${pdfid}`;
                //jsonurl=`https://certification.mitwpu.edu.in/certificate/${verifyid}`;
              }
              if(puserid =="20027")
              {
                pdfurl=`https://360digitmg.com/certificatepdf/${pdfid}`;
                jsonurl=`https://360digitmg.com/certificatejson/${pdfid}`;
              }
              let updateQuery = format(`update ${cohorttablename} set certificatesendstate = 2, downloaddate='${today}', downloadstate=${downloadstate} where id='${bid}'`);
              await pool.query(updateQuery);
              var item={"certificateid": certificateid, "firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl,"dateofissue":issueddate,"downloadstate": downloadstate};
              ret.push(item);
            }
          }
        }
      }
    }
    else 
    {
      if(recipients==null || recipients==undefined || recipients=="" || typeof recipients=='undefined')
      {
        res.json({Status: 200, message: "Required correct parameters."});
        return;
      }
      for(let index=0; index<recipients.length; index++)
      {
        var item={};
        studentid=recipients[index].studentid;
        downloadstate = recipients[index].downloadstate;
        console.log("asdfasdf", index, studentid, downloadstate);
        if ( glcohortid == '' || studentid == '') {continue;}
        var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and a.studentid='"+studentid+"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
        var studentQuery = format(`SELECT a.*, c.*, b.*, b.id as bid FROM student a 
                                      LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                      LEFT JOIN cohort c ON c.id=b.cohortid 
                                      LEFT JOIN cohort_group e ON e.cohortid=c.cohortid ${whereClause}`);
        console.log(studentQuery);
        let students = await pool.query(studentQuery);            
        if ( students.rowCount > 0 ) {                            
          for ( const student of students.rows ) {                  
            var signedcertificateurl = student['signedcertificateurl'];
            var signedcertificatepdfurl = student['signedcertificatepdfurl'];                
            var first_name = student['firstname'];                
            var middle_name = student['middlename'];
            var last_name = student['lastname'];
            var emailaddress = student['emailaddress'];
            var certificateid = student['certificateid'];
            var bid=student['bid'];
            var fullname="";
            if(middle_name==null||middle_name=="")
            {
              fullname=first_name+" "+last_name;
            }
            else
            {
              fullname=first_name+" "+middle_name+" "+last_name;
            }
            var competency_name=student['competencyname'];
            var attachment_name=fullname+" - "+competency_name; 

            if(signedcertificateurl==null||signedcertificateurl=="" || signedcertificatepdfurl==null||signedcertificatepdfurl=="") 
            {
              let updateQuery = format(`update ${cohorttablename} set retrievestate=true, retrievedate='${today}', certificatesendstate = 2, downloadstate=${downloadstate} where id='${bid}'`);
              await pool.query(updateQuery);
              var item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":"","json":"", "downloadstate": downloadstate};
              ret.push(item);    
            }
            else
            {
              var jsonurl=myip+subwwwurl+"/certificatejson/";
              var pdfurl=myip+subwwwurl+"/certificatepdf/";
              
              var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];//signedcertificateurl.split("/").pop();
              var jsoncollegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
              var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];//signedcertificatepdfurl.split("/").pop();
              var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
              
              var verifyid=lastelement.replace(".json","");
              var pdfid=pdflastelement.replace(".pdf","");
            
              var pdfurl=`${pdfurl}${pdfcollegeid}/${pdfid}`;
              var jsonurl=`${jsonurl}${jsoncollegeid}/${verifyid}`;
              if(puserid == "20001" || puserid == "1" || puserid == "2")
              {
                //pdfurl=`https://certification.mitwpu.edu.in/pdf/${pdfid}`;
                //jsonurl=`https://certification.mitwpu.edu.in/certificate/${verifyid}`;
              }
              if(puserid =="20027")
              {
                pdfurl=`https://360digitmg.com/certificatepdf/${pdfid}`;
                jsonurl=`https://360digitmg.com/certificatejson/${pdfid}`;
              }
              let updateQuery = format(`update ${cohorttablename} set certificatesendstate = 2, downloaddate='${today}', downloadstate=${downloadstate} where id='${bid}'`);
              await pool.query(updateQuery);
              var item={"certificateid": certificateid, "studentid":studentid,"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl, "downloadstate": downloadstate};
              ret.push(item);
            }
          }
        }
      }
    }
    res.json({Status: 200, result:ret, message: "Success"});
  }
  catch (error) {
    res.json({Status: 400, message: error.message});      
  }
}

user.createDetailForCompetency = async(req, res, next) =>{
  try{
    var ret = [];
    var api_key=req.body.apikey;  
    var competencyname=req.body.competencyName;
    var detail_content = req.body.competencyDetail;
    if(api_key == "" || competencyname == "" || detail_content == ""){
      var obj = {
        Status: 400,
          message: "Invalid request parameters."
      };
      res.json(obj);
      return; 
    }
    var userid=await getUserIDFromApiKey(api_key); 
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }
    

    var detail_header = `<p style="font-size:6pt;font-family:Roboto, sans-serif;color:rgb(88, 89, 91);margin:0px;">${detail_content[0]}</p><p style="font-size:6pt;font-family:Roboto, sans-serif;color:rgb(88, 89, 91);margin:0px;">${detail_content[1]}</p>`;
    var detail_body = "";
    for (let index=2; index < detail_content.length; index++) {
      detail_body += `<li><p style="font-size:6pt;font-family:Roboto, sans-serif;color:rgb(88, 89, 91);margin:0px;">${detail_content[index]}</p></li>`;
    }
    detail_body = `<ul style="margin: 0px;margin-left: -24px;">${detail_body}</ul>`;
    var detail_result = detail_header + detail_body;

    var findquery = format(`select * from competencypartner where competencyname='${competencyname}'`);
    var findresult = await pool.query(findquery);
    if (findresult.rowCount > 0) {
      var updatequery = format(`update competencypartner set detail='${detail_result}' where competencyname='${competencyname}'`);
      await pool.query(updatequery);
    }
    else {      
      var insertquery = format(`INSERT INTO competencypartner (competencyname, detail) VALUES ('${competencyname}', '${detail_result}');`);      
      console.log(insertquery);
      await pool.query(insertquery);
    }

    var obj = {
      Status: 200,
      result: ret,
      message: 'Success',              
    }
    res.json(obj);
  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message        
    }
    res.json(obj); 
  }
}

user.apiCertOnceGetOpenBadge = async (req,res, next) => {
  
  var api_key=req.body.apikey;  
  var cohortid=req.body.cohortid;
  var competencyname=req.body.competencyname;
  var firstname=req.body.firstname;
  var middlename=req.body.middlename;
  var lastname=req.body.lastname;
  var email=req.body.email;
  var fullname="";
  if(cohortid=="" ||  cohortid==undefined || cohortid==null || competencyname=="" || competencyname==null ||  competencyname==undefined || email=="" || email==null  ||  email==undefined || 
  api_key=="" || api_key==null ||  api_key==undefined || ((firstname=="" || firstname==null ||  firstname==undefined) && (middlename=="" || middlename==null ||  middlename==undefined) && (lastname=="" || lastname==null ||  lastname==undefined)))
  {
      var obj = {
            Status: 400,
              message: "Invalid request parameter"
          };
      res.json(obj);
      return;
  }
  if(firstname=="" || firstname==null ||  firstname==undefined) firstname="";
  if(middlename=="" || middlename==null ||  middlename==undefined) middlename="";
  if(lastname=="" || lastname==null ||  lastname==undefined) lastname="";
  if(middlename=="")
  {
    fullname=firstname+" "+lastname;
  }
  else
  {
    fullname=firstname+" "+middlename+" "+lastname;
  } 
  try {    
    //var napikey=await getApiKeyFromUserID("1");
    var userid=await getUserIDFromApiKey(api_key);
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }      
    var puserid=await getParentAccountIdFromId(userid); 

    var imageToBake=await getUnBakedImage(puserid, cohortid, competencyname);
    if(imageToBake=="" || imageToBake==null)
    {
      var obj = {
            Status: 400,
              message: "There is no image for bake"
          };
      res.json(obj);
      return; 
    }

    var cohort_id=await getChortidFromCohortAndCompetency(cohortid, competencyname, puserid);
    if(cohort_id=="" || cohort_id==null)
    {
      var obj = {
            Status: 400,
              message: "There is no selected cohortid"
          };
      res.json(obj);
      return; 
    }
    var studentid=null

    var addStudentQuery = format(`INSERT INTO STUDENT (firstname,middlename,lastname,emailaddress,accountid)
                            SELECT '${firstname}','${middlename}', '${lastname}', '${email}','${puserid}'
                            WHERE NOT EXISTS (SELECT 1 FROM STUDENT WHERE  LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}')
                            RETURNING id;`);
      students = await pool.query(addStudentQuery);
      if (students.rowCount > 0) {
          studentid = students.rows[0].id;
      } 
    else {
          var getExistStudent = format(`SELECT id FROM STUDENT WHERE LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}';`);
          students = await  pool.query(getExistStudent);
          if (students.rowCount > 0) {
              studentid = students.rows[0].id;
          }
    }
    
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var studentsforonetimecode;                      
    var onetimecode="";
    var loopcount=0; 
    while(loopcount!==Object.keys(certtypes).length)
    {
      onetimecode = getOnetimecode(8);
      loopcount=0;
      for (const key in certtypes){         
          var tablenameforcerttype = certtypes[key];                            
          let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
          studentsforonetimecode = await pool.query(getExistStudent);
          if (studentsforonetimecode.rowCount == 0) {                                
              loopcount++;
          }
        }
    }
    
    var addPivotQuery = format(`INSERT INTO cohortmembers_openbadges (cohortid,studentid,onetimeblockcertscode)
        SELECT '${cohort_id}','${studentid}','${onetimecode}' WHERE NOT EXISTS ( SELECT 1 FROM cohortmembers_openbadges WHERE cohortid='${cohort_id}' and studentid='${studentid}');`);
    await pool.query(addPivotQuery);
    
    var studentinfo=await getStudentInfoFromName(cohort_id,studentid,"cohortmembers_openbadges");
    if(studentinfo==null)
    {
       var obj = {
            Status: 400,
              message: "Error"
          };
        res.json(obj);
        return;
    }
    console.log(studentinfo.id);
    console.log(studentinfo.onetimeblockcertscode);
   
    //////get imageTobake//////
    ///////////////////////////



    var issuercontent_new={};
    var issuer_url="https://www.certonce.com/openbadgesissuer/"+puserid+"/"+cohort_id;
    issuercontent_new.type="issuer";
    issuercontent_new.id=issuer_url;
    issuercontent_new.url=myip;
    issuercontent_new.name=competencyname;                 
    issuercontent_new.description="";                       
    issuercontent_new.email="admin@certonce.com";
    issuercontent_new["@context"]="https://w3id.org/openbadges/v2";      
    var status=await uploadOpenBadgesObject("openbadges/api/"+puserid+"/"+cohort_id+"/issuer.json",JSON.stringify(issuercontent_new));
    console.log(status);
    if(status=="error")
    {
      var obj = {
          Status: 400,
            message: "Put issuer Error"
        };
      res.json(obj);
      return;
    }
    
    var openbadgepathgroupname= getUuid(puserid+"="+cohort_id);
    const buff2 = Buffer.from(imageToBake, 'base64');
    var str = buff2.toString('utf-8');
    var openbadgepathgrouppath=openbadges_api_base_path+openbadgepathgroupname;
    var os = new os_func();
    if (!await fs.existsSync(openbadgepathgrouppath))
    {
        await os.execCommand('sudo mkdir -p "'+openbadgepathgrouppath+'"');
        await os.execCommand('sudo chmod -R 777 "'+openbadgepathgrouppath+'"');
    }    
    var standard_badge_file=openbadgepathgrouppath+"/standard_badge_file.png";
    var base64Data = imageToBake.replace(/^data:image\/png;base64,/, "");
    await fs.writeFileSync(standard_badge_file,base64Data ,"base64");

    var my_badge_uuid=getUuid(studentinfo.onetimeblockcertscode);
    var my_badge_file=my_badge_uuid+".png";
    var my_badge_file_withoutext=my_badge_uuid;
    var my_badge_content_file=my_badge_uuid+".json";

    
    var baked_filename=openbadgepathgrouppath+"/"+my_badge_file;

    var badge_id_url="https://www.certonce.com/openbadgesid/"+puserid+"/"+cohort_id+"/"+my_badge_content_file;
    var badge_id_content={};
    badge_id_content.issuedOn=getIso8601Time();
    badge_id_content.id=badge_id_url;
    badge_id_content.name=competencyname;
    badge_id_content.description="";
    badge_id_content.image=imageToBake;
    badge_id_content.criteria="https://www.certonce.com";
    badge_id_content.issuer=issuer_url;
    badge_id_content.type="BadgeClass";
    badge_id_content["@context"]="https://w3id.org/openbadges/v2";
    badge_id_content["recipient"]={};
    badge_id_content["recipient"]["type"]="email";
    badge_id_content["recipient"]["identity"]=email;
    badge_id_content["recipient"]["name"]=fullname;
    status=await uploadOpenBadgesObject("openbadges/api/"+puserid+"/"+cohort_id+"/"+my_badge_content_file,JSON.stringify(badge_id_content));
    console.log(status);
    if(status=="error")
    {
      var obj = {
          Status: 400,
            message: "Put OpenBadge Content Error"
        };
      res.json(obj);
      return;
    }
    
    
    var badge_content={};
    badge_content["@context"]="https://w3id.org/openbadges/v2";
    badge_content["id"]=badge_id_url;
    badge_content["type"]="Assertion";
    badge_content["verification"]={};
    badge_content["verification"]["type"]="hosted";
    
    var baked_verifier_url="https://www.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext;
    var baked_file_url="https://www.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_file;
     
    console.log(baked_file_url);
    console.log(baked_verifier_url);
    
    await apibake(standard_badge_file, JSON.stringify(badge_content), baked_filename,"openbadges/api/"+puserid+"/"+cohort_id+"/"+my_badge_file); 
    
    var obj = {
          Status: 200,
          message: "Success",
          verifier: baked_verifier_url,
          bakeimage: baked_file_url
        };
    res.json(obj);
    


  } catch (error) {
    var obj = {
            Status: 400,
              message: error
          };
      res.json(obj);
      return;
  }  
  
}

user.apiCertOnceKullarGetOpenBadge = async (req,res, next) => {
  
  var api_key=req.body.apikey;  
  var cohortid=req.body.cohortid;
  var competencyname=req.body.competencyname;
  var firstname=req.body.firstname;
  var middlename=req.body.middlename;
  var lastname=req.body.lastname;
  var email=req.body.email;
  var fullname="";
  if(cohortid=="" ||  cohortid==undefined || cohortid==null || competencyname=="" || competencyname==null ||  competencyname==undefined || email=="" || email==null  ||  email==undefined || 
  api_key=="" || api_key==null ||  api_key==undefined || ((firstname=="" || firstname==null ||  firstname==undefined) && (middlename=="" || middlename==null ||  middlename==undefined) && (lastname=="" || lastname==null ||  lastname==undefined)))
  {
      var obj = {
            Status: 400,
              message: "Invalid request parameter"
          };
      res.json(obj);
      return;
  }
  if(firstname=="" || firstname==null ||  firstname==undefined) firstname="";
  if(middlename=="" || middlename==null ||  middlename==undefined) middlename="";
  if(lastname=="" || lastname==null ||  lastname==undefined) lastname="";

  
  if(middlename=="")
  {
    fullname=firstname+" "+lastname;
  }
  else
  {
    fullname=firstname+" "+middlename+" "+lastname;
  } 

  try {    
    //var napikey=await getApiKeyFromUserID("1");
    var userid=await getUserIDFromApiKey(api_key);
    if(userid==null)
    {
      var obj = {
            Status: 400,
              message: "Invalid api key"
          };
      res.json(obj);
      return; 
    }      
    var puserid=await getParentAccountIdFromId(userid); 

    var imageToBake=await getUnBakedImage(puserid, cohortid, competencyname);
    if(imageToBake=="" || imageToBake==null)
    {
      var obj = {
            Status: 400,
              message: "There is no image for bake"
          };
      res.json(obj);
      return; 
    }

    var cohort_id=await getChortidFromCohortAndCompetency(cohortid, competencyname, puserid);
    if(cohort_id=="" || cohort_id==null)
    {
      var obj = {
            Status: 400,
              message: "There is no selected cohortid"
          };
      res.json(obj);
      return; 
    }
    var studentid=null;

    var addStudentQuery = format(`INSERT INTO STUDENT (firstname,middlename,lastname,emailaddress,accountid)
                            SELECT '${firstname}','${middlename}', '${lastname}', '${email}','${puserid}'
                            WHERE NOT EXISTS (SELECT 1 FROM STUDENT WHERE  LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}')
                            RETURNING id;`);
      students = await pool.query(addStudentQuery);
      if (students.rowCount > 0) {
          studentid = students.rows[0].id;
      } 
    else {
          var getExistStudent = format(`SELECT id FROM STUDENT WHERE LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}';`);
          students = await  pool.query(getExistStudent);
          if (students.rowCount > 0) {
              studentid = students.rows[0].id;
          }
    }
    
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var studentsforonetimecode;                      
    var onetimecode="";
    var loopcount=0; 
    while(loopcount!==Object.keys(certtypes).length)
    {
      onetimecode = getOnetimecode(8);
      loopcount=0;
      for (const key in certtypes){         
          var tablenameforcerttype = certtypes[key];                            
          let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
          studentsforonetimecode = await pool.query(getExistStudent);
          if (studentsforonetimecode.rowCount == 0) {                                
              loopcount++;
          }
        }
    }
    
    var addPivotQuery = format(`INSERT INTO cohortmembers_openbadges (cohortid,studentid,onetimeblockcertscode)
        SELECT '${cohort_id}','${studentid}','${onetimecode}' WHERE NOT EXISTS ( SELECT 1 FROM cohortmembers_openbadges WHERE cohortid='${cohort_id}' and studentid='${studentid}');`);
    await pool.query(addPivotQuery);
    
    var studentinfo=await getStudentInfoFromName(cohort_id,studentid,"cohortmembers_openbadges");
    if(studentinfo==null)
    {
       var obj = {
            Status: 400,
              message: "Error"
          };
        res.json(obj);
        return;
    }
    console.log(studentinfo.id);
    console.log(studentinfo.onetimeblockcertscode);
   
    //////get imageTobake//////
    ///////////////////////////



    var issuercontent_new={};
    var issuer_url="https://www.certonce.com/openbadgesissuer/"+puserid+"/"+cohort_id;
    issuercontent_new.type="issuer";
    issuercontent_new.id=issuer_url;
    issuercontent_new.url=myip;
    issuercontent_new.name=competencyname;                 
    issuercontent_new.description="";                       
    issuercontent_new.email="admin@certonce.com";
    issuercontent_new["@context"]="https://w3id.org/openbadges/v2";      
    var status=await uploadOpenBadgesObject("openbadges/api/"+puserid+"/"+cohort_id+"/issuer.json",JSON.stringify(issuercontent_new));
    console.log(status);
    if(status=="error")
    {
      var obj = {
          Status: 400,
            message: "Put issuer Error"
        };
      res.json(obj);
      return;
    }
    
    var openbadgepathgroupname= getUuid(puserid+"="+cohort_id);
    const buff2 = Buffer.from(imageToBake, 'base64');
    var str = buff2.toString('utf-8');
    var openbadgepathgrouppath=openbadges_api_base_path+openbadgepathgroupname;
    var os = new os_func();
    if (!await fs.existsSync(openbadgepathgrouppath))
    {
        await os.execCommand('sudo mkdir -p "'+openbadgepathgrouppath+'"');
        await os.execCommand('sudo chmod -R 777 "'+openbadgepathgrouppath+'"');
    }    
    var standard_badge_file=openbadgepathgrouppath+"/standard_badge_file.png";
    var base64Data = imageToBake.replace(/^data:image\/png;base64,/, "");
    await fs.writeFileSync(standard_badge_file,base64Data ,"base64");

    var my_badge_uuid=getUuid(studentinfo.onetimeblockcertscode);
    var my_badge_file=my_badge_uuid+".png";
    var my_badge_file_withoutext=my_badge_uuid;
    var my_badge_content_file=my_badge_uuid+".json";

    
    var baked_filename=openbadgepathgrouppath+"/"+my_badge_file;

    var badge_id_url="https://www.certonce.com/openbadgesid/"+puserid+"/"+cohort_id+"/"+my_badge_content_file;
    var badge_id_content={};
    var issueddate=getIso8601Time();
    badge_id_content.issuedOn=issueddate;
    badge_id_content.id=badge_id_url;
    badge_id_content.name=competencyname;
    badge_id_content.description="";
    badge_id_content.image=imageToBake;
    badge_id_content.criteria="https://www.certonce.com";
    badge_id_content.issuer=issuer_url;
    badge_id_content.type="BadgeClass";
    badge_id_content["@context"]="https://w3id.org/openbadges/v2";
    badge_id_content["recipient"]={};
    badge_id_content["recipient"]["type"]="email";
    badge_id_content["recipient"]["identity"]=email;
    badge_id_content["recipient"]["name"]=fullname;
    status=await uploadOpenBadgesObject("openbadges/api/"+puserid+"/"+cohort_id+"/"+my_badge_content_file,JSON.stringify(badge_id_content));
    console.log(status);
    if(status=="error")
    {
      var obj = {
          Status: 400,
            message: "Put OpenBadge Content Error"
        };
      res.json(obj);
      return;
    }
    
    
    var badge_content={};
    badge_content["@context"]="https://w3id.org/openbadges/v2";
    badge_content["id"]=badge_id_url;
    badge_content["type"]="Assertion";
    badge_content["verification"]={};
    badge_content["verification"]["type"]="hosted";
    
    var baked_verifier_url="https://www.certonce.com/kullaropenbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext;
    
    var baked_file_url="https://www.certonce.com/kullaropenbadges/"+puserid+"/"+cohort_id+"/"+my_badge_file;
     
    console.log(baked_file_url);
    console.log(baked_verifier_url);
    
    await apibake(standard_badge_file, JSON.stringify(badge_content), baked_filename,"openbadges/api/"+puserid+"/"+cohort_id+"/"+my_badge_file);  
    var pdfs3url=await generateKullarOpenBadgePDF(my_badge_content_file,puserid,cohort_id,fullname,competencyname,issueddate,baked_verifier_url);
    var pdfurl="https://www.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";
    var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificatejson = '${baked_file_url}',signedcertificateurl='${baked_verifier_url}',signedcertificatepdfurl='${pdfurl}' WHERE  id=${studentinfo.id}`);
    console.log(updatesql)
    await pool.query(updatesql);
    var obj = {
          Status: 200,
          message: "Success",
          verifier: baked_verifier_url,
          bakeimage: baked_file_url,
          pdf: pdfurl
        };
    res.json(obj);
    


  } catch (error) {
    var obj = {
            Status: 400,
              message: error
          };
      res.json(obj);
      return;
  }  
  
}

user.bakeopenbadges = async (req,res, next) => {
  const path = '/home/ubuntu/badgelock.txt';
  try
  {
    ///lock///    
    if (fs.existsSync(path))
    {
       var obj = {
          Status: 400,
            message: "Baking process is running already."
        };
        res.json(obj);
        return;
    }
    else
    {       
     const fd = fs.openSync(path, 'w');       
    }
    ///lock end///

    var params = req.body.selectedItems;
    var certtype=req.body.certtype;
    var issendopenbadges=req.body.issendopenbadges;
    var currentUser = req.user;
    var organization_name=currentUser.organization_name;
    var os = new os_func();
    //var isPreview = req.body.isPreview;
    //if(isPreview==undefined) isPreview = false;
    
    var obj = await CoreBakeOpenBadges(currentUser, issendopenbadges, params)
    //console.log("ggggggggggggggggggggggggggggggggggggg");
    //console.log(obj);
    res.json(obj);
    
    fs.unlinkSync(path);
  } 
  catch (err) {
    fs.unlinkSync(path);
    var obj = {
      Status: 400,
      message: err.message        
      }
      res.json(obj); 
  }
}

async function CoreBakeOpenBadges(currentUser, issendopenbadges, params, isPreview=false) {
  var result = {};
  var os = new os_func();
  const path = '/home/ubuntu/badgelock.txt';
  if(currentUser.business_is_verified==false)
    {
      result = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          return result;
    }    
    var puserid=await getParentAccountIdFromId(currentUser.user_id);  
    var awsinfo=await getS3BucketInformation(puserid)
    var bucket_result=await createBucket(awsinfo.s3obj,awsinfo.s3bucketname);
    
    if(bucket_result=="")
    {
      result = {
          Status: 400,
          message: "S3 bucket creation has been failed."        
          }
          return result;
    } 

    let isTotal=false; 
    let glcohortid="";
    for (let index = 0; index <params.length; index++) {
       const element = params[index];
       let cohortid=element.split("=")[0];
       let studentid=element.split("=")[1];
       glcohortid=cohortid;  
       if(studentid=='') 
       {
         isTotal=true;
         break;
       }                   
    }
    isTotal=false;
    if(glcohortid=="")
    {
      result = {
          Status: 400,
            message: "Invalid selected students."
        };
        return result;
    }
    var cohort_id= await getCohortidFromName(glcohortid,puserid);
    if(issendopenbadges==false)
    {
      /////////////get badge file/////////
      var badge_template="";
      var badge_name="";
      var badge_description="";
      var isuer_name="";
      var issuer_description="";
      var issuer_url="";
      var badge_base64_file="";
      var badge_base64_url="";
      var badge_file="";
      var whereClauseOpenBadges =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"';"
      var openBadgesInfoQuery = format(`SELECT c.*,d.* FROM cohort_group c LEFT JOIN openbadges_setting d ON d.id=c.openbadgesid ${whereClauseOpenBadges}`);
      console.log("openbadge query", openBadgesInfoQuery);
      let openbadgesinfos = await pool.query(openBadgesInfoQuery);  
      if ( openbadgesinfos.rowCount > 0 ) {                             
        for ( const openbadgesinfo of openbadgesinfos.rows ) 
        {
          
          // badge_name=openbadgesinfo['badge_name'];
          // if(badge_name==""||badge_name==null)
          // {
          //   var obj = {
          //       Status: 400,
          //         message: "Please set badge name in design step"
          //     };
          //   res.json(obj);
          //   return;
          // }
          // badge_description=openbadgesinfo['badge_description'];
          // if(badge_description==""||badge_description==null)
          // {
          //   var obj = {
          //       Status: 400,
          //         message: "Please set badge description in design step"
          //     };
          //     res.json(obj);
          //     return;
          // }
          
          isuer_name=openbadgesinfo['issuer_name'];
          if(isuer_name==""||isuer_name==null)
          {
            result = {
                Status: 400,
                  message: "Save the templete"
              };
              return result;
          }
          issuer_description=openbadgesinfo['issuer_description'];
          if(issuer_description==""||issuer_description==null)
          {
            result = {
                Status: 400,
                  message: "Save the templete"
              };
              return result;
          }
          if (isPreview) badge_template=openbadgesinfo['previewtemplate'];
          else badge_template=openbadgesinfo['template'];                
          const badge_template_buff = Buffer.from(badge_template, 'base64');
          badge_template = badge_template_buff.toString('utf-8');

          badge_file=openbadgesinfo['badge_file'];
          badge_base64_file=openbadgesinfo['badge_base64_file'];
          if(badge_file==""||badge_file==null||badge_base64_file==""||badge_base64_file==null)
          {
            result = {
                Status: 400,
                  message: "Please select badge file in design step"
              };
              return result;
          }
          issuer_url=openbadgesinfo['issuer_url'];
        }
      }
      else
      {
        result = {
          Status: 400,
          message: "Save the templete"        
          }
          return result;
      }       
      //console.log("11111111111111111111111111111111111111111111111111111", isTotal, glcohortid, cohort_id);
      /////write badge file/////
      var standard_badge_file=openbadges_base_path+puserid+"/"+cohort_id+"/standard_badge_file.png";
      var badge_file_base_path=openbadges_base_path+puserid+"/"+cohort_id;
      try
      {
          const buff2 = Buffer.from(badge_file, 'base64');
          var str = buff2.toString('utf-8');
          //str=str.replace(' ','+');
          if (!await fs.existsSync(badge_file_base_path))
          {
              await os.execCommand('sudo mkdir -p "'+badge_file_base_path+'"');
              await os.execCommand('sudo chmod -R 777 "'+badge_file_base_path+'"');
          }
          await fs.writeFileSync(standard_badge_file,str,"binary");          
      }
      catch(err)
      {
          result = {
          Status: 400,
          message: err        
          }
          return result;
      }
      
      ////////////////////////////////////
      if(isTotal==false)
      {
        for (let index = 0; index < params.length; index++) {
          const element = params[index];
          let cohortid=element.split("=")[0];
          let studentid=element.split("=")[1];
          //console.log("cohortid="+cohortid+",studentid="+studentid);
          ///////////////////////////////////////////
          if ( cohortid == '' || studentid == '') {continue;}
          var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and b.id='"+studentid+"';"
          var studentQuery = format(`SELECT a.*, c.*,b.*, b.id as studentidentify,
                                        d.logoimage, d.signatureimage, d.signaturename, d.signername, d.partnercompanyname, 
                                        d.logoimage1, d.signatureimage1, d.signaturename1, d.signername1, d.partnercompanyname1, d.detail,c.competencyenddate FROM student a 
                                        LEFT JOIN cohortmembers_openbadges b ON b.studentid=a.id                                                   
                                        LEFT JOIN cohort c ON c.id=b.cohortid
                                        LEFT JOIN competencypartner d ON trim(from d.competencyname)=trim(from c.competencyname) ${whereClause}
                                        `);
          //console.log("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
          let students = await pool.query(studentQuery);
          console.log(studentQuery);
          if ( students.rowCount > 0 ) { 
                          
                  for ( const student of students.rows ) {
                    studentid = student['studentidentify'];
                    if(studentid=='') continue;
                    var distinguishing_line=`<img style="margin-top: 6px;" src="${myip}/images/backend/hr.png"  />`;
                    var logoimage=student['logoimage'];
                    if(logoimage==null || logoimage=="") logoimage="";
                    else if(logoimage.indexOf("<img ")==-1)
                    {
                      logoimage='<img  src=\\"'+logoimage+'\\" style=\\"width: 85%; \\" />';
                    }
                    
                    var signatureimage=student['signatureimage'];
                    if(signatureimage==null || signatureimage=="") signatureimage="";
                    else if(signatureimage.indexOf("<img ")==-1)
                    {
                      signatureimage='<img src=\\"'+signatureimage+'\\" style=\\"width: 70%; \\" />';
                    }
                                            
                    var signaturename=student['signaturename'];
                    if(signaturename==null) signaturename="";
                    var signername=student['signername'];
                    if(signername==null) signername="";
                    var partnercompanyname=student['partnercompanyname'];
                    if(partnercompanyname==null) partnercompanyname="";

                    var logoimage1=student['logoimage1'];
                    if(logoimage1==null || logoimage1=="") logoimage1="";
                    else if(logoimage1.indexOf("<img ")==-1)
                    {
                      logoimage1='<img  src=\\"'+logoimage1+'\\" style=\\"width: 85%; \\" />';
                    }
                                                
                    var signatureimage1=student['signatureimage1'];
                    if(signatureimage1==null || signatureimage1=="") signatureimage1="";
                    else if(signatureimage1.indexOf("<img ")==-1)
                    {
                      signatureimage1='<img src=\\"'+signatureimage1+'\\" style=\\"width: 70%; \\" />';
                    }
                                
                    var signaturename1=student['signaturename1'];
                    if(signaturename1==null) signaturename1="";
                    var signername1=student['signername1'];
                    if(signername1==null) signername1="";
                    var partnercompanyname1=student['partnercompanyname1'];
                    if(partnercompanyname1==null) partnercompanyname1="";

                    let email=student['emailaddress'];                    
                    let first_name = student['firstname'];
                    let middle_name = student['middlename'];
                    let last_name = student['lastname'];                          
                    
                    var fullname="";                            
                    if(first_name=="" || first_name==null ||  first_name==undefined) first_name="";
                    if(middle_name=="" || middle_name==null ||  middle_name==undefined) middle_name="";
                    if(last_name=="" || last_name==null ||  last_name==undefined) last_name="";                            
                    if(middle_name=="")
                    {
                      fullname=first_name+" "+last_name;
                    }
                    else
                    {
                      fullname=first_name+" "+middle_name+" "+last_name;
                    }
                    if(isPreview) fullname = "FNAME MNAME LNAME";
                    let tmp_badge_template=badge_template.replace("*|RECEIPIENT_NAME|*", fullname);

                    let competency_name = student['competencyname'];
                    let onetimecode = student['onetimeblockcertscode'];

                    let competencyenddate = student['competencyenddate'];
                    if(competencyenddate=="" || competencyenddate==null || competencyenddate==undefined || typeof competencyenddate=='undefined')
                    {
                      tmp_badge_template=tmp_badge_template.replace(/in COMPETENCY_END_DATE/g, "");
                      tmp_badge_template=tmp_badge_template.replace(/COMPETENCY_END_DATE/g, "");
                    }
                    else
                    {
                      tmp_badge_template=tmp_badge_template.replace(/COMPETENCY_END_DATE/g, competencyenddate);
                    }
                    ////////////growthschool////////////  
                    signername0_low="VAIBHAV SISINTY".toLowerCase().replace(/\s/g, "").trim(); 
                    signername_low=signername.toLowerCase().replace(/\s/g, "").trim(); 
                    signername1_low=signername1.toLowerCase().replace(/\s/g, "").trim(); 
                    if(signername0_low==signername_low && signername1_low=="")
                    {
                      tmp_badge_template=tmp_badge_template.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g,"");
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g,"");
                      tmp_badge_template=tmp_badge_template.replace(/SIGNER_GROWTHSCHOOL_NAME/g,"");
                      tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g,"");
                      tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g,"");
                      tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "");
                      
                      tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage);
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,distinguishing_line);
                      tmp_badge_template=tmp_badge_template.replace("SIGNATURE_1_NAME", "TRAINER & FOUNDER, GROWTHSCHOOL");
                      tmp_badge_template=tmp_badge_template.replace("SIGNER_1_NAME", "VAIBHAV SISINTY");
                      
                      tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_REPLACE", "");
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,"");
                      tmp_badge_template=tmp_badge_template.replace("SIGNATURE_NAME", "");
                      tmp_badge_template=tmp_badge_template.replace("SIGNER_NAME", "");
                      
                      tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
                    }
                    else
                    {
                      var growthschoolfoundersignature=`<img style="height: 50px;" src="${myip}/images/backend/vaibhav_sisnty.png"  />`; 
                      tmp_badge_template=tmp_badge_template.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g, growthschoolfoundersignature);
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g, distinguishing_line);
                      tmp_badge_template=tmp_badge_template.replace(/SIGNER_GROWTHSCHOOL_NAME/g, "VAIBHAV SISINTY");
                      tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g, "FOUNDER");
                      tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g, "GROWTHSCHOOL");
                      tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "FOUNDER, GROWTHSCHOOL");   
                      
                      if(signername!="" && signername1=="")
                      tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
                      else if(signername!="" && signername1!="")
                      tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername1+" and "+signername);
                      else tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", "Vaibhav Sisinty");                           
                      
                    }
                    ///////////////////////////////////// 
                    
                    tmp_badge_template=tmp_badge_template.replace("LOGOIMAGE_REPLACE", logoimage);
                    tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_REPLACE", signatureimage);                          
                    tmp_badge_template=tmp_badge_template.replace("SIGNATURE_NAME", signaturename);
                    tmp_badge_template=tmp_badge_template.replace("SIGNER_NAME", signername); 
                    if(signername!="" && signername!=null)
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,distinguishing_line);
                    else
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,"");

                    
                    tmp_badge_template=tmp_badge_template.replace("LOGOIMAGE_1_REPLACE", logoimage1);
                    tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage1);
                    tmp_badge_template=tmp_badge_template.replace("SIGNATURE_1_NAME", signaturename1);
                    tmp_badge_template=tmp_badge_template.replace("SIGNER_1_NAME", signername1);
                    if(signername1!="" && signername1!=null)
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,distinguishing_line);
                    else
                      tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,"");

                    console.log(competency_name);  
                    if(puserid=="20002" || puserid=="1")
                    {
                      let joinedcompetency="";                      
                      if(competency_name.indexOf("module")!==-1)
                      {
                        let competencypieces=competency_name.split("module");                        
                        for(let i=0;i<competencypieces.length;i++)
                        {
                          competencypieces[i]= "<b>"+competencypieces[i]+"</b>";
                        }
                        joinedcompetency=joinedcompetency+competencypieces.join(" module ");
                      }
                      if(competency_name.indexOf("Module")!==-1)
                      {
                        let competencypieces=competency_name.split("Module");                        
                        for(let i=0;i<competencypieces.length;i++)
                        {
                          competencypieces[i]= "<b>"+competencypieces[i]+"</b>";
                        }
                        joinedcompetency=joinedcompetency+competencypieces.join(" Module ");
                      }
                      if(competency_name.indexOf("MODULE")!==-1)
                      {
                        let competencypieces=competency_name.split("MODULE");                        
                        for(let i=0;i<competencypieces.length;i++)
                        {
                          competencypieces[i]= "<b>"+competencypieces[i]+"</b>";
                        }
                        joinedcompetency=joinedcompetency+competencypieces.join(" MODULE ");
                      }

                      if(competency_name.indexOf("workshop")!==-1)
                      {
                        let competencypieces=competency_name.split("workshop");                        
                        for(let i=0;i<competencypieces.length;i++)
                        {
                          competencypieces[i]= "<b>"+competencypieces[i]+"</b>";
                        }
                        joinedcompetency=joinedcompetency+competencypieces.join(" workshop ");
                      }

                      if(competency_name.indexOf("Workshop")!==-1)
                      {
                        let competencypieces=competency_name.split("Workshop");                        
                        for(let i=0;i<competencypieces.length;i++)
                        {
                          competencypieces[i]= "<b>"+competencypieces[i]+"</b>";
                        }
                        joinedcompetency=joinedcompetency+competencypieces.join(" Workshop ");
                      }
                      if(competency_name.indexOf("WORKSHOP")!==-1)
                      {
                        let competencypieces=competency_name.split("WORKSHOP");                        
                        for(let i=0;i<competencypieces.length;i++)
                        {
                          competencypieces[i]= "<b>"+competencypieces[i]+"</b>";
                        }
                        joinedcompetency=joinedcompetency+competencypieces.join(" WORKSHOP ");
                      }
                      if(joinedcompetency=="") joinedcompetency="<b>"+competency_name+"</b>";
                      tmp_badge_template=tmp_badge_template.replace(/COMPETENCY_NAME/g, joinedcompetency);
                    }
                    tmp_badge_template=tmp_badge_template.replace(/COMPETENCY_NAME/g, competency_name);

                    const issuedOn=getIso8601Time();
                    tmp_badge_template=tmp_badge_template.replace("DATE_OF_ISSUE",issuedOn.split("T")[0]); 

                    if(partnercompanyname.trim()=="")
                    {
                      tmp_badge_template=tmp_badge_template.replace("& Enhelion Knowledge", "Enhelion Knowledge");
                      tmp_badge_template=tmp_badge_template.replace("and PARTNERCOMPANY_NAME", "");
                    }

                    
                    var my_badge_uuid=getUuid(onetimecode);
                    var my_badge_file=my_badge_uuid+".png";
                    
                    var my_badge_content_file=my_badge_uuid+".json";

                    var badge_id_url="https://www.certonce.com/openbadgesid/"+puserid+"/"+cohort_id+"/"+my_badge_content_file;
                    var badge_id_content={};
                    
                    
                    badge_id_content.issuedOn=issuedOn;
                    badge_id_content.id=badge_id_url;
                    badge_id_content.name=competency_name;
                    badge_id_content.competencyname=competency_name;
                    badge_id_content.description=competency_name;
                    badge_id_content.image=badge_base64_file;
                    badge_id_content["criteria"]={};
                    badge_id_content["criteria"]["id"]=badge_id_url;
                    badge_id_content["criteria"]["narrative"]="";
                    badge_id_content.issuer=issuer_url;
                    badge_id_content.type="BadgeClass";
                    badge_id_content["@context"]="https://w3id.org/openbadges/v2";
                    badge_id_content["recipient"]={};
                    badge_id_content["recipient"]["type"]="name";
                    badge_id_content["recipient"]["identity"]=fullname;
                    badge_id_content["recipient"]["name"]=fullname;

                    var my_badge_file_withoutext=my_badge_uuid;
                    var baked_file_url="https://www.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".png";
                    var baked_verifier_url="https://www.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext; 
                    var pdfurl="https://www.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";   
                    if(puserid=="20025")
                    {
                      baked_verifier_url="https://growthschool.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext;   
                      baked_file_url="https://growthschool.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".png"; 
                      pdfurl="https://growthschool.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";     
                    }

                    if(isPreview) {
                      //await fs.writeFileSync("/home/ubuntu/badge_test.html",tmp_badge_template,"utf-8");                       
                      //console.log("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", previewfilepath); 
                      //var pdf2pngcontent=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url,true);
                      //let pdfcontent=await convertPdf2Png(previewfilepath);
                      var pdf2pngcontent=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url,true);
                      //var previewfile=await generatePDFForOpenBadgesForPreview(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url);                          
                      result = {
                        Status: 200,
                        content: "<div style='text-align:center;'>" + pdf2pngcontent + "</div>"
                      }
                      return result
                    }
                    else{
                      var pdfs3url=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url);                          
                      console.log(pdfs3url);                         
                      var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificatejson = '${baked_file_url}',signedcertificateurl='${baked_verifier_url}',signedcertificatepdfurl='${pdfurl}' WHERE  id=${studentid}`);
                      await pool.query(updatesql);

                      var pdf2pngcontent=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url,true);

                      badge_id_content.displayHtml=pdf2pngcontent;
                      
                      await writeFile(badge_file_base_path+"/"+my_badge_content_file,JSON.stringify(badge_id_content));
                      var bade_id_bucket_url=await uploadOpenBadgesFile(awsinfo.s3obj, awsinfo.awsregion, puserid,cohort_id,badge_file_base_path+"/"+my_badge_content_file, awsinfo.s3bucketname,false);

                      if(bade_id_bucket_url.indexOf("error") != -1)
                      {
                        result = {
                              Status: 400,
                              message: "Uploading is failed!"        
                              }
                              return result;
                      }
                      var badge_content={};
                      badge_content["@context"]="https://w3id.org/openbadges/v2";
                      badge_content["id"]=badge_id_url;
                      badge_content["type"]="Assertion";
                      badge_content["verification"]={};
                      badge_content["verification"]["type"]="hosted";
                      await bake(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, standard_badge_file, JSON.stringify(badge_content), badge_file_base_path+"/"+my_badge_file,puserid,cohort_id,studentid);
                    }                    
              }
          
          }//for
        }
      }
      else
      {
            var whereClause =  "WHERE c.cohortid='"+ glcohortid +"';"
            var studentQuery = format(`SELECT a.*, c.*,b.*,b.id as studentidentify,
                                d.logoimage, d.signatureimage, d.signaturename, d.signername, d.partnercompanyname, 
                                d.logoimage1, d.signatureimage1, d.signaturename1, d.signername1, d.partnercompanyname1, d.detail   FROM student a 
                                LEFT JOIN cohortmembers_openbadges b ON b.studentid=a.id                                                   
                                LEFT JOIN cohort c ON c.id=b.cohortid
                                LEFT JOIN competencypartner d ON trim(from d.competencyname)=trim(from c.competencyname) ${whereClause}
                                `);
          
            let students = await pool.query(studentQuery);            
                     
      }//else
      result = {
              Status: 200,
              message: 'OpenBadges is baked successfully!',              
          }
    }
    else //send baked badges
    {
      isTotal=false; 
      var organization_name=currentUser.organization_name;

      //////////smtp information/////////
      var smtpaccount = {
        'type' : true,
        'username' : "", 
        'clientid' : "",
        'clientsecret' : "",
        'refreshtoken' : "",
        'from': ""
      };
      
      var cc="";
      var querySmtp=format(`SELECT * FROM setting where accountid='${accountid}';`);
      let smtpresult = await pool.query(querySmtp);
      if(smtpresult && smtpresult.rowCount > 0){
        if(smtpresult.rows[0].smtptype==true){
            smtpaccount['type'] = smtpresult.rows[0].smtptype;
            smtpaccount['username'] = smtpresult.rows[0].smtpusername;
            smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
            smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
            smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
            smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
            cc=smtpresult.rows[0].smtpcc
            //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
        }
        else if(smtpresult.rows[0].smtptype==false){
            smtpaccount['type'] = smtpresult.rows[0].smtptype;
            smtpaccount['host'] = smtpresult.rows[0].smtphost;
            smtpaccount['port'] = smtpresult.rows[0].smtpport;
            smtpaccount['username'] = smtpresult.rows[0].smtpusername;
            smtpaccount['password'] = smtpresult.rows[0].smtppassword;
            smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
            cc=smtpresult.rows[0].smtpcc
            //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
        }
      }
      ///////////////////////////////////   
        ///////////////////////////////////   
        var mail_subject="";                    
        var mail_content = "";
        var selectquery=format(`select * from emailtemplate where cohortid='${cohort_id}';`);
        var emailtemplates = await pool.query(selectquery);
        if ( emailtemplates.rowCount > 0 ) {
          for ( const emailtemplate of emailtemplates.rows ) {
            mail_subject = emailtemplate['openbadgeemail_subject'];                    
            mail_content = emailtemplate['openbadgeemail_content'];
          }
        }
  
        if(isTotal==false)
        {
          for (let index = 0; index < params.length; index++) 
          {
            const element = params[index];        
            let studentid=element.split("=")[1];
            if ( studentid == '') {continue;}
            //let updateStateQuery = format(`UPDATE cohortmembers_openbadges SET certificatesendstate=1 WHERE id='${studentid}' and certificatesendstate!=2;`);
            let updateStateQuery = format(`UPDATE cohortmembers_openbadges SET certificatesendstate=1 WHERE id='${studentid}';`);
            console.log(updateStateQuery);
            await pool.query(updateStateQuery);
          }

          for (let index = 0; index < params.length; index++) {
            const element = params[index];
            let cohortid=element.split("=")[0];
            let studentid=element.split("=")[1];
            //console.log("cohortid="+cohortid+",studentid="+studentid);
            ///////////////////////////////////////////
            if ( cohortid == '' || studentid == '') {continue;}
            //var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and b.id='"+studentid+"' and certificatesendstate!=2;"
            var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and b.id='"+studentid+"';"
            var studentQuery = format(`SELECT a.*, c.*,b.* FROM student a 
                                          LEFT JOIN cohortmembers_openbadges b ON b.studentid=a.id 
                                          LEFT JOIN cohort c ON c.id=b.cohortid  ${whereClause}
                                          `);              
        
            let students = await pool.query(studentQuery);            
            if ( students.rowCount > 0 ) {                                 
              for ( const student of students.rows ) {
                var email=student['emailaddress'];                             
                var secondemailaddress=student['secondemailaddress'];
                var cc2=student['cc2'];
                var cc3=student['cc3'];   

                var smtpcc=[];
                if(cc!="" && cc!=null && cc!==undefined)
                {
                  //'smtpcc.push(smtpaccount['cc']);
                  smtpcc.push(cc);
                }
                if(secondemailaddress!="" && secondemailaddress!=null && secondemailaddress!==undefined)
                {                          
                  smtpcc.push(secondemailaddress);
                }
                if(cc2!="" && cc2!=null && cc2!==undefined)
                {                          
                  smtpcc.push(cc2);
                }
                if(cc3!="" && cc3!=null && cc3!==undefined)
                {                          
                  smtpcc.push(cc3);
                }
                if(smtpcc.length>0)
                {                  
                  smtpaccount['cc']=smtpcc.join(",");
                }
                
                var first_name = student['firstname']; 
                var middle_name = student['middlename'];
                var last_name = student['lastname'];
                var fullname="";                    
                if(middle_name==null||middle_name=="")
                {
                  fullname=first_name+" "+last_name;
                }
                else
                {
                  fullname=first_name+" "+middle_name+" "+last_name;
                }
                var competency_name=student['competencyname'];
                var attachment_name=fullname+" - "+competency_name; 

                var badgefileurl=student['signedcertificatejson'];
                var openbadgesvalidatorurl=student['signedcertificateurl'];
                var badgepdfurl=student['signedcertificatepdfurl'];
                
                var collegeid=badgefileurl.split("/").reverse()[2];
                var cohortid1=badgefileurl.split("/").reverse()[1];
                var pngname=badgefileurl.split("/").reverse()[0];
                pngname=pngname.replace(".png","");
                //openbadgesvalidatorurl="https://www.certonce.com/OpenBadgesValidator/"+collegeid+"/"+cohortid1+"/"+pngname;
                var cert_email_subject = "A OpenBadges has been baked by "+organization_name;
                var email_body=`<p>Hello ${first_name}</p>
                <p>We baked your OpenBadge</p> 
                <p><b>How the receiver will verify it?</b></p>
                <ul>
                    <li type= "none">  &ndash; The receiver can go to <a href="${openbadgesvalidatorurl}">this verification link</a> and just post the link shared by you and verify the
                authenticity of this openbadge</li>    
                </ul>               
                <p>Warm regards</p>
                <p>Team CertOnce</p>
                `;
                if(puserid=="20025" )
                {
                  cert_email_subject = `Your ${competency_name} certificate is here`;  
                  email_body=`<p>Hey ${first_name}</p>
                  <p>Congratulations on completing the ${competency_name} Workshop.</p> 
                  <p>Here's your verifiable digital certificate that anyone can verify with a single click 😉</p> 
                  <p>Now you can flaunt your certificates on your LinkedIn Profile with the link given on the PDF.</p> 
                  <p>You can also share it across all social media platforms instantly!</p> 
                  <p>Use #growthschool and <b>share your experiences about the program.</b></p>
                  <p>Thank you for believing in us. You are now part of the GrowthSchool Fam! 😎</p> 
                  <p>All the best for your journey.</p> 
                  <p>Cheers,</p>
                  <p>Team GrowthSchool</p>
                  `;
                }
                else if(puserid=="20002" || puserid=="1")
                {
                  cert_email_subject = `Your ${competency_name} By Vikas Bansal certificate is here`;  
                  email_body=`<p>Hi</p>
                    <p>Congratulations on completing the <b>${competency_name}</b> by Vikas Bansal.</p> 
                    <p>Here's your digital certificate (people can verify the authenticity with a single click 😉)</p> 
                    <p>Now you can flaunt your certificate on your LinkedIn Profile with the link given on this PDF.</p> 
                    <p>You can also share it across other social media platforms instantly!</p> 
                    <p>I would love to read your experience about this program - use #vikasbansal.</p>
                    <p style ="margin-bottom:0px">Imagine the Possibilities,</p> 
                    <p style ="margin-top:0px">Team Vikas Bansal</p>
                  `;
                }
                if(mail_subject!="" && mail_subject!=null && mail_subject!=="null" && mail_content!="" && mail_content!=null && mail_content!=="null")
                { 
                  cert_email_subject=mail_subject.replace(/ORGANIZATION_NAME/g, organization_name);

                  email_body=mail_content.replace(/FIRST_NAME/g, first_name);
                  email_body=email_body.replace(/ORGANIZATION_NAME/g, organization_name);
                  email_body=email_body.replace(/OPENBADGEVALIDATOR_URL/g, openbadgesvalidatorurl);                              
                }

                var logfilename=logfiledir+req.user.user_id+"/sendopenbadge.log";
                const mailer_sendcertificate = require("../../config/mailer_sendcertificate");                  
                //mailer_sendcertificate(email_body, cert_email_subject, email,smtphost, smtpport, smtpusername, smtppassword, smtpfrom, smtpcc, badgefileurl, badgepdfurl, attachment_name, logfilename, "cohortmembers_openbadges", studentid);   

                let attachment_files = []; 
                attachment_files.push({path: badgefileurl,filename:`${attachment_name}.json`});
                attachment_files.push({path: badgepdfurl,filename:`${attachment_name}.pdf`});               
                // mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, "cohortmembers_openbadges", studentid);
                let mailer_result = await mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, "cohortmembers_openbadges", studentid);
                if (mailer_result.status == "400"){
                  const mailer_certonce = require("../../config/mailer_certonce");
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  let email_body = `<p style="color: black;">There is an error in sending certificates.</p>
                  <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
                  let email_subject = "SendCertificate Result";
                  mailer_certonce(email_body, email_subject, contact_email, logfilename);
                  stop_flag = true;
                }

              }                
            }
          }
        }
        else
        {

          //let updateStateQuery = format(`UPDATE cohortmembers_openbadges b  SET b.certificatesendstate=1  WHERE b.cohortid in (select id from cohort where cohortid='${glcohortid}' and accountid='${puserid}')and b.certificatesendstate!=2;`);
          let updateStateQuery = format(`UPDATE cohortmembers_openbadges b  SET b.certificatesendstate=1  WHERE b.cohortid in (select id from cohort where cohortid='${glcohortid}' and accountid='${puserid}');`);
          await pool.query(updateStateQuery);

          //var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"' and b.certificatesendstate!=2;";
          var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"';";
          var studentQuery = format(`SELECT a.*, c.*,b.*,b.id as studentidentify FROM student a 
                                        LEFT JOIN cohortmembers_openbadges b ON b.studentid=a.id 
                                        LEFT JOIN cohort c ON c.id=b.cohortid  ${whereClause}`);              
          let students = await pool.query(studentQuery);            
          if ( students.rowCount > 0 ) {
            for ( const student of students.rows ) {                            
              var email=student['emailaddress'];                             
              var secondemailaddress=student['secondemailaddress'];
              var cc2=student['cc2'];
              var cc3=student['cc3'];                        
              var smtpcc=[];
              if(cc!="" && cc!=null && cc!==undefined)
              {
                //'smtpcc.push(smtpaccount['cc']);
                smtpcc.push(cc);
              }
              if(secondemailaddress!="" && secondemailaddress!=null && secondemailaddress!==undefined)
              {                          
                smtpcc.push(secondemailaddress);
              }
              if(cc2!="" && cc2!=null && cc2!==undefined)
              {                          
                smtpcc.push(cc2);
              }
              if(cc3!="" && cc3!=null && cc3!==undefined)
              {                          
                smtpcc.push(cc3);
              }
              if(smtpcc.length>0)
              {                  
                smtpaccount['cc']=smtpcc.join(",");
              }

              var first_name = student['firstname']; 
              var middle_name = student['middlename'];
              var last_name = student['lastname'];
              var fullname="";                    
              if(middle_name==null||middle_name=="")
              {
                fullname=first_name+" "+last_name;
              }
              else
              {
                fullname=first_name+" "+middle_name+" "+last_name;
              }
              var competency_name=student['competencyname'];
              var attachment_name=fullname+" - "+competency_name; 

              var badgefileurl=student['signedcertificatejson'];
              var openbadgesvalidatorurl=student['signedcertificateurl'];
              var badgepdfurl=student['signedcertificatepdfurl'];
              
              var collegeid=badgefileurl.split("/").reverse()[2];
              var cohortid1=badgefileurl.split("/").reverse()[1];
              var pngname=badgefileurl.split("/").reverse()[0];
              pngname=pngname.replace(".png","");
              //openbadgesvalidatorurl="https://www.certonce.com/OpenBadgesValidator/"+collegeid+"/"+cohortid1+"/"+pngname;
              var cert_email_subject = "A OpenBadges has been baked by "+organization_name;
              var email_body=`<p>Hello ${first_name}</p>
              <p>We baked your OpenBadge</p> 
              <p><b>How the receiver will verify it?</b></p>
              <ul>
                  <li type= "none">  &ndash; The receiver can go to <a href="${openbadgesvalidatorurl}">this verification link</a> and just post the link shared by you and verify the
              authenticity of this openbadge</li>    
              </ul>               
              <p>Warm regards</p>
              <p>Team CertOnce</p>
              `;

              if(mail_subject!="" && mail_subject!=null && mail_subject!=="null" && mail_content!="" && mail_content!=null && mail_content!=="null")
              { 
                cert_email_subject=mail_subject.replace(/ORGANIZATION_NAME/g, organization_name);

                email_body=mail_content.replace(/FIRST_NAME/g, first_name);
                email_body=email_body.replace(/ORGANIZATION_NAME/g, organization_name);
                email_body=email_body.replace(/OPENBADGEVALIDATOR_URL/g, openbadgesvalidatorurl);                              
              }

              var logfilename=logfiledir+req.user.user_id+"/sendopenbadge.log";
              const mailer_sendcertificate = require("../../config/mailer_sendcertificate");                  
              //mailer_sendcertificate(email_body, cert_email_subject, email,smtphost, smtpport, smtpusername, smtppassword, smtpfrom, smtpcc, badgefileurl, badgepdfurl, attachment_name, logfilename, "cohortmembers_openbadges", studentid);  
              let attachment_files = []; 
              attachment_files.push({path: badgefileurl,filename:`${attachment_name}.json`});
              attachment_files.push({path: badgepdfurl,filename:`${attachment_name}.pdf`});               
              // mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, "cohortmembers_openbadges", studentid);    
              let mailer_result = await mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, attachment_files, logfilename, "cohortmembers_openbadges", studentid);
              if (mailer_result.status == "400"){
                const mailer_certonce = require("../../config/mailer_certonce");
                let logfilename=logfiledir+puserid+"/sendcertificate.log";
                let email_body = `<p style="color: black;">There is an error in sending certificates.</p>
                <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
                let email_subject = "SendCertificate Result";
                mailer_certonce(email_body, email_subject, contact_email, logfilename);
                stop_flag = true;
              }
            }            
          }                
        }//else
        result = {
                Status: 200,
                message: 'Sending...',              
        }
        //res.json(obj);
    }
  return result;
}


async function convertPdf2Png(pdffilepath, resolution=300)
{
  while(true)
  {
    try{
      var os = new os_func();
      var encodedurl="";
      var pngfilepath=pdffilepath.replace(".pdf","_%03d.png");
      
      // if(ishighquality==true)
      // {
      //   console.log('gs -q -sPAPERSIZE=a4 -sDEVICE=png16m -dTextAlphaBits=4 -r600x600 -o '+pngfilepath+' -dNOPAUSE -dBATCH  '+pdffilepath);
      //   await os.execCommand('gs -q -sPAPERSIZE=a4 -sDEVICE=png16m -dTextAlphaBits=4 -r600x600 -o '+pngfilepath+' -dNOPAUSE -dBATCH  '+pdffilepath);  
      // }
      // else
      // {
      //   console.log('gs -q -sPAPERSIZE=a4 -sDEVICE=png16m -dTextAlphaBits=4 -r200x200 -o '+pngfilepath+' -dNOPAUSE -dBATCH  '+pdffilepath);
      //   await os.execCommand('gs -q -sPAPERSIZE=a4 -sDEVICE=png16m -dTextAlphaBits=4 -r300x300 -o '+pngfilepath+' -dNOPAUSE -dBATCH  '+pdffilepath);  
      // }
     
      console.log(`gs -q -sPAPERSIZE=a4 -sDEVICE=png16m -dTextAlphaBits=4 -r${resolution}X${resolution} -o ${pngfilepath} -dNOPAUSE -dBATCH  ${pdffilepath}`);
      await os.execCommand(`gs -q -sPAPERSIZE=a4 -sDEVICE=png16m -dTextAlphaBits=4 -r${resolution}X${resolution} -o ${pngfilepath} -dNOPAUSE -dBATCH  ${pdffilepath}`);
      
      var path = require('path');
      var parentDir = path.dirname(pngfilepath); 
      var filename = path.basename(pngfilepath);  
      filename = filename.split("_")[0]; 
      var files=getFiles(parentDir,".png",filename);
      for(var i=0; i<files.length;i++)
      { 
        if(i==0)
        {  
          encodedurl=await base64_encode(files[i]);  
        }
        else
        {
          encodedurl=encodedurl + "<br>" + await base64_encode(files[i]); 
        }
        if (fs.existsSync(files[i]))
        {
          fs.unlinkSync(files[i]);
        } 
      }  
      
      return encodedurl;
    }
    catch(ex)
    {
      console.log(ex);
      await sleep(10000);
      return null;
    }
  }
}

async function base64_encode(file) {
    // read binary data
    console.log(file)
    var bitmap = fs.readFileSync(file);
      // convert binary data to base64 encoded string
    var encodedurl='<img style="width:100%;" src="data:image/png;base64,'+new Buffer.from(bitmap).toString('base64')+'" />';  
      //var encodedurl='<img style="width:100%;" src="e" />';  
      //encodedurl=encodedurl.replace(/"/g,'\\"'); 
    return encodedurl;
}

function getFiles (dir, searchext, searchname, files_){
    files_ = files_ || [];
    var files = fs.readdirSync(dir);
    for (var i in files){
        var name = dir + '/' + files[i];
        if (fs.statSync(name).isDirectory()){
            getFiles(name, files_);
        } else {
            if(name.indexOf(searchext)!==-1 && name.indexOf(searchname)!==-1) 
              files_.push(name);
        }
    }
    return files_;
}

user.generateCertificateByCohort = async (req,res, next) => {  
  
    try {
      
      var os = new os_func();
      var glcohortid=req.body.cohortid;
      var api_key=req.body.apikey;
      if(api_key=="" || api_key==null ||  api_key==undefined || glcohortid=="" || glcohortid==null ||  glcohortid==undefined)
      {
        var obj = {
              Status: 400,
                message: "Invalid request parameters"
            };
        res.json(obj);
        return;
      }
      
      /*
      var napikey=await getApiKeyFromUserID("1");
      var obj = {
              Status: 200,
                message: napikey
            };
      res.json(obj);
      return;  
      */
      var userid=await getUserIDFromApiKey(api_key); 
      if(userid==null)
      {
        var obj = {
              Status: 400,
                message: "Invalid api key"
            };
        res.json(obj);
        return; 
      }   
      
      
      var searchQuery = format(`select * from usermaster where user_id='${userid}'`);
      var result = await pool.query(searchQuery);
      var organization_verify_uri="";
      var blockchain="";
      var organization_name="";
      var business_is_verified=false; 
      if ( result.rowCount > 0 ) 
      {
        organization_verify_uri=result.rows[0].organization_verify_uri;
        blockchain=result.rows[0].blockchain;
        organization_name=result.rows[0].organization_name;
        business_is_verified=result.rows[0].business_is_verified;
      }
      else
      {
        organization_verify_uri="certonce";
        blockchain="ethereum";
      }
      if(business_is_verified==false)
      {
        var obj = {
              Status: 400,
                message: "Your account is currently under verification, please contact certonce team."
            };
            res.json(obj);
            return;
      }
      
      var permission=await getPermission(userid,"generateCertificate");
      if(permission==false)
      {
          var obj = {
            Status: 400,
              message: "Access denied."
          };
          res.json(obj);
          return;
      }

      var puserid=await getParentAccountIdFromId(userid); 
      
      if(organization_verify_uri==""||organization_verify_uri=="null"||organization_verify_uri==null|| organization_verify_uri==undefined) organization_verify_uri="certonce";
      if(blockchain==""||blockchain=="null"||blockchain==null|| blockchain==undefined) blockchain="ethereum";
      var cohorttablename="cohortmembers_degree";
      
      ///////////////////////////////////////////////////////////////////////
      var logoimage="";
      var fetchQuery = format(`select logoimages from certtemplate_logo where accountid = '${puserid}' LIMIT 1`);
      var result=await pool.query(fetchQuery);  
      if (result.rows && result.rows.length != 0) 
      {
          logoimage=result.rows[0]['logoimages'];          
      }
      else
      {        
        var obj = {
          Status: 400,
          message: 'Please upload logo image.',              
          }
          res.json(obj);
          return;
      }
      var awsinfo=await getS3BucketInformation(puserid)
      var bucket_result=await createBucket(awsinfo.s3obj,awsinfo.s3bucketname);
      
      if(bucket_result=="")
      {
        var obj = {
            Status: 400,
            message: "S3 bucket creation has been failed."        
            }
            res.json(obj);
            return;
      } 
      ///////////////////////////////////////////////////////////////////////
      var currentpublickkey="";      
      var profileQuery = format(`select publickey from wallet_pk where accountid = '${puserid}' and blockchain='${blockchain}' LIMIT 1`);
      var result=await pool.query(profileQuery);
      var userData = {};      
      if (result.rows && result.rows.length != 0) {
        userData = result.rows[0]; 
        if(userData.publickey!=""&&userData.publickey!=null)
        {            
            currentpublickkey=userData.publickey;
        }
        else 
        {
            
            var obj = {
              Status: 400,
              message: 'There is no generated blockchain',              
              }
              res.json(obj);
              return;
        }
      }
      else
      {
          
           var obj = {
                Status: 400,
                message: 'There is no selected blockchain',              
                }
                res.json(obj);
                return;
      }
      ///////////////////////////////////////////////////////////////////////
      //*
      var ishtml=true;
      var iss3=true;
      var s_issuerurl="";
      var s_revocationurl="";
      var s_issuername="";
      var s_issueremail="";
      var s_verifybaseurl="";
      var fetchSettingQuery = format(`select * from setting where accountid = '${puserid}' LIMIT 1`);
      var result=await pool.query(fetchSettingQuery);  
      if (result.rows && result.rows.length != 0) 
      {
          ishtml=result.rows[0]['ishtml'];
          iss3=result.rows[0]['iss3'];
          s_issuerurl=result.rows[0].issuerurl;
          s_revocationurl=result.rows[0].revocationurl;
          s_issuername=result.rows[0].issuername;
          s_issueremail=result.rows[0].issueremail;
          s_verifybaseurl=result.rows[0].verifybaseurl;
          //console.log(result.rows[0]);
          console.log("ishtml="+ishtml+" iss3="+iss3);          
      }
      //*/
      ///////////////////////////////////////////////////////////////////////
      var pathsjson=await readyForGenerate(puserid);
      if(pathsjson==false)
      {
        var obj = {
          Status: 400,
          message: 'Workdir creation is failed!',              
          }
          res.json(obj);
          return;
      }
      else if(pathsjson==true)
      {
        var obj = {
          Status: 400,
          message: 'The same account is working at the same time!',              
          }
          res.json(obj);
          return;
      }
      let iswriting=true;
      let isremain=false;
      let writer=null;  
      filename=pathsjson.receipientsfilepath;       
            
      var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"' and (b.unsignedcertificateurl='' or b.unsignedcertificateurl is null);"
      var studentQuery = format(`SELECT a.*, c.*,b.*,d.*,b.id as studentidentify FROM student a 
                                    LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                    LEFT JOIN cohort c ON c.id=b.cohortid 
                                    LEFT JOIN cohort_group e ON e.cohortid=c.cohortid 
                                    LEFT JOIN certtemplate d ON d.id=e.certtemplateid ${whereClause}
                                    `);
        
          
      let students = await pool.query(studentQuery);  
      let index=-1;
      if ( students.rowCount > 0 ) {                     
          for ( const student of students.rows ) {
              index++;
              studentid = student['studentidentify'];
              if(studentid=='') continue;
              email=student['emailaddress'];                    
              first_name = student['firstname'];
              middle_name = student['middlename'];
              last_name = student['lastname'];
              onetimecode = student['onetimeblockcertscode'];
              publickey = student['publickey'];
              cohortname = student['name'];
              unsignedcertificateurl = student['unsignedcertificateurl'];
              certtemplatejson=student['certjson'];  
              if(unsignedcertificateurl!=null&&unsignedcertificateurl!="") continue;
              if(publickey==null||publickey=="") continue;                                             
              if(certtemplatejson==null||certtemplatejson=="") 
              {
                
                var obj = {
                Status: 400,
                message: "There is no selected certificate template"        
                }
                res.json(obj);  
                return;
              }
              /////change bitcoin or ethereum(issuing address ,issuer id and revocation list) 
              certtemplatejson=JSON.parse(certtemplatejson);
              if(blockchain=='bitcoin')
              {
                certtemplatejson.badge.criteria.narrative="";
                if(s_issuername!="" && s_issuername!=null)
                {
                  certtemplatejson.badge.issuer.name=s_issuername;
                }
                else
                {
                  certtemplatejson.badge.issuer.name=organization_name;
                }
                
                if(s_issuerurl!="" && s_issuerurl!=null)
                {
                  certtemplatejson.badge.issuer.url=s_issuerurl;
                  certtemplatejson.badge.issuer.id=s_issuerurl+"/issuer.json";
                }
                else
                {
                  certtemplatejson.badge.issuer.url=myip+subwwwurl;
                  certtemplatejson.badge.issuer.id=myip+subwwwurl+"/blockchain/"+puserid+"/issuer.json";
                }

                if(s_issueremail!="" && s_issueremail!=null)
                {
                  certtemplatejson.badge.issuer.email=s_issueremail; 
                }
                else
                {
                  certtemplatejson.badge.issuer.email="admin@certonce.com"; 
                } 

                if(s_revocationurl!="" && s_revocationurl!=null)
                {
                  certtemplatejson.badge.issuer.revocationList=s_revocationurl+"/revocation-list.json";
                }
                else
                {
                  certtemplatejson.badge.issuer.revocationList=myip+subwwwurl+"/blockchain/"+puserid+"/revocation-list.json";
                }
                certtemplatejson.verification.publicKey="ecdsa-koblitz-pubkey:"+currentpublickkey;
                certtemplatejson.badge.issuer.image=""; 
                
                if(puserid == "20001")
                {
                  certtemplatejson.badge.criteria.narrative="";
                  certtemplatejson.badge.signatureLines[0].name="MIT - WPU";
                  certtemplatejson.badge.issuer.email="certifications@mitwpu.edu.in";
                  certtemplatejson.badge.issuer.url="https://certification.mitwpu.edu.in";
                  certtemplatejson.badge.issuer.id="https://certification.mitwpu.edu.in/issuer.json";
                  certtemplatejson.badge.issuer.revocationList="https://certification.mitwpu.edu.in/revocation-list.json";  
                }
              }
              else if(blockchain=='ethereum')
              {
                certtemplatejson.badge.criteria.narrative="";
                if(s_issuername!="" && s_issuername!=null)
                {
                  certtemplatejson.badge.issuer.name=s_issuername;
                }
                else
                {
                  certtemplatejson.badge.issuer.name=organization_name;
                }
                
                if(s_issuerurl!="" && s_issuerurl!=null)
                {
                  certtemplatejson.badge.issuer.url=s_issuerurl;
                  certtemplatejson.badge.issuer.id=s_issuerurl+"/issuereth.json";
                }
                else
                {
                  certtemplatejson.badge.issuer.url=myip+subwwwurl;
                  certtemplatejson.badge.issuer.id=myip+subwwwurl+"/blockchain/"+puserid+"/issuereth.json";
                }

                if(s_issueremail!="" && s_issueremail!=null)
                {
                  certtemplatejson.badge.issuer.email=s_issueremail; 
                }
                else
                {
                  certtemplatejson.badge.issuer.email="admin@certonce.com"; 
                } 

                if(s_revocationurl!="" && s_revocationurl!=null)
                {
                  certtemplatejson.badge.issuer.revocationList=s_revocationurl+"/revocation-list-eth.json";
                }
                else
                {
                  certtemplatejson.badge.issuer.revocationList=myip+subwwwurl+"/blockchain/"+puserid+"/revocation-list-eth.json";
                }
                certtemplatejson.verification.publicKey="ecdsa-koblitz-pubkey:"+currentpublickkey;
                certtemplatejson.badge.issuer.image=""; 

                
                if(puserid == "20001")
                {
                  certtemplatejson.badge.criteria.narrative="";
                  certtemplatejson.badge.signatureLines[0].name="MIT - WPU";
                  certtemplatejson.badge.issuer.email="certifications@mitwpu.edu.in";
                  certtemplatejson.badge.issuer.url="https://certification.mitwpu.edu.in";
                  certtemplatejson.badge.issuer.id="https://certification.mitwpu.edu.in/issuereth.json";
                  certtemplatejson.badge.issuer.revocationList="https://certification.mitwpu.edu.in/revocation-list-eth.json";  
                }
                
              }
              else
              {
                
                var obj = {
                Status: 400,
                message: "There is no selected blockchain"        
                }
                res.json(obj);  
                return;
              } 

              certtemplatejson=JSON.stringify(certtemplatejson);                        
              
              certtemplatefullpath=pathsjson.certtemplatefullpath;
              await os.execCommand('sudo chmod -R 777 '+certtemplatefullpath);                   
              if (!await fs.existsSync(certtemplatefullpath))
              {
                await writeFile(certtemplatefullpath,certtemplatejson);
              }
              else
              {
                  try {
                    await fs.unlinkSync(certtemplatefullpath);
                    await writeFile(certtemplatefullpath,certtemplatejson);
                  } catch(err) {
                    console.error(err)
                  }
                    
              } 
              fullname="";
              if(middle_name==null||middle_name=="")
              {
                fullname=first_name+" "+last_name;
              }
              else
              {
                fullname=first_name+" "+middle_name+" "+last_name;
              }
              if(certtype=="transcript")
              {
                fullname=fullname.toLowerCase().replace(/\b(\w)/g, s => s.toUpperCase());
              }
              
              if(iswriting==true)
              {
                  iswriting=false;
                  if (!await fs.existsSync(filename))
                  {
                    writer = csvWriter({ headers: ["name", "pubkey", "identity"]});
                  }
                  else
                  {
                      try {
                        await fs.unlinkSync(filename)                          
                      } catch(err) {
                        console.error(err)
                      }
                      writer = csvWriter({ headers: ["name", "pubkey", "identity"]});   
                  }  
                  await writer.pipe(fs.createWriteStream(filename, {flags: 'a'}));                    

                  
              }   
              if(iswriting==false)
              {
                isremain=true;                 
                await writer.write({
                      name:fullname,
                      pubkey:publickey,
                      identity:email,
                    });
              }
              if(index%50==0&&iswriting==false)
              {
                  isremain=false;
                  iswriting=true;

                  await writer.end();                            
                  await os.execCommand('cd '+pathsjson.workdir+' && instantiate-certificate-batch -c '+pathsjson.confpath);
              }
          }
      }
            
      
      if(isremain==true)
      {
        await writer.end();        
        await os.execCommand('cd '+pathsjson.workdir+' && instantiate-certificate-batch -c '+pathsjson.confpath);
      }       
      await os.execCommand('sudo cp '+pathsjson.unsignedcertificatetemppath+'*.json ' +unsignedcertificatepath);
      await os.execCommand('sudo chmod -R 777 '+unsignedcertificatepath);
      fs.readdir(pathsjson.unsignedcertificatetemppath, async function (err, files) {
      if (err) {
        console.log(err);
        var obj = {
          Status: 400,
          message: 'Readdir error.',              
          }
          res.json(obj);
      }
      else
      {
        //console.log(files);
        var curdate = new Date();            
        var monthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var issueddate= curdate.getDate() + '-' + monthShortNames[curdate.getMonth()] + '-' + curdate.getFullYear();

        if(files!=undefined&&files.length>0)
        {
          for (let i = 0; i < files.length; i++) {
              const file = files[i];
              fullpath=unsignedcertificatepath+file;
              if (!await fs.existsSync(fullpath))
              {
                  continue;
              }
              var contents = await fs.readFileSync(fullpath, 'utf8');
              contents=JSON.parse(contents);             
              
              if(glcohortid=="")
              {
                var obj = {
                    Status: 400,
                      message: "Invalid selected students."
                  };
                  res.json(obj);
                  return;
              }
                  
              var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and c.accountid='"+puserid+"' and (b.unsignedcertificateurl='' or b.unsignedcertificateurl is null);";

              var studentQuery = format(`SELECT a.studentid,a.emailaddress,a.firstname,a.middlename,
                                            a.lastname,a.sex,a.letterofreco,b.cohortid,c.cohortid,c.name,
                                            c.competencyname,c.description,c.competencystartdate,c.competencyenddate,b.id as studentidentify, b.cohortid as ccohortid, b.publickey,b.marks,b.certificateid,b.coursestartdate,b.coursecompletiondate,
                                            a.fathername,a.mothername,a.specializationone,                                                    
                                            a.specializationtwo,a.enrollnumber,b.serialnumber,a.preparedby, b.unsignedcertificateurl,
                                            a.facultyname, a.cgpa, a.rank, a.medaltype, a.completiondate, b.issuedate,
                                            d.logoimage, d.signatureimage, d.signaturename, d.signername, d.partnercompanyname,
                                            d.logoimage1, d.signatureimage1, d.signaturename1, d.signername1, d.partnercompanyname1, d.detail  
                                            FROM student a 
                                            LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                            LEFT JOIN cohort c ON c.id=b.cohortid 
                                            LEFT JOIN competencypartner d ON  trim(from d.competencyname)=trim(from c.competencyname) ${whereClause}
                                            `);                      
              
              let students = await pool.query(studentQuery);            
              if ( students.rowCount > 0 ) {                                 
                  for ( const student of students.rows ) { 
                      unsignedcertificateurl = student['unsignedcertificateurl'];
                      if(unsignedcertificateurl!=null&&unsignedcertificateurl!="") continue; 

                      var logoimage=student['logoimage'];
                      if(logoimage==null || logoimage=="") logoimage="";
                      else if(logoimage.indexOf("<img ")==-1)
                      {
                        logoimage='<img  src=\\"'+logoimage+'\\" style=\\"width: 85%; \\" />';
                      }
                      else
                      {
                        logoimage=logoimage.replace(/"/g,'\\"');  
                      }
                      var signatureimage=student['signatureimage'];
                      if(signatureimage==null || signatureimage=="") signatureimage="";
                      else if(signatureimage.indexOf("<img ")==-1)
                      {
                        signatureimage='<img src=\\"'+signatureimage+'\\" style=\\"width: 70%; \\" />';
                      }
                      else
                      {
                        signatureimage=signatureimage.replace(/"/g,'\\"');  
                      }                              
                      var signaturename=student['signaturename'];
                      if(signaturename==null) signaturename="";
                      var signername=student['signername'];
                      if(signername==null) signername="";
                      var partnercompanyname=student['partnercompanyname'];
                      if(partnercompanyname==null) partnercompanyname="";

                      var logoimage1=student['logoimage1'];
                      if(logoimage1==null || logoimage1=="") logoimage1="";
                      else if(logoimage1.indexOf("<img ")==-1)
                      {
                        logoimage1='<img  src=\\"'+logoimage1+'\\" style=\\"width: 85%; \\" />';
                      }
                      else
                      {
                        logoimage1=logoimage1.replace(/"/g,'\\"');  
                      }                                
                      var signatureimage1=student['signatureimage1'];
                      if(signatureimage1==null || signatureimage1=="") signatureimage1="";
                      else if(signatureimage1.indexOf("<img ")==-1)
                      {
                        signatureimage1='<img src=\\"'+signatureimage1+'\\" style=\\"width: 70%; \\" />';
                      }
                      else
                      {
                        signatureimage1=signatureimage1.replace(/"/g,'\\"');  
                      }                      
                      var signaturename1=student['signaturename1'];
                      if(signaturename1==null) signaturename1="";
                      var signername1=student['signername1'];
                      if(signername1==null) signername1="";
                      var partnercompanyname1=student['partnercompanyname1'];
                      if(partnercompanyname1==null) partnercompanyname1="";

                      
                      studentid = student['studentidentify'];   
                      if(studentid=='') continue;          
                      ccohortid = student['ccohortid'];   
                      if(ccohortid=='') continue;           

                      email=student['emailaddress'];
                      publickey = student['publickey'];

                      first_name = student['firstname'];
                      middle_name = student['middlename'];
                      last_name = student['lastname'];
                      competency_name = student['competencyname'];
                      fathername = student['fathername'];
                      if(fathername==null||fathername=="") fathername="";
                      mothername = student['mothername'];
                      if(mothername==null||mothername=="") mothername="";
                      enrollnumber = student['enrollnumber'];
                      if(enrollnumber==null||enrollnumber=="") enrollnumber="";
                      serialnumber = student['serialnumber'];
                      if(serialnumber==null||serialnumber=="") serialnumber="";
                      preparedby = student['preparedby'];
                      if(preparedby==null||preparedby=="") preparedby="";
                      
                      marks = student['marks'];
                      if(marks==null||marks=="") marks="";

                      specializationone = student['specializationone'];
                      if(specializationone==null||specializationone=="") specializationone="";
                      specializationtwo = student['specializationtwo'];
                      if(specializationtwo==null||specializationtwo=="") specializationtwo="";
                      
                      sex = student['sex'];
                      if(sex==null||sex=="") sex="";
                      if(sex=="F") sex="D/o";
                      else sex="S/o";
                      cohortname = student['name'];
                      description = student['description'];
                      if(description==null||description=="") description="";
                      
                      rollnumber = student['studentid'];
                      batchnumber = student['cohortfullid'];
                      if(batchnumber==null||batchnumber=="") batchnumber="";
                      batchnumber=batchnumber.toString();
                      letterofreco = student['letterofreco'];
                      if(letterofreco==null||letterofreco=="") letterofreco="";
                      
                      if(contents.recipient.identity==email&&contents.recipientProfile.publicKey==publickey)
                      { 
                        //contents.id=verifier_url_direct+file.replace(".json","");
                        if(puserid == "20001")
                        {                                  
                          contents.id="https://certification.mitwpu.edu.in/verify/"+file.replace(".json","");
                        }
                        else
                        {                          
                          if(s_verifybaseurl!="" && s_verifybaseurl!=null)
                          {
                            contents.id=s_verifybaseurl+"/"+file.replace(".json",""); 
                          }
                          else
                          {
                            contents.id=verifier_url_direct+file.replace(".json",""); 
                          }
                        }                                
                        console.log(s_verifybaseurl+"="+contents.id)
                        var templateid=await getHtmlTemplateID(contents.displayHtml);
                        contents.badge.name=cohortname;
                        if(s_verifybaseurl!="" && s_verifybaseurl!=null)
                        {                          
                          contents.badge.id="urn:uuid:"+getUuid(s_verifybaseurl+"/"+file.replace(".json",""));
                        }
                        else
                        {
                          contents.badge.id="urn:uuid:"+getUuid(verifier_url_direct+file.replace(".json",""));
                        }
                        
                        contents.badge.description=description;
                        contents.recipient.firstname=first_name;
                        contents.recipient.lastname=last_name;
                        contents.recipient.competencyname=competency_name; 
                        contents.recipient.templateid=templateid;
                        stringcontents=JSON.stringify(contents);
                        
                        competencystartdate = student['competencystartdate'];
                        if(competencystartdate==null||competencystartdate=="") competencystartdate="";
                        competencyenddate = student['competencyenddate'];
                        if(competencyenddate==null||competencyenddate=="") competencyenddate="";
                        
                        if(competencystartdate!="" && competencyenddate!="")                                
                          stringcontents=stringcontents.replace("COMPETENCY_START_END_DATE", "from "+competencystartdate+" to "+competencyenddate+", offered by");                                
                        else
                          stringcontents=stringcontents.replace("COMPETENCY_START_END_DATE", "");
                        
                        var htmlsnippet=student['detail'];
                        if(htmlsnippet==null) htmlsnippet="";
                        htmlsnippet=htmlsnippet.replace(/"/g,'\\"');  
                        
                        stringcontents=stringcontents.replace("360_MODULE_360", htmlsnippet);
                        
                        coursestartdate = student['coursestartdate'];
                        if(coursestartdate==null||coursestartdate=="") coursestartdate="";
                        coursecompletiondate = student['coursecompletiondate'];
                        if(coursecompletiondate==null||coursecompletiondate=="") coursecompletiondate="";
                        if(coursestartdate!="" && coursecompletiondate!="")                                
                          stringcontents=stringcontents.replace("COURSE_START_END_DATE", "from "+coursestartdate+" to "+coursecompletiondate+", offered by");                                
                        else
                          stringcontents=stringcontents.replace("COURSE_START_END_DATE", "");   

                        stringcontents=stringcontents.replace("LOGOIMAGE_REPLACE", logoimage);
                        stringcontents=stringcontents.replace("SIGNATUREIMAGE_REPLACE", signatureimage);
                        stringcontents=stringcontents.replace("SIGNATURE_NAME", signaturename);
                        stringcontents=stringcontents.replace("SIGNER_NAME", signername);
                        
                        stringcontents=stringcontents.replace(/PARTNERCOMPANY_1_NAME/g, partnercompanyname1);
                        if(partnercompanyname1!="")                                
                          stringcontents=stringcontents.replace(/PARTNERCOMPANY_NAME/g, partnercompanyname1+","+partnercompanyname);
                        else
                        {
                          stringcontents=stringcontents.replace(/PARTNERCOMPANY_NAME/g, partnercompanyname);
                          if(templateid=="template35e" || templateid=="template36e" || templateid=="template66e" || templateid=="template65e")
                          {
                            stringcontents=stringcontents.replace(/Conducted for/g,'<br>');
                            stringcontents=stringcontents.replace(/by S.P. Jain Institute of Management and Research/g,'<br>');
                          }
                        }

                        stringcontents=stringcontents.replace(/PARTNERCOMPANY_B_NAME/g, partnercompanyname);
                        if(partnercompanyname.trim()=="")
                        {
                          stringcontents=stringcontents.replace("& Enhelion Knowledge", "Enhelion Knowledge");
                          stringcontents=stringcontents.replace("and PARTNERCOMPANY_NAME", "");
                        }

                        stringcontents=stringcontents.replace("LOGOIMAGE_1_REPLACE", logoimage1);
                        stringcontents=stringcontents.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage1);
                        stringcontents=stringcontents.replace("SIGNATURE_1_NAME", signaturename1);
                        stringcontents=stringcontents.replace("SIGNER_1_NAME", signername1);                                
                        
                        stringcontents=stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
                        stringcontents=stringcontents.replace("RECEIPIENT_TITLE", student['sex']);
                        
                        stringcontents=stringcontents.replace("QR_VERIFIER_CODE", await getQRwithbase64(qr_verifier_url, 300));
                        
                        stringcontents=stringcontents.replace("MARKS_PERCENT", marks);
                        stringcontents=stringcontents.replace(/ORGANIZATION_NAME/g, organization_name);
                        stringcontents=stringcontents.replace(/STD_ID/g, rollnumber);                                
                        stringcontents=stringcontents.replace(/COHORT_ID/g, batchnumber);
                        stringcontents=stringcontents.replace(/LETTEROFRECOMMENDATION_CONTENT/g, letterofreco);
                        stringcontents=stringcontents.replace(/DATE_OF_ISSUE/g, issueddate);
                        stringcontents=stringcontents.replace(/ENROLL_NO/g, enrollnumber);
                        stringcontents=stringcontents.replace(/SERIAL_NO/g, serialnumber);
                        
                        const qr_data=rollnumber+" | "+first_name+" "+middle_name+" "+last_name;
                        const qrcodeskill = '<img src=\\"'+await getQRwithbase64(qr_data, 300)+'\\" style=\\"width: 50%;\\" />';
                        stringcontents=stringcontents.replace("SKILL-QR-CODE",qrcodeskill);

                        
                        stringcontents=stringcontents.replace("[S/D]", sex);
                        
                      
                        stringcontents=stringcontents.replace("major_1", specializationone);
                        stringcontents=stringcontents.replace("major_2", specializationtwo);
                        stringcontents=stringcontents.replace("PREPARED_BY", preparedby);
                        
                        if(fathername=="" || fathername=="null")
                        {
                          stringcontents=stringcontents.replace("FATHER_NAME", "");
                        }
                        else if(certtype=="transcript")
                          stringcontents=stringcontents.replace("FATHER_NAME", fathername.replace("Mr.","").trim());
                        else
                          stringcontents=stringcontents.replace("FATHER_NAME", fathername);
                        
                        if(mothername==""  || mothername=="null")
                        {
                          stringcontents=stringcontents.replace("& MOTHER_NAME","");
                          stringcontents=stringcontents.replace("MOTHER_NAME","");
                        }
                        else if(certtype=="transcript")
                          stringcontents=stringcontents.replace("MOTHER_NAME",mothername.replace("Mrs.","").trim());                          
                        else     
                          stringcontents=stringcontents.replace("MOTHER_NAME",mothername);
                        
                        var member_photo="";
                        var member_photo_transcript=member_photo_content=await readPhotoFile(awsinfo.s3obj,puserid,batchnumber,rollnumber,awsinfo.s3bucketname);
                        if(member_photo_content!="")
                        {
                          member_photo='<img src=\\"'+member_photo_content+'\\" style=\\"width: 75px; height:80px; border: 1px solid orange;\\">';
                          member_photo_transcript='<img src=\\"'+member_photo_content+'\\" style=\\"height: 60px; margin-bottom: 0px;\\">';
                        }
                        stringcontents=stringcontents.replace(/MEMBER_PHOTO/g, member_photo);
                        stringcontents=stringcontents.replace(/MEMBER_TRANSCRIPT_PHOTO/g, member_photo_transcript);


                        
                        const qrcode = '<img src=\\"'+await getQRwithbase64(qr_data, 300)+'\\" style=\\"height: 60px;border: 1px solid orange;\\" />';
                        const qrcode_transcript = '<img src=\\"'+await getQRwithbase64(qr_data, 300)+'\\" style=\\"width: 55px;\\" />';
                        
                        
                        stringcontents=stringcontents.replace("QR_CODE",qrcode);
                        stringcontents=stringcontents.replace("QR_TRANSCRIPT_CODE",qrcode_transcript);

                        ////////////////////////// Transcript Work //////////////////////////
                        stringcontents = await convertTranscriptToJson(puserid,batchnumber,rollnumber,stringcontents);

                        ////////////////////////// Transcript End ///////////////////////////


                      //stringcontents=await replaceTranscript(puserid,batchnumber,rollnumber,stringcontents);
                        
                        ////////MIT Custom fields///////
                        certificateid=student['certificateid'];
                        if(certificateid==null) certificateid="";
                        stringcontents=stringcontents.replace(/MIT_CERTIFICATEID/g, certificateid);

                        facultyname=student['facultyname'];
                        if(facultyname==null || facultyname==undefined) facultyname="";
                        if(cohortname.toLowerCase().indexOf("o21")===-1 && cohortfullid.toLowerCase().indexOf("o21")===-1)
                        {                                  
                          if(facultyname.replace(/ /g,'').toLowerCase().indexOf("facultyof<br>")==-1)
                            facultyname=facultyname.replace("Faculty of","Faculty of<br>");
                        }  
                        stringcontents=stringcontents.replace(/FACULTY_NAME/g, facultyname);
                        
                        if(cohortname.toLowerCase().indexOf("o21")===-1 && cohortfullid.toLowerCase().indexOf("o21")===-1)
                        {                               
                          if(stringcontents.indexOf("MIT_MEDAL_TYPE")!==-1)
                          {
                            if(specializationone.trim()=="" || specializationone.trim()=="-")
                              stringcontents=stringcontents.replace(/SPECIALIZATION_LINE/g, "In the");
                            else
                              stringcontents=stringcontents.replace(/SPECIALIZATION_LINE/g, "In "+specializationone+" Specialization in the");
                          }
                          else
                          {
                            if(specializationone.trim()=="" || specializationone.trim()=="-")
                              stringcontents=stringcontents.replace(/SPECIALIZATION_LINE/g, "<br>");
                            else
                              stringcontents=stringcontents.replace(/SPECIALIZATION_LINE/g, "In "+specializationone+" Specialization");
                          }
                        }
                        else
                        {
                          if(specializationone.trim()=="" || specializationone.trim()=="-")
                            stringcontents=stringcontents.replace(/SPECIALIZATION_LINE/g, "<br>");
                          else
                            stringcontents=stringcontents.replace(/SPECIALIZATION_LINE/g, "in "+specializationone+" specialization");
                        }

                        cgpa=student['cgpa'];                                                 
                        if(cgpa==null || cgpa==undefined) cgpa="";                                 
                        stringcontents=stringcontents.replace(/MIT_CGPA_TYPE/g, cgpa+" CGPA");

                        rank=student['rank'];
                        if(rank==null || rank==undefined) rank="";   
                        if(cohortname.toLowerCase().indexOf("o21")!==-1 ||cohortfullid.toLowerCase().indexOf("o21")!==-1)                                
                          rank=rank.toLowerCase().replace(/\b(\w)/g, s => s.toUpperCase());                             
                        stringcontents=stringcontents.replace(/MIT_RANK_TYPE/g, rank+" rank");

                        medaltype=student['medaltype'];
                        if(medaltype==null || medaltype==undefined) medaltype="";   
                        if(cohortname.toLowerCase().indexOf("o21")!==-1 ||cohortfullid.toLowerCase().indexOf("o21")!==-1)                                
                          medaltype=medaltype.toLowerCase().replace(/\b(\w)/g, s => s.toUpperCase());
                        stringcontents=stringcontents.replace(/MIT_MEDAL_TYPE/g, medaltype+" medal");  

                        completiondate=student['completiondate'];
                        if(completiondate==null || completiondate==undefined) completiondate="";
                        stringcontents=stringcontents.replace(/MIT_COMPLETIONDATE/g, completiondate);

                        issuedate=student['issuedate'];
                        if(issuedate==null || issuedate==undefined) issuedate="";
                        stringcontents=stringcontents.replace(/MIT_ISSUEDATE/g, issuedate);  

                        sex=student['sex'];
                        if(sex==null || sex==undefined) sex="";
                        if(sex.trim()=="M")
                          stringcontents=stringcontents.replace(/MALE_OR_FERMALE/g, "He");
                        else
                          stringcontents=stringcontents.replace(/MALE_OR_FERMALE/g, "She");
                        //////MIT Custom fields end/////
                        ////////DDPI Custom fields///////
                        stringcontents=stringcontents.replace("COMPETENCY_START_DATE",competencystartdate);
                        stringcontents=stringcontents.replace("COMPETENCY_END_DATE",competencyenddate);  
                        //////DDPI Custom fields end///// 
                                                      
                        stringcontents = stringcontents.replace(/(\r\n|\n|\r)/gm, "");
                        var returnpath={};
                        var justhtmlunsignedcertificate=stringcontents.replace(/BR_BR_REPLACE/g,'');                      
                        var ispreprocess=false;     
                        justhtmlcontent=JSON.parse(justhtmlunsignedcertificate);
                        justhtmlcontent.displayHtml=justhtmlcontent.displayHtml+`<script type="text/javascript">JsBarcode("#barcode", "${enrollnumber}", {format: "CODE128",lineColor: "#000000",width: 0.9,height: 20,displayValue: false,margin: 0});</script>`;
                        justhtmlunsignedcertificate=JSON.stringify(justhtmlcontent);

                        contents=JSON.parse(stringcontents);
                        contents.displayHtml=contents.displayHtml+`<script type="text/javascript">JsBarcode("#barcode", "${enrollnumber}", {format: "CODE128",lineColor: "#000000",width: 0.9,height: 20,displayValue: false,margin: 0});</script>`;
                        stringcontents=JSON.stringify(contents);                  
                        if(batchnumber.toLowerCase().indexOf("ndim")!==-1 || cohortname.toLowerCase().indexOf("ndim")!==-1) ///ndim
                        {
                        /*
                          contents=JSON.parse(stringcontents);
                          var base64pngcontent=await convertPdf2PngFromPdfFiles("/home/ubuntu/ndimpdffiles", certtype, puserid, first_name, middle_name, last_name, email);
                          if(base64pngcontent!="" && base64pngcontent!=null)
                          {
                            contents.displayHtml=base64pngcontent;
                            certificatePngUrl=await uploadCertificatePng(awsinfo.s3obj,puserid,base64pngcontent, file.replace(".json",".png"),"","", awsinfo.s3bucketname);
                            contents.certificatepng=certificatePngUrl;  
                            stringcontents=JSON.stringify(contents);
                            justhtmlcontent=JSON.parse(justhtmlunsignedcertificate);
                            justhtmlcontent.displayHtml=base64pngcontent;
                            justhtmlunsignedcertificate=JSON.stringify(justhtmlcontent);
                            ispreprocess=true;
                          } 
                          */
                          
                          common_lib.StorageInformation = awsinfo;
                          returnpath=await common_lib.generatePDF(fs, path, pdfparse, puppeteer,homedir,verifier_url_direct,awsinfo.s3obj,awsinfo.awsregion,templateid,justhtmlunsignedcertificate,file,puserid,organization_verify_uri,iss3,"",awsinfo.s3bucketname,true);                        
                          console.log(returnpath.pdffilepath);
                          let base64pngcontent=await convertPdf2Png(returnpath.pdffilepath);
                          if (await fs.existsSync(returnpath.pdffilepath))
                          {
                            await fs.unlinkSync(returnpath.pdffilepath);
                          }
                          justhtmlcontent=JSON.parse(justhtmlunsignedcertificate);
                          justhtmlcontent.displayHtml=base64pngcontent;
                          justhtmlunsignedcertificate=JSON.stringify(justhtmlcontent);
                        }
                        if(ishtml==false)
                        {
                          ///generate pdf, convert pdf to png as displayhtml///   
                          justhtmlunsignedcertificate=stringcontents.replace(/BR_BR_REPLACE/g,'');
                          stringcontents=stringcontents.replace(/BR_BR_REPLACE/g,'<br>');                                  
                          contents=JSON.parse(stringcontents);  
                          common_lib.StorageInformation = awsinfo;                                                             
                          returnpath=await common_lib.generatePDF(fs, path, pdfparse, puppeteer,homedir,verifier_url_direct,awsinfo.s3obj,awsinfo.awsregion,templateid,stringcontents,file,puserid,organization_verify_uri,iss3,"",awsinfo.s3bucketname,true);

                          console.log(returnpath.pdffilepath);
                          var base64pngcontent=await convertPdf2Png(returnpath.pdffilepath);
                          contents.displayHtml=base64pngcontent;  
                          if (await fs.existsSync(returnpath.pdffilepath))
                          {
                            fs.unlinkSync(returnpath.pdffilepath);
                          } 
                          var certificatePngUrl="";
                          certificatePngUrl=await uploadCertificatePng(awsinfo.s3obj,puserid,base64pngcontent, file.replace(".json",".png"),"","", awsinfo.s3bucketname, awsinfo.awsregion);
                          
                          contents.certificatepng=certificatePngUrl;  
                          stringcontents=JSON.stringify(contents);
                          
                        }
                        else
                        {                                  
                          justhtmlunsignedcertificate=stringcontents=stringcontents.replace(/BR_BR_REPLACE/g,'');
                        }
                         // upload stringcontents in S3 -> migration
                         const fileName = `json/unsignedjson/${studentid}-${uuidv4()}.json`;
                         const s3_URL = await utils.uploadJsonToS3('certonce', fileName, stringcontents);
                        //await fs.writeFileSync(fullpath, stringcontents, {flag: 'w'});
                        /////////////////////////////////////////////////////                             
                        // var updatesql= format(`UPDATE ${cohorttablename} SET unsignedcertificationjsonurl = '${s3_URL}',unsignedcertificateurl='${justhtmlunsignedcertificate}'  WHERE id=${studentid}`);
                        var updatesql= format(`UPDATE ${cohorttablename} SET unsignedcertificationjsonurl = '${s3_URL}'  WHERE id=${studentid}`);
                        await pool.query(updatesql);
                        console.log("studentid="+rollnumber+":cohortid="+batchnumber);
                        //await fs.writeFileSync("/home/ubuntu/"+file, stringcontents, {flag: 'w'});
                        isbreak=true;
                        break;
                      }
                  }
                }
              }
          }
          await fsExtra.emptyDirSync(pathsjson.unsignedcertificatetemppath); 
          console.log("Certificate generated successfully.");
          var obj = {
              Status: 200,
              message: 'Certificate generated successfully.',              
          }
          res.json(obj);
                
         }
      });
      //Update status
      /*
      updateStatusQuery = format(`UPDATE process_status SET status='done' WHERE processtype='generatecertificate' `);
      await pool.query(updateStatusQuery);
      */
    } 
    catch (err) {
      
      if(err.message.indexOf("No such file or directory")!=-1)
      {
        var obj = {
              Status: 200,
              message: 'No such file or directory.',              
          }
          res.json(obj);
      }
      else
      {
        var obj = {
          Status: 400,
          message: err.message        
          }
          res.json(obj);      
        }
    }
}

async function UpdateissuerProfile(puserid,organization_name)
{
  ///////////////////////////////////////////////////////////////////////
  var currentbtcpublickkey="";
  var currentethpublickkey="";      
  var profileQuery = format(`select publickey from wallet_pk where accountid = ${puserid} and blockchain='bitcoin' LIMIT 1`);
  var result=await pool.query(profileQuery);
  var userData = {};   
  var os = new os_func();   
  if (result.rows && result.rows.length != 0) {
    userData = result.rows[0]; 
    if(userData.publickey!=""&&userData.publickey!=null)
    {            
        currentbtcpublickkey=userData.publickey;
         console.log("case 7");
    }
    else 
    { 
      console.log("case 1");
      return false;
    }
  }
  else
  {      
    console.log("case 2");
    return false;
  }
  
  profileQuery = format(`select publickey from wallet_pk where accountid = ${puserid} and blockchain='ethereum' LIMIT 1`);
  result=await pool.query(profileQuery);
  userData = {};      
  if (result.rows && result.rows.length != 0) {
    userData = result.rows[0]; 
    if(userData.publickey!=""&&userData.publickey!=null)
    {            
        currentethpublickkey=userData.publickey;
         console.log("case 8");
    }
    else 
    {        
     console.log("case 3");  
      return false;
    }
  }
  else
  {    
   console.log("case 4");  
    return false;
  }

  var s_issuerurl="";
  var s_revocationurl="";
  var s_issuername="";
  var s_issueremail="";
  var settingQuery = format(`SELECT * FROM setting where accountid='${puserid}';`);    
  var settingResult=await pool.query(settingQuery);      
  if (settingResult.rows && settingResult.rows.length != 0) {
    s_issuerurl=settingResult.rows[0].issuerurl;
    s_revocationurl=settingResult.rows[0].revocationurl;
    s_issuername=settingResult.rows[0].issuername;
    s_issueremail=settingResult.rows[0].issueremail;        
  }
  ///////////////////////////////////////////////////////////////////////
      
  var fetchQuery = format(`select * from certtemplate_logo where accountid = ${puserid} LIMIT 1`);  

  var result=await pool.query(fetchQuery);  
  if (result.rows && result.rows.length != 0) 
  {    
    
    var logoimage=result.rows[0]["certtemplate_logo"];
    
    //var issuer_revocation_base_path="d:/blockchain/";    
    var my_issuer_revocation_base_path=issuer_revocation_base_path+puserid;
    var my_issuer_path=my_issuer_revocation_base_path+"/issuer.json";
    var my_revocation_path=my_issuer_revocation_base_path+"/revocation-list.json";
    
    var my_issuer_eth_path=my_issuer_revocation_base_path+"/issuereth.json";
    var my_revocation_eth_path=my_issuer_revocation_base_path+"/revocation-list-eth.json";
    
    issuercontent_new=issuercontent;
    revokelistcontent_new=revokelistcontent;
    if (!await fs.existsSync(my_issuer_revocation_base_path))
    {
        await os.execCommand('sudo mkdir "'+my_issuer_revocation_base_path+'"');
        await os.execCommand('sudo chmod -R 777 "'+my_issuer_revocation_base_path+'"');  

        //await os.execCommand('mkdir "'+my_issuer_revocation_base_path+'"');                      
    }

    try
    {
      //////bitcoin//////
      if(s_issuerurl!="" && s_issuerurl!=null)
      {
        issuercontent_new.id=s_issuerurl+"/"+puserid+"/issuer.json";
      }
      else
      {
        issuercontent_new.id=issuer_revocation_base_url+puserid+"/issuer.json";
      }
      
      issuercontent_new.introductionURL=myip+introport+subwwwurl+"/blockchain/introduction";
      issuercontent_new.publicKey[0].id="ecdsa-koblitz-pubkey:"+currentbtcpublickkey;

      if(s_revocationurl!="" && s_revocationurl!=null)
      {
        issuercontent_new.revocationList=s_revocationurl+"/"+puserid+"/revocation-list.json";

        revokelistcontent_new.id=s_revocationurl+"/"+puserid+"/revocation-list.json";
        revokelistcontent_new.issuer=s_revocationurl+"/"+puserid+"/issuer.json";
      }
      else
      {
        issuercontent_new.revocationList=issuer_revocation_base_url+puserid+"/revocation-list.json";

        revokelistcontent_new.id=issuer_revocation_base_url+puserid+"/revocation-list.json";
        revokelistcontent_new.issuer=issuer_revocation_base_url+puserid+"/issuer.json"; 
      }
      
      if(s_issuername!="" && s_issuername!=null)
      {
        issuercontent_new.name=s_issuername;
      }
      else
      {
        issuercontent_new.name=organization_name;
      }
      
      issuercontent_new.image=logoimage;

      if(s_issueremail!="" && s_issueremail!=null)
      {
        issuercontent_new.email=s_issueremail;
      }
      else
      {
        issuercontent_new.email="admin@certonce.com";
      } 
      
      //if (!await fs.existsSync(my_issuer_path))
      {
        await writeFile(my_issuer_path,JSON.stringify(issuercontent_new));
      }

      //if (!await fs.existsSync(my_revocation_path))
      {
        await writeFile(my_revocation_path,JSON.stringify(revokelistcontent_new));
      }

      /////////////ethereum////////////////
      if(s_issuerurl!="" && s_issuerurl!=null)
      {
        issuercontent_new.id=s_issuerurl+"/"+puserid+"/issuereth.json";
      }
      else
      {
        issuercontent_new.id=issuer_revocation_base_url+puserid+"/issuereth.json";
      }
      
      issuercontent_new.introductionURL=myip+introport+subwwwurl+"/blockchain/introduction";
      issuercontent_new.publicKey[0].id="ecdsa-koblitz-pubkey:"+currentethpublickkey;

      if(s_revocationurl!="" && s_revocationurl!=null)
      {
        issuercontent_new.revocationList=s_revocationurl+"/"+puserid+"/revocation-list-eth.json";

        revokelistcontent_new.id=s_revocationurl+"/"+puserid+"/revocation-list-eth.json";
        revokelistcontent_new.issuer=s_revocationurl+"/"+puserid+"/issuereth.json";
      }
      else
      {
        issuercontent_new.revocationList=issuer_revocation_base_url+puserid+"/revocation-list-eth.json";

        revokelistcontent_new.id=issuer_revocation_base_url+puserid+"/revocation-list-eth.json";
        revokelistcontent_new.issuer=issuer_revocation_base_url+puserid+"/issuereth.json"; 
      }
      
      if(s_issuername!="" && s_issuername!=null)
      {
        issuercontent_new.name=s_issuername;
      }
      else
      {
        issuercontent_new.name=organization_name;
      }
      
      issuercontent_new.image=logoimage;

      if(s_issueremail!="" && s_issueremail!=null)
      {
        issuercontent_new.email=s_issueremail;
      }
      else
      {
        issuercontent_new.email="admin@certonce.com";
      }
      //if (!await fs.existsSync(my_issuer_eth_path))
      {
        await writeFile(my_issuer_eth_path,JSON.stringify(issuercontent_new));
      }
      
      //if (!await fs.existsSync(my_revocation_eth_path))
      {
        await writeFile(my_revocation_eth_path,JSON.stringify(revokelistcontent_new));
      }
       console.log("case 9");
      return true;
    }
    catch(err)
    { 
       console.log("case 5");
      return false;
    }
  }
  else
  {
     console.log("case 6");
    return false;
  }
}

function getIso8601TimeForIssue(datestring="") {

  var date = new Date();
  if(datestring!="") date = new Date(datestring);
  var tzo = -date.getTimezoneOffset(),
      dif = tzo >= 0 ? '+' : '-',
      pad = function(num) {
          var norm = Math.floor(Math.abs(num));
          return (norm < 10 ? '0' : '') + norm;
      };

  return date.getFullYear() +
      '-' + pad(date.getMonth() + 1) +
      '-' + pad(date.getDate()) +
      'T' + pad(date.getHours()) +
      ':' + pad(date.getMinutes()) +
      ':' + pad(date.getSeconds()) +
      dif + pad(tzo / 60) +
      ':' + pad(tzo % 60);
}

async function Barcode_Generate(data, width, height){
  var canvas = createCanvas();
  // JSBARCODE(canvas, data,{displayValue: false, width: width, height: height, margin: 0});
  let result = canvas.toDataURL("image/png");
  return result;
}

async function QR_Generate(code, width) {  
  const canvas = createCanvas(width, width);
  QRCode.toCanvas(
    canvas,
    code,
    {
      errorCorrectionLevel: "H",
      margin: 1,
      color: {
        dark: "#000000",
        light: "#ffffff",
      },
    }
  );
  // console.log(canvas.toDataURL("image/png"));
  return canvas.toDataURL("image/png");
}

async function QR_With_Logo_Generate(dataForQRcode, center_image, width, cwidth) {
  const canvas = createCanvas(width, width);
  QRCode.toCanvas(
    canvas,
    dataForQRcode,
    {
      errorCorrectionLevel: "H",
      margin: 1,
      color: {
        dark: "#0060aa",
        light: "#ffffff",
      },
    }
  );

  const ctx = canvas.getContext("2d");
  const img = await loadImage(center_image);
  const center = (width - cwidth) / 2;
  ctx.drawImage(img, center, center, cwidth, cwidth);
  return canvas.toDataURL("image/png");
}

async function getQRwithbase64(code, width, write=false) {  
  const canvas = createCanvas(width, width);
  QRCode.toCanvas(
    canvas,
    code,
    {
      errorCorrectionLevel: "H",
      margin: 1,
      color: {
        dark: "#000000",
        light: "#ffffff",
      },
    }
  );
  // console.log(canvas.toDataURL("image/png"));
  let result = canvas.toDataURL("image/png");
  
  return result;
}

async function QR_With_Logo_Main(url) {
  const qrCode = await QR_With_Logo_Generate(
    url,
    `${myip}/images/backend/charusat_logo.png`,
    172,
    60
  );
  //console.log(qrCode);
    return qrCode;
  
}

async function template_replace_74_76(stringcontents, awsinfo, studentid, facultyname) {
	try {

		let getStudentQuery = format(`select * from student_language where studentid='${studentid}'`);
		console.log(getStudentQuery);
		let students = await pool.query(getStudentQuery);
		if (students.rowCount > 0) {
			let h_firstname = students.rows[0].firstname;
			if (h_firstname == undefined || h_firstname == null) h_firstname = "";
			let h_middlename = students.rows[0].middlename;
			if (h_middlename == undefined || h_middlename == null) h_middlename = "";
			let h_lastname = students.rows[0].lastname;
			if (h_lastname == undefined || h_lastname == null) h_lastname = "";
			let h_facultyname = students.rows[0].facultyname;
			if (h_facultyname == undefined || h_facultyname == null) h_facultyname = "";
			let h_competencyname = students.rows[0].competencyname;
			if (h_competencyname == undefined || h_competencyname == null) h_competencyname = "";
			let h_specializationone = students.rows[0].specializationone;
			if (h_specializationone == undefined || h_specializationone == null) h_specializationone = "";
			let h_cgpa = students.rows[0].cgpa;
			if (h_cgpa == undefined || h_cgpa == null) h_cgpa = "";
			let h_rank = students.rows[0].rank;
			if (h_rank == undefined || h_rank == null) h_rank = "";
			let h_medaltype = students.rows[0].medaltype;
			if (h_medaltype == undefined || h_medaltype == null) h_medaltype = "";
			let h_completiondate = students.rows[0].completiondate;
			if (h_completiondate == undefined || h_completiondate == null) h_completiondate = "";

			let h_fullname = "";
			if (h_middlename == null || h_middlename == "") {
				h_fullname = h_firstname + " " + h_lastname;
			}
			else {
				h_fullname = h_firstname + " " + h_middlename + " " + h_lastname;
			}
			stringcontents = stringcontents.replace(/FACULTY_NAME/g, facultyname);
			stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
			stringcontents = stringcontents.replace(/HINDI_FACULTYNAME/g, h_facultyname);
			stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
			stringcontents = stringcontents.replace(/HINDI_MIT_COMPLETIONDATE/g, h_completiondate);
			stringcontents = stringcontents.replace(/HINDI_SPECIALIZATION/g, h_specializationone);
			stringcontents = stringcontents.replace(/HINDI_CGPA/g, h_cgpa);
			stringcontents = stringcontents.replace(/HINDI_RANK/g, h_rank);
			stringcontents = stringcontents.replace(/HINDI_MEDAL/g, h_medaltype);
		}
		return stringcontents;
	}
	catch (err) {
		console.log(err);
	}
}

async function template_replace_71(stringcontents, awsinfo, puserid, batchnumber, specializationone, studentid, convocation_number, convocation_date, enrollnumber, course_name, phdtitle, facultyname, aadhaarnumber, fullname, competencyname, accreditation) {
  try {
    let fontColor;
    let facultyColor = {
      "Faculty of Applied Sciences": "117,140,72",
      "Faculty of Science": "117,140,72",
      "Faculty of Pharmacy": "255,153,0",
      "Faculty of Technology and Engineering": "0,155,253",
      "Faculty of Management Studies": "200,0,255",
      "Faculty of Medical Sciences": "176,88,0",
      "Faculty of Computer Science and Applications": "207,123,121",
    }
    let facultyColor1 = {
      "Faculty of Applied Sciences": "#758c48",
      "Faculty of Science": "#758c48",
      "Faculty of Pharmacy": "#ff9900",
      "Faculty of Technology and Engineering": "#009bfd",
      "Faculty of Management Studies": "#c802ff",
      "Faculty of Medical Sciences": "#b05800",
      "Faculty of Computer Science and Applications": "#cf7b79",
    }
    if (facultyname in facultyColor) fontColor= facultyColor[facultyname];
    else fontColor = "0,0,0";
    //await fs.writeFileSync("/home/ubuntu/template71.json",stringcontents);
    let sub1 = [
      "on fulfilling the requirements of the programme and <br />securing thereof",
      "who has fulfilled the requirements of the programme and<br />successfully defended the thesis entitled"
    ];
    let sub2 = [
      "The Governing Body confers the Degree of",
      "The Governing Body awards the"
    ];
    let sub3 = [
      "on",
      "to"
    ];
    let sub4 = [
      "Given",
      "Given"
    ];
    let convocation_serial = convocation_number.split(":")[1].trim();
    var photo_content = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, studentid, awsinfo.s3bucketname);
    if (photo_content != "") {
      stringcontents = stringcontents.replace('MEMBER_PHOTO', '<img src=\\"' + photo_content + '\\" style=\\"width: 130px; \\">');
    }
    let qr_logo_image = await QR_With_Logo_Main(`https://charusat.ac.in/getResultByID.php?id=${studentid}`);
    stringcontents = stringcontents.replace("QR_CODE_WITH_LOGO", `<img src=\\"${qr_logo_image}\\" style=\\"width: 90px; margin-bottom: 60px; margin-left: 35px;\\" />`)
    //////////////////////////////////////////// CHARUSAT Template Replace //////////////////////////////// 
    if(stringcontents.indexOf("170, 170, 170") != -1) {
      stringcontents = stringcontents.replace(/170, 170, 170/g, fontColor);     
    }
    if (phdtitle == "") {
      stringcontents = stringcontents.replace("CHARUSAT_SUB1", sub1[0]);
      stringcontents = stringcontents.replace("COURSE_NAME", course_name);
      stringcontents = stringcontents.replace(/COMPETENCY_REPLACE/g, "<br />");
      if (competencyname.toLowerCase().indexOf("bachelor of") !== -1 || competencyname.toLowerCase().indexOf("master of") !== -1){
        stringcontents = stringcontents.replace("CHARUSAT_SUB2", sub2[0]);
        stringcontents = stringcontents.replace("CHARUSAT_SUB3", sub3[0]);
      }
      else if (competencyname.toLowerCase().indexOf("post graduate diploma") !== -1){
        stringcontents = stringcontents.replace("CHARUSAT_SUB2", sub2[1]);
        stringcontents = stringcontents.replace("CHARUSAT_SUB3", sub3[1]);
      }
      stringcontents = stringcontents.replace("CHARUSAT_SUB4", sub4[0]);
    }
    else {
      phdtitle = phdtitle.charAt(0).toUpperCase() + phdtitle.substr(1).toLowerCase();
      phdtitle=phdtitle.replace("co2", "CO₂");
      stringcontents = stringcontents.replace("CHARUSAT_SUB1", sub1[1]);
      stringcontents = stringcontents.replace("CHARUSAT_SUB2", sub2[0]);
      stringcontents = stringcontents.replace("CHARUSAT_SUB3", sub3[0]);
      stringcontents = stringcontents.replace("CHARUSAT_SUB4", sub4[1]);
      stringcontents = stringcontents.replace("COURSE_NAME", phdtitle);
      stringcontents = stringcontents.replace(/COMPETENCY_REPLACE/g, "");
    }
    if (specializationone == "") {
      stringcontents = stringcontents.replace("SPECIALIZATION_REPLACE", "<br />");
      stringcontents = stringcontents.replace("SPECIALIZATION_ONE", "");
    }
    else {
      stringcontents = stringcontents.replace("SPECIALIZATION_REPLACE", "");
      stringcontents = stringcontents.replace("SPECIALIZATION_ONE", "(" + specializationone + ")");
    }
    fullname = fullname.split(" ").map(function(item){
      return item.charAt(0).toUpperCase() + item.substr(1).toLowerCase();
    }).join(' ');
    if (accreditation != "") {
      accreditation = `(${accreditation})`;
      accreditation = accreditation.replace("A+", `<span style=\\"font-weight: bold;\\">A+</span>`);
    }
    stringcontents = stringcontents.replace("ACCREDITATION", accreditation);
    stringcontents = stringcontents.replace("STD_NAME", fullname);
    stringcontents = stringcontents.replace("FACULTY_NAME", facultyname);
    stringcontents = stringcontents.replace("CONVOCATION_DATE", convocation_date);
    stringcontents = stringcontents.replace("STD_ID", studentid);
    stringcontents = stringcontents.replace("CONVOCATION_NUMBER", convocation_number);
    stringcontents = stringcontents.replace("CONVOCATION_SERIAL", convocation_serial);
    stringcontents = stringcontents.replace("AADHAAR_NUMBER", aadhaarnumber);
    stringcontents = stringcontents.replace(/ENROLL_NO/g, enrollnumber);
    //stringcontents = stringcontents.replace("SERIAL_NO", serialnumber);
    // issuedate = new Date(new Date().getTime() + 330 * 60 * 1000).toISOString().replace(/T/, ' ').replace(/\..+/, '') + '   IST';
    // stringcontents = stringcontents.replace("ISSUE_DATE", issuedate);
    return stringcontents;
    /////////////////////////////////////  End   ////////////////////////////////////////
  }
  catch (error) {
    console.log(error)
  }

}

function spjimr_65_68(stringcontents, partnercompanyname, partnercompanyname1, partnercompanyname2)
{
  //////////////////////////////////////////// SPJIMR PartnerCompanyName Replace ////////////////////////////////                    
  stringcontents=stringcontents.replace("SPJIMR_PARTNER_NAME", partnercompanyname);
  stringcontents=stringcontents.replace("SPJIMR_PARTNER_1_NAME", partnercompanyname1);
  stringcontents=stringcontents.replace("SPJIMR_PARTNER_2_NAME", partnercompanyname2);
  return stringcontents;
  /////////////////////////////////////  End   ////////////////////////////////////////
}

function getcertificatetemplatejson(student, puserid, country = "", templatetype = "", isPreview = false, cohortid="", istranscript) {
  let certtemplatejson = "";
  if (cohortid=="Political_Invoice"){
    certtemplatejson = require("../../template/template104.json");
  }
  else if (puserid == 20027) {
      if (country == null || country == "") {
          result = {
              Status: 400,
              message: 'Invalid Country',
          }
          //res.json(obj);
          return result;
      }
      if (country.toLowerCase() == "india") certtemplatejson = require("../../template/template52.json");
      else if (country.toLowerCase() == "malaysia") certtemplatejson = require("../../template/template51.json");
  }
  else if ((puserid == 20006) && templatetype !== null && templatetype !== "") {
      if (templatetype.toLowerCase().includes("certificate")) {
          certtemplatejson = require("../../template/template10.json");
      } else if (templatetype.toLowerCase().includes("advanced")) {
          certtemplatejson = require("../../template/template54.json");
      } else if (templatetype.toLowerCase().includes("diploma")) {
          certtemplatejson = require("../../template/template53.json");
      }
      else if (templatetype.toLowerCase().includes("master")){
        console.log("certtype-master");
        certtemplatejson = require("../../template/template108.json");
      }
      else {
        console.log("certtype-normal");
        if (isPreview) certtemplatejson = student['previewtemplate'];
        else certtemplatejson = student['certjson'];
        certtemplatejson = JSON.parse(certtemplatejson);
      }
  }
  else if (puserid == 20080) { // ARFEEN KHAN
    certtemplatejson = require("../../template/template93.json");
  }
  else if (puserid == 20094) {  //  MIET
  // else if (puserid == 20094 || puserid == 11) {  //  MIET
    if(istranscript == "false" || istranscript =="" || istranscript == null){
      certtemplatejson = require("../../template/template122.json");
    }
    else{
      certtemplatejson = require("../../template/template123.json");
    }
  }
  // else if (puserid == 20102 || puserid == 24) { // GCU
  //   certtemplatejson = require("../../template/template140.json");
  // }
  else {
      if (isPreview) certtemplatejson = student['previewtemplate'];
      else certtemplatejson = student['certjson'];

      //fs.writeFileSync(`/home/ubuntu/template_v22.json`,certtemplatejson,"utf-8"); 
      certtemplatejson = JSON.parse(certtemplatejson);
  }
  return certtemplatejson;
}

async function template_replace_60_61(stringcontents, startdate, enddate, sex, rollnumber, other1)
{
  try{
    stringcontents = stringcontents.replace(/COURSE_START_DATE/g, startdate);
    stringcontents = stringcontents.replace(/COURSE_COMPLETION_DATE/g, enddate);
    stringcontents = stringcontents.replace(/STD_ID/g, rollnumber);
    stringcontents = stringcontents.replace(/OTHER_ONE/g, other1);
    if(sex=="M") stringcontents = stringcontents.replace(/NDIM_SEX/g, "his");
    else if(sex=="F") stringcontents = stringcontents.replace(/NDIM_SEX/g, "her");
    return stringcontents;
  }
  catch(err){
    console.log(err);
  }    
}

async function template_replace_62(stringcontents, startdate, enddate, sex){

}

async function template_replace_72(stringcontents, studentid, serialnumber, enrollnumber, competency_name, convocation_date, other1) {  
  try {   
    let getStudentQuery = format(`select * from student_language where studentid='${studentid}'`);
    
    //console.log(getStudentQuery);
    let students = await pool.query(getStudentQuery);
    if (students.rowCount > 0) {
      let h_firstname = students.rows[0].firstname;
      if (h_firstname == undefined || h_firstname == null) h_firstname = "";
      else h_firstname = check_hindi_has_unicode(h_firstname);

      let h_middlename = students.rows[0].middlename;
      if (h_middlename == undefined || h_middlename == null) h_middlename = "";
      else h_middlename = check_hindi_has_unicode(h_middlename);

      let h_lastname = students.rows[0].lastname;
      if (h_lastname == undefined || h_lastname == null) h_lastname = "";
      else h_lastname = check_hindi_has_unicode(h_lastname);

      let h_competencyname = students.rows[0].competencyname;
      if (h_competencyname == null || h_competencyname == undefined) h_competencyname = "";
      else h_competencyname = check_hindi_has_unicode(h_competencyname);

      let h_other1 = students.rows[0].other1;
      if (h_other1 == undefined || h_other1 == null) h_other1 = "";
      else h_other1 = check_hindi_has_unicode(h_other1);

      let h_other2 = students.rows[0].other2;
      if (h_other2 == undefined || h_other2 == null) h_other2 = "";
      else h_other2 = check_hindi_has_unicode(h_other2);

      let h_fullname = "";
      if (h_middlename == null || h_middlename == "") {
        h_fullname = h_firstname + " " + h_lastname;
      }
      else {
        h_fullname = h_firstname + " " + h_middlename + " " + h_lastname;
      }

      stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
      stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
      stringcontents = stringcontents.replace(/HINDI_CONVOCATION_YEAR/g, h_other1);
      stringcontents = stringcontents.replace(/HINDI_CONVOCATION_DATE/g, h_other2);
      
      stringcontents = stringcontents.replace("SERIAL_NO", serialnumber);
      stringcontents = stringcontents.replace("ENROLL_NO", enrollnumber);
      stringcontents = stringcontents.replace("COMPETENCY_NAME", competency_name);
      stringcontents = stringcontents.replace("CONVOCATION_YEAR", other1);
      stringcontents = stringcontents.replace("CONVOCATION_DATE", convocation_date);
    }

    return stringcontents;
  }
  catch (err) {
    console.log(err);
  }
}

function check_hindi_has_unicode(value){
  // let code_list = [";", ":", "&"];
  value = value.replace(/\(/g, `<span style=\\"font-family: 'Sapient Sans'\\">(</span>`).replace(/\)/g, `<span style=\\"font-family: 'Sapient Sans'\\">)</span>`);
  // code_list.forEach((element) => {
  //   if(value.indexOf(element) !== -1) {      
  //     element = new RegExp(element, 'g');
  //     console.log("11111111111122222222222223333333333333333333", element);
  //     value = value.replace(element, `<span style="font-family: 'Sapient Sans'">${element}</span>`);
  //   }
  // })
  return value;
}

async function template_replace_79_81(stringcontents, issuedate)
{
  try{
    var options = {year: 'numeric', month: 'short', day: 'numeric' };
    // if(new Date(issuedate)=="Invalid Date"){
    //   issuedate = [issuedate.split("/")[2], issuedate.split("/")[1], issuedate.split("/")[0]].join("-");
    // }
    issuedate = [issuedate.split("/")[2], issuedate.split("/")[1], issuedate.split("/")[0]].join("-");
    issuedate = new Date(issuedate);
    issuedate = issuedate.toLocaleDateString("en-US", options);
    stringcontents = stringcontents.replace(/DATE_OF_ISSUE/g, issuedate);    
    return stringcontents;
  }
  catch(err){
    console.log(err);
  }
}

async function template_replace_86(stringcontents, studentid, fullname, fathername, completiondate, serialnumber, enrollnumber, coursename, department, phdtitle, institute_name) {
  var COMPETENCY_REPLACE_LIST = {
    "मास्टर ऑफ बिजनेस एडमिनिस्ट्रेशन": "ekLVj vkWQ fctusl ,MfefuLVªs'ku",
    "मास्टर ऑफ कम्प्यूटर एप्लीकेशन्स्": "ekLVj vkWQ dEI;wVj ,IyhdsÓUl~"
  }
  var COURSE_REPLACE_LIST = {
      "कम्प्यूटर एप्लीकेशन्स्": "dEI;wVj ,IyhdsÓUl~"
  }
  try {
    var maincontents = JSON.parse(stringcontents);
    stringcontents = maincontents.displayHtml;

    let getStudentQuery = format(`select * from student_language where studentid='${studentid}'`);
    //console.log(getStudentQuery);
    let students = await pool.query(getStudentQuery);
    if (students.rowCount > 0) {
      let h_firstname = students.rows[0].firstname;
      if (h_firstname == undefined || h_firstname == null) h_firstname = "";
      //else h_firstname = Convert_to_Kritidev(h_firstname);

      let h_middlename = students.rows[0].middlename;
      if (h_middlename == undefined || h_middlename == null) h_middlename = "";
      //else h_middlename = Convert_to_Kritidev(h_middlename);

      let h_lastname = students.rows[0].lastname;
      if (h_lastname == undefined || h_lastname == null) h_lastname = "";
      //else h_lastname = Convert_to_Kritidev(h_lastname);

      let h_fathername = students.rows[0].fathername;
      if (h_fathername == null || h_fathername == undefined) h_fathername = "";
      //else h_fathername = Convert_to_Kritidev(h_fathername);

      let h_department = students.rows[0].department;
      if (h_department == null || h_department == undefined) h_department = "";
      else {
        // h_department = Convert_to_Kritidev(h_department);
        // h_department = h_department.replace("(", `<span style=\\"font-family: clibri\\">(</span>`);
        // h_department = h_department.replace(")", `<span style=\\"font-family: clibri\\">)</span>`);
      }
      let h_phdtitle = students.rows[0].phdtitle;
      if (h_phdtitle == null || h_phdtitle == undefined) h_phdtitle = "";
      //else h_phdtitle = Convert_to_Kritidev(h_phdtitle);
      if(enrollnumber == "61900013"){
        h_phdtitle = `परर्फोमेंस स्टडी ऑफ वायर इलेक्ट्रिक डिस्चार्ज मशीनिंग ऑफ फेब्रिकेटिड Al8090 /Si<sub>3</sub> N<sub>4</sub> / hBN कोम्पोज़िट एंड निकेल एलोइ`;
        phdtitle = `Performance study of Wire Electric Discharge Machining of fabricated Al8090 /Si<sub>3</sub> N<sub>4</sub> / hBN Composite and Nickel alloy`;
      }
      let h_institute_name = students.rows[0].institute_name;      
      if (h_institute_name == null || h_institute_name == undefined) h_institute_name = "";
      else h_institute_name = template_86_convert_hindi_institute(h_institute_name);
      let h_coursename = students.rows[0].coursename;
      let h_coursename_mba = "";
      if (h_coursename == null || h_coursename == undefined) h_coursename = "";
      else {
          if(h_coursename in COURSE_REPLACE_LIST) h_coursename = COURSE_REPLACE_LIST[h_coursename];
          else{
              h_coursename_mba = h_coursename;
              h_coursename = Convert_to_Kritidev(h_coursename);
              h_coursename = h_coursename.replace(/‚/g, "kW");
          }          
      }
      
      let h_competencyname = students.rows[0].competencyname;
      if (h_competencyname == undefined || h_competencyname == null) h_competencyname = "";
      else {
        if(h_competencyname in COMPETENCY_REPLACE_LIST) h_competencyname = COMPETENCY_REPLACE_LIST[h_competencyname];
        else {
          h_competencyname = Convert_to_Kritidev(h_competencyname);
          h_competencyname = h_competencyname.replace(/‚/g, "kW");
        }
      }

      let h_completiondate = students.rows[0].completiondate;
      if (h_completiondate == undefined || h_completiondate == null) h_completiondate = "";
      else {
        h_completiondate = template86_format_date(h_completiondate);
      }

      let h_fullname = "";
      if (h_middlename == null || h_middlename == "") {
        h_fullname = h_firstname + " " + h_lastname;
      }
      else {
        h_fullname = h_firstname + " " + h_middlename + " " + h_lastname;
      }
      h_iits = Convert_to_Kritidev("(संरक्षक संस्थानः राष्ट्रीय प्रौद्योगिकी संस्थान, कुरुक्षेत्र)");
      h_mba_course_sub = `fo'ks"kKrk çkIr dj lQyrkiwoZd ikB~‌;Øe iw.kZ fd;kA`;
      h_phd_father_sub = `ftlds 'kks/k fo"k; dk 'kh"kZd`;
      //h_fullname = Convert_to_Kritidev(h_fullname);
      fullname = template86_format_name(fullname);
      fathername = template86_format_name(fathername);
      
      // let qr_data = rollnumber + " | " + h_fullname;
      // const qr_code = '<img src=\\"https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=' + qr_data + '\\" style=\\"height: 65px;\\" />';
      completiondate = nitkkr_date_format(completiondate);

      // stringcontents = stringcontents.replace(/QR_CODE/g, qr_code);

      if (department == "") {
        stringcontents = stringcontents.replace(/HINDI_DEPARTMENT_NAME/g, "");
        stringcontents = stringcontents.replace(/HINDI_DEPARTMENT_SUB/g, "");
        stringcontents = stringcontents.replace(/NITKKR_DEPARTMENT_REPLACE/g, "<br />");
        stringcontents = stringcontents.replace(/NITKKR_DEPARTMENT_NAME/g, "");
      }
      else {
        let h_d_n = `<p style="margin-bottom: 0px; margin-top: 5px; font-size: 14px; color: rgb(0, 0, 0); font-family: poppinsmedium; font-weight: bold; letter-spacing: 1.3px;">` + h_fullname + `</p>`;
        let d_n = `<p style="margin-bottom: 0px; margin-top: 10px; font-size: 18px; color: rgb(0, 0, 0); font-family: shelleyallegro;">from Department of <span style="font-size: 24px; color: rgb(0, 0, 0); font-family: shelleyallegro; font-weight: bold;">` + department + `</span></p>`;
        stringcontents = stringcontents.replace(/HINDI_DEPARTMENT_NAME/g, h_d_n);
        stringcontents = stringcontents.replace(/HINDI_DEPARTMENT_SUB/g, " ls ");
        stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
        stringcontents = stringcontents.replace(/NITKKR_DEPARTMENT_REPLACE/g, "");
        stringcontents = stringcontents.replace(/NITKKR_DEPARTMENT_NAME/g, d_n);
      }
      stringcontents = stringcontents.replace(/NITKKR_STUDENT_NAME/g, fullname);
      stringcontents = stringcontents.replace(/HINDI_PHD_TITLE/g, h_phdtitle);
      stringcontents = stringcontents.replace(/HINDI_INSTITUTE_NAME/g, h_institute_name);
      stringcontents = stringcontents.replace(/HINDI_COURSE_NAME_MBA/g, h_coursename_mba);
      stringcontents = stringcontents.replace(/HINDI_COURSE_NAME/g, h_coursename);
      stringcontents = stringcontents.replace(/HINDI_FATHER_NAME/g, h_fathername);
      stringcontents = stringcontents.replace(/HINDI_COMPLETION_DATE/g, h_completiondate);
      stringcontents = stringcontents.replace(/HINDI_IIITS_TEXT/g, h_iits);
      stringcontents = stringcontents.replace(/HINDI_MBA_COURSE_SUB/g, h_mba_course_sub);
      stringcontents = stringcontents.replace(/HINDI_PHD_FATHER_SUB/g, h_phd_father_sub);
      stringcontents = stringcontents.replace(/PHD_TITLE/g, phdtitle);
      stringcontents = stringcontents.replace(/INSTITUTE_NAME/g, institute_name);
      stringcontents = stringcontents.replace(/COURSE_NAME/g, coursename);
      stringcontents = stringcontents.replace(/COMPLETION_DATE/g, completiondate);
      stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername);
      stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);
      stringcontents = stringcontents.replace(/ENROLL_NO/g, enrollnumber);
      stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
      stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
    }

    maincontents.displayHtml = encodeURIComponent(stringcontents);
    return JSON.stringify(maincontents);
  }
  catch (err) {
    console.log(err);
  }
}

function template86_format_name(name){
  let result = [];
  name.split(" ").forEach((value) => {
    if(value !=""){
      result.push(value.trim().charAt(0).toUpperCase() + value.trim().slice(1).toLowerCase());
    }    
  })
  return result.join(" ");
}

function template86_format_date(date){
  let result = [];
  date.split(" ").forEach((value, index) => {
    if(value !=""){
      if(index != 1){
        result.push(`<span style="font-family: dvttsurekh; font-size: 18px; font-weight: bold"> ` + value + ` </span>`)
      }
      else{
        //result.push(`<span style=\\"font-size: 22px; font-weight: bold;\\"> `+ value + `</span><span style=\\"font-size: 24px; font-family: timesnewroman; font-weight: bold\\">, </span>`)        
        result.push(`<span style="font-size: 22px; font-weight: bold;"> `+ Convert_to_Kritidev(value + ",") + `</span>`)
      }
      //result.push(value.trim().charAt(0).toUpperCase() + value.trim().slice(1).toLowerCase());
    }    
  })
  return result.join("");
}

async function template_replace_87(stringcontents, issuedate) {
  try {
    if (!issuedate.includes("/")) {
      let issuedDateConverted = new Date(issuedate);
      console.log(issuedDateConverted)
      issuedate = issuedDateConverted.getDate().toString() + "/" + (issuedDateConverted.getMonth() + 1).toString() + "/" + issuedDateConverted.getFullYear().toString();
    }
    console.log(issuedate)
    var issuedates = issuedate.split("/");
    var issueDateStr = "";
    if (parseInt(issuedates[0]) < 10) {
      issueDateStr += "0" + parseInt(issuedates[0]).toString();
    } else {
      issueDateStr += issuedates[0];
    }
    if (parseInt(issuedates[0]) === 1 || parseInt(issuedates[0]) === 21 || parseInt(issuedates[0]) === 31) {
      issueDateStr += "st ";
    } else if (parseInt(issuedates[0]) === 2 || parseInt(issuedates[0]) === 22) {
      issueDateStr += "nd ";
    } else if (parseInt(issuedates[0]) === 3 || parseInt(issuedates[0]) === 23) {
      issueDateStr += "rd ";
    } else {
      issueDateStr += "th ";
    }
    var monthArr = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    issueDateStr += monthArr[parseInt(issuedates[1]) - 1] + ", " + issuedates[2];
    stringcontents = stringcontents.replace(/ISSUED_DATE/g, issueDateStr);
    return stringcontents;
  }
  catch (err) {
    console.log(err);
  }
}

// async function template_replace_93(stringcontents, competencyname, issuedate, signatureimage, signatureimage1, signatureimage2, logoimage, logoimage1, logoimage2) {
  async function template_replace_93(stringcontents, fullname, competencyname, issuedate, logoimage2) {
  try {
    if (!issuedate.includes("/")) {
      let issuedDateConverted = new Date(issuedate);
      issuedate = issuedDateConverted.getDate().toString() + "/" + (issuedDateConverted.getMonth() + 1).toString() + "/" + issuedDateConverted.getFullYear().toString();
    }
    var issuedates = issuedate.split("/");
    var issueDateStr = "";
    if (parseInt(issuedates[0]) < 10) {
      issueDateStr += "0" + parseInt(issuedates[0]).toString();
    } else {
      issueDateStr += issuedates[0];
    }
    if (parseInt(issuedates[0]) === 1 || parseInt(issuedates[0]) === 21 || parseInt(issuedates[0]) === 31) {
      issueDateStr += "st ";
    } else if (parseInt(issuedates[0]) === 2 || parseInt(issuedates[0]) === 22) {
      issueDateStr += "nd ";
    } else if (parseInt(issuedates[0]) === 3 || parseInt(issuedates[0]) === 23) {
      issueDateStr += "rd ";
    } else {
      issueDateStr += "th ";
    }
    var monthArr = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    issueDateStr += monthArr[parseInt(issuedates[1]) - 1] + ", " + issuedates[2];

    // stringcontents = stringcontents.replace(/COMPETENCY_LOGO_IMG/g, logoimage);

    let fullNamePara, certifyStatementDiv, certifyContenttDiv, signatureDiv, logoImage1Div, issueDateDiv;
    switch (competencyname.toString()) {
      case 'BTF':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:307px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:311px;right:145px;font-size:16px;color:#30302f;font-family:poppins;letter-spacing:2.7px\\">THIS CERTIFICATE IS PRESENTED TO</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:485px;right:147px;font-size:16px;color:#30302f;font-family:poppins;text-align:right;letter-spacing:0.4px;\\">For being unique and sharing your<br/>knowledge with the world</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:616px;right:147px;width:14%;\\">${signatureimage}${signatureimage1} <p id=\\"idr7\\" style=\\"text-align:center;font-size:10px;color:#1e3254;font-family:montserrat;text-align:center;margin-top:7px;\\">SIGNATURE</p></div>`;
        // logoImage1Div = `<div id=\\"idr_partner_logo3\\" style=\\"position:absolute;top:616px;right:31.5%;\\">${logoimage1}</div>`;
        // issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:616px;right:39%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:13px;color:#3e3c3c;font-family:montserrat;font-weight:800;letter-spacing:0.7px;text-align:center;margin-top:12px;margin-bottom:5px;\\">${issueDateStr}</p>${signatureimage2}<p id=\\"idr7\\" style=\\"text-align:center;font-size:10px;color:#3e3c3c;font-family:montserrat;font-weight:600;text-align:center;margin-top:5px;\\">DATE</p></div>`;
        issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:616px;right:39%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:13px;color:#3e3c3c;font-family:montserrat;font-weight:800;letter-spacing:0.7px;text-align:center;margin-top:12px;margin-bottom:5px;\\">${issueDateStr}</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        // stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, logoImage1Div);
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, issueDateDiv);
        break;
      case 'CTF English':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:277px;right:145px;font-size:23px;color:#1e3254;font-family:circular-std-book;\\">This certifies that</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:470px;right:145px;font-size:16px;color:#242222;font-family:circular-std-book;text-align:right;\\">Has completed Coach to a Fortune Foundation X Program.<br/>We wish you all the best and all the power to<br/>make a difference in the world by<br/>creating a massive transformation!</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:616px;right:147px;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:10px;color:#1e3254;font-family:montserrat;text-align:center;margin-top:7px;\\">SIGNATURE</p></div>`;
        // logoImage1Div = `<div id=\\"idr_partner_logo3\\" style=\\"position:absolute;top:616px;right:338px;\\">${logoimage1}</div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        // stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, logoImage1Div);
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, "");
        break;
      case 'CTF Hindi':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:152px;font-size:80px;color:#1e3254;font-family:great-vibes;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:279px;right:145px;font-size:23px;color:#1e3254;font-family:circular-std-book;letter-spacing:0.6px;\\">Yah pramanit karta hai ki</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:470px;right:145px;font-size:16px;color:#242222;font-family:circular-std-book;text-align:right;\\">Ne Coach To A Fortune FoundationX program pura kar liya hai. Hum<br/>aapko ek behatar duniya banane aur badlav lane ke liye<br/>shubhkamnaye dete hai.</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:580px;right:147px;width: 265px;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:18px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:12px;\\">SIGNATURE</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, "");
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, "");
        break;
      case 'IY 10 Week':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:277px;right:145px;font-size:23px;color:#1e3254;font-family:circular-std-book;\\">This certifies that</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:480px;right:145px;font-size:14px;color:#414042;font-family:circular-std-book;text-align:right;\\">Has completed the Incredible You 10 week program!<br/>We wish all the best and all the power to take your life to a<br/>whole new level and become an incredible person!<br/>The transformation has begun!</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:616px;right:147px;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:10px;color:#1e3254;font-family:montserrat;text-align:center;margin-top:7px;\\">SIGNATURE</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, "");
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, "");
        break;
      case 'IY Foundation English':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:32%;right:14%;font-size:24px;color:#1e3254;font-family:circular-std-book;\\">This certifies that</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:55%;right:14%;font-size:18;color:#1a1b1e;font-family:circular-std-book;text-align:right;\\">Has completed The Incredible You Foundation Program.<br/>We wish you all the best and all the power to make a difference<br/>in the world by creating a massive transformation!</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:71%;right:14%;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:10px;\\">SIGNATURE</p></div>`;        
        // issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:71%;right:38%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:12px;margin-bottom:5px;\\">${issueDateStr}</p>${signatureimage2}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:5px;\\">DATE</p></div>`;
        issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:616px;right:390px;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:12px;margin-bottom:5px;\\">${issueDateStr}</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, "");
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, issueDateDiv);
        break;
      case 'IY Foundation Hindi':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:32%;right:14%;font-size:24px;color:#1e3254;font-family:circular-std-book;\\">Yah pramanit karta hai ki</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:55%;right:14%;font-size:18;color:#1a1b1e;font-family:circular-std-book;text-align:right;\\">Yeh certificate aapke liye ek nishani hai, jo aapko humesha yaad dilate<br/>rahega, ki aapne apni zindagi ko behetar karne ke liye kadam<br/>uthaya aur apni kabiliyat ko sabit kiya hai.</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:71%;right:14%;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:8px;\\">SIGNATURE</p></div>`;        
        // issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:71%;right:38%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:14px;margin-bottom:5px;\\">${issueDateStr}</p>${signatureimage2}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:5px;\\">DATE</p></div>`;
        issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:616px;right:390px;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:14px;margin-bottom:5px;\\">${issueDateStr}</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, "");
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, issueDateDiv);
        break;
      case 'IYCT English':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:32%;right:14%;font-size:24px;color:#1e3254;font-family:circular-std-book;\\">This certifies that</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:55%;right:14%;font-size:18;color:#1a1b1e;font-family:circular-std-book;text-align:right;\\">has successfully completed the Incredible You Coach Training,<br/>a CCE certified program accredited by International<br/>Coach Federation</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:71%;right:14%;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:8px;\\">SIGNATURE</p></div>`; 
        // logoImage1Div = `<div id=\\"idr_partner_logo3\\" style=\\"position:absolute;top:71%;right:29%;\\">${logoimage1}</div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        // stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, logoImage1Div);
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, "");
        break;
      case 'IYCT Hindi':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:32%;right:14%;font-size:24px;color:#1e3254;font-family:circular-std-book;\\">Yah pramanit karta hai ki</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:55%;right:14%;font-size:18;color:#1a1b1e;font-family:circular-std-book;text-align:right;\\">Aapne The Incredible You Coach Training Program, kamyabi se pura kar<br/>liya hai. aap ab aapke clients ko, The incredible You Program istemaal<br/>kar ke, coach kar ke, unki zindagi me badlav lane ke liye taiyaar hai.</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:71%;right:14%;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:8px;\\">SIGNATURE</p></div>`;      
        // issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:71%;right:38%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:14px;margin-bottom:5px;\\">${issueDateStr}</p>${signatureimage2}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:5px;\\">DATE</p></div>`;
        issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:616px;right:390px;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:14px;margin-bottom:5px;\\">${issueDateStr}</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, "");
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, issueDateDiv);
        break;
      case 'STF':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:32%;right:14%;font-size:24px;color:#1e3254;font-family:circular-std-book;\\">This certifies that</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:55%;right:14%;font-size:18;color:#242222;font-family:circular-std-book;text-align:right;\\">Has completed Speak to a Fortune Foundation Program. We wish you<br/>all the best and all the power to make a difference in the world by<br/>creating a massive transformation!</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:71%;right:14%;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:8px;\\">SIGNATURE</p></div>`;   
        // logoImage1Div = `<div id=\\"idr_partner_logo3\\" style=\\"position:absolute;top:71%;right:375px;\\">${logoimage1}</div>`;  
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        // stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, logoImage1Div);
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, "");
        break;
      case 'STF ME':
        fullNamePara = `<p id=\\"idr4\\" style=\\"position:absolute;top:280px;right:153px;font-size:80px;color:#1e3254;font-family:great-vibes;letter-spacing:0.7px;\\">${fullname}</p>`;
        // certifyStatementDiv = `<p id=\\"idr_certifiy1\\" style=\\"position:absolute;top:32%;right:14%;font-size:24px;color:#1e3254;font-family:circular-std-book;\\">This certifies that</p>`;
        // certifyContenttDiv = `<p id=\\"idr6\\" style=\\"position:absolute;top:55%;right:14%;font-size:18;color:#1a1b1e;font-family:circular-std-book;text-align:right;\\">has successfully completed the Speak to a Fortune Mastermind Edition<br/>Program. You are now ready to conduct the Mastermind sessions with<br/>your clients and help them experience the transformation.</p>`;
        // signatureDiv = `<div id=\\"idr_signature1\\" style=\\"position:absolute;top:71%;right:14%;width:14%;\\">${signatureimage}${signatureimage1}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:8px;\\">SIGNATURE</p></div>`;   
        // issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:71%;right:38%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:14px;margin-bottom:5px;\\">${issueDateStr}</p>${signatureimage2}<p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:5px;\\">DATE</p></div>`;
        issueDateDiv = `<div id=\\"idr_issued_date1\\" style=\\"position:absolute;top:616px;right:33%;width:18%;\\"><p id=\\"idr7\\" style=\\"text-align:center;font-size:12px;color:#1e3254;font-family:montserrat;font-weight:600;letter-spacing:0.7px;text-align:center;margin-top:14px;margin-bottom:5px;\\">${issueDateStr}</p></div>`;
        stringcontents = stringcontents.replace(/BACKGROUND_IMG/g, logoimage2);
        stringcontents = stringcontents.replace(/NAME_OF_STUDENT/g, fullNamePara);
        // stringcontents = stringcontents.replace(/CERTIFY_STATEMENT/g, certifyStatementDiv);
        // stringcontents = stringcontents.replace(/CERTIFY_CONTENT/g, certifyContenttDiv);
        // stringcontents = stringcontents.replace(/SIGNATURE_DIV/g, signatureDiv);
        stringcontents = stringcontents.replace(/PARTNER_LOGO_DIV/g, "");
        stringcontents = stringcontents.replace(/ISSUE_DATE_DIV/g, issueDateDiv);
        break;
      default:
      break;
    }
    return stringcontents;
  }
  catch (err) {
    console.log(err);
  }
}

async function template_replace_95(stringcontents, rollnumber, certificationcategory, competencyname, competencystartdate, competencyenddate, logoimage, signatureimage, signaturename, signername, partnercompanyname, logoimage1, signatureimage1, signaturename1, signername1, partnercompanyname1, logoimage2, signatureimage2, signaturename2, signername2, partnercompanyname2,customername, coursename, department, student){
  try{
    let category_sub_completion = "successfully completed the";
    let category_sub_participation = "participated in the";
    let category_sub_completion1 = "has successfully completed";
    let category_sub_participation1 = "has participated in";

    let category_sub_replace1 = "and is awarded 45 PDUs";
    let category_2_list = [
      "Digital Transformation Programme",
      "New Manager Programme",
      "Achieving Leadership Potential Programme",
      "Corporate Finance Programme",
      "iVenture Programme",
      "Sales Excellence Programme",
      "Executive Certificate Programme in Digital Marketing"
    ];
    let category_2_sub_list = [
      "New Manager Programme",
      "Achieving Leadership Potential Programme",
      "Corporate Finance Programme",
      "Executive Certificate Programme in Digital Marketing"
    ];
    if (certificationcategory.toLowerCase().indexOf("participation") !== -1){
      stringcontents = stringcontents.replace(/CERTIFICATION_CATEGORY/g, "Participation");
      stringcontents = stringcontents.replace(/CERTIFICATION_SUB/g, category_sub_participation1);
      // stringcontents = stringcontents.replace(/CERTIFICATION_SUB/g, category_sub_participation);
      stringcontents = stringcontents.replace(/CATEGORY_SUB/g, "");
      stringcontents = stringcontents.replace(/CATEGORY_REPLACE/g, "<br/>");
    }
    else if (certificationcategory.toLowerCase().indexOf("completion") !== -1){
      stringcontents = stringcontents.replace(/CERTIFICATION_CATEGORY/g, "Completion");
      // stringcontents = stringcontents.replace(/CERTIFICATION_SUB1/g, category_sub_completion1);
      stringcontents = stringcontents.replace(/CERTIFICATION_SUB/g, category_sub_completion);
      if (competencyname == "Executive Certificate Programme in Fintech & Blockchain"){
        stringcontents = stringcontents.replace(/CATEGORY_SUB/g, "");
        stringcontents = stringcontents.replace(/CATEGORY_REPLACE/g, "<br/>");
      }
      else {
        stringcontents = stringcontents.replace(/CATEGORY_SUB/g, category_sub_replace1);
        stringcontents = stringcontents.replace(/CATEGORY_REPLACE/g, "");
      }      
    }
    else if (certificationcategory.toLowerCase().indexOf("excellence") !== -1){
      stringcontents = stringcontents.replace(/CERTIFICATION_CATEGORY/g, "Excellence");
      // stringcontents = stringcontents.replace(/CERTIFICATION_SUB1/g, category_sub_participation1);
      stringcontents = stringcontents.replace(/CERTIFICATION_SUB/g, "");
      stringcontents = stringcontents.replace(/CATEGORY_SUB/g, "");
      stringcontents = stringcontents.replace(/CATEGORY_REPLACE/g, "<br/>");
    }
    if (category_2_list.includes(competencyname)){
      stringcontents = stringcontents.replace("CATEGORY_2_SUB", "By Bhavan’s S.P. Jain Institute of Management and Research");
      stringcontents = stringcontents.replace(/CATEGORY_2_REPLACE/g, "");
    }
    else {
      stringcontents = stringcontents.replace(/CATEGORY_2_SUB/g, "");
      stringcontents = stringcontents.replace(/CATEGORY_2_REPLACE/g, "<br / >");
    }
    if (competencyname == "Digital Transformation Programme"){
      stringcontents = stringcontents.replace("CATEGORY_1_SUB", "Conducted for AICPA & CIMA");
      //stringcontents = stringcontents.replace("CATEGORY_2_SUB", "By Bhavan’s S.P. Jain Institute of Management and Research");
      stringcontents = stringcontents.replace(/CATEGORY_1_REPLACE/g, "");
      //stringcontents = stringcontents.replace(/CATEGORY_2_REPLACE/g, "");
    }
    else {
      if (customername != ""){
        stringcontents = stringcontents.replace("CATEGORY_1_SUB", `Conducted for ${customername}`);
        stringcontents = stringcontents.replace(/CATEGORY_1_REPLACE/g, "");
      }
      else {
        stringcontents = stringcontents.replace(/CATEGORY_1_SUB/g, "");
        stringcontents = stringcontents.replace(/CATEGORY_1_REPLACE/g, "<br / >");
      }
      if (coursename != ""){
        stringcontents = stringcontents.replace("CATEGORY_3_SUB", `and is awarded with ${coursename}`);
        stringcontents = stringcontents.replace(/CATEGORY_3_REPLACE/g, "");
      }
      else {
        stringcontents = stringcontents.replace(/CATEGORY_3_SUB/g, "");
        stringcontents = stringcontents.replace(/CATEGORY_3_REPLACE/g, "<br / >");
      }
      
    }

    /*
    if (competencystartdate == "" && competencyenddate == ""){
      stringcontents = stringcontents.replace("COMPETENCY_DURATION1", "");
      stringcontents = stringcontents.replace("COMPETENCY_DURATION", "");
      stringcontents = stringcontents.replace(/DURATION_REPLACE/g, "<br/>");
    }
    else if (competencystartdate == "" && competencyenddate != ""){
      stringcontents = stringcontents.replace("COMPETENCY_DURATION1", "");
      stringcontents = stringcontents.replace(/COMPETENCY_DURATION/g, "DATE: " + competencyenddate);
      stringcontents = stringcontents.replace(/DURATION_REPLACE/g, "<br/>");
    }
    else if (competencystartdate != "" && competencyenddate != ""){
      if (competencystartdate.indexOf("&") !== -1 && competencyenddate.indexOf("&") !== -1){
        stringcontents = stringcontents.replace("COMPETENCY_DURATION1", `<span style=\\"font-size: 20px;\\">and</span><br/>From ` + competencystartdate.split("&")[1].trim() + " To " + competencyenddate.split("&")[1].trim());
        stringcontents = stringcontents.replace("COMPETENCY_DURATION", "From " + competencystartdate.split("&")[0].trim() + " To " + competencyenddate.split("&")[0].trim());
        stringcontents = stringcontents.replace(/DURATION_REPLACE/g, "");
      }
      else {
        stringcontents = stringcontents.replace("COMPETENCY_DURATION1", "");
        if(category_2_sub_list.indexOf(competencyname) !== -1){
          stringcontents = stringcontents.replace("COMPETENCY_DURATION", "From " + competencystartdate + " to " + competencyenddate);
        }
        else {
          stringcontents = stringcontents.replace("COMPETENCY_DURATION", "From " + competencystartdate + " To " + competencyenddate);
        }
        stringcontents = stringcontents.replace(/DURATION_REPLACE/g, "<br/>");
      }
    }
    else{
      stringcontents = stringcontents.replace(/COMPETENCY_DURATION/g, "");
    }
    */
    
    /*
    if (signaturename!="" || signername !="" || partnercompanyname != "") stringcontents = stringcontents.replace("DISTINGUISH_LINE", `<hr style=\\"height: 2px;background: rgb(81, 36, 127);width: 70%;\\">`);
    else stringcontents = stringcontents.replace("DISTINGUISH_LINE", "");
    if (signaturename1 != "" || signername1 !="" || partnercompanyname1 != "") stringcontents = stringcontents.replace("DISTINGUISH_1_LINE", `<hr style=\\"height: 2px;background: rgb(81, 36, 127);width: 70%;\\">`);
    else stringcontents = stringcontents.replace("DISTINGUISH_1_LINE", "");
    if (signaturename2 != "" || signername2 !="" || partnercompanyname2 != "") stringcontents = stringcontents.replace("DISTINGUISH_2_LINE", `<hr style=\\"height: 2px;background: rgb(81, 36, 127);width: 70%;\\">`);
    else stringcontents = stringcontents.replace("DISTINGUISH_2_LINE", "");
    */
    if(competencyname == "Corporate Finance Programme"){
      // stringcontents = stringcontents.replace(/Participant ID: STD_ID/g, "");
      // if(stringcontents.indexOf('<tr><td style=\\"text-align: left; width: 50%;\\">PRINT_REPLACE</td><td style=\\"text-align: right; width: 50%;\\"><p id=\\"idr17\\" style=\\"margin-bottom: 0px; margin-top: 70px; font-size: 14pt; color: rgb(81, 36, 127); font-family: &quot;Sapient Sans&quot;;\\">Participant ID: STD_ID</p></td></tr>') !== -1) console.log("aaaaaaaaasssssssssssssssssssddddddddddddddddddd");
      stringcontents = stringcontents.replace(/RBI_BR_REPLACE/g, "<br><br><br><br><br>");
      stringcontents = stringcontents.replace(/BR_BR_REPLACE/g, "");
      stringcontents = stringcontents.replace('<tr><td style=\\"text-align: left; width: 50%;\\">PRINT_REPLACE</td><td style=\\"text-align: right; width: 50%;\\"><p id=\\"idr17\\" style=\\"margin-bottom: 0px; margin-top: 70px; font-size: 14pt; color: rgb(81, 36, 127); font-family: &quot;Sapient Sans&quot;;\\">Participant ID: STD_ID</p></td></tr>', "");
    }
    else{
      stringcontents = stringcontents.replace(/STD_ID/g, rollnumber);
      stringcontents = stringcontents.replace(/RBI_BR_REPLACE/g, "");
    } 
    if (department == ""){
      stringcontents = stringcontents.replace(/DEPARTMENT_REPLACE/g, "");
      stringcontents = stringcontents.replace(/DEPARTMENT_BR_REPLACE/g, '<br/>');
    }
    else {
      stringcontents = stringcontents.replace(/DEPARTMENT_REPLACE/g, `and is awarded ${department}`);
      stringcontents = stringcontents.replace(/DEPARTMENT_BR_REPLACE/g, "");
    }
    stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competencyname);
    stringcontents = stringcontents.replace(/COMPETENCY_START_DATE/g, competencystartdate);
    stringcontents = stringcontents.replace(/COMPETENCY_END_DATE/g, competencyenddate);
    stringcontents = stringcontents.replace("SIGNATUREIMAGE_REPLACE", signatureimage);
    stringcontents = stringcontents.replace("LOGOIMAGE_REPLACE", logoimage);
    stringcontents = stringcontents.replace("SIGNATURE_NAME", signaturename);
    stringcontents = stringcontents.replace("SIGNER_NAME", signername);
    stringcontents = stringcontents.replace("PARTNERCOMPANY_NAME", partnercompanyname);
    stringcontents = stringcontents.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage1);
    stringcontents = stringcontents.replace("LOGOIMAGE_1_REPLACE", logoimage1);
    stringcontents = stringcontents.replace("SIGNATURE_1_NAME", signaturename1);
    stringcontents = stringcontents.replace("SIGNER_1_NAME", signername1);
    stringcontents = stringcontents.replace("PARTNERCOMPANY_1_NAME", partnercompanyname1);
    stringcontents = stringcontents.replace("SIGNATUREIMAGE_2_REPLACE", signatureimage2);
    stringcontents = stringcontents.replace("LOGOIMAGE_2_REPLACE", logoimage2);
    stringcontents = stringcontents.replace("SIGNATURE_2_NAME", signaturename2);
    stringcontents = stringcontents.replace("SIGNER_2_NAME", signername2);
    stringcontents = stringcontents.replace("PARTNERCOMPANY_2_NAME", partnercompanyname2);

    stringcontents = stringcontents.replace(/ISSUED_DATE/g, student['subother1']);

    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_100(stringcontents, studentname, competencyname, coursename, coursecompletiondate, mark, certificationcategory){
  try{    
    let sub1 = [
      "This is to certify that",
      "Presented to"
    ];
    let sub3 = [
      "From ",
      "For their active participation",
      "For active participation as Student Coordinator"
    ];
    let sub4 = [
      `participated in the Financial Literacy program “<span style=\\"font-weight: bold;\\">${coursename}</span>”, a CSR initiative of`,
      `In the 10 hours session of the program “<span style=\\"font-weight: bold;\\">${coursename}</span>”, conducted by National`,
    ];
    let sub5 = [
      "Kotak Securities Ltd. organized by National Institute of Securities Markets (NISM)",
      "Institute of Securities Markets (NISM) under"
    ];
    let signer = [
      "Jane Doe<br/><br/>General Manager",
      "Jane Doe (General Manager, NSIM)"
    ];

    if (certificationcategory.toLowerCase().indexOf("excellence") !== -1){
      stringcontents = stringcontents.replace("CERTIFICATE_TITLE_REPLACE",`<img style=\\"width: 700px; margin-top: 80px;\\" src=\\"${myip}/images/NISM/excellence.png\\">`);
      // stringcontents = stringcontents.replace("CERTIFICATION_CATEGORY", "Excellence");
      stringcontents = stringcontents.replace("NISM_1_SUB", sub1[0]);
      stringcontents = stringcontents.replace("NISM_2_SUB", studentname);
      stringcontents = stringcontents.replace("NISM_3_SUB", sub3[0] + `<span style=\\"font-weight: bold;\\">${competencyname}</span>`);
      stringcontents = stringcontents.replace("NISM_4_SUB", sub4[0]);
      stringcontents = stringcontents.replace("NISM_5_SUB", sub5[0]);
      stringcontents = stringcontents.replace("NISM_6_SUB", "");
      stringcontents = stringcontents.replace("SUB_6_REPLACE", "<br / >");
      stringcontents = stringcontents.replace("NISM_7_SUB", `On <span style=\\"font-weight: bold;\\">${coursecompletiondate}</span>, and scored <span style=\\"font-weight: bold;\\">${mark}%</span> in the subsequent Quiz`);
      stringcontents = stringcontents.replace("SIGNER_REPLACE", signer[0]);
      stringcontents = stringcontents.replace(/SIGN_REPLACE/g, "");
    }
    else if (certificationcategory.toLowerCase().indexOf("participation") !== -1){
      stringcontents = stringcontents.replace("CERTIFICATE_TITLE_REPLACE",`<img style=\\"width: 700px; margin-top: 80px;\\" src=\\"${myip}/images/NISM/participation.png\\">`);
      // stringcontents = stringcontents.replace("CERTIFICATION_CATEGORY", "Participation");
      stringcontents = stringcontents.replace("NISM_1_SUB", sub1[0]);
      stringcontents = stringcontents.replace("NISM_2_SUB", studentname);
      stringcontents = stringcontents.replace("NISM_3_SUB", sub3[0] + `<span style=\\"font-weight: bold;\\">${competencyname}</span>`);
      stringcontents = stringcontents.replace("NISM_4_SUB", sub4[0]);
      stringcontents = stringcontents.replace("NISM_5_SUB", sub5[0]);
      stringcontents = stringcontents.replace("NISM_6_SUB", "");
      stringcontents = stringcontents.replace("SUB_6_REPLACE", "<br / >");
      stringcontents = stringcontents.replace("NISM_7_SUB", `On <span style=\\"font-weight: bold;\\">${coursecompletiondate}</span>`);
      stringcontents = stringcontents.replace("SIGNER_REPLACE", signer[0]);
      stringcontents = stringcontents.replace(/SIGN_REPLACE/g, "");
    }
    else if (certificationcategory.toLowerCase().indexOf("appreciation") !== -1){
      stringcontents = stringcontents.replace("CERTIFICATE_TITLE_REPLACE",`<img style=\\"width: 700px; margin-top: 80px;\\" src=\\"${myip}/images/NISM/appreciation.png\\">`);
      // stringcontents = stringcontents.replace("CERTIFICATION_CATEGORY", "Appreciation");
      stringcontents = stringcontents.replace("NISM_1_SUB", sub1[1]);
      stringcontents = stringcontents.replace("NISM_2_SUB", competencyname);
      stringcontents = stringcontents.replace("NISM_3_SUB", sub3[1]);
      stringcontents = stringcontents.replace("NISM_4_SUB", sub4[1]);
      stringcontents = stringcontents.replace("NISM_5_SUB", sub5[1]);
      stringcontents = stringcontents.replace("NISM_6_SUB", "The aegis of CSR program of Kotak Securities Limited");
      stringcontents = stringcontents.replace("SUB_6_REPLACE", "");
      stringcontents = stringcontents.replace("NISM_7_SUB", `On <span style=\\"font-weight: bold;\\">${coursecompletiondate}</span>`);
      stringcontents = stringcontents.replace("SIGNER_REPLACE", signer[1]);
      stringcontents = stringcontents.replace(/SIGN_REPLACE/g, "<br/><br/>");
    }
    else if (certificationcategory.toLowerCase().indexOf("coordinator") !== -1){
      stringcontents = stringcontents.replace("CERTIFICATE_TITLE_REPLACE",`<img style=\\"width: 700px; margin-top: 80px;\\" src=\\"${myip}/images/NISM/appreciation.png\\">`);
      // stringcontents = stringcontents.replace("CERTIFICATION_CATEGORY", "Appreciation");
      stringcontents = stringcontents.replace("NISM_1_SUB", sub1[1]);
      stringcontents = stringcontents.replace("NISM_2_SUB", studentname);
      stringcontents = stringcontents.replace("NISM_3_SUB", sub3[2]);
      stringcontents = stringcontents.replace("NISM_4_SUB", sub4[1]);
      stringcontents = stringcontents.replace("NISM_5_SUB", sub5[1]);
      stringcontents = stringcontents.replace("NISM_6_SUB", "The aegis of CSR program of Kotak Securities Limited");
      stringcontents = stringcontents.replace("SUB_6_REPLACE", "");
      stringcontents = stringcontents.replace("NISM_7_SUB", `On <span style=\\"font-weight: bold;\\">${coursecompletiondate}</span>`);
      stringcontents = stringcontents.replace("SIGNER_REPLACE", signer[1]);
      stringcontents = stringcontents.replace(/SIGN_REPLACE/g, "<br/><br/>");
    }
    //await fs.writeFileSync("/home/ubuntu/test.json",justhtmlunsignedcertificate,"utf-8");
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }

}

async function template_replace_103(stringcontents, puserid, batchnumber, rollnumber, serialnumber, studentname, institutename, competencyname, compeletiondate, other1, other2, other3){
  stringcontents = stringcontents.replace("INSTITUTE_NAME",institutename);
  stringcontents = stringcontents.replace("COMPETENCY_NAME",competencyname);
  stringcontents = stringcontents.replace("SERIAL_NO", serialnumber);
  stringcontents = stringcontents.replace("COMPLETION_DATE",completiondate);
  stringcontents = stringcontents.replace("ENROLL_NO",rollnumber);
  stringcontents = stringcontents.replace("OTHER_ONE", other1);
  stringcontents = stringcontents.replace("OTHER_TWO", other2);
  stringcontents = stringcontents.replace("OTHER_THREE", other3);
  stringcontents = stringcontents.replace("STD_NAME", studentname);

  
  let semesterQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${batchnumber}' and studentid='${rollnumber}';`);
  let semesterResult = await pool.query(semesterQuery);
  if(semesterResult.rowCount > 0){
    stringcontents = stringcontents.replace("SEMESTER_NUM", semesterResult.rows[0].semesternumber);
    let semester_content = `<table style=" width: 85%; margin: auto; margin-top: 15px; border: 1px solid black; border-collapse: collapse">
    <tbody>
        <tr>
            <td style="width: 15%; text-align: center; border: 1px solid black; font-weight: bold">Course Code</td>
            <td style="width: 50%; text-align: center; border: 1px solid black; font-weight: bold">Course Title</td>
            <td style="width: 10%; text-align: center; border: 1px solid black; font-weight: bold">Credit</td>
            <td style="width: 10%; text-align: center; border: 1px solid black; font-weight: bold">Grade</td>
            <td style="width: 15%; text-align: center; border: 1px solid black; font-weight: bold">Grade Point</td>
        </tr>`;
    for(const semes of semesterResult.rows){
      semester_content += `<tr>
          <td style="width: 15%; text-align: center; border: 1px solid black;">` + semes.subjecttype + `</td>
          <td style="width: 54%; text-align: left; border: 1px solid black;">` + semes.subjectcode + `</td>
          <td style="width: 9%; text-align: center; border: 1px solid black;">` + semes.credit + `</td>
          <td style="width: 9%; text-align: center; border: 1px solid black;">` + semes.grade + `</td>
          <td style="width: 13%; text-align: center; border: 1px solid black;">` + semes.point + `</td>
      </tr>`;
    }
    // console.log("11111111111111222222222222222233333333333333333333");
    // console.log(semester_content);
    // await fs.writeFileSync("/home/ubuntu/test.txt",stringcontents,"utf-8");                        
    stringcontents = stringcontents.replace("DESCRIBE_BLOCK", (semester_content + `</tbody></table>`).replace(/"/g,'\\"'));
  }  
  let transQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${batchnumber}' and studentid='${rollnumber}';`);
  let transResult = await pool.query(transQuery); 
  if(transResult.rowCount > 0){
    stringcontents = stringcontents.replace("SPECIALIZATION", transResult.rows[0].specializationone);
    stringcontents = stringcontents.replace("MEDIUM_OF_STUDY", transResult.rows[0].mediumofstudy);
    stringcontents = stringcontents.replace("CREDIT_OFFER", transResult.rows[0].other1);
    stringcontents = stringcontents.replace("CREDIT_EARN", transResult.rows[0].other2);
    stringcontents = stringcontents.replace("GRADE_POINT", transResult.rows[0].other3);
    stringcontents = stringcontents.replace("SPI_SPI", transResult.rows[0].other4);
    stringcontents = stringcontents.replace("CGPA_CGPA", transResult.rows[0].cgpa);
    stringcontents = stringcontents.replace("RESULT_RESULT", transResult.rows[0].other5);
    stringcontents = stringcontents.replace("CLASS_CLASS", transResult.rows[0].other6);
  }
  
  return stringcontents;
}

async function template_replace_104(stringcontents, rollnumber, fullname, other1, other2, other3){
  let pdate = other3.split("T")[0].split("-");
  let [fname, lname] = fullname.split(" ");
  fname = fname[0].toUpperCase(0);
  if(lname == null || lname == undefined || lname == "") lname = "";
  else lname = lname[0].toUpperCase();
  let transid = "PNFT" + fname + lname + pdate.join("/") + "/" + rollnumber.padStart(6, "0");
  stringcontents = stringcontents.replace("DONOR_NAME", fullname);
  stringcontents = stringcontents.replace("METHOD_METHOD", other1);
  stringcontents = stringcontents.replace("AMOUNT_AMOUNT", other2);
  stringcontents = stringcontents.replace("TID_TID",transid);
  stringcontents = stringcontents.replace("DATE_DATE",other3);
  // stringcontents = stringcontents.replace("",);

  return stringcontents;
}

async function template_replace_105(stringcontents, competency_name, phdtitle, rollnumber, fullname, serialnumber, coursename,coursestartdate, coursecompletiondate, department, marks, expiredate, templatetype, other1, other2, other3){  
  let eng_sub = [
    `has successfully completed the “COMPETENCY_NAME” as required under the SEBI<br>(Certification of Associated Persons in the Securities Markets) Regulations, 2007`,
    `Has successfully completed the “COMPETENCY_NAME”`
  ];
  let hind_sub1 = [
    `ने भारतीय प्रतिभूति और विनिमय बोर्ड <span style=\\"font-family: timesnewroman;\\">(</span> प्रतिभूति बाजारों में सहयुक्त व्यक्तियों का प्रमाणीकरण <span style=\\"font-family: timesnewroman;\\">)</span> विनियम<span style=\\"font-family: timesnewroman;\\">, 2007</span> के अधीन अपेक्षानुसार<span style=\\"font-family: timesnewroman;\\"><br></span>“<span style=\\"font-family: timesnewroman;\\">.</span>प्र<span style=\\"font-family: timesnewroman;\\">.</span>बा<span style=\\"font-family: timesnewroman;\\">.</span>सं<span style=\\"font-family: timesnewroman;\\">.- </span> श्रृंखला <span style=\\"font-family: timesnewroman;\\">-VI:</span> निक्षेपागार कार्यप्रणाली प्रमाणीकरण परीक्षा” सफलतापूर्वक पूर्ण कर ली है।`,
    `ने "रा<span style=\\"font-family: timesnewroman;\\">.</span>प्र<span style=\\"font-family: timesnewroman;\\">.</span>बा<span style=\\"font-family: timesnewroman;\\">.</span>सं<span style=\\"font-family: timesnewroman;\\">.-</span> श्रृंखला<span style=\\"font-family: timesnewroman;\\">-XI:</span> इक्विटी विक्रय प्रमाणीकरण परीक्षा” `
  ];
  let hind_sub = [
    `ने भारतीय प्रतिभूति और विनिमय बोर्ड ( प्रतिभूति बाजारों में सहयुक्त व्यक्तियों का प्रमाणीकरण ) विनियम, 2007 के अधीन अपेक्षानुसार<br>“HINDI_COMPETENCYNAME” सफलतापूर्वक पूर्ण कर ली है।`,
    `ने “HINDI_COMPETENCYNAME” सफलतापूर्वक पूर्ण कर ली है।`
  ];
  // let pdate = other3.split("T")[0].split("-");
  // let [fname, lname] = fullname.split(" ");
  // fname = fname[0].toUpperCase(0);
  // if(lname == null || lname == undefined || lname == "") lname = "";
  // else lname = lname[0].toUpperCase();
  // let transid = "PNFT" + fname + lname + pdate.join("/") + "/" + rollnumber.padStart(6, "0");
  stringcontents = stringcontents.replace("STD_NAME", fullname);
  stringcontents = stringcontents.replace("PAN_NUMBER", other3);
  stringcontents = stringcontents.replace("REGIST_NUMBER", serialnumber);
  stringcontents = stringcontents.replace("ENROLL_NUMBER", rollnumber);
  if (templatetype == "mandatory"){
    stringcontents = stringcontents.replace("ENG_SUB", eng_sub[0]);
    stringcontents = stringcontents.replace("HINDI_SUB", hind_sub[0]);
    stringcontents = stringcontents.replace(/SUB_BR_REPLACE/g,"");
  }
  else if (templatetype == "nonmandatory"){
    stringcontents = stringcontents.replace("ENG_SUB", eng_sub[1]);
    stringcontents = stringcontents.replace("HINDI_SUB", hind_sub[1]);
    stringcontents = stringcontents.replace(/SUB_BR_REPLACE/g,"<br/>");
  }
  stringcontents = stringcontents.replace("COMPETENCY_NAME", competency_name);
  stringcontents = stringcontents.replace("HINDI_COMPETENCYNAME", phdtitle);
  stringcontents = stringcontents.replace("SUB1", coursestartdate);
  stringcontents = stringcontents.replace("SUB2", coursename);
  stringcontents = stringcontents.replace("SUB3", department);
  stringcontents = stringcontents.replace("SUB4", marks);
  stringcontents = stringcontents.replace("SUB5", other1);
  stringcontents = stringcontents.replace("SUB6", coursecompletiondate);
  stringcontents = stringcontents.replace("SUB7", other2);
  stringcontents = stringcontents.replace("SUB8", expiredate);

  return stringcontents;
}

async function enhelion_partner_template(partnercompanyname){
  partnercompanyname = partnercompanyname.trim();

  let partnerQuery = format(`select * from partnercompany where partnercompanyname='${partnercompanyname}'`);
  let partnerResult = await pool.query(partnerQuery);

  let logoimage = "";
  let signatureimage = "";
  let signaturename = "";
  let signername = "";
  let partner = "";
  let result = "";
  let partnercompanynamefordisplay = "";
  if(partnerResult.rowCount > 0){
    if (partnerResult.rows[0].logoimage !== null) logoimage = partnerResult.rows[0].logoimage;
    if (partnerResult.rows[0].signatureimage !== null) signatureimage = partnerResult.rows[0].signatureimage;
    if (partnerResult.rows[0].signaturename !== null) signaturename = partnerResult.rows[0].signaturename;
    if (partnerResult.rows[0].signername !== null) signername = partnerResult.rows[0].signername;
    if (partnerResult.rows[0].partnercompanyname !== null) partner = partnerResult.rows[0].partnercompanyname;  
    if (partnerResult.rows[0].partnercompanynamefordisplay !== null) partnercompanynamefordisplay = partnerResult.rows[0].partnercompanynamefordisplay;   
    
  }

  // if (partner.indexOf("Enhelion Knowledge Ventures") != -1){
  //   if (partner.indexOf("Enhelion") != -1){
  //   result = `<table style="width: 95%; margin: auto;"><tbody><tr><td style="width: 100%; text-align: right;">
  //   ${signatureimage}
  //   <p style="margin: 0px; font-size: 14px; font-weight: bold; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">${signaturename}</p>
  //   <p style="margin: 0px; font-size: 12px; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">${signername}</p>
  //   <p style="margin: 0px; font-size: 12px; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre'; margin-left: -40px;">${partner}</p>
  //   ${logoimage}  
  //   </td></tr></tbody></table>`;
  // }
  // else {
  if (partner.toLowerCase().indexOf("enhelion") == -1) {
    result = `<table style="width: 95%; margin: auto;"><tbody><tr><td style="width: 100%; text-align: center;">
    ${signatureimage}
    <p style="margin: 0px; font-size: 14px; font-weight: bold; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">${signaturename}</p>
    <p style="margin: 0px; font-size: 12px; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">${signername}</p>
    <p style="margin: 0px; font-size: 12px; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">${partnercompanynamefordisplay}</p>
    ${logoimage}  
    </td></tr></tbody></table>`;
  }

  
  return result;
}

async function template_replace_108(stringcontents, mainpartnername, puserid){ 
   console.log("mainPartner name 1:", mainpartnername);  
  mainpartnername = mainpartnername.split("\n"); 
   console.log("mainPartner name 2:", mainpartnername);   
  mainpartnername = mainpartnername.map(ele => ele.replace("\r", "").trim());
   console.log("mainPartner name 3:", mainpartnername);  
  mainpartnername = mainpartnername.filter((ele) => ele!="" && ele != undefined);
   console.log("mainPartner name 4:", mainpartnername);  
  if (mainpartnername.every(ele => ele.toLowerCase().indexOf("enhelion")) == -1) mainpartnername.push("Enhelion");
  // mainpartnername = mainpartnername.filter ((ele) => ele.toLowerCase().indexOf("enhelion") == -1);
   console.log("mainPartner name 5:", mainpartnername);  
  mainpartnername.push("Enhelion");
  console.log("mainPartner name 6:", mainpartnername);  
  let enhelion_part = `<table style="width: 95%; margin: auto;">
	<tbody>
		<tr>
			<td style="width: 100%; text-align: right;">
				<img style="height: 50px;" src="${myip}/images/backend/ashwin_madhavan.png">    
				<p style="margin: 0px; font-size: 14px; font-weight: bold; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">Ashwin Madhavan</p>    
				<p style="margin: 0px; font-size: 12px; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre';">Co-Founder &amp; Mentor</p>    
				<p style="margin: 0px; font-size: 12px; color: rgb(46, 47, 62); font-family: 'Averia Serif Libre'; margin-left: -40px;">Enhelion</p>    
				<img style="height: 45px;" src="${myip}/images/backend/enhelion_mark.png">      
			</td>
		</tr>
	</tbody>
</table>`;
  let mainContent = ""; 
  if (mainpartnername.length == 2){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    // let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp2 = enhelion_part;
    mainContent = `<table style="width: 95%; margin-top: 100px;">
    <tbody>
    <tr>
    <td style="width: 33%; text-align: center; vertical-align: bottom;">
    ${temp1}
    </td>
    <td style="width: 33%;">
    
    </td>
    <td style="width: 34%; text-align: right;">
    <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
    <br/>
    ${temp2}
    </td>
    </tr>
    </tbody>
    </table>`;

  }
  if (mainpartnername.length == 3){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    // let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp3 = enhelion_part;
    mainContent = `<table style="width: 95%; margin-top: 100px;">
    <tbody>
    <tr>
    <td style="width: 33%; text-align: center; vertical-align: bottom;">
    ${temp1}
    </td>
    <td style="width: 33%; text-align: center; vertical-align: bottom;">
    ${temp2}
    </td>
    <td style="width: 34%; text-align: right;">
    <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
    <br/>
    ${temp3}
    </td>
    </tr>
    </tbody>
    </table>`;

  }
  else if (mainpartnername.length == 4){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    // let temp4 = await enhelion_partner_template(mainpartnername[3]);
    let temp4 = enhelion_part;
    mainContent = `<table style="width: 95%; margin-top: 100px;">
    <tbody>
    <tr>
    <td style="width: 33%; text-align: center;">
    ${temp1}
    ${temp2}
    </td>
    <td style="width: 33%; text-align: center; vertical-align: middle;">
    ${temp3}
    </td>
    <td style="width: 34%; text-align: right;">
    <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
    <br/>
    ${temp4}
    </td>
    </tr>
    </tbody>
    </table>`;

  }
  else if (mainpartnername.length == 5){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp4 = await enhelion_partner_template(mainpartnername[3]);
    // let temp5 = await enhelion_partner_template(mainpartnername[4]);
    let temp5 = enhelion_part;

    mainContent = `<table style="width: 95%; margin-top: 80px;">
    <tbody>
    <tr>
    <td style="width: 33%; text-align: center;">${temp1}</td>
    <td style="width: 33%; text-align: center;">${temp2}</td>
    <td style="width: 34%; text-align: right;">
    <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
    </td>
    </tr>
    <tr>
    <td style="width: 33%; text-align: center; vertical-align: bottom;">${temp3}</td>
    <td style="width: 33%; text-align: center; vertical-align: bottom;">${temp4}</td>
    <td style="width: 34%; text-align: center; vertical-align: bottom;">${temp5}</td>
    </tr>
    </tbody>
    </table>`;
  }
  else if (mainpartnername.length == 6){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp4 = await enhelion_partner_template(mainpartnername[3]);
    let temp5 = await enhelion_partner_template(mainpartnername[4]);
    // let temp6 = await enhelion_partner_template(mainpartnername[5]);
    let temp6 = enhelion_part;
    
    mainContent = `<table style="width: 95%; margin-top: 180px;">
    <tbody>
    <tr>
      <td style="width: 75%; text-align: center;">
        <table style="width: 95%;"><tbody>
          <tr>
          <td style="width: 33.33%; text-align: center;">
          ${temp1}
          ${temp2}
          </td>
          <td style="width: 33.33%; text-align: center;; vertical-align: middle;">
          ${temp3}
          </td>
          <td style="width: 33.33%; text-align: center;">
          ${temp4}
          ${temp5}
          </td>
          </tr>          
        </tbody></table>
      </td>
      <td style="width: 25%; text-align: right; vertical-align: middle; padding-right: 25px;">
        <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
        <br/>
        ${temp6}
      </td>
    </tr>
    </tbody>
    </table>`;
  }
  else if (mainpartnername.length == 7){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp4 = await enhelion_partner_template(mainpartnername[3]);
    let temp5 = await enhelion_partner_template(mainpartnername[4]);
    let temp6 = await enhelion_partner_template(mainpartnername[5]);
    // let temp7 = await enhelion_partner_template(mainpartnername[6]);  
    let temp7 = enhelion_part;  

    mainContent = `<table style="width: 95%; margin-top: 180px;">
    <tbody>
    <tr>
      <td style="width: 75%; text-align: center;">
        <table style="width: 95%;"><tbody>
          <tr>
          <td style="width: 33.33%; text-align: center;">${temp1}</td>
          <td style="width: 33.33%; text-align: center;">${temp2}</td>
          <td style="width: 33.33%; text-align: center;">${temp3}</td>
          </tr>
          <tr>
          <td style="width: 33.33%; text-align: center;">${temp4}</td>
          <td style="width: 33.33%; text-align: center;">${temp5}</td>
          <td style="width: 33.33%; text-align: center;">${temp6}</td>
          </tr>          
        </tbody></table>
      </td>
      <td style="width: 25%; text-align: right; vertical-align: middle; padding-right: 25px;">
        <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
        <br/>
        ${temp7}
      </td>
    </tr>
    </tbody>
    </table>`;

    mainContent1 = `<table style="width: 95%; margin-top: 180px;">
    <tbody>
    <tr>
    <td style="width: 25%; text-align: center;">${temp1}</td>
    <td style="width: 25%; text-align: center;">${temp2}</td>
    <td style="width: 25%; text-align: center;">${temp3}</td>
    <td style="width: 25%; text-align: right;">
    <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
    </td>
    </tr>
    <tr>
    <td style="width: 25%; text-align: center;">${temp4}</td>
    <td style="width: 25%; text-align: center;">${temp5}</td>
    <td style="width: 25%; text-align: center;">${temp6}</td>
    <td style="width: 25%; text-align: right;">${temp7}</td>
    </tr>
    </tbody>
    </table>`;
  }
  else if (mainpartnername.length == 8){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp4 = await enhelion_partner_template(mainpartnername[3]);
    let temp5 = await enhelion_partner_template(mainpartnername[4]);
    let temp6 = await enhelion_partner_template(mainpartnername[5]);
    let temp7 = await enhelion_partner_template(mainpartnername[6]);
    // let temp8 = await enhelion_partner_template(mainpartnername[7]);
    let temp8 = enhelion_part;

    mainContent = `<table style="width: 95%; margin-top: 180px;">
    <tbody>
    <tr>
      <td style="width: 75%; text-align: center;">
        <table style="width: 95%;"><tbody>
          <tr>
          <td style="width: 33.33%; text-align: center;">
          ${temp1}
          ${temp2}
          ${temp3}
          </td>
          <td style="width: 33.33%; text-align: center; vertical-align: middle;">
          ${temp4}          
          </td>
          <td style="width: 33.33%; text-align: center;">
          ${temp5}
          ${temp6}
          ${temp7}
          </td>
          </tr>          
        </tbody></table>
      </td>
      <td style="width: 25%; text-align: right; vertical-align: middle; padding-right: 25px;">
        <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
        <br/>
        ${temp8}
      </td>
    </tr>
    </tbody>
    </table>`;
  }
  else if (mainpartnername.length == 9){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp4 = await enhelion_partner_template(mainpartnername[3]);
    let temp5 = await enhelion_partner_template(mainpartnername[4]);
    let temp6 = await enhelion_partner_template(mainpartnername[5]);
    let temp7 = await enhelion_partner_template(mainpartnername[6]);
    let temp8 = await enhelion_partner_template(mainpartnername[7]);
    // let temp9 = await enhelion_partner_template(mainpartnername[8]);
    let temp9 = enhelion_part;

    mainContent = `<table style="width: 95%; margin-top: 180px;">
    <tbody>
    <tr>
      <td style="width: 75%; text-align: center;">
        <table style="width: 95%;"><tbody>
          <tr>
          <td style="width: 33.33%; text-align: center;">
          ${temp1}
          ${temp2}
          ${temp3}
          </td>
          <td style="width: 33.33%; text-align: center;; vertical-align: middle;">
          ${temp4}
          ${temp5}
          </td>
          <td style="width: 33.33%; text-align: center;">
          ${temp6}
          ${temp7}
          ${temp8}
          </td>
          </tr>          
        </tbody></table>
      </td>
      <td style="width: 25%; text-align: right; vertical-align: middle; padding-right: 25px;">
        <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
        <br/>
        ${temp9}
      </td>
    </tr>
    </tbody>
    </table>`;
  }
  else if (mainpartnername.length == 10){
    let temp1 = await enhelion_partner_template(mainpartnername[0]);
    let temp2 = await enhelion_partner_template(mainpartnername[1]);
    let temp3 = await enhelion_partner_template(mainpartnername[2]);
    let temp4 = await enhelion_partner_template(mainpartnername[3]);
    let temp5 = await enhelion_partner_template(mainpartnername[4]);
    let temp6 = await enhelion_partner_template(mainpartnername[5]);
    let temp7 = await enhelion_partner_template(mainpartnername[6]);
    let temp8 = await enhelion_partner_template(mainpartnername[7]);
    let temp9 = await enhelion_partner_template(mainpartnername[8]);
    // let temp10 = await enhelion_partner_template(mainpartnername[9]);
    let temp10 = enhelion_part;

    mainContent = `<table style="width: 95%; margin-top: 180px;">
    <tbody>
    <tr>
      <td style="width: 75%; text-align: center;">
        <table style="width: 95%;"><tbody>
          <tr>
          <td style="width: 33.33%; text-align: center;">${temp1}</td>
          <td style="width: 33.33%; text-align: center;">${temp2}</td>
          <td style="width: 33.33%; text-align: center;">${temp3}</td>
          </tr>
          <tr>
          <td style="width: 33.33%; text-align: center;">${temp4}</td>
          <td style="width: 33.33%; text-align: center;">${temp5}</td>
          <td style="width: 33.33%; text-align: center;">${temp6}</td>
          </tr>
          <tr>
          <td style="width: 33.33%; text-align: center;">${temp7}</td>
          <td style="width: 33.33%; text-align: center;">${temp8}</td>
          <td style="width: 33.33%; text-align: center;">${temp9}</td>
          </tr>
        </tbody></table>
      </td>
      <td style="width: 25%; text-align: right; vertical-align: middle; padding-right: 25px;">
        <img style="width: 140px;" src="${myip}/images/backend/enhelion_mark1.png" />
        <br/>
        ${temp10}
      </td>
    </tr>
    </tbody>
    </table>`;
  }  
  // await fs.writeFileSync("/home/ubuntu/test.txt",mainContent,"utf-8"); 
  stringcontents = stringcontents.replace("PARTNERCOMPANY_REPLACE", mainContent.replace(/"/g,'\\"'));
  return stringcontents;
}

async function template_replace_109(stringcontents, puserid, cohortfullid, rollnumber, fullname, other2, other7, other8, other9, other10){
  let gradeContent = "";
  let grade_year = "";
  let sgpa_credit = "";
  let sgpa_point = "";
  let sgpa = "";
  let cgpa_credit = "";
  let cgpa_point = "";
  let cgpa = ""
  let issue_date = ""
  let gradeQuery = format(`select * from semestergradetranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}'`);
  let gradeResult = await pool.query(gradeQuery);  
  if (gradeResult.rowCount > 0){
    gradeResult.rows.forEach((element) => {
      gradeContent += `<tr>
        <td style="text-align: left; font-size: 12px;">${element.code}</td>
        <td style="text-align: left; font-size: 12px;">${element.name}</td>
        <td style="text-align: center; font-size: 12px;">${element.credit}</td>
        <td style="text-align: center; font-size: 12px;">${element.grade}</td>
        <td style="text-align: center; font-size: 12px;">${element.earnedofcredit}</td>
        </tr>`;
    });
    gradeContent = `<table style="width: 90%; margin-top: 30px;">
    <tbody>
        <tr>
            <td style="width: 18%; text-align: left; font-size: 12px; font-weight: bold;">COURSE CODE</td>
            <td style="width: 34%; text-align: left; font-size: 12px; font-weight: bold;">COURSE NAME</td>
            <td style="width: 15%; text-align: center; font-size: 12px; font-weight: bold;">CREDITS</td>
            <td style="width: 15%; text-align: center; font-size: 12px; font-weight: bold;">GRADE</td>
            <td style="width: 18%; text-align: center; font-size: 12px; font-weight: bold;">EARNED CREDIT</td>
        </tr>        
    ${gradeContent}</tbody></table>`;
  }
  let descQuery = format(`select * from transcriptgradedescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}'`);
  let descResult = await pool.query(descQuery);
  if (descResult.rowCount > 0){
    grade_year = descResult.rows[0].grade_year;
    sgpa_credit = descResult.rows[0].sgpa_credit;
    sgpa_point = descResult.rows[0].sgpa_point;
    sgpa = descResult.rows[0].sgpa;
    cgpa_credit = descResult.rows[0].cgpa_credit;
    cgpa_point = descResult.rows[0].cgpa_point;
    cgpa = descResult.rows[0].cgpa;
    issue_date = descResult.rows[0].dateofissue;
  }
  // if (issue_date != null && issue_date != "") {
  //   let temp_date = getIso8601TimeForIssue(issue_date + " UTC");
  //   let temp = JSON.parse(stringcontents);
  //   // await fs.writeFileSync("/home/ubuntu/test.txt",JSON.stringify(JSON.parse(stringcontents).displayHtml),"utf-8");
  //   temp.issuedOn = temp_date;
  //   stringcontents = JSON.stringify(temp);
  //   stringcontents = stringcontents.replace("ISSUE_DATE", issue_date);
  // }

  stringcontents = stringcontents.replace("BENNETT_GRADE", gradeContent.replace(/"/g, '\\"'));
  stringcontents = stringcontents.replace("STD_ID", rollnumber);
  stringcontents = stringcontents.replace("STUDENT_NAME", fullname);
  stringcontents = stringcontents.replace("PROGRAM_PROGRAM", other2);
  stringcontents = stringcontents.replace("BATCH_BATCH",other10);
  stringcontents = stringcontents.replace("SEMESTER_SEMESTER", other7);
  stringcontents = stringcontents.replace("EXAM_TYPE", other8);
  stringcontents = stringcontents.replace("STATUS_STATUS", other9);
  stringcontents = stringcontents.replace("GRADE_YEAR", grade_year);
  stringcontents = stringcontents.replace("SGPA_CREDIT", sgpa_credit);
  stringcontents = stringcontents.replace("SGPA_GRADE_POINT", sgpa_point);
  stringcontents = stringcontents.replace("SGPA_SGPA", sgpa);
  stringcontents = stringcontents.replace("CGPA_CREDIT", cgpa_credit);
  stringcontents = stringcontents.replace("CGPA_GRAME_POINT", cgpa_point);
  stringcontents = stringcontents.replace("CGPA_CGPA",cgpa);
  stringcontents = stringcontents.replace("GRADE_DATE", issue_date);
  return stringcontents;
}

async function template_replace_110(stringcontents, puserid, cohortfullid, rollnumber, fullname, other2, other3, other4, other5, other6){
  let transcriptContent = "";
  let total_credit_registered = "";
  let total_credit_earned = "";
  let transcript_year = "";
  let generated_on = ""
  let cgpa = "";  
  let next_top = 0;
  let second_signature = `<table style="width: 90%; position: absolute; top: 2060px">
  <tbody>
      <tr>
          <td style="width: 60%; text-align: center">
              <img style="height: 100px; margin-left: 200px" src="${myip}/images/backend/benett_stamp.png" />
          </td>
          <td style="width: 40%; text-align: center">
              <img style="height: 55px" src="${myip}/images/backend/benett_controller_examination.png" />
              <p style="text-align: center; margin-bottom: 0px; margin-top: -5px; font-size: 10px; color: #000000; font-family: 'timesnewroman'">CONTROLLER OF EXAMINATION</p>
          </td>
      </tr>
  </tbody>
</table>`;
  let tempQuery = format(`select distinct(semesternumber) from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' order by semesternumber`);
  let tempResult = await pool.query(tempQuery);
  if (tempResult.rowCount > 0){  
    for (let index=0; index< tempResult.rowCount; index++){
      let rowcount = 0;
      let element = tempResult.rows[index];
      let tempQuery1 = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='${element.semesternumber}'`);
      let tempResult1 = await pool.query(tempQuery1);
      let tempConent = `<tr>
      <td colspan="4" style="text-align: center; margin-left: 100px; font-size: 8px; font-weight: bold;">SEMESTER ${element.semesternumber}</td>
      <td style="font-size: 8px;">ACADEMIC YEAR: ${tempResult1.rows[0].other1}</td>
      </tr>
      <tr>
      <td style="width: 15%; font-size: 8px; text-align: left">CODE</td>
      <td style="width: 35%; font-size: 8px; text-align: left">NAME</td>
      <td style="width: 15%; font-size: 8px; text-align: letf">CREDITS</td>
      <td style="width: 15%; font-size: 8px; text-align: left">GRADE</td>
      <td style="width: 20%; font-size: 8px; text-align: left">EARNED CREDITS</td>
      </tr>`;
      tempResult1.rows.forEach((val) => {
        tempConent +=`<tr>
        <td style="font-size: 8px; text-align: left">${val.subjectcode}</td>
        <td style="font-size: 8px; text-align: left">${val.subjecttype}</td>
        <td style="font-size: 8px; text-align: left">${val.credit}</td>
        <td style="font-size: 8px; text-align: left">${val.grade}</td>
        <td style="font-size: 8px; text-align: left">${val.point}</td>
        </tr>`;
        if (index > 3) rowcount += 1;
      })
      if (element.semesternumber == "5"){
        transcriptContent += `<table style="width: 95%; position: absolute; top: 1150px; margin-left: auto; margin-right: auto; left: 0; right: 0;">
          <tbody>
              <tr>
                  <td style="width: 30%; text-align: center; vertical-align: middle">
                      <img style="width: 120px" src="${myip}/images/backend/benett_verify_mark.png" />
                  </td>
                  <td style="width: 40%; text-align: center">
                      <img style="height: 150px" src="${myip}/images/backend/benett_mark.png" />
                  </td>
                  <td style="width: 30%; text-align: center; vertical-align: middle">                                                												
                  </td>
              </tr>
              <tr>
                  <td colspan="3">
                      <p style="text-align: center; margin-bottom: 0px; margin-top: 20px; font-size: 14px; color: #000000; font-family: 'timesnewroman'; font-weigth: bold">GREATER NOIDA, UTTAR PRADESH, INDIA</p>                                
                  </td>
              </tr>
              <tr>
                  <td colspan="3">
                      <p style="text-align: center; margin-bottom: 0px; margin-top: 0px; font-size: 12px; color: #000000; font-family: 'timesnewroman'">Established in 2016 vide U.P.Act No.24 of 2016</p>
                  </td>
              </tr>
              <tr>
                  <td colspan="3">
                      <p style="text-align: center; margin-bottom: 0px; margin-top: 0px; font-size: 12px; color: #000000; font-family: 'timesnewroman'; font-weigth: bold">and incorporated under the Uttar Pradesh Private Univerities Act, 2019</p>
                  </td>
              </tr>
              <tr>
                  <td colspan="3">
                      <p style="text-align: center; margin-bottom: 0px; margin-top: 0px; font-size: 12px; color: #000000; font-family: 'timesnewroman'">(U.P.Act No.12 of 2019)</p>
                  </td>
              </tr>
          </tbody>
        </table>`;
        transcriptContent += `<table style="width: 90%; margin-top: 25px; position: absolute; top: 1400px; margin-left: auto; margin-right: auto; left: 0; right: 0;">
          <tbody>${tempConent}
          </tbody>
          </table>`;
          next_top = 1400 + (rowcount + 1) * 20;
      }
      else {
        if (index > 4) {          
          transcriptContent += `<table style="width: 90%; margin-top: 25px; position: absolute; top: ${next_top}px; margin-left: auto; margin-right: auto; left: 0; right: 0;">
          <tbody>${tempConent}
          </tbody>
          </table>`;
          next_top += (rowcount + 1) * 20;
        }
        else {
          transcriptContent += `<table style="width: 90%; margin-top: 25px;">
        <tbody>${tempConent}
        </tbody>
        </table>`;
        }        
      }      
    } 
    // transcriptContent += "</center>"   
  }

  if (tempResult.rowCount > 4) {
    stringcontents = stringcontents.replace("SECOND_SIGNATURE", second_signature.replace(/"/g, '\\"'));
    transcriptContent += `<table style="width: 90%; margin-top: 30px; position: absolute; top: ${next_top}px; margin-left: auto; margin-right: auto; left: 0; right: 0;">
      <tbody>
          <tr>
              <td style="width: 33%; text-align: left">
                  <p style="text-align: left; margin-bottom: 0px; margin-top: 5px; font-size: 9px; color: #000000; font-family: 'timesnewroman'">TOTAL CREDITS REGISTERED: TOTAL_CREDIT_REGISTERED</p>
              </td>
              <td style="width: 34%; text-align: center">                                                
                  <p style="text-align: center; margin-bottom: 0px; margin-top: 0px; font-size: 9px; color: #000000; font-family: 'timesnewroman'">TOTAL CREDITS EARNED: TOTAL_CREDIT_EARNED</p>
              </td>
              <td style="width: 33%; text-align: right">                                                
                  <p style="text-align: right; margin-bottom: 0px; margin-top: 0px; font-size: 9px; color: #000000; font-family: 'timesnewroman'">CGPA: CGPA_CGPA</p>
              </td>
          </tr>
          <tr>
              <td colspan="3">
                  <p style="text-align: justify; font-size: 9px; color: #000000; font-family: 'timesnewroman'">AS PER POLICY ADOPTED THROUGH THE RESOLUTION OF THE ACADEMIC COUNT. THE UIVALENT PERCENTAGE TO CGPA MAY BE ARRIVED AT WITH A MULTIPLICATION FACTOR OF 10 I.E.CGPA 10 AND THE MEDIUM OF INSTRUCTION ADOPTED AT BENNETT UNIVERSITYIS ENGLISH ONLY.</p>
              </td>
          </tr>
      </tbody>
    </table>`;
  }
  else {
    stringcontents = stringcontents.replace("SECOND_SIGNATURE", "");
    transcriptContent += `<table style="width: 90%; margin-top: 30px; ">
      <tbody>
          <tr>
              <td style="width: 33%; text-align: left">
                  <p style="text-align: left; margin-bottom: 0px; margin-top: 5px; font-size: 9px; color: #000000; font-family: 'timesnewroman'">TOTAL CREDITS REGISTERED: TOTAL_CREDIT_REGISTERED</p>
              </td>
              <td style="width: 34%; text-align: center">                                                
                  <p style="text-align: center; margin-bottom: 0px; margin-top: 0px; font-size: 9px; color: #000000; font-family: 'timesnewroman'">TOTAL CREDITS EARNED: TOTAL_CREDIT_EARNED</p>
              </td>
              <td style="width: 33%; text-align: right">                                                
                  <p style="text-align: right; margin-bottom: 0px; margin-top: 0px; font-size: 9px; color: #000000; font-family: 'timesnewroman'">CGPA: CGPA_CGPA</p>
              </td>
          </tr>
          <tr>
              <td colspan="3">
                  <p style="text-align: justify; font-size: 9px; color: #000000; font-family: 'timesnewroman'">AS PER POLICY ADOPTED THROUGH THE RESOLUTION OF THE ACADEMIC COUNT. THE UIVALENT PERCENTAGE TO CGPA MAY BE ARRIVED AT WITH A MULTIPLICATION FACTOR OF 10 I.E.CGPA 10 AND THE MEDIUM OF INSTRUCTION ADOPTED AT BENNETT UNIVERSITYIS ENGLISH ONLY.</p>
              </td>
          </tr>
      </tbody>
    </table>`;      
  }
  

  stringcontents = stringcontents.replace("BENNETT_TRANSCRIPT", transcriptContent.replace(/"/g, '\\"'));

  let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}'`);
  let descResult = await pool.query(descQuery)
  if (descResult.rowCount > 0){
    total_credit_registered = descResult.rows[0].other1;
    total_credit_earned = descResult.rows[0].other2;
    transcript_year = descResult.rows[0].other3;
    generated_on = descResult.rows[0].other4;
    cgpa = descResult.rows[0].cgpa;
  }
  stringcontents = stringcontents.replace("TRANSCRIPT_YEAR", transcript_year);
  stringcontents = stringcontents.replace("GENERATED_ON", generated_on);
  stringcontents = stringcontents.replace("STD_ID", rollnumber);
  stringcontents = stringcontents.replace("PROGRAM_PROGRAM", other2);
  stringcontents = stringcontents.replace("YEAR_OF_ADMISSION", other3);
  stringcontents = stringcontents.replace("DATE_OF_BIRTH", other4);
  stringcontents = stringcontents.replace("STUDENT_NAME", fullname);
  stringcontents = stringcontents.replace("SCHOOL_SCHOOL", other5);
  stringcontents = stringcontents.replace("PROGRAMME_DURATION", other6);
  stringcontents = stringcontents.replace("TOTAL_CREDIT_REGISTERED", total_credit_registered);
  stringcontents = stringcontents.replace("TOTAL_CREDIT_EARNED", total_credit_earned);
  stringcontents = stringcontents.replace("CGPA_CGPA", cgpa);
  
  return stringcontents;

}

async function template_replace_111(stringcontents, serialnumber, rollnumber, facultyname, competency_name, coursename, fullname, completiondate){
  var monthArr = ["","January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  stringcontents = stringcontents.replace("SERIAL_NO", serialnumber);
  stringcontents = stringcontents.replace("ENROLL_NO", rollnumber);
  stringcontents = stringcontents.replace("FACULTY_NAME", facultyname);
  stringcontents = stringcontents.replace("COMPETENCY_NAME", competency_name);
  stringcontents = stringcontents.replace("COURSE_NAME", coursename);
  stringcontents = stringcontents.replace("STUDENT_NAME", fullname);
  let temp_date = completiondate.split("/");
  let temp_day = "";
  if (parseInt(temp_date[0]) == 1 || parseInt(temp_date[0]) == 21 || parseInt(temp_date[0]) == 31) temp_day = parseInt(temp_date[0]).toString() + "st";
  else if (parseInt(temp_date[0]) == 2 || parseInt(temp_date[0]) == 22) temp_day = parseInt(temp_date[0]).toString() + "nd";
  else if (parseInt(temp_date[0]) == 3 || parseInt(temp_date[0]) == 23) temp_day = parseInt(temp_date[0]).toString() + "rd";
  else temp_day = parseInt(temp_date[0]).toString() + "th";
  completiondate = temp_day + " " + monthArr[parseInt(temp_date[1])] + " " + temp_date[2]; 
  stringcontents = stringcontents.replace("COMPLETION_DATE", completiondate);
  return stringcontents;
  
}

async function template_replace_112(stringcontents, studentid, serialnumber, rollnumber , fullname, competency_name, coursename, phdtitle, other1, other2, other3, other4, other5) {  
  try {
    let hindi_sub1 = `xyxksfV;kt fo'ofo|ky; mÙkj çns'k dk;Z ifjTOP_DOUBLE_DOTkn dh vuq'kalk ij`;
    let hindi_sub2 = `xyxksfV;kt fo'ofo|ky;] mÙkj çns'k dk;Z ifjTOP_DOUBLE_DOTkn~ dh vuq'kalk ij`;
    let hindi_sub3 = `muds 'kks/k dk foTOP_DOUBLE_DOTk; Fkk`;
    let hindi_sub4 = `xyxksfV;kt fo'ofo|ky; mÙkj çns'k dk;Z ifjTOP_DOUBLE_DOTkn~ dh vuq'kalk ij`;
    let hindi_sub5 = `dks fMIyksek dh çkfIr gsrq fofue; fofgrs vis{kkvksa dks`;
    let firstname = fullname.split(" ")[0].toString().toUpperCase();    
    let getStudentQuery = format(`select * from student_language where studentid='${studentid}'`);
    // console.log(studentid, serialnumber, rollnumber , fullname, competency_name, coursename, phdtitle, other1, other2, other3, other4, other5);
    // console.log(getStudentQuery);
    let students = await pool.query(getStudentQuery);
    if (students.rowCount > 0) {
      let h_firstname = students.rows[0].firstname;
      if (h_firstname == undefined || h_firstname == null) h_firstname = "";
      //else h_firstname = Convert_to_Kritidev(h_firstname);

      let h_middlename = students.rows[0].middlename;
      if (h_middlename == undefined || h_middlename == null) h_middlename = "";
      //else h_middlename = Convert_to_Kritidev(h_middlename);

      let h_lastname = students.rows[0].lastname;
      if (h_lastname == undefined || h_lastname == null) h_lastname = "";
      //else h_lastname = Convert_to_Kritidev(h_lastname);
            
      let h_competencyname = students.rows[0].competencyname;
      if (h_competencyname == undefined || h_competencyname == null) h_competencyname = "";
      else {
        h_competencyname = Convert_to_Kritidev_for_Galgotias(h_competencyname);
        // h_competencyname = h_competencyname.replace(/‚/g, "kW");
        // h_competencyname = h_competencyname.replace(/"/g, "TOP_DOUBLE_DOT");
      }
      
      let h_other1 = students.rows[0].other1;
      if (h_other1 == undefined || h_other1 == null) h_otehr1 = "";
      else h_other1 = Convert_to_Kritidev_for_Galgotias(h_other1);

      let h_other2 = students.rows[0].other2;
      if (h_other2 == undefined || h_other2 == null) h_otehr2 = "";
      else {
        let temp_other = "";
        for (let index=0; index < h_other2.length; index++){
          if(h_other2[index] == "." ) temp_other += `<span style=\\"font-family: 'timesnewroman';\\">${h_other2[index]}</span>`;
          else if (h_other2[index] == "%") temp_other += `<span style=\\"font-family: 'timesnewroman'; font-weight: normal;\\">${h_other2[index]}</span>`;
          else {
            temp_other += Convert_to_Kritidev_for_Galgotias(h_other2[index]);
          }
        }
        h_other2 = temp_other;
        // h_other2 = h_other2.replace(/./g, `<span style=\\"font-family: 'timesnewroman';\\">.</span>`);
      }
      let h_other3 = students.rows[0].other3;
      if (h_other3 == undefined || h_other3 == null) h_otehr3 = "";
      h_other3 = Convert_to_Kritidev_for_Galgotias(h_other3);
      // h_other3 = h_other3.replace(/‚/g, "kW");
      // h_other3 = h_other3.replace(/"/g, "TOP_DOUBLE_DOT");

      let h_other4 = students.rows[0].other4;
      if (h_other4 == undefined || h_other4 == null) h_otehr4 = "";
      else h_other4 = Convert_to_Kritidev_for_Galgotias(h_other4);
      
      let h_coursename = students.rows[0].coursename;
      if (h_coursename == undefined || h_coursename == null) h_coursename = "";
      else {
        h_coursename = Convert_to_Kritidev_for_Galgotias(h_coursename);
        // h_coursename = h_coursename.replace(/‚/g, "kW");
        // h_coursename = h_coursename.replace(/"/g, "TOP_DOUBLE_DOT");
      }

      let h_phdtitle = students.rows[0].phdtitle;
      if (h_phdtitle == undefined || h_phdtitle == null) h_phdtitle ="";
      else {
        h_phdtitle = Convert_to_Kritidev_for_Galgotias(h_phdtitle);
        // h_phdtitle = h_phdtitle.replace(/‚/g, "kW");
        // h_phdtitle = h_phdtitle.replace(/"/g, "TOP_DOUBLE_DOT");
      }
  
      let h_fullname = "";
      if (h_middlename == null || h_middlename == "") {
        h_fullname = h_firstname + " " + h_lastname;
      }
      else {
        h_fullname = h_firstname + " " + h_middlename + " " + h_lastname;
      }
      h_fullname = Convert_to_Kritidev_for_Galgotias(h_fullname);
      // h_fullname = h_fullname.replace(/‚/g, "kW");
      // h_fullname = h_fullname.replace(/"/g, "TOP_DOUBLE_DOT");
      // h_iits = Convert_to_Kritidev("(संरक्षक संस्थानः राष्ट्रीय प्रौद्योगिकी संस्थान, कुरुक्षेत्र)");
      // h_mba_course_sub = `fo'ks"kKrk çkIr dj lQyrkiwoZd ikB~‌;Øe iw.kZ fd;kA`;
      // h_phd_father_sub = `ftlds 'kks/k fo"k; dk 'kh"kZd`;
      //h_fullname = Convert_to_Kritidev(h_fullname);
      
      let hindi_month_year1 = `dks bl mikf/k dh çkfIr gsrq fofue; fofgr vis{kkvksa dks <sapn style=\\"font-weight: bold\\">${h_other3}</span>`;
      let hindi_month_year2 = `dks bl mikf/k dh çkfIr gsrq fofue; fofgr vis{kkvksa dks <sapn style=\\"font-weight: bold\\">${h_other3}</span> esa`;
      // let hindi_month_year = `dks bl mikf/k dh çkfIr gsrq fofue; fofgr vis{kkvksa dks <span style=\\"font-weight: bold; \\"> ${h_other3}</span>`;
      // let hindi_month_year = `<p style=\\"margin-bottom: 0px; margin-top: 0px; font-size: 21pt; color: #000000; font-family: 'krutidev010condensed'\\">
      // dks bl mikf/k dh çkfIr gsrq fofue; fofgr vis{kkvksa dks
      // <span style=\\"font-size: 22pt; font-family: 'krutidev010regular'\\">${h_other3}</span>
      // </p>`;
      // let qr_data = rollnumber + " | " + h_fullname;
      // const qr_code = '<img src=\\"https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=' + qr_data + '\\" style=\\"height: 65px;\\" />';
      fullname = template86_format_name(fullname);
      
      // stringcontents = stringcontents.replace(/QR_CODE/g, qr_code);
      stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
      stringcontents = stringcontents.replace(/HINDI_MONTH_YEAR1/g, hindi_month_year1);
      stringcontents = stringcontents.replace(/HINDI_MONTH_YEAR2/g, hindi_month_year2);
      stringcontents = stringcontents.replace(/HINDI_MONTH_YEAR3/g, `<span style=\\"font-weight: bold\\">${h_other3}</span>`);
      stringcontents = stringcontents.replace(/HINDI_DIVISION/g, `<span style=\\"font-weight: bold\\">${h_other1}</span>`);
      stringcontents = stringcontents.replace(/HINDI_CLASS/g, `<span style=\\"font-weight: bold\\">${h_other4}</span>`);
      stringcontents = stringcontents.replace(/HINDI_MARK/g, `<span style=\\"font-weight: bold\\">${h_other2}</span>`);
      stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
      stringcontents = stringcontents.replace(/HINDI_COURSENAME/g, h_coursename);
      stringcontents = stringcontents.replace(/HINDI_PHDTITLE/g, h_phdtitle);
      stringcontents = stringcontents.replace(/HINDI_CONTROLLER/g, "ijh{kk fu;a=d");
      stringcontents = stringcontents.replace(/HINDI_SUB1/g, hindi_sub1);
      stringcontents = stringcontents.replace(/HINDI_SUB2/g, hindi_sub2);
      stringcontents = stringcontents.replace(/HINDI_SUB3/g, hindi_sub3);
      stringcontents = stringcontents.replace(/HINDI_SUB4/g, hindi_sub4);
      stringcontents = stringcontents.replace(/HINDI_SUB5/g, hindi_sub5);

      serialnumber = serialnumber.substring(0 , serialnumber.length-3) + `<span style=\\"font-size: 13pt;\\">${serialnumber[serialnumber.length-3]}</span>` + `<span style=\\"font-size: 14pt;\\">${serialnumber[serialnumber.length-2]}</span>`+ `<span style=\\"font-size: 15pt;\\">${serialnumber[serialnumber.length-1]}</span>`;
      stringcontents = stringcontents.replace(/ENROLL_NO/g, rollnumber);
      stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);
      stringcontents = stringcontents.replace(/STUDENT_NAME_UPPER/g, fullname.toUpperCase());
      stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname);
      stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
      stringcontents = stringcontents.replace(/DIVISION_DIVISION/g, other1);
      stringcontents = stringcontents.replace(/MARK_MARK/g, other2);
      stringcontents = stringcontents.replace(/MONTH_YEAR_ONE/g, other3);
      stringcontents = stringcontents.replace(/MONTH_YEAR_TWO/g, other4);      
      stringcontents = stringcontents.replace(/FIRST_NAME/g, firstname);
      stringcontents = stringcontents.replace(/PHD_TITLE/g, phdtitle);
      stringcontents = stringcontents.replace("DIPLOMA_COURSE_NAME", coursename);

      if (coursename != ""){
        stringcontents = stringcontents.replace("COURSE_NAME", `<p style=\\"margin-bottom: 0px; margin-top: 5px; font-size: 17pt; color: #ed2024; font-family: 'timesnewroman'; font-style: italic;\\">in</p>
        <p style=\\"margin-bottom: 0px; margin-top: 5px; font-size: 20pt; color: #ed2024; font-family: 'timesnewroman'; font-weight: bold; font-style: italic;\\">${coursename}</p>`)
      }
      else stringcontents = stringcontents.replace("COURSE_NAME", "");
      if (other5 != ""){
        stringcontents = stringcontents.replace("CLASS_CLASS", `<span style=\\"font-weight: bold;\\"> with ${other5}</span>`)
      }
      else tringcontents = stringcontents.replace("CLASS_CLASS", "");
      // stringcontents = stringcontents.replace(/ENROLL_NO/g, enrollnumber);
      // stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
      // stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
    }

    // maincontents.displayHtml = encodeURIComponent(stringcontents);
    // return JSON.stringify(maincontents);
    return stringcontents;
  }
  catch (err) {
    console.log(err.message);
  }
}

async function template_replace_115(stringcontents, cohortid, rollnumber, certtype, subother20) {
  try{  
    console.log("subother20=",subother20, cohortid, rollnumber);  
    if(subother20!="no")
    {
      let frontimgdata = `https://certificates.galgotiasuniversity.edu.in/backgroundimage/${cohortid}/${rollnumber}_1`;
      let backimgdata = `https://certificates.galgotiasuniversity.edu.in/backgroundimage/${cohortid}/${rollnumber}_2`;
      // let frontimgdata = `https://certonce.s3.us-east-2.amazonaws.com/backgroundimage/${cohortid}/${rollnumber}_1.png`;
      // let backimgdata = `https://certonce.s3.us-east-2.amazonaws.com/backgroundimage/${cohortid}/${rollnumber}_2.png`;
      stringcontents = stringcontents.replace(/CHECKED_REPLACE/g, `${myip}/images/Galgotias/checked.png`);
      stringcontents = stringcontents.replace(/VERIFIED_REPLACE/g, `${myip}/images/Galgotias/examination.png`);
      stringcontents = stringcontents.replace(/FRONT_IMAGE/g, frontimgdata);
      stringcontents = stringcontents.replace(/BACK_IMAGE/g, backimgdata);
    }
    else
    {
      let frontimgdata = `https://certificates.galgotiasuniversity.edu.in/backgroundimage/${cohortid.replace(/ /g, "_")}_${certtype}/${rollnumber}`;
      stringcontents = stringcontents.replace(/FRONT_IMAGE/g, frontimgdata);
      stringcontents = stringcontents.replace(/display: block/g, "display: none");
    }
  return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_116(stringcontents, puserid, cohortid, qr_verifier_url, serialnumber, rollnumber , fullname, fathername, mothername, competency_name, coursename, completiondate, other1, other2, cohortsemesternumber) {  
  try{
    //let roman_list = ['', '&#8544;', '&#8545;', '&#8546;', '&#8547;', '&#8548;', '&#8549;', '&#8550;', '&#8551;', '&#8552;', '&#8553;'];
    let roman_list = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];
    let tableContent = "";
    let semesternumber = "";
    let semesterseason = "";
    let semesteryear = "";
    let total_credit_registered = "";
    let total_credit_earned = "";
    let cgpa = "";
    let sgpa = "";
    let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${rollnumber}' and semesternumber='${cohortsemesternumber}'`);
    let descResult = await pool.query(descQuery);
    if (descResult.rowCount > 0){    
      semesterseason = descResult.rows[0].other1;
      semesteryear = descResult.rows[0].other2;
      total_credit_registered = descResult.rows[0].other3;
      total_credit_earned = descResult.rows[0].other4;
      sgpa = descResult.rows[0].other5;
      if (sgpa.indexOf(".") != -1) if (sgpa.split(".")[1].length > 1) sgpa = parseFloat(sgpa).toFixed(2).toString();
      cgpa = descResult.rows[0].cgpa;
      if (cgpa.indexOf(".") != -1) if (cgpa.split(".")[1].length > 1) cgpa = parseFloat(cgpa).toFixed(2).toString();
    }

    let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${rollnumber}' and semesternumber='${cohortsemesternumber}'`);
    console.log(semesQuery);
    let semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount > 0){
      let tempContent = "";
      semesResult.rows.sort((a,b) => a.other1 - b.other1); 
      for (let index=0; index < semesResult.rowCount; index++){
        semesternumber = semesResult.rows[0].semesternumber;
        if (parseInt(semesternumber)) semesternumber = roman_list[parseInt(semesternumber)];
        
        let element = semesResult.rows[index];
        // let tempcoursename = element.subjecttype.split(" ").map((ele) => ele.toLowerCase() == "and" || ele.toLowerCase() == "in" ? ele.toLowerCase() : ele.charAt(0).toUpperCase() + ele.substr(1).toLowerCase()).join(" ");
        tempContent += `<tr>
          <td style=\\"width: 5%; font-size: 13px; border-right: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman; vertical-align: top; padding-top: 5px;\\">${element.other1}</td>
          <td style=\\"width: 11%; font-size: 13px; border-right: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman; vertical-align: top; padding-top: 5px;\\">${element.subjectcode}</td>
          <td style=\\"width: 60%; font-size: 13px; border-right: 1px solid black; border-collapse: collapse; padding: 5px 0px 5px 3px; font-family: timesnewroman; vertical-align: top;\\">${element.subjecttype}</td>
          <td style=\\"width: 10%; font-size: 13px; border-right: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman; vertical-align: top; padding-top: 5px;\\">${element.credit}</td>
          <td style=\\"width: 8%; font-size: 13px; border-right: 1px solid black; border-collapse: collapse; text-align: left; padding-left: 25px; font-family: timesnewroman; vertical-align: top; padding-top: 5px;\\">${element.grade}</td>
          <td style=\\"width: 6%; font-size: 13px; border-right: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman; vertical-align: top; padding-top: 5px;\\">${element.point}</td>
        </tr>`
      }
      // tempContent += `<tr style=\\"height: 15px;\\"><td colspan=\\"6\\" ></td></tr>` phdtitle.charAt(0).toUpperCase() + phdtitle.substr(1).toLowerCase();
      tableContent = `<table style=\\"width: 90%; border: 1px solid black; border-collapse: collapse;\\"><tbody>
        <tr>
          <td style=\\"width: 5%; font-size: 13px; border: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman;\\">S.No.</td>
          <td style=\\"width: 11%; font-size: 13px; border: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman;\\">Course Code</td>
          <td style=\\"width: 60%; font-size: 13px; border: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman;\\">Course Name</td>
          <td style=\\"width: 10%; font-size: 13px; border: 1px solid black; border-collapse: collapse; text-align: center; padding: 7px 0px; font-family: timesnewroman;\\">Associated Credits</td>
          <td style=\\"width: 8%; font-size: 13px; border: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman;\\">Grade Obtained</td>
          <td style=\\"width: 6%; font-size: 13px; border: 1px solid black; border-collapse: collapse; text-align: center; font-family: timesnewroman;\\">Credits Earned</td>
        </tr>
        ${tempContent}
      </tbody></table>`;
    }  

    stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);
    stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
    stringcontents = stringcontents.replace(/COURSE_NAME/g, coursename);
    stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname);
    stringcontents = stringcontents.replace(/ENROL_NO/g, rollnumber);
    stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername);
    stringcontents = stringcontents.replace(/ADMINSSION_NO/g, other1);
    stringcontents = stringcontents.replace(/MOTHER_NAME/g, mothername);
    stringcontents = stringcontents.replace(/SCHOOL_NAME/g, other2);
    stringcontents = stringcontents.replace(/SEMESTER_NUMBER/g, semesternumber);
    stringcontents = stringcontents.replace(/SEMESTER_SEASON/g, semesterseason);
    stringcontents = stringcontents.replace(/SEMESTER_YEAR/g, semesteryear);
    stringcontents = stringcontents.replace(/TOTAL_CREDIT_REGISTERED/g, total_credit_registered);
    stringcontents = stringcontents.replace(/SGPA_SGPA/g, sgpa);
    stringcontents = stringcontents.replace(/TOTAL_CREDIT_EARNED/g, total_credit_earned);
    stringcontents = stringcontents.replace(/CGPA_CGPA/g, cgpa);
    stringcontents = stringcontents.replace(/SEMESTER_CONTENT/g, tableContent);
    stringcontents = stringcontents.replace(/COMPLETION_DATE/g, completiondate);
    // stringcontents = stringcontents.replace(//g, "");
    // let qr_code = await QR_Generate(qr_verifier_url, 300);
    // stringcontents = stringcontents.replace("QR_GENERATE_CODE", qr_code);
    return stringcontents;  
  }
  catch(err){
    console.log(err.message);
    return stringcontents
  }
  
}

function convert_titlecase(sentence){
  let regex = /(^|\b(?!(and?|in?|at?|the|for|to|but|by|is)\b))\w+/g;
  //console.log(output); 
  return sentence.toLowerCase().replace(regex, s => s[0].toUpperCase() + s.slice(1));
}

async function template_replace_117(stringcontents, puserid, cohortid, rollnumber, fullname, fathername, mothername, competency_name, facultyname, other1, other2, other3, other4, other5, other6, other7, other8, other9, other10) {  
  try{
    let tableContent = "";
    let numContent = "";
    let practicalContent = "";
    let totalyearContent = "";
    let preparedby = "";
    let checkedby = "";
    let totalmax = 0;
    let totalmin = 0;
    let totalmark = 0;
    let lastmark = 0;
    let lastmax = 0;
    // let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${rollnumber}'`);
    // let descResult = await pool.query(descQuery);
    // if (descResult.rowCount > 0){    
    //   preparedby = descResult.rows[0].preparedby;
    //   checkedby = descResult.rows[0].verifiedby;
    // }

    let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${rollnumber}' and other1 !='totalyear' and other1 !='practical'`);
    let semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount > 0){
      semesResult.rows.sort((a,b) => a.other1 - b.other1);
      for (let index = 0; index < semesResult.rowCount ; index ++){
        let element = semesResult.rows[index];
        numContent += `<tr>
          <td style=\\"width: 5%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.other1}</td>
          <td style=\\"width: 10%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.subjectcode}</td>
          <td style=\\"width: 57%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; padding: 5px 0px 5px 3px;\\">${element.subjecttype}</td>
          <td style=\\"width: 8%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.credit}</td>
          <td style=\\"width: 12%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.grade}</td>
          <td style=\\"width: 8%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.point}</td>
        </tr>`;
      }
    }
    semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${rollnumber}' and other1 ='practical'`);
    semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount > 0){
      semesResult.rows.sort((a,b) => a.subjectcode - b.subjectcode);
      practicalContent = `<tr>
        <td colspan=\\"3\\" style=\\"width: 5%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">PRACTICAL & VIVA</td>      
        <td style=\\"width: 8%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\"></td>
        <td style=\\"width: 12%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\"></td>
        <td style=\\"width: 8%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\"></td>
      </tr>`;
      for (let index = 0; index < semesResult.rowCount ; index ++){
        let element = semesResult.rows[index];
        practicalContent += `<tr>
          <td colspan=\\"2\\" style=\\"width: 5%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.subjectcode}</td>
          <td style=\\"width: 57%; font-size: 12px; border: 1px solid black; border-collapse: collapse; padding: 5px 0px 5px 3px;\\">${element.subjecttype}</td>      
          <td style=\\"width: 8%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.credit}</td>
          <td style=\\"width: 12%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.grade}</td>
          <td style=\\"width: 8%; font-size: 12px; border-right: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.point}</td>
        </tr>`;
      }
    }
    semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${rollnumber}' and other1 ='totalyear'`);
    semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount > 0){
      semesResult.rows.sort((b,a) => a.subjectcode - b.subjectcode);   
      lastmark = semesResult.rows[0].point;
      lastmax = semesResult.rows[0].credit;
      for (let index = 0; index < semesResult.rowCount ; index ++){
        let element = semesResult.rows[index];
        let temp1 = "";
        if (element.subjectype == "1") temp1 = element.subjecttype + "ST";
        else if (element.subjectype == "1") temp1 = element.subjecttype + "ND";
        else if (element.subjectype == "1") temp1 = element.subjecttype + "RD";
        else temp1 = element.subjecttype + "TH"
        totalyearContent += `<tr>
          <td colspan=\\"3\\" style=\\"width: 5%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">TOTAL ${temp1} YEAR</td>
          <td style=\\"width: 8%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.credit}</td>
          <td style=\\"width: 12%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.grade}</td>
          <td style=\\"width: 8%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${element.point}</td>
        </tr>`;
        totalmax += parseInt(element.credit);
        totalmin += parseInt(element.grade);
        totalmark += parseInt(element.point);
      }
      totalyearContent += `<tr>
          <td colspan=\\"3\\" style=\\"width: 5%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">GRAND TOTAL</td>
          <td style=\\"width: 8%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${totalmax}</td>
          <td style=\\"width: 12%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${totalmin}</td>
          <td style=\\"width: 8%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">${totalmark}</td>
        </tr>`;
    }

    tableContent = `<table style=\\"width: 90%; border: 1px solid black; border-collapse: collapse;\\"><tbody>
      <tr>
        <td style=\\"width: 5%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">S.No.</td>
        <td style=\\"width: 10%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">Course Code</td>
        <td style=\\"width: 57%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">COURSE NAME</td>
        <td style=\\"width: 8%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center; padding: 7px 0px;\\">MAXIMUN MARKS</td>
        <td style=\\"width: 12%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">MINIMUM PASS MARKS</td>
        <td style=\\"width: 8%; font-size: 12px; border: 1px solid black; border-collapse: collapse; text-align: center;\\">MARKS OBTAINED</td>
      </tr>
      ${numContent}
      ${practicalContent}
      ${totalyearContent}
    </tbody></table>`;
    
    stringcontents = stringcontents.replace(/ADMISSION_NO/g, other1);
    stringcontents = stringcontents.replace(/ENROLL_NO/g, rollnumber);
    stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
    stringcontents = stringcontents.replace(/FACULTY_NAME/g, facultyname.toString().toUpperCase());
    stringcontents = stringcontents.replace(/EXAMINATION_DATE/g, other5);
    stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname.toString().toUpperCase());
    stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername.toString().toUpperCase());
    stringcontents = stringcontents.replace(/MOTHER_NAME/g, mothername.toString().toUpperCase());
    // stringcontents = stringcontents.replace(/LAST_MARKS/g, lastmark);
    stringcontents = stringcontents.replace(/LAST_MARKS/g, other9);
    // stringcontents = stringcontents.replace(/LAST_MAX/g, lastmax);
    stringcontents = stringcontents.replace(/LAST_MAX/g, other10);
    stringcontents = stringcontents.replace(/DISTINCTION_DISTINCTION/g, other2);
    stringcontents = stringcontents.replace(/REAPPEAR_REAPPEAR/g, other3);
    stringcontents = stringcontents.replace(/REAPPER_YEAR/g, other4);
    stringcontents = stringcontents.replace(/COMPLETION_DATE/g, completiondate);
    stringcontents = stringcontents.replace(/SEMESTER_CONTENT/g, tableContent);
    stringcontents = stringcontents.replace(/PASSED_OR_FAIL/g, other8.toString().toUpperCase());
    stringcontents = stringcontents.replace(/PREPAREDBY/g, other6);
    stringcontents = stringcontents.replace(/CHECKEDBY/g, other7);
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }

  
}

async function template_replace_118(stringcontents, rollnumber, fullname, fathername, competency_name, coursename, completiondate, other1, other2, other3, other4, other5) {
  try{
    stringcontents = stringcontents.replace(/REFERENCE_NUMBER/g, other5);
    stringcontents = stringcontents.replace(/COMPLETION_DATE/g, completiondate);
    stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname);
    stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername);
    stringcontents = stringcontents.replace(/ADMISSION_NUMBER/g, other1);
    stringcontents = stringcontents.replace(/ENROLL_NO/g, rollnumber);
    stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
    stringcontents = stringcontents.replace(/COURSE_NAME/g, coursename);
    stringcontents = stringcontents.replace(/DURATION/g, other2);
    stringcontents = stringcontents.replace(/START_YEAR/g, other3);
    stringcontents = stringcontents.replace(/END_YEAR/g, other4);
    // stringcontents = stringcontents.replace(//g, );
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
}

async function template_replace_119(stringcontents, fullname, completiondate) {
  stringcontents = stringcontents.replace("STUDENT_NAME", fullname);
  stringcontents = stringcontents.replace("COMPLETION_DATE", completiondate);
  return stringcontents;
}

async function template_replace_122(stringcontents, rollnumber, fullname, fathername, competency_name, sex, other1, other2, other3, other4, other5, other6, other7, other8, other9) {
  try{
    let call = "";
    let child = "";
    let lower_sex = "";
    let upper_sex = "";
    let upper_3_sex = "";

    sex = sex.toString().toLowerCase();
    if(sex == "m"){
      call = "Mr";
      child = "Son";
      lower_sex = "he";
      upper_sex = "He";
      upper_3_sex = "His";
    }
    else if (sex == "f"){
      call = "Ms";
      child = "Daughter";
      lower_sex = "she";
      upper_sex = "She";
      upper_3_sex = "Her";
    }
    stringcontents = stringcontents.replace(/STD_CALL/g, call);
    stringcontents = stringcontents.replace(/STD_CHILD/g, child);
    stringcontents = stringcontents.replace(/STD_LOWER_SEX/g, lower_sex);
    stringcontents = stringcontents.replace(/STD_UPPER_SEX/g, upper_sex);
    stringcontents = stringcontents.replace(/STD_UPPER_3_SEX/g, upper_3_sex);
    stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname);
    stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername);
    stringcontents = stringcontents.replace(/ENROLL_NO/g, rollnumber);
    stringcontents = stringcontents.replace(/REGISTRAION_NUMBER/g, other1);
    stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
    stringcontents = stringcontents.replace(/EXAM_DATE/g, other2);
    stringcontents = stringcontents.replace(/RESULT_NUMBER/g, other3);
    stringcontents = stringcontents.replace(/RESULT_DATE/g, other4);
    stringcontents = stringcontents.replace(/STD_PC_NUM/g, other5);
    stringcontents = stringcontents.replace(/CGPA_CGPA/g, other6);
    stringcontents = stringcontents.replace(/DIVISION_DIVISION/g, other7);
    stringcontents = stringcontents.replace(/STATUS_STATUS/g, other8);
    stringcontents = stringcontents.replace(/DATE_DATE/g, other9);
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_123(stringcontents, puserid, cohortfullid, rollnumber, fullname, fathername, competency_name, other1, other2) {
  try{
    let roman_list = ['', '&#8544;', '&#8545;', '&#8546;', '&#8547;', '&#8548;', '&#8549;', '&#8550;', '&#8551;', '&#8552;', '&#8553;'];
    let cgpa = "";
    let classification = "";
    let programme = "";
    // let course = "";
    let resultContent = "";
    let lastPos = 1260;
    let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}'`);
    let descResult = await pool.query(descQuery);
    if (descResult.rowCount > 0){
      cgpa = descResult.rows[0].cgpa;
      classification = descResult.rows[0].other1;
      programme = descResult.rows[0].other2;
      // course = descResult.rows[0].other3;
    }
    let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' order by semesternumber, subjectcode`);
    let semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount > 0){
      let tempContent = `<tr>
      <td style=\\"width: 9%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Sem.</td>
      <td style=\\"width: 13%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Course code</td>
      <td style=\\"width: 35%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Course</td>
      <td style=\\"width: 6%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Grade</td>
      <td style=\\"width: 12%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Grade point(G)</td>
      <td style=\\"width: 8%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Credit(C)</td>
      <td style=\\"width: 17%; font-size: 8pt; text-align: center; padding: 3px; border: 1px solid black; border-collapse: collapse;\\">Month & Year of Exam</td>
      </tr>`;
      if (semesResult.rowCount > 35){
        if (semesResult.rowCount >= 47){
          let tempContent1 = tempContent;
          let tempContent2 = tempContent;
          for (let index = 0; index < 47; index ++){
            let value = semesResult.rows[index];
            // if (!parseInt(value.semesternumber)) value.semesternumber=0;
            tempContent1 += `<tr>
            <td style=\\"width: 9%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">SEM-${value.semesternumber}</td>
            <td style=\\"width: 13%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjectcode}</td>
            <td style=\\"width: 35%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjecttype}</td>
            <td style=\\"width: 6%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.grade}</td>
            <td style=\\"width: 12%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.point}</td>
            <td style=\\"width: 8%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.credit}</td>
            <td style=\\"width: 17%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.other1}</td>
            </tr>`
          }
          let tempContent3 = `<table id=\\"SECOND_HEAD\\" style=\\"width: 85%; position: absolute; top: 1150px; margin: auto; left: 0px; right: 0px;\\">
            <tbody>
              <tr>
              <td style=\\"text-align: left;\\">
              <img src=\\"${myip}/images/backend/miet_motor.png\\" style=\\"width: 500px; text-align: left;\\">
              </td>
              </tr>
            </tbody>
          </table>`;

          for (let index = 47; index < semesResult.rowCount; index ++){
            let value = semesResult.rows[index];
            // if (!parseInt(value.semesternumber)) value.semesternumber=0;
            tempContent2 += `<tr>
            <td style=\\"width: 9%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">SEM-${value.semesternumber}</td>
            <td style=\\"width: 13%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjectcode}</td>
            <td style=\\"width: 35%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjecttype}</td>
            <td style=\\"width: 6%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.grade}</td>
            <td style=\\"width: 12%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.point}</td>
            <td style=\\"width: 8%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.credit}</td>
            <td style=\\"width: 17%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.other1}</td>
            </tr>`;
            lastPos += 18;
          }

          resultContent = `<table style=\\"width: 95%; border-collapse: collapse;\\"><tbody>${tempContent1}</tbody></table>${tempContent3} <table style=\\"width: 93%; border-collapse: collapse; position: absolute; top: 1250px; margin: auto; left: 0px; right: 0px;\\"><tbody>${tempContent2}</tbody></table>
            <table style=\\"width: 93%; margin-top: 0px; position: absolute; top: ${lastPos}px; margin: auto; left: 0px; right: 0px;\\">
              <tbody>
                <tr>
                  <td style=\\"width: 25%; text-align: left;\\">
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\"><sup><span style=\\"font-size: 4pt;\\">&#9733;&#9733;&#9733;</span></sup>End Of Statement<sup><span style=\\"font-size: 4pt;\\">&#9733;&#9733;&#9733;</span></sup></p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">Classification: ${classification}</p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">CGPA: ${cgpa}</p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">S<sup><span style=\\"font-size: 4pt;\\">&#9733;</span></sup> - SATISFACTORY</p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">NS<sup><span style=\\"font-size: 4pt;\\">&#9733;</span></sup> - NON-SATISFACTORY</p>
                  </td>
                  <td style=\\"width: 75%\\"></td>
                </tr>
              </tbody>
            </table>
            <table style=\\"width: 93%; margin-top: 50px; position: absolute; top: ${lastPos + 100}px; margin: auto; left: 0px; right: 0px;\\">
              <tbody>
                <tr>
                  <td style=\\"width: 25%; vertical-align: bottom\\"> 
                  <p style=\\"font-size: 7pt; color: #0d3ea1\\">Date of issue: &nbsp;&nbsp;&nbsp; <span style=\\"color: #000000;\\">DATE_OF_ISSUE</span></p>     
                  </td>
                  <td style=\\"width: 50%;\\"></td>
                  <td style=\\"width: 25%; text-align: center; color: #0d3ea1;font-size: 7pt; \\">
                    <img style=\\"height: 45px; margin-top: -50px;\\" src=\\"${myip}/images/backend/miet_controller_examination.png\\" >
                    <br />
                    <span style=\\"margin-top: -5px;\\">Signature<br/>Controller of Examination</span>
                  </td>
                  <td>
                </tr>
              </tbody>
            </table>
            `;
        }
        else {
          for (let index = 0; index < semesResult.rowCount; index ++){
            let value = semesResult.rows[index];
            // if (!parseInt(value.semesternumber)) value.semesternumber=0;
            tempContent += `<tr>
            <td style=\\"width: 9%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">SEM-${value.semesternumber}</td>
            <td style=\\"width: 13%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjectcode}</td>
            <td style=\\"width: 35%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjecttype}</td>
            <td style=\\"width: 6%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.grade}</td>
            <td style=\\"width: 12%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.point}</td>
            <td style=\\"width: 8%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.credit}</td>
            <td style=\\"width: 17%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.other1}</td>
            </tr>`
          }
          let tempContent3 = `<table id=\\"SECOND_HEAD\\" style=\\"width: 85%; position: absolute; top: 1150px; margin: auto; left: 0px; right: 0px;\\">
            <tbody>
              <tr>
              <td style=\\"text-align: left;\\">
              <img src=\\"${myip}/images/backend/miet_motor.png\\" style=\\"width: 500px; text-align: left;\\">
              </td>
              </tr>
            </tbody>
          </table>`;         

          resultContent = `<table style=\\"width: 95%; border-collapse: collapse;\\"><tbody>${tempContent}</tbody></table>${tempContent3} 
            <table style=\\"width: 95%; margin-top: 0px; position: absolute; top: 1250px; margin: auto; left: 0px; right: 0px;\\">
              <tbody>
                <tr>
                  <td style=\\"width: 25%; text-align: left;\\">
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\"><sup><span style=\\"font-size: 4pt;\\">&#9733;&#9733;&#9733;</span></sup>End Of Statement<sup><span style=\\"font-size: 4pt;\\">&#9733;&#9733;&#9733;</span></sup></p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">Classification: ${classification}</p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">CGPA: ${cgpa}</p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">S<sup><span style=\\"font-size: 4pt;\\">&#9733;</span></sup> - SATISFACTORY</p>
                    <p style=\\"font-size: 8pt; margin-top: -5px;\\">NS<sup><span style=\\"font-size: 4pt;\\">&#9733;</span></sup> - NON-SATISFACTORY</p>
                  </td>
                  <td style=\\"width: 75%\\"></td>
                </tr>
              </tbody>
            </table>
            <table style=\\"width: 95%; margin-top: 50px; position: absolute; top: 1350px; margin: auto; left: 0px; right: 0px;\\">
              <tbody>
                <tr>
                  <td style=\\"width: 25%; vertical-align: bottom\\"> 
                  <p style=\\"font-size: 7pt; color: #0d3ea1\\">Date of issue: &nbsp;&nbsp;&nbsp; <span style=\\"color: #000000;\\">DATE_OF_ISSUE</span></p>     
                  </td>
                  <td style=\\"width: 50%;\\"></td>
                  <td style=\\"width: 25%; text-align: center; color: #0d3ea1;font-size: 7pt; \\">
                    Signature<br/>Controller of Examination
                  </td>
                  <td>
                </tr>
              </tbody>
            </table>
            `;
        }
      }
      else {
        for (let index = 0; index < semesResult.rowCount; index ++){
          let value = semesResult.rows[index];
          // if (!parseInt(value.semesternumber)) value.semesternumber=0;
          tempContent += `<tr>
          <td style=\\"width: 9%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">SEM-${value.semesternumber}</td>
          <td style=\\"width: 13%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjectcode}</td>
          <td style=\\"width: 35%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.subjecttype}</td>
          <td style=\\"width: 6%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.grade}</td>
          <td style=\\"width: 12%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.point}</td>
          <td style=\\"width: 8%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.credit}</td>
          <td style=\\"width: 17%; font-size: 7pt; text-align: center; padding: 1px; border: 1px solid black; border-collapse: collapse;\\">${value.other1}</td>
          </tr>`
        }
        resultContent = `<table style=\\"width: 95%; border-collapse: collapse;\\"><tbody>${tempContent}</tbody></table>
        <table style=\\"width: 95%; margin-top: 0px;\\">
          <tbody>
            <tr>
              <td style=\\"width: 25%; text-align: left;\\">
                <p style=\\"font-size: 8pt; margin-top: -5px;\\"><sup><span style=\\"font-size: 4pt;\\">&#9733;&#9733;&#9733;</span></sup>End Of Statement<sup><span style=\\"font-size: 4pt;\\">&#9733;&#9733;&#9733;</span></sup></p>
                <p style=\\"font-size: 8pt; margin-top: -5px;\\">Classification: ${classification}</p>
                <p style=\\"font-size: 8pt; margin-top: -5px;\\">CGPA: ${cgpa}</p>
                <p style=\\"font-size: 8pt; margin-top: -5px;\\">S<sup><span style=\\"font-size: 4pt;\\">&#9733;</span></sup> - SATISFACTORY</p>
                <p style=\\"font-size: 8pt; margin-top: -5px;\\">NS<sup><span style=\\"font-size: 4pt;\\">&#9733;</span></sup> - NON-SATISFACTORY</p>
              </td>
              <td style=\\"width: 75%\\"></td>
            </tr>
          </tbody>
        </table>
        <table style=\\"width: 95%; margin-top: 50px;\\">
          <tbody>
            <tr>
              <td style=\\"width: 25%; vertical-align: bottom\\"> 
               <p style=\\"font-size: 5pt; color: #0d3ea1\\">Date of issue: &nbsp;&nbsp;&nbsp; <span style=\\"color: #000000;\\">DATE_OF_ISSUE</span></p>     
              </td>
              <td style=\\"width: 50%;\\"></td>
              <td style=\\"width: 25%; text-align: center; color: #0d3ea1;font-size: 7pt; \\">
                Signature<br/>Controller of Examination
              </td>
              <td>
            </tr>
          </tbody>
        </table>
        `;
      }
      
    }

    stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname);
    stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername);
    stringcontents = stringcontents.replace(/PROGRAME_PROGRAME/g, programme);
    stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
    stringcontents = stringcontents.replace(/ENROLL_NO/g, rollnumber);
    stringcontents = stringcontents.replace(/REGISTRATION_NO/g, other1);
    stringcontents = stringcontents.replace(/EXAM_DATE/g, other2);
    stringcontents = stringcontents.replace(/TRANSCRIPT_PART/g, resultContent);
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );
    // stringcontents = stringcontents.replace(//g, );

    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }

}

async function template_replace_124_old(stringcontents, puserid, cohortfullid, rollnumber, fullname, competency_name, dateofissue, other2, other6, semesternumber){
  try{
    let template_num = "";
    let semes_sub_content = "";
    let semester_num = "";
    let space_num = 0;
    let roman_list = ['', '&#8544;', '&#8545;', '&#8546;', '&#8547;', '&#8548;', '&#8549;', '&#8550;', '&#8551;', '&#8552;', '&#8553;'];    
    let roman_list_new = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];
    let competency_list = {
      'bachelor of architecture': '1',
      'bachelor of design': '1',
      'master of planning': '1',
      'bachelor of commerce':'2',
      'bachelor of business administration': '2',
      'bachelor of sports': '2',
      'bachelor of science': '2',
      'bachelor of events': '2',
      'master of science': '2',
      'bachelor of engineering': '3',
      'bachelor of pharmacy':'4',
      'diploma engineering': '5',
      '5 year integrated bachelor degree programme': '6',
      'master of business administration': '7',
      'master of computer applications': '8',
      'master of computer applications (integrated)': '8',
      'master of science (information technology) integrated': '8',
      'imca': '8',
      'msclt': '8',
      'master of engineering': '9',
      'master of media and communications': '10',
      'master of media & communication': '10',
      'master of pharmacy': '11',
      'master of business administration (integrated 4 year)': '12',
    };

    let competency_list_org = {
      'Bachelor of Architecture': '1',
      'Bachelor of Design': '1',
      'Master of Planning': '1',
      'Bachelor of Commerce':'2',
      'Bachelor of Business Administration': '2',
      'Bachelor of Science': '2',
      'Master of Science': '2',
      'Bachelor of Engineering': '3',
      'Bachelor of Pharmacy': '4',
      'Diploma Engineering': '5',
      'Master of Business Administration': '7',
      'Master of Computer Applications': '8',
      'Master of Computer Applications (Integrated)': '8',
      'Master of Science (Information Technology) Integrated': '8',
      'Master of Engineering': '9',
      'Master of Media and Communications': '10',
      'Master of Media & Communication': '10',
      'Master of pharmacy': '11',
      'Master of Business Administration (Integrated 4 Year)': '12',
    }


    if(competency_name.trim().toLowerCase() in competency_list){
      template_num = competency_list[competency_name.trim().toLowerCase()];      
    }
    else {
      return stringcontents;
    }
    let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='${roman_list_new[semesternumber]}'`);
    let descResult = await pool.query(descQuery);
    if(descResult.rowCount > 0){
      stringcontents = stringcontents.replace("OTHER_01", descResult.rows[0].other1);
      stringcontents = stringcontents.replace("OTHER_02", descResult.rows[0].other2);
      stringcontents = stringcontents.replace("OTHER_03", descResult.rows[0].other3);
      stringcontents = stringcontents.replace("OTHER_04", descResult.rows[0].other4);
      stringcontents = stringcontents.replace("OTHER_05", descResult.rows[0].other5);
      stringcontents = stringcontents.replace("OTHER_06", descResult.rows[0].other6);
      stringcontents = stringcontents.replace("OTHER_07", descResult.rows[0].other7);
      stringcontents = stringcontents.replace("OTHER_08", descResult.rows[0].other8);
      stringcontents = stringcontents.replace("OTHER_09", descResult.rows[0].other9);
      stringcontents = stringcontents.replace("OTHER_10", descResult.rows[0].other10);
      stringcontents = stringcontents.replace("OTHER_11", descResult.rows[0].other11);
      stringcontents = stringcontents.replace("OTHER_12", descResult.rows[0].other12);
      stringcontents = stringcontents.replace("RESULT_RESULT", descResult.rows[0].other13);
      stringcontents = stringcontents.replace("CLASS_CLASS", descResult.rows[0].other14);
      stringcontents = stringcontents.replace("OTHER_15", descResult.rows[0].other15);
      stringcontents = stringcontents.replace("STATEMENT_NUM", descResult.rows[0].other38);
      stringcontents = stringcontents.replace("SEAT_NUM", descResult.rows[0].other39);
      stringcontents = stringcontents.replace("EXAM_PERIOD", descResult.rows[0].other40);
      
    }
    else return stringcontents;    
    
    let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='${roman_list_new[semesternumber]}' order by subjecttype`);
    let semesResult = await pool.query(semesQuery);

    if(template_num == "1"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
        <tbody>
          <tr style="height: ${row_height_1};">
              <td rowspan="2" style="width: 10%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">Backlogs</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[1]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[2]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[3]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[4]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[5]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[6]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[7]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[8]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[9]}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[10]}</td>
          </tr>
          <tr style="height: ${row_height_1};">
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other16}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other17}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other18}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other19}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other20}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other21}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other22}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other23}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other24}</td>
              <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other25}</td>
          </tr>`;
      if(descResult.rowCount > 0){
        // semester_num = parseInt(semesResult.rows[0].semesternumber);
        // if (semester_num == 1) semester_num = roman_list[semester_num] + "(One)";
        // else semester_num = roman_list[semester_num];
        semester_num = semesResult.rows[0].semesternumber;
        // if (!isNaN(parseInt(semester_num))){
        //   if (parseInt(semester_num) == 1) semester_num = roman_list[parseInt(semester_num)] + "(One)";
        //   else semester_num = roman_list[parseInt(semester_num)];
        // }
        // else if (semester_num == "I") semester_num += "(One)";
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 60%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 60%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.credit + `</td>
              <td style="width: 15%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 15px;">` + semes.grade + `</td>
          </tr>`;
        }
        if (semesResult.rowCount < 9) space_num = (9 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
            <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 60%; text-align: left; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 15%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 15px;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if(template_num == "2") {
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      if(descResult.rowCount > 0){
        let cec_sum = 0;
        let cec_total = 0;
        let uni_sum = 0;
        let uni_total = 0;
        let total_sum = 0;
        let total_total = 0;
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 48%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 7%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">CEC</td>
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Uni.Exam.</td>
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 48%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.credit + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other1 + `</td>
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other2 + `</td>
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other3 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.grade + `</td>
          </tr>`;
          if (semes.other1.split("/").length > 1){
            cec_sum += parseInt(semes.other1.split("/")[0]);
            cec_total += parseInt(semes.other1.split("/")[1]);
          }
          if (semes.other2.split("/").length > 1){
            uni_sum += parseInt(semes.other2.split("/")[0]);
            uni_total += parseInt(semes.other2.split("/")[1]);
          }
          if (semes.other3.split("/").length > 1){
            total_sum += parseInt(semes.other3.split("/")[0]);
            total_total += parseInt(semes.other3.split("/")[1]);
          }
        }
        if (semesResult.rowCount < 9) space_num = (9 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 48%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr>
        <tr style="height: ${row_height_1};">
        <td colspan="3" style="text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
        <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">${cec_sum}/${cec_total}</td>
        <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${uni_sum}/${uni_total}</td>
        <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">${total_sum}/${total_total}</td>
        <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>`;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "3"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
        <tbody>
          <tr style="height: ${row_height_1};">
              <td style="width: 45%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">MOOC Course Title</td>
              <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Platform</td>
              <td style="width: 30%; text-align: center; border: 1px solid black; font-size: 8pt;">University Name</td>
              <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Result</td>
          </tr>
          <tr style="height: ${row_height_1};">
              <td style="width: 45%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other26}</td>
              <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other27}</td>
              <td style="width: 30%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other28}</td>
              <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other29}</td>
          </tr>
          <tr style="height: ${row_height_1};">    
              <td style="width: 45%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other30}</td>
              <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other31}</td>
              <td style="width: 30%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other32}</td>
              <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other33}</td>
          </tr>`;
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Code</td>
                  <td style="width: 53%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Theory Grade</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Practical Grade</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Overall Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
          <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.subjecttype}</td>
          <td style="width: 53%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">${semes.subjectcode}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.credit}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other4}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other5}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other6}</td>
          </tr>`;
        }
        if (semesResult.rowCount < 8) space_num = (8 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 53%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "4"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
        <tbody>
          <tr style="height: ${row_height_1};">
              <td rowspan="2" style="width: 12%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">Backlogs</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[1]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[2]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[3]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[4]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[5]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[6]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[7]}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[8]}</td>
          </tr>
          <tr style="height: ${row_height_1};">
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other16}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other17}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other18}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other19}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other20}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other21}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other22}</td>
              <td style="width: 11%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other23}</td>
          </tr>`;
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td rowspan="2" style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td rowspan="2" style="width: 56%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td rowspan="2" style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Credit</td>
                  <td rowspan="2" style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Overall Grade</td>
                  <td colspan="4" style="width: 16%; text-align: center; font-size: 8pt;">Backlog</td>
              </tr>
              <tr style="height: ${row_height_1};">
                  <td style="width: 4%; text-align: center; font-size: 8pt; border-bottom: 1px solid black;">E</td>
                  <td style="width: 4%; text-align: center; font-size: 8pt; border-bottom: 1px solid black;">M</td>
                  <td style="width: 4%; text-align: center; font-size: 8pt; border-bottom: 1px solid black;">I</td>
                  <td style="width: 4%; text-align: center; font-size: 8pt; border-bottom: 1px solid black;">V</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 56%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other7 + `</td>
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other6 + `</td>
              <td style="width: 4%; text-align: center; font-size: 8pt;">` + semes.other8 + `</td>
              <td style="width: 4%; text-align: center; font-size: 8pt;">` + semes.other9 + `</td>
              <td style="width: 4%; text-align: center; font-size: 8pt;">` + semes.other10 + `</td>
              <td style="width: 4%; text-align: center; font-size: 8pt;">` + semes.other11 + `</td>
          </tr>`;
        }
        if (semesResult.rowCount < 9) space_num = (9 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 56%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 4%; text-align: center; font-size: 8pt;"></td>
        <td style="width: 4%; text-align: center; font-size: 8pt;"></td>
        <td style="width: 4%; text-align: center; font-size: 8pt;"></td>
        <td style="width: 4%; text-align: center; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "5"){     
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      } 
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 53%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Theory Grade</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Practical Grade</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Overall Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
          <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.subjecttype}</td>
          <td style="width: 53%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">${semes.subjectcode}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.credit}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other4}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other5}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other6}</td>
          </tr>`;
        }
        if (semesResult.rowCount < 9) space_num = (9 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 53%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "6"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      if(descResult.rowCount > 0){
        let cec_sum = 0;
        let cec_total = 0;
        let uni_sum = 0;
        let uni_total = 0;
        let practical_sum = 0;
        let practical_total = 0;
        let total_sum = 0;
        let total_total = 0;
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 40%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 7%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">CEC</td>
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Uni.Exam.</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Practical</td>
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 40%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.credit + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other1 + `</td>
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other2 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other12 + `</td>
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other3 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.grade + `</td>
          </tr>`;
          if (semes.other1.split("/").length > 1){
            cec_sum += parseInt(semes.other1.split("/")[0]);
            cec_total += parseInt(semes.other1.split("/")[1]);
          }
          if (semes.other2.split("/").length > 1){
            uni_sum += parseInt(semes.other2.split("/")[0]);
            uni_total += parseInt(semes.other2.split("/")[1]);
          }
          if (semes.other12.split("/").length > 1){
            practical_sum += parseInt(semes.other12.split("/")[0]);
            practical_total += parseInt(semes.other12.split("/")[1]);
          }
          if (semes.other3.split("/").length > 1){
            total_sum += parseInt(semes.other3.split("/")[0]);
            total_total += parseInt(semes.other3.split("/")[1]);
          }
        }
        let practical_display = "";
        if(practical_sum == 0 && practical_total == 0) practical_display = "-";
        else practical_display = `${practical_sum}/${practical_total}`;
        if (semesResult.rowCount < 9) space_num = (9 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 40%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr>
        <tr style="height: ${row_height_1};">
        <td colspan="3" style="text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
        <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">${cec_sum}/${cec_total}</td>
        <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${uni_sum}/${uni_total}</td>
        <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">${practical_display}</td>
        <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">${total_sum}/${total_total}</td>
        <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>`;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "7"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td rowspan="2" style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td rowspan="2" style="width: 50%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td rowspan="2" style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td colspan="4" style="width: 32%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>
              <tr style="height: ${row_height_1};">
                  <td style="width: 8%; text-align: center; font-size: 7pt; border: 1px solid black;">Modular Examination*</td>
                  <td style="width: 8%; text-align: center; font-size: 7pt; border: 1px solid black;">Experiental Learning**</td>
                  <td style="width: 8%; text-align: center; font-size: 7pt; border: 1px solid black;">Project Viva</td>
                  <td style="width: 8%; text-align: center; font-size: 7pt; border: 1px solid black;">Overall</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 50%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other7 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other13 + `</td>
              <td style="width: 8%; text-align: center; font-size: 8pt;">` + semes.other14 + `</td>
              <td style="width: 8%; text-align: center; font-size: 8pt;">` + semes.other15 + `</td>
              <td style="width: 8%; text-align: center; font-size: 8pt;">` + semes.other6 + `</td>
          </tr>`;
        }
        if (semesResult.rowCount < 9) space_num = (9 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 50%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "8"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
        <tbody>
          <tr style="height: ${row_height_1};">
              <td style="width: 45%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">#MOOC Course Title</td>
              <td style="width: 20%; text-align: center; border: 1px solid black; font-size: 8pt;">Platform</td>
              <td style="width: 35%; text-align: center; border: 1px solid black; font-size: 8pt;">University Name</td>
          </tr>
          <tr style="height: ${row_height_1};">
              <td style="width: 45%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other26}</td>
              <td style="width: 20%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other27}</td>
              <td style="width: 35%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other28}</td>
          </tr>
          <tr style="height: ${row_height_1};">    
              <td style="width: 45%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other30}</td>
              <td style="width: 20%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other31}</td>
              <td style="width: 35%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other32}</td>
          </tr>`;
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td rowspan="2" style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td rowspan="2" style="width: 53%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td colspan="2" style="width: 16%; text-align: center; border: 1px solid black; font-size: 8pt;">Theory</td>
                  <td colspan="2" style="width: 16%; text-align: center; border: 1px solid black; font-size: 8pt;">Practical</td>
              </tr>
              <tr style="height: ${row_height_1};">
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
          <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.subjecttype}</td>
          <td style="width: 53%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">${semes.subjectcode}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other16}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other4}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other17}</td>
          <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">${semes.other5}</td>
          </tr>`;
        }
        if (semesResult.rowCount < 8) space_num = (8 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 53%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "9"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
      <tbody>
        <tr style="height: ${row_height_1};">
            <td rowspan="2" style="width: 12%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">Backlogs</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[1]}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[2]}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[3]}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[4]}</td>
        </tr>
        <tr style="height: ${row_height_1};">
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other16}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other17}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other18}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other19}</td>
        </tr>
        <table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
        <tbody>
          <tr style="height: ${row_height_1};">
              <td style="width: 45%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">MOOC Course Title</td>
              <td style="width: 20%; text-align: center; border: 1px solid black; font-size: 8pt;">Platform</td>
              <td style="width: 35%; text-align: center; border: 1px solid black; font-size: 8pt;">University Name</td>
          </tr>
          <tr style="height: ${row_height_1};">
              <td style="width: 45%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other26}</td>
              <td style="width: 20%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other27}</td>
              <td style="width: 35%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other28}</td>
          </tr>
          <tr style="height: ${row_height_1};">    
              <td style="width: 45%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other30}</td>
              <td style="width: 20%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other31}</td>
              <td style="width: 35%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other32}</td>
          </tr>`;
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 60%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 15%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;
              
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 60%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.credit + `</td>
              <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.grade + `</td>
          </tr>`;
        }
        if (semesResult.rowCount < 8) space_num = (8 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
            <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 60%; text-align: left; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 15%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "10"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `
        <table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
        <tbody>
          <tr style="height: ${row_height_1};">
              <td style="width: 30%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">*MOOC Course Completed</td>
              <td style="width: 18%; text-align: center; border: 1px solid black; font-size: 8pt;">Credits Earned</td>
              <td style="width: 30%; text-align: center; border: 1px solid black; font-size: 8pt;">Cumulative Course Completed</td>
              <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Cumulative Credits</td>
          </tr>
          <tr style="height: ${row_height_1};">
              <td style="width: 30%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other34}</td>
              <td style="width: 18%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other35}</td>
              <td style="width: 30%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other36}</td>
              <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 7pt;">${descResult.rows[0].other37}</td>
          </tr>`;
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];

        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 48%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 7%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">CEC</td>
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Uni.Exam.</td>
                  <td style="width: 10%; text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;
        
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 48%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.credit + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other1 + `/` + semes.other21 + `</td>
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other2 + `/` + semes.other22 + `</td>
              <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other3 + `/` + semes.other23 + `</td>
              <td style="width: 8%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 20px;">` + semes.grade + `</td>
          </tr>`;
        }
        if (semesResult.rowCount < 8) space_num = (8 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 48%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 10%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
        stringcontents = stringcontents.replace("ROW_HEIGHT_ONE", `style=\\"height: ${row_height};\\"`);
      }
    }
    else if (template_num == "11"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      semes_sub_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
      <tbody>
        <tr style="height: ${row_height_1};">
            <td rowspan="2" style="width: 12%; text-align: center; border: 1px solid black; vertical-align: middle; font-size: 8pt;">Backlogs</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[1]}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[2]}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[3]}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">Sem ${roman_list[4]}</td>
        </tr>
        <tr style="height: ${row_height_1};">
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other16}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other17}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other18}</td>
            <td style="width: 22%; text-align: center; border: 1px solid black; font-size: 8pt;">${descResult.rows[0].other19}</td>
        </tr>
        `;
      if(descResult.rowCount > 0){
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td rowspan="2" style="width: 12%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td rowspan="2" style="width: 56%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td rowspan="2" style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Credit</td>
                  <td colspan="3" style="width: 24%; text-align: center; border: 1px solid black; font-size: 8pt;">GRADE</td>
              </tr>
              <tr style="height: ${row_height_1};">
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">CEC</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">SEE</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Overall</td>
              </tr>`;
              
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 12%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 54%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other7 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other1 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other18 + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other6 + `</td>
          </tr>`;
        }
        if (semesResult.rowCount < 8) space_num = (8 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
            <td style="width: 12%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 56%; text-align: left; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
            <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>` + semes_sub_content;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    else if (template_num == "12"){
      let row_height = '30px';
      let row_height_1 = '20px';
      if(semesResult.rowCount > 10){
        if(semesResult.rowCount > 20) {
          if (semesResult.rowCount > 30) {
            row_height = '9px';
            row_height_1 = '11px';
          }
          else {
            row_height = '11px';
            row_height_1 ='13px';
          }
        }
        else {
          row_height = '17px';
          row_height_1 = '19px';
        }
      }
      if(descResult.rowCount > 0){        
        let uni_sum = 0;
        let uni_total = 0;
        let theory_sum = 0;
        let theory_total = 0;
        let practical_sum = 0;
        let practical_total = 0;        
        let total_sum = 0;
        let total_total = 0;
        semester_num = semesResult.rows[0].semesternumber;
        if (!isNaN(parseInt(semester_num))) semester_num = roman_list[parseInt(semester_num)];        
        
        let semester_content = `<table style=" width: 85%; margin-top: 5px; border: 1px solid black; border-collapse: collapse">
          <tbody>
              <tr style="height: ${row_height_1};">
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Code</td>
                  <td style="width: 43%; text-align: center; border: 1px solid black; font-size: 8pt;">Course Title</td>
                  <td style="width: 6%; text-align: center; border: 1px solid black; font-size: 8pt;">Credit</td>
                  <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">Uni.Exam.</td>
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Internal Theory</td>
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Internal Practical</td>
                  <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
                  <td style="width: 7%; text-align: center; border: 1px solid black; font-size: 8pt;">Grade</td>
              </tr>`;              
        for(const semes of semesResult.rows){
          semester_content += `<tr style="height: ${row_height};">
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.subjecttype + `</td>
              <td style="width: 43%; text-align: left; border-right: 1px solid black; font-size: 8pt; padding-left: 5px;">` + semes.subjectcode + `</td>
              <td style="width: 6%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.credit + `</td>
              <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other2 + `</td>
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other19 + `</td>
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other20 + `</td>
              <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.other3 + `</td>
              <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;">` + semes.grade + `</td>
          </tr>`;          
          if (semes.other2.split("/").length > 1){
            uni_sum += parseInt(semes.other2.split("/")[0]);
            uni_total += parseInt(semes.other2.split("/")[1]);
          }          
          if (semes.other3.split("/").length > 1){
            total_sum += parseInt(semes.other3.split("/")[0]);
            total_total += parseInt(semes.other3.split("/")[1]);
          }
          if (semes.other19.split("/").length > 1){
            theory_sum += parseInt(semes.other19.split("/")[0]);
            theory_total += parseInt(semes.other19.split("/")[1]);
          }
          if (semes.other20.split("/").length > 1){
            practical_sum += parseInt(semes.other20.split("/")[0]);
            practical_total += parseInt(semes.other20.split("/")[1]);
          }
        }
        if (semesResult.rowCount < 10) space_num = (10 - semesResult.rowCount) * 25;
        semester_content += `<tr style="height: ${space_num}px;">
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 43%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 6%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 8%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 9%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        <td style="width: 7%; text-align: center; border-right: 1px solid black; font-size: 8pt;"></td>
        </tr>
        <tr style="height: ${row_height_1};">
        <td colspan="3" style="text-align: center; border: 1px solid black; font-size: 8pt;">Total</td>
        <td style="width: 8%; text-align: center; border: 1px solid black; font-size: 8pt;">${uni_sum}/${uni_total}</td>
        <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${theory_sum}/${theory_total}</td>
        <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${practical_sum}/${practical_total}</td>
        <td style="width: 9%; text-align: center; border: 1px solid black; font-size: 8pt;">${total_sum}/${total_total}</td>
        <td style="width: 7%; text-align: center; border: 1px solid black; font-size: 8pt;"></td>
        </tr></tbody></table>`;
        stringcontents = stringcontents.replace("DESCRIBE_BLOCK", semester_content.replace(/"/g,'\\"'));
      }
    }
    // stringcontents = stringcontents.replace("SEAT_NUM", other1);
    stringcontents = stringcontents.replace("OLD_ENROLL_NO", other2);
    // // stringcontents = stringcontents.replace("STATEMENT_NUM", other3);
    // stringcontents = stringcontents.replace("EXAM_PERIOD", other4);
    stringcontents = stringcontents.replace("DATE_OF_ISSUE", dateofissue);
    stringcontents = stringcontents.replace("MEDIUM_OF_INSTRUCTION", other6);
    stringcontents = stringcontents.replace("COMPETENCY_NAME", competency_name);
    stringcontents = stringcontents.replace("SEMESTER_NUM", semester_num);
    stringcontents = stringcontents.replace("ENROLL_NO", rollnumber);
    stringcontents = stringcontents.replace("STD_NAME", fullname);
    // stringcontents = stringcontents.replace("", );
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
  return stringcontents;
}

async function template_replace_125(stringcontents, studentid, rollnumber, serialnumber, fullname, fathername, competency_name, coursename, facultyname, convocation_date, aadhaarnumber, other1, other2, other3){
  var COMPETENCY_REPLACE_LIST = {
    "मास्टर ऑफ बिजनेस एडमिनिस्ट्रेशन": "ekLVj vkWQ fctusl ,MfefuLVªs'ku",
    "मास्टर ऑफ कम्प्यूटर एप्लीकेशन्स्": "ekLVj vkWQ dEI;wVj ,IyhdsÓUl~"
  }
  var COURSE_REPLACE_LIST = {
      "कम्प्यूटर एप्लीकेशन्स्": "dEI;wVj ,IyhdsÓUl~"
  }
  try {
    // var maincontents = JSON.parse(stringcontents);
    // stringcontents = maincontents.displayHtml;

    let getStudentQuery = format(`select * from student_language where studentid='${studentid}'`);
    //console.log(getStudentQuery);
    let students = await pool.query(getStudentQuery);
    if (students.rowCount > 0) {
      let h_firstname = students.rows[0].firstname;
      if (h_firstname == undefined || h_firstname == null) h_firstname = "";
      //else h_firstname = Convert_to_Kritidev(h_firstname);

      let h_middlename = students.rows[0].middlename;
      if (h_middlename == undefined || h_middlename == null) h_middlename = "";
      //else h_middlename = Convert_to_Kritidev(h_middlename);

      let h_lastname = students.rows[0].lastname;
      if (h_lastname == undefined || h_lastname == null) h_lastname = "";
      //else h_lastname = Convert_to_Kritidev(h_lastname);

      let h_fathername = students.rows[0].fathername;
      if (h_fathername == null || h_fathername == undefined) h_fathername = "";
      //else h_fathername = Convert_to_Kritidev(h_fathername);    
      
      let h_coursename = students.rows[0].coursename;
      if (h_coursename == null || h_coursename == undefined) h_coursename = "";
      else {
          if(h_coursename in COURSE_REPLACE_LIST) h_coursename = COURSE_REPLACE_LIST[h_coursename];
          else{
              h_coursename = Convert_to_Kritidev(h_coursename);
              h_coursename = h_coursename.replace(/‚/g, "kW");
          }          
      }
      
      let h_competencyname = students.rows[0].competencyname;
      if (h_competencyname == undefined || h_competencyname == null) h_competencyname = "";
      else {
        if(h_competencyname in COMPETENCY_REPLACE_LIST) h_competencyname = COMPETENCY_REPLACE_LIST[h_competencyname];
        else {
          h_competencyname = Convert_to_Kritidev(h_competencyname);
          h_competencyname = h_competencyname.replace(/‚/g, "kW");
        }
      }

      let h_facultyname = students.rows[0].facultyname;
      if (h_facultyname == undefined || h_facultyname == null) h_facultyname = "";
      else {
        if(h_facultyname in COMPETENCY_REPLACE_LIST) h_facultyname = COMPETENCY_REPLACE_LIST[h_facultyname];
        else {
          h_facultyname = Convert_to_Kritidev(h_facultyname);
          h_facultyname = h_facultyname.replace(/‚/g, "kW");
        }
      }

      let h_convocation_date = students.rows[0].other1;
      if (h_convocation_date == undefined || h_convocation_date == null) h_convocation_date = "";
      else {
        if(h_convocation_date.split(",").length > 1){
          h_convocation_date = `<span style=\\"font-weight: bold\\">` + Convert_to_Kritidev(h_convocation_date.split(",")[0]).replace(/‚/g, "kW") + `<span style=\\"font-family: clibri\\">,${h_convocation_date.split(",")[1]}</span></span>`;
          h_convocation_date += Convert_to_Kritidev("में आयोजित तत्सम्बन्धी परीक्षा उत्तीर्ण के लेने के उपरान्त")
        }
      }

      let h_class = students.rows[0].other2;
      if (h_class == undefined || h_class == null) h_class = "";
      else {
        h_class = Convert_to_Kritidev(h_class);
        h_class = h_class.replace(/‚/g, "kW");
      }

      // let h_completiondate = students.rows[0].completiondate;
      // if (h_completiondate == undefined || h_completiondate == null) h_completiondate = "";
      // else {
      //   h_completiondate = template86_format_date(h_completiondate);
      // }

      let h_fullname = "";
      if (h_middlename == null || h_middlename == "") {
        h_fullname = h_firstname + " " + h_lastname;
      }
      else {
        h_fullname = h_firstname + " " + h_middlename + " " + h_lastname;
      }
      // h_iits = Convert_to_Kritidev("(संरक्षक संस्थानः राष्ट्रीय प्रौद्योगिकी संस्थान, कुरुक्षेत्र)");
      // h_mba_course_sub = `fo'ks"kKrk çkIr dj lQyrkiwoZd ikB~‌;Øe iw.kZ fd;kA`;
      // h_phd_father_sub = `ftlds 'kks/k fo"k; dk 'kh"kZd`;
      // fullname = template86_format_name(fullname);
      // fathername = template86_format_name(fathername);
      
      // completiondate = nitkkr_date_format(completiondate);
      let qr_data = await QR_Generate(`Roll No. ${serialnumber} University ID. ${rollnumber}`, 300);
      let bar_data = await Barcode_Generate(fullname, 1, 30);
      stringcontents = stringcontents.replace(/QRCODE_CONTENT/g, qr_data);
      stringcontents = stringcontents.replace(/BARCODE_CONTENT/g, bar_data);

      stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
      stringcontents = stringcontents.replace(/HINDI_COURSE_NAME/g, h_coursename);
      stringcontents = stringcontents.replace(/HINDI_STUDENT_NAME/g, h_fullname);
      stringcontents = stringcontents.replace(/HINDI_FATHER_NAME/g, h_fathername);
      stringcontents = stringcontents.replace(/HINDI_FACULTY_NAME/g, h_facultyname);
      stringcontents = stringcontents.replace(/HINDI_CONVOCATION_DATE/g, h_convocation_date);
      stringcontents = stringcontents.replace(/HINDI_CLASS/g, h_class);
      // stringcontents = stringcontents.replace(/HINDI_COURSE_NAME_MBA/g, h_coursename_mba);
      
      stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);
      stringcontents = stringcontents.replace(/STD_ID/g, rollnumber);
      stringcontents = stringcontents.replace(/AADHAAR_NO/g, aadhaarnumber);
      stringcontents = stringcontents.replace(/COURSE_NAME/g, coursename);
      stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
      stringcontents = stringcontents.replace(/STUDENT_NAME/g, fullname);
      stringcontents = stringcontents.replace(/FATHER_NAME/g, fathername);
      stringcontents = stringcontents.replace(/FACULTY_NAME/g, facultyname);
      stringcontents = stringcontents.replace(/CONVOCATION_DATE/g, convocation_date);
      stringcontents = stringcontents.replace(/EARNED_SCORE/g, other3);
      stringcontents = stringcontents.replace(/TOTAL_SCORE/g, other2);
      stringcontents = stringcontents.replace(/CLASS_CLASS/g, other1);
      // stringcontents = stringcontents.replace(/HINDI_COMPETENCY_NAME/g, h_competencyname);
    }

    // maincontents.displayHtml = encodeURIComponent(stringcontents);
    // return JSON.stringify(maincontents);
    return stringcontents;
  }
  catch (err) {
    console.log(err);
  }
}

async function template_replace_126(stringcontents, cohortid, rollnumber) {
  try{
    if (!await fs.existsSync(MANAV_IMAGE_PATH + `/${cohortid}`)) {
      var os = new os_func();
      await os.execCommand('sudo mkdir -p "' + MANAV_IMAGE_PATH + `/${cohortid}` + '"');
      await os.execCommand('sudo chmod -R 777 "'+  MANAV_IMAGE_PATH + `/${cohortid}` + '"');
    }
    let frontimgdata = await fs.readFileSync(`${MANAV_IMAGE_PATH}/${cohortid}/${rollnumber.replace(/\//g, "-")}_1.png`, {encoding: 'base64'});
    let backimgdata = await fs.readFileSync(`${MANAV_IMAGE_PATH}/${cohortid}/${rollnumber.replace(/\//g, "-")}_2.png`, {encoding: 'base64'});
    stringcontents = stringcontents.replace(/FRONT_IMAGE/g, frontimgdata);
    stringcontents = stringcontents.replace(/BACK_IMAGE/g, backimgdata);
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_7(stringcontents, fullname){
  try{
    fullname = fullname.toString().replace("Ms.", "").replace("Mr.", "").trim();
    stringcontents = stringcontents.replace("STD_NAME", fullname);
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_129(stringcontents, fullname){
  try{
    fullname = convert_titlecase(fullname);
    stringcontents = stringcontents.replace("STD_NAME", fullname);
    stringcontents = stringcontents.replace("335px", "345px");
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_130(stringcontents, fullname, certificationcategory, competency_name, coursename, rollnumber, serialnumber, coursecompletiondate, department, student){
  try{
    let main_content = "";
    if (certificationcategory.toString().toLowerCase().trim() == "degree"){
      if (coursename == ""){
        main_content = `
        <table style="width: 95%; margin-top: 355px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">having fulfilled the academic requirements successfully</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">during the academic year ${student.subother1}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">has this day been admitted by the</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">Governing Body</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">to the Degree of</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${competency_name}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">Given under the seal of the University</td>
            </tr>
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; margin-top: 177px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      else {
        main_content = `
        <table style="width: 95%; margin-top: 355px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">having fulfilled the academic requirements successfully</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">during the academic year ${student.subother1}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">has this day been admitted by the</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">Governing Body</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">to the Degree of</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${competency_name}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 16pt; font-family: cambria;">in</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${coursename}</td>
            </tr>
            <tr style="line-height: 45px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">Given under the seal of the University</td>
            </tr>
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; margin-top: 77px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }     
      stringcontents = stringcontents.replace("REPLACE_SUB_1", "Reg. No. ");
      stringcontents = stringcontents.replace("REPLACE_SUB_2", "Sl. No. ");
      stringcontents = stringcontents.replace("MAIN_CONTENT", main_content.replace(/"/g,'\\"'));
    }    
    else if (certificationcategory.toString().toLowerCase().trim() == "phd"){
      let sub_date = coursecompletiondate.split(" ");
      main_content = `
      <table style="width: 95%; margin-top: 355px;">
        <tbody>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">This is certify that</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">was admitted to the Degree of</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">Doctor</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">of</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">Philosophy</td>
          </tr>
          <tr style="line-height: 55px;">
          <td style="text-align: center; font-size: 15pt; font-family: cambria;">on the ${coursecompletiondate}</td>
          </tr>
        </tbody>
      </table>
      <table style="width: 100%; height: 80px; margin-top: 137px;">
        <tbody>
          <tr>
            PRINT_CODE
          </tr>
        </tbody>
      </table>
      `;
      stringcontents = stringcontents.replace("REPLACE_SUB_1", "Reg. No. ");
      stringcontents = stringcontents.replace("REPLACE_SUB_2", "Sl. No. ");
      stringcontents = stringcontents.replace("MAIN_CONTENT", main_content.replace(/"/g,'\\"'));  
    }
    else if (certificationcategory.toString().toLowerCase().trim() == "gold"){
      if (coursename == ""){
        main_content = `
        <table style="width: 95%; margin-top: 325px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 36pt; font-family: vivaldi; padding-top: 22px;">Certificate of Academic Achievement</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 22pt; font-family: cambria; font-weight: bold;padding-top: 22px;">${fullname.toString().toUpperCase().trim()}</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">of</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">${competency_name}</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">has been awarded</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px; font-weight: bold;">Gold Medal</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">for securing highest ${department.toString().toUpperCase()} during the academic year</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">${student.subother1}</td>
            </tr>            
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; position: absolute; top: 900px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      else {
        main_content = `
        <table style="width: 95%; margin-top: 325px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 36pt; font-family: vivaldi; padding-top: 22px;">Certificate of Academic Achievement</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 22pt; font-family: cambria; font-weight: bold;padding-top: 22px;">${fullname.toString().toUpperCase().trim()}</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">of</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">${competency_name} in ${coursename}</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">has been awarded</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px; font-weight: bold;">Gold Medal</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">for securing highest ${department.toString().toUpperCase()} during the academic year</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">${student.subother1}</td>
            </tr>            
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; position: absolute; top: 900px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      stringcontents = stringcontents.replace(/template130e/g, "template130goldmerit");
      stringcontents = stringcontents.replace("REPLACE_SUB_1", "");
      stringcontents = stringcontents.replace("REPLACE_SUB_2", "");
      stringcontents = stringcontents.replace("STD_ID", "");
      stringcontents = stringcontents.replace("SERIAL_NO", "");  
      stringcontents = stringcontents.replace("MAIN_CONTENT", main_content.replace(/"/g,'\\"'));
      stringcontents = stringcontents.replace("1010px", "1035px");
    }
    else if (certificationcategory.toString().toLowerCase().trim() == "merit"){
      if (coursename == ""){
        main_content = `
        <table style="width: 95%; margin-top: 325px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 36pt; font-family: vivaldi;">Merit Certificate</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">is presented to</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 22pt; font-family: cambria; font-weight: bold;padding-top: 22px;">${fullname.toString().toUpperCase().trim()}</td>
            </tr>            
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">for securing highest ${department.toString().toUpperCase()} in ${competency_name}</td>
            </tr>            
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">during the academic year</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">${student.subother1}</td>
            </tr>            
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; position: absolute; top: 900px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      else {
        main_content = `
        <table style="width: 95%; margin-top: 325px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 36pt; font-family: vivaldi;">Merit Certificate</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">is presented to</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 22pt; font-family: cambria; font-weight: bold;padding-top: 22px;">${fullname.toString().toUpperCase().trim()}</td>
            </tr>            
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">for securing highest ${department.toString().toUpperCase()} in ${competency_name}</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria; font-weight: bold;padding-top: 22px;">in</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px; font-weight: bold;">${coursename}</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">during the academic year</td>
            </tr>
            <tr>
              <td style="text-align: center; font-size: 20pt; font-family: cambria;padding-top: 22px;">${student.subother1}</td>
            </tr>            
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; position: absolute; top: 900px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      stringcontents = stringcontents.replace(/template130e/g, "template130goldmerit");
      stringcontents = stringcontents.replace("REPLACE_SUB_1", "");
      stringcontents = stringcontents.replace("REPLACE_SUB_2", "");
      stringcontents = stringcontents.replace("STD_ID", "");
      stringcontents = stringcontents.replace("SERIAL_NO", ""); 
      stringcontents = stringcontents.replace("MAIN_CONTENT", main_content.replace(/"/g,'\\"'));
      stringcontents = stringcontents.replace("1010px", "1035px");
    }
    else{
      return stringcontents;
    }
    stringcontents = stringcontents.replace("STD_ID", rollnumber);
    stringcontents = stringcontents.replace("SERIAL_NO", serialnumber);
    stringcontents = stringcontents.replace("COMPLETION_DATE", coursecompletiondate);
    // stringcontents = stringcontents.replace("TEMPLATE_130_BACKGROUND", "https://www.certonce.com/images/CUTM/template130background.png");
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_131(stringcontents, puserid, cohortid, main_std_id, fullname, competencyname, rollnumber, aadhaarnumber, student){
  try{
    let portrait_list = [
      'bachelor of fisheries science',
      'b.sc.(hons) agriculture',
      'm.sc. (agri.)',
      'm.sc. (hort.)'
    ];    
    let roman_list = ['', 'I', 'II', 'III', 'IV'];
    let aadhaar_content = "";
    if (aadhaarnumber != "") aadhaar_content=`Aadhaar No.: &nbsp;&nbsp;${aadhaarnumber}`;
    if (portrait_list.indexOf(competencyname.toString().trim().toLowerCase()) !== -1){
      let sub_content = {};
      let font_size_1 = '9pt';
      let font_size_2 = '8pt';
      let font_size_3 = '6pt';
      let font_size_4 = '7pt';
      let font_size_5 = '10pt';
      // let top_content = "";
      let content1 = "";
      let content2 = "";
      
      // let bottom_content = "";
      if (portrait_list.indexOf(competencyname.toString().trim().toLowerCase()) < 2){
        let replace_text = "";
        if (competencyname.toString().trim().toLowerCase() == "bachelor of fisheries science") replace_text = "SUB_REPLACE_PART_2";
        else if (competencyname.toString().trim().toLowerCase() == "b.sc.(hons) agriculture") replace_text = "SUB_REPLACE_PART_2";
        else if (competencyname.toString().trim().toLowerCase() == "m.sc. (agri.)") replace_text = "SUB_REPLACE_PART_3";
        else if (competencyname.toString().trim().toLowerCase() == "m.sc. (hort.)") replace_text = "SUB_REPLACE_PART_3";
        for (let index = 1; index < 9; index++){
          let semester_title = "";
          if (index == 1) semester_title = "1st";
          else if (index == 2) semester_title = "2nd";
          else if (index == 3) semester_title = "3rd";
          else semester_title = `${index.toString()}th`;
          let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${index.toString()}';`);
          let descResult = await pool.query(descQuery);
          let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${index.toString()}' order by subjecttype;`);
          let semesResult = await pool.query(semesQuery);
          let tempcontent = "";
          semesResult.rows.forEach(element => {
            tempcontent += `<tr style="line-height: 11px;">
            <td style="width: 5%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.other1}</td>
            <td style="width: 12%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.subjecttype}</td>
            <td style="width: 54%; font-size: ${font_size_3}; text-align: left; font-family: arial; vertical-align: top;">${element.subjectcode}</td>
            <td style="width: 4%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.other3}</td>
            <td style="width: 4%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.other4}</td>
            <td style="width: 4%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.other5}</td>
            <td style="width: 5%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.credit}</td>
            <td style="width: 12%; font-size: ${font_size_3}; text-align: center; font-family: arial; vertical-align: top;">${element.grade}</td>
            </tr>`
          })
          tempcontent = `<hr style="width: 86%;"><p style="width: 86%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Semester: &nbsp;&nbsp; ${semester_title}</p><hr style="width: 86%;">
          <table style="width: 86%;"><tbody>
          <tr style="line-height: 13px;">
            <td style="width: 5%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">Sl.No.</td>
            <td style="width: 12%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">Subject Code</td>
            <td style="width: 54%; font-size: ${font_size_2}; text-align: left; font-family: kartikab;">Subject Name</td>
            <td style="width: 4%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">TH</td>
            <td style="width: 4%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">PR</td>
            <td style="width: 4%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">PJ</td>
            <td style="width: 5%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">Credit</td>
            <td style="width: 12%; font-size: ${font_size_2}; text-align: center; font-family: kartikab;">Grade Point</td>
            </tr>
          ${tempcontent}
          <tr>
          <td style="width: 5%;"></td>
          <td style="width: 12%;"></td>
          <td style="width: 54%;"></td>
          <td colspan="3" style="width: 12%; text-align: right; font-size: ${font_size_4}; padding-right: 8px; font-family: kartikab;">Total Credit: </td>
          <td style="width: 5%; text-align: center; font-size: ${font_size_4}; font-family: kartikab;">${descResult.rows[0].other1}</td>
          <td style="width: 12%; text-align: right; font-size: ${font_size_4}; font-family: kartikab;">GPA: ${descResult.rows[0].other4}</td>
          </tr>
          <tr>
          <td style="width: 5%;"></td>
          <td style="width: 12%;"></td>
          <td style="width: 54%;"></td>
          <td colspan="3" style="width: 12%; text-align: right; font-size: ${font_size_3};"></td>
          <td style="width: 5%; text-align: center; font-size: ${font_size_3};"></td>
          <td style="width: 12%; text-align: right; font-size: ${font_size_4};font-family: kartikab;">OGPA: ${descResult.rows[0].other5}</td>
          </tr>
          </tbody></table>`;        
          sub_content[index.toString()] = tempcontent;      
        }        
        content1 = `<div style="background-image: url('https://www.certonce.com/images/CUTM/template131background21.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 297mm;">    
        <table style="width: 86%;"><tbody>
          <tr>
          <td style="width: 100%; text-align: right;">
          MEMBER_PHOTO
          </td>
          </tr>
          </tbody></table>
          <table style="width: 86%; margin-top: PORTRAIT_FIRST_LINE_HEIGHT;"><tbody>
          <tr>
          <td style="width: 70%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}&nbsp;&nbsp; Name: &nbsp;&nbsp; ${fullname}</td>        
          <td style="width: 30%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
          </tr>
          <tr>
          <td colspan="2" style="width: 40%; text-align: left; font-size: ${font_size_1}; font-family: kartikab; letter-spacing: -0.4px;">${student.subother3}&nbsp;&nbsp; Programme: &nbsp;&nbsp;${competencyname}&nbsp;&nbsp; Batch: ${student.subother2}</td>
          </tr>
          </tbody></table>        
          ${sub_content['1']}
          ${sub_content['2']}
          ${sub_content['3']}
          ${sub_content['4']}
          </div>`;
  
        content2 = `<div style="position: absolute; top: 1135px; background-image: url('https://www.certonce.com/images/CUTM/template131background22.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 293mm;">    
        <div style="width: 86%; height: 50px;"></div>
        ${sub_content['5']}
        ${sub_content['6']}
        ${sub_content['7']}
        ${sub_content['8']}
        <table style="width: 86%; margin-top: 7px;"><tbody>
        <tr>
        <td style="width: 61%;"></td>
        <td style="width: 12%; text-align: right; font-size: ${font_size_4}; font-family: kartikab;">CLASS:</td>
        <td style="width: 5%; text-align: center; font-size: ${font_size_4}; font-family: kartikab;"></td>
        <td style="width: 12%; text-align: right; font-size: ${font_size_4}; font-family: kartikab;">${student.subother5}</td>
        </tr>
        </tbody>
        </table>
        <p style="text-align: left; font-size: ${font_size_1}; font-family: arial; margin-left: 60px; font-weight: bold;">Culture, Sports & Responsibility</p>
        <p style="text-align: left; font-size: ${font_size_2}; font-family: kartikab; margin-left: 80px;">${student.subother6} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${student.subother7}&nbsp;&nbsp;&nbsp; ${student.subother8} (${student.subother9}) : ${student.subother10}</p>        
    
        ${replace_text}
        `;
      }
      else {
        for (let index = 1; index < 5; index++){
          // let semester_title = "";
          // if (index == 1) semester_title = "1st";
          // else if (index == 2) semester_title = "2nd";
          // else if (index == 3) semester_title = "3rd";
          // else semester_title = `${index.toString()}th`;          
          let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${roman_list[index]}';`);
          let descResult = await pool.query(descQuery);
          let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${roman_list[index]}' order by case when other2='MAJOR' then 1 when other2='SUPP' then 2 when other2='NC' then 3 else 4 end, subjecttype;`);
          let semesResult = await pool.query(semesQuery);
          let tempcontent1 = "";
          let tempcontent2 = "";
          semesResult.rows.forEach(element => {
            tempcontent1 += `<tr style="line-height: 23pt;">
            <td style="width: 7%; font-size: ${font_size_2}; text-align: center; font-family: kartikab; vertical-align: top;">${element.other2.toString().toUpperCase()}</td>
            <td style="width: 9%; font-size: ${font_size_2}; text-align: center; font-family: kartikab; vertical-align: top;">${element.subjecttype}</td>
            <td style="width: 63%; font-size: ${font_size_2}; text-align: left; font-family: kartikab; vertical-align: top;">${element.subjectcode.toString().toUpperCase()}</td>
            <td style="width: 6%; font-size: ${font_size_2}; text-align: center; font-family: kartikab; vertical-align: top;">${element.credit}</td>
            <td style="width: 11%; font-size: ${font_size_2}; text-align: center; font-family: kartikab; vertical-align: top;">${element.grade}</td>
            </tr>`
          });
          if (descResult.rows[0].other2 == "" || descResult.rows[0].other2 == null || descResult.rows[0].other2 == undefined){
            tempcontent2 = `<tr style="line-height: 25pt; vertical-align: middle;">
            <td style="width: 7%; border-top: 1px solid black; border-bottom: 1px solid black; font-family: kartikab; font-size: ${font_size_2};"><p style="text-align: center;">Total</p></td>
            <td style="width: 9%; border-top: 1px solid black; border-bottom: 1px solid black;"></td>
            <td style="width: 63%; border-top: 1px solid black; border-bottom: 1px solid black;"></td>
            <td style="width: 6%; text-align: center; font-size: ${font_size_2}; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;"><p style="text-align: center;">${descResult.rows[0].other1}</p></td>
            <td style="width: 11%; text-align: right; font-size: ${font_size_2}; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;"><p style="text-align: center;">GPA: ${descResult.rows[0].other4}</p></td>
            </tr>`
          }
          else {
            tempcontent2 =`<tr style="line-height: 15pt; vertical-align: middle;">
            <td style="width: 7%; border-top: 1px solid black; border-bottom: 1px solid black; font-family: kartikab; font-size: ${font_size_2};"><p style="text-align: center;">Total</p><p style="text-align: center;">Cumulative</p></td>
            <td style="width: 9%; border-top: 1px solid black; border-bottom: 1px solid black;"></td>
            <td style="width: 63%; border-top: 1px solid black; border-bottom: 1px solid black;"></td>
            <td style="width: 6%; text-align: center; font-size: ${font_size_2}; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;"><p style="text-align: center;">${descResult.rows[0].other1}</p><p style="text-align: center;">${descResult.rows[0].other2}</p></td>
            <td style="width: 11%; text-align: right; font-size: ${font_size_2}; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;"><p style="text-align: center;">GPA: ${descResult.rows[0].other4}</p><p style="text-align: center;">OGPA: ${descResult.rows[0].other5}</p></td>
            </tr>`;
          }  
          tempcontent1 = `<p style="width: 86%; text-align: center; font-size: ${font_size_5}; font-family: kartikab; margin-top: 10px; margin-bottom: 5px;">${descResult.rows[0].semesternumber} - SEMESTER, ${descResult.rows[0].other6}</p>
          <table style="width: 86%; border-collapse: collapse;"><tbody>
          <tr style="line-height: 15pt;">
            <td style="width: 7%; font-size: ${font_size_1}; text-align: center; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;">Course Type</td>
            <td style="width: 9%; font-size: ${font_size_1}; text-align: center; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;">Course Code</td>
            <td style="width: 63%; font-size: ${font_size_1}; text-align: left; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;">Course Name</td>
            <td style="width: 6%; font-size: ${font_size_1}; text-align: center; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;">Credit Hours</td>
            <td style="width: 11%; font-size: ${font_size_1}; text-align: center; font-family: kartikab; border-top: 1px solid black; border-bottom: 1px solid black;">Grade Point</td>
          </tr>
          ${tempcontent1}
          ${tempcontent2}
          </tbody></table>`;
          sub_content[index.toString()] = tempcontent1;               
        }
        content1 = `
        <div style="background-image: url('https://www.certonce.com/images/CUTM/template131background21.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 293mm;">    
        <table style="width: 86%;"><tbody>
          <tr>
          <td id="replace_element" style="width: 100%; text-align: right;">
          MEMBER_PHOTO
          </td>
          </tr>
          </tbody></table>
          <table style="width: 86%; margin-top: PORTRAIT_FIRST_LINE_HEIGHT;"><tbody>
          <tr>
          <td style="width: 25%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}</td>
          <td style="width: 40%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Name: &nbsp;&nbsp; ${fullname.toString().toUpperCase()}</td>
          <td style="width: 35%; text-align: right; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
          </tr>
          <tr>
          <td colspan="3" style="width: 40%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${student.subother3} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Batch: ${student.subother2}</td>
          </tr>
          <tr>
          <td colspan="2" style="width: 65%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Programme & Discipline : ${competencyname} in ${student.subother4.toString().toUpperCase()}</td>
          <td style="width: 35%; text-align: center; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Date of Admission: ${student.subother21}</td>
          </tr>
          </tbody></table>
          <p style="font-size: 11pt; text-decoration: underline; font-family: kartikab; margin-top: 10px;">COURSES STUDIED AND GRADE POINTS OBTAINED</p>
          ${sub_content['1']}
          ${sub_content['2']}
        `;    

        content2 = `<div style="position: absolute; top: 1135px; background-image: url('https://www.certonce.com/images/CUTM/template131background22.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 293mm">   
        <p style="margin-top: 15px;">&nbsp;&nbsp;</p>
          ${sub_content['3']}        
          ${sub_content['4']}
          <p style="font-size: ${font_size_1}; text-align: right; padding-right: 70px; font-family: kartikab; margin-top: 7px;">CLASS: ${student.subother5}</P>
          <table style="width: 86%;"><tbody>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Credit Hours Completed : ${student.subother11}</td></tr>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Course Work: ${student.subother12}, Non Credit Courses : ${student.subother13}, Masters Research : ${student.subother14}</td></tr>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Overall Grade Point Average : ${student.subother15}</td></tr>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Equivalent Percentage Marks : ${student.subother16}</td></tr>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Date of Viva Voce &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: ${student.subother17}</td></tr>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Chairman of the Advisory Committee : ${student.subother18}</td></tr>
          <tr><td colspan="2" style="font-size: ${font_size_1}; text-align: left; font-family: kartikab;">Comprehensive Examination Held on : ${student.subother19}</td></tr>
          <tr>
          <td style="width: 20%; font-size: ${font_size_1}; text-align: center; vertical-align: middle; font-family: kartikab;">Title of the Thesis :</td>
          <td style="width: 80%; font-size: ${font_size_1}; text-align: justify; font-family: kartikab;">${student.subother20}</td>
          </tr>
          </tbody></table>
          <p style=""></p>
          SUB_REPLACE_PART_3
          `;
      }        
      
      stringcontents = stringcontents.replace(/template131e/g, "template131e_portrait");
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + content1.replace(/"/g,'\\"') + "</center><center>" + content2.replace(/"/g,'\\"') + '</center>');
      return stringcontents;
    }
    else {
      let sub_content = {};
      let trail_part1 = "";
      let trail_part2 = "";
      let branch_part = "";
      let font_size_1 = '9pt';
      let font_size_2 = '8pt';
      let font_size_3 = '7pt';
      let font_size_4 = '6pt';
      let block_height = '230px';
      let block_height2 = '230px';
      let line_height = "15pt";
      let countQuery = format(`select count(distinct semesternumber) from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}';`);
      let countResult = await pool.query(countQuery);
      
      let semesterCount = countResult.rows[0].count;
      if (semesterCount == 4) block_height = "180px";

      if (competencyname.toString().trim().toLowerCase() == "diploma in pharmacy"){
        let max_row = 0;
        let rowCount = []
        for (let index = 1; index <= semesterCount; index++){
          let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${roman_list[index]}';`);
          let descResult = await pool.query(descQuery);
          let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${roman_list[index]}' order by case when other1='1' then 1 when other1='2' then 2 when other1='3' then 3 when other1='4' then 4 when other1='5' then 5 when other1='6' then 6 when other1='7' then 7 when other1='8' then 8 when other1='9' then 9 when other1='10' then 10 when other1='11' then 11 when other1='12' then 12 when other1='13' then 13 when other1='14' then 14 when other1='15' then 15 else 16 end;`);
          let semesResult = await pool.query(semesQuery);
          let tempcontent = "";
          if (semesResult.rowCount > max_row) max_row = semesResult.rowCount;
          if (semesResult.rowCount > 6) {
            line_height = '9pt';
            // font_size_2 = '7pt';
            font_size_3 = '6pt'; 
          }
          else  line_height = '13pt';
          semesResult.rows.forEach(element => {
            if (element.other8 == "" && element.other9 == "" && element.other10 == ""){
              tempcontent += `<tr style="line-height: ${line_height};">
                <td style="width: 1%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other1}</td>
                <td style="width: 10%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle; padding-left: 2px;">${element.subjecttype}</td>
                <td style="width: 42%; font-size: ${font_size_3}; text-align: left; font-family: arial; border: 1px solid black; vertical-align: middle; padding-left: 2px;">${element.subjectcode}</td>                
                <td style="width: 9%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">Practical</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other11}</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other12}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other13}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other14}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other15}</td>
                </tr>`;
            }
            else if (element.other13 == "" && element.other14 == "" && element.other15 == ""){
              tempcontent += `<tr style="line-height: ${line_height};">
                <td style="width: 1%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other1}</td>
                <td style="width: 10%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle; padding-left: 2px;">${element.subjecttype}</td>
                <td style="width: 42%; font-size: ${font_size_3}; text-align: left; font-family: arial; border: 1px solid black; vertical-align: middle; padding-left: 2px;">${element.subjectcode}</td>                
                <td style="width: 9%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">Theory</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other6}</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other7}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other8}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other9}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">${element.other10}</td>
                </tr>`;
            }
            else {
              tempcontent += `<tr style="line-height: ${line_height};">
                <td rowspan="2" style="width: 1%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other1}</td>
                <td rowspan="2" style="width: 10%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black; padding-left: 2px;">${element.subjecttype}</td>
                <td rowspan="2" style="width: 42%; font-size: ${font_size_3}; text-align: left; font-family: arial; border: 1px solid black; padding-left: 2px;">${element.subjectcode}</td>
                <td style="width: 9%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">Theory</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other6}</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other7}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other8}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other9}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other10}</td>
                </tr>
                <tr style="line-height: ${line_height};">
                <td style="width: 9%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">Practical</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other11}</td>
                <td style="width: 7%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other12}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other13}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other14}</td>
                <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: arial; border: 1px solid black;">${element.other15}</td>
                </tr>`;
            }            
          })
          rowCount.push(semesResult.rowCount);
          if (semesResult.rowcount > max_row) max_row = semesResult.rowCount;
          let distinct_content = "";
          if (descResult.rows[0].other10 != null && descResult.rows[0].other10 != ""){            
            let distinct_list = JSON.parse(descResult.rows[0].other10);            
              Object.keys(distinct_list).forEach(key =>{
                distinct_content += `<tr style="line-height: 8pt;">
                <td style="width: 13%; text-align: center; font-family: arial; font-size: ${font_size_4};">${key}</td>
                <td style="width: 87%; text-align: left; font-family: arial; font-size: ${font_size_4};">${distinct_list[key]}</td></tr>`;
              })
              distinct_content =`<tr style="line-height: 15pt;">
              <td style="width: 13%; text-align: right; font-weight: bold; font-family: arial; font-size: ${font_size_3};">DISTINCTION</td>
              <td style="width: 87%; text-align: left"></td></tr>` + distinct_content;
          }
                 

          tempcontent = `<table style="width: 90%;"><tbody>
          <tr>
            <td style="vertical-align: top;">
              <table style="width: 100%; border-collapse: collapse; height: 300px"><tbody>
                <tr style="line-height: ${line_height};">
                <td colspan="9" style="font-size: ${font_size_2};  text-align: center; font-family: arial; font-weight: bold;">PART - ${descResult.rows[0].semesternumber}</td>
                </tr>
                <tr style="ling-height: ${line_height};">
                  <td rowspan="2" style="width: 1%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Sl. No.</td>
                  <td rowspan="2" style="width: 10%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Subject Code</td>
                  <td rowspan="2" style="width: 42%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Subject Name</td>
                  <td rowspan="2" style="width: 9%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Subject Type</td>
                  <td rowspan="2" style="width: 7%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Full Marks</td>
                  <td rowspan="2" style="width: 7%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Pass Marks</td>
                  <td colspan="3" style="width: 24%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Marks Obtained</td>
                  </tr>
                  <tr>
                  <td style="width: 8%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Exam Marks</td>
                  <td style="width: 8%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Sessional Marks</td>
                  <td style="width: 8%; font-size: ${font_size_3}; text-align: center; border: 1px solid black; font-family: arial; vertical-align: middle; padding: 0px 2px; font-weight: bold;">Total Marks</td>
                  </tr>
                ${tempcontent}
                BLANK_CONTENT
                <tr style="line-height: ;">
                <td colspan="7" style="width: 82%; font-size: ${font_size_2}; text-align: center; border: 1px solid black; font-family: arial;"><span style="font-family: arial; font-weight: bold;">TOTAL MARKS : </span>${descResult.rows[0].other7}</td>
                <td style="width: 8%; font-size: ${font_size_2}; text-align: center; border: 1px solid black; font-family: arial; font-weight: bold;">Total</td>
                <td style="width: 8%; font-size: ${font_size_2}; text-align: center; border: 1px solid black; font-family: arial; font-weight: bold;">${descResult.rows[0].other8}</td>
                </tr>
              </tbody></table>
            </td>
          </tr>
          <tr>
            <td style="vertical-align: top;">              
              <table style="width: 100%; border-collapse: collapse;"><tbody>
              <tr>
              <td colspan="2"><p style="font-size: ${font_size_2}; text-align: left; padding-left: 25px; font-family: arial; margin-top: 5px;"><span style="font-weight: bold;">Result</span>: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${descResult.rows[0].other9}</p></td>
              </tr>
              ${distinct_content}
              </tbody></table>
            </td>
          </tr>
          </tbody></table>
          `;
          sub_content[index.toString()] = tempcontent;          
        }
        for (let index1 = 0; index1 < rowCount.length; index1++){
          let sub_blank = "";
          for (let index2 = 0; index2 < (max_row - rowCount[index1]); index2++){
            sub_blank += `<tr style="line-height: ${line_height};">
            <td style="width: 1%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 10%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 42%; font-size: ${font_size_2}; text-align: left; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>                
            <td style="width: 9%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 7%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 7%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; border: 1px solid black; vertical-align: middle;">&nbsp;</td>
            </tr>`
          }
          sub_content[(index1 + 1).toString()] = sub_content[(index1 + 1).toString()].replace("BLANK_CONTENT", sub_blank);
        }

        let content1 = `
          <div style="background-image: url('https://www.certonce.com/images/CUTM/template131background11.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 209mm;">    
            <table style="width: 90%;"><tbody>
              <tr>
              <td id="replace_element" style="width: 100%; text-align: right;">
              MEMBER_PHOTO
              </td>
              </tr>
            </tbody></table>
            <table style="width: 90%; margin-top: 40px;"><tbody>
              <tr>
              <td style="width: 30%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}</td>
              <td style="width: 30%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Name: &nbsp;&nbsp; ${fullname.toString().toUpperCase()}</td>
              <td style="width: 15%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Batch: &nbsp;&nbsp; ${student.subother2}</td>
              <td style="width: 25%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
              </tr>
              <tr>
              <td style="width: 30%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${student.subother3}</td>
              <td style="width: 30%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Programme: &nbsp;&nbsp;${competencyname}</td>
              <td colspan="2" style="width: 40%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${branch_part}</td>
              </tr>
            </tbody></table>
            <hr style="width: 90%; margin-top: 5px;">
            <div style="display: flex; width: 90%;">
            ${sub_content['1']}
            <div style="width: 2%;"></div>            
            ${sub_content['2']}            
            </div>
            
            <p style="margin-left: 100px; text-align: left; font-size: ${font_size_1}; font-family: arial; font-weight: bold; margin-top: 10px;">Culture, Sports and Responsibility : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${student.subother10}</p>
          SUB_REPLACE_PART_5
          `;
          stringcontents = stringcontents.replace(/template131e/g, "template131e_landscape");
          stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + content1.replace(/"/g,'\\"') + "</center>");

          return stringcontents;
      }

      for (let index = 1; index <= semesterCount ; index++){
        let semester_title = "";
        if (index == 1) semester_title = "1st Semester";
        else if (index == 2) semester_title = "2nd Semester";
        else if (index == 3) semester_title = "3rd Semester";
        else semester_title = `${index.toString()}th Semester`;
        let descQuery = format(`select * from transcriptdescribe where cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${index.toString()}';`);
        let descResult = await pool.query(descQuery);
        let semesQuery = format(`select * from semestertranscript where cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${index.toString()}' order by case when other1='1' then 1 when other1='2' then 2 when other1='3' then 3 when other1='4' then 4 when other1='5' then 5 when other1='6' then 6 when other1='7' then 7 when other1='8' then 8 when other1='9' then 9 when other1='10' then 10 when other1='11' then 11 when other1='12' then 12 when other1='13' then 13 when other1='14' then 14 when other1='15' then 15 else 16 end;`);
        let semesResult = await pool.query(semesQuery);
        let tempcontent = "";
        if (semesResult.rowCount > 8){
          if (semesterCount > 4){
            line_height = '10pt';
          }
          else{
            line_height = '6pt';
            font_size_2 = '6pt';
            font_size_3 = '6pt';
          }
        }
        else if (semesResult.rowCount > 4){
          if (semesterCount > 4){
            line_height = '10pt';
          }
          else{
            line_height = '7pt';
            font_size_2 = '7pt';
            font_size_3 = '6pt';
          }
        }
        else {
          if (semesterCount <= 4) line_height = '11pt';
          font_size_2 = '9pt';
        }
        if (competencyname.toString().trim().toLowerCase() == "bachelor of science (honours)"){
          semesResult.rows.forEach(element => {
            tempcontent += `<tr style="line-height: ${line_height};">
            <td style="width: 15%; font-size: ${font_size_2}; text-align: center; font-family: arial; vertical-align: top;">${element.other2}</td>
            <td style="width: 17%; font-size: ${font_size_2}; text-align: left; font-family: arial; padding-left: 5px; vertical-align: top;">${element.subjecttype}</td>
            <td style="width: 52%; font-size: ${font_size_2}; text-align: left; font-family: arial; vertical-align: top;">${element.subjectcode}</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; vertical-align: top;">${element.credit}</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; vertical-align: top;">${element.grade}</td>
            </tr>`
          });
          tempcontent = `<table style="width: 98%;"><tbody>
            <tr>
            <td colspan="5" style="font-size: ${font_size_1};  text-align: center; font-family: kartikab; text-decoration: underline;">${semester_title}</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="width: 15%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Course Type</td>
              <td style="width: 17%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Subject Code</td>
              <td style="width: 52%; font-size: ${font_size_2}; text-align: left; text-decoration: underline; font-family: arial; font-weight: bold;">Subject Name</td>
              <td style="width: 8%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Credit</td>
              <td style="width: 8%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Grade</td>
              </tr>
            ${tempcontent}
            </tbody></table>`;
        }
        else {
          semesResult.rows.forEach(element => {
            tempcontent += `<tr style="line-height: ${line_height};">
            <td style="width: 5%; font-size: ${font_size_2}; text-align: center; font-family: arial; vertical-align: top;">${element.other1}</td>
            <td style="width: 16%; font-size: ${font_size_2}; text-align: left; font-family: arial; padding-left: 5px; vertical-align: top;">${element.subjecttype}</td>
            <td style="width: 63%; font-size: ${font_size_2}; text-align: left; font-family: arial; vertical-align: top;">${element.subjectcode}</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; vertical-align: top;">${element.credit}</td>
            <td style="width: 8%; font-size: ${font_size_2}; text-align: center; font-family: arial; vertical-align: top;">${element.grade}</td>
            </tr>`
          });
          tempcontent = `<table style="width: 98%;"><tbody>
            <tr>
            <td colspan="5" style="font-size: ${font_size_1};  text-align: center; font-family: kartikab; text-decoration: underline;">${semester_title}</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="width: 5%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Sl.No.</td>
              <td style="width: 16%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Subject Code</td>
              <td style="width: 63%; font-size: ${font_size_2}; text-align: left; text-decoration: underline; font-family: arial; font-weight: bold;">Subject Name</td>
              <td style="width: 8%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Credit</td>
              <td style="width: 8%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: arial; font-weight: bold;">Grade</td>
              </tr>
            ${tempcontent}
            </tbody></table>`;
        }
        if (index > 4 && semesterCount == 6 ){
          tempcontent = `<div style="width: 50%; height: 280px; display: flex; flex-direction: column; justify-content: space-between;">
          ${tempcontent}
          <table style="width: 90%;"><tbody>
          <tr style="line-height:  ${line_height};"><td style="width: 100%; text-align: right; font-size: ${font_size_2}; font-family: kartikab;">Total Credit: &nbsp;&nbsp;${descResult.rows[0].other1}&nbsp;&nbsp;SGPA:${descResult.rows[0].other3}</td><tr>
          <tr style="line-height:  ${line_height};"><td style="width: 100%; text-align: right; font-size: ${font_size_2}; font-family: kartikab;">CGPA:${descResult.rows[0].cgpa}</td><tr>
          </tbody></table>
          </div>`;
          block_height2 = '280px';
        }
        else {
          tempcontent = `<div style="width: 50%; height: ${block_height}; display: flex; flex-direction: column; justify-content: space-between;">
          ${tempcontent}
          <table style="width: 95%;"><tbody>
          <tr style="line-height:  ${line_height};"><td style="width: 100%; text-align: right; font-size: ${font_size_2}; font-family: kartikab;">Total Credit: &nbsp;&nbsp;${descResult.rows[0].other1}&nbsp;&nbsp;SGPA:${descResult.rows[0].other3}</td><tr>
          <tr style="line-height:  ${line_height};"><td style="width: 100%; text-align: right; font-size: ${font_size_2}; font-family: kartikab;">CGPA:${descResult.rows[0].cgpa}</td><tr>
          </tbody></table>
          </div>`;
        }

        
        sub_content[index.toString()] = tempcontent;      
      }
      
      if (competencyname.toString().trim().toLowerCase() == "master of pharmacy"){
        trail_part1 = `<p style="margin-left: 100px; text-align: left; font-size: ${font_size_1}; font-family: arial; font-weight: bold;">Credit Points Earned For Co-Curricular Activities : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${student.subother10}</p>`;
      }
      else {
        trail_part1 = `<p style="margin-left: 100px; text-align: left; font-size: ${font_size_1}; font-family: arial; font-weight: bold;">Culture, Sports and Responsibility : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${student.subother10}</p>`;
      }

      if (student.subother3.toString().trim().toLowerCase() == "school of applied sciences" && (competencyname.toString().trim().toLowerCase() == "bachelor of science (honours)" || competencyname.toString().trim().toLowerCase() == "bachelor of computer application")){
        trail_part2 = "SUB_REPLACE_PART_2"
      }
      else if (competencyname.toString().trim().toLowerCase() == "bachelor of pharmacy" || competencyname.toString().trim().toLowerCase() == "master of pharmacy"){
        trail_part2 = "SUB_REPLACE_PART_3";
      }
      else if (competencyname.toString().trim().toLowerCase() == "diploma in engineering"){
        trail_part2 = "SUB_REPLACE_PART_4";
      }
      else {
        trail_part2 = "SUB_REPLACE_PART_1";
      }
      if (student.subother4 != ""){
        branch_part = `Branch: &nbsp;&nbsp;${student.subother4}`;
      }
      if (semesterCount == 4){
        let content1 = `
        <div style="background-image: url('https://www.certonce.com/images/CUTM/template131background11.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 209mm;">    
        <table style="width: 90%;"><tbody>
          <tr>
          <td id="replace_element" style="width: 100%; text-align: right;">
          MEMBER_PHOTO
          </td>
          </tr>
          </tbody></table>
          <table style="width: 90%; margin-top: 40px;"><tbody>
          <tr>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}</td>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Name: &nbsp;&nbsp; ${fullname.toString().toUpperCase()}</td>
          <td style="width: 12%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Batch: &nbsp;&nbsp; ${student.subother2}</td>
          <td style="width: 20%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
          </tr>
          <tr>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${student.subother3}</td>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Programme: &nbsp;&nbsp;${competencyname}</td>
          <td colspan="2" style="width: 32%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${branch_part}</td>
          </tr>
          </tbody></table>
          <hr style="width: 90%; margin-top: 5px;">
          <div style="display: flex; width: 90%;">
          ${sub_content['1']}
          <div style="border-left: 1px solid black; height: ${block_height}; margin-top: 0px;"></div>
          ${sub_content['2']}
          </div>
          <hr style="width: 90%;">
          <div style="display: flex; width: 90%;">
          ${sub_content['3']}
          <div style="border-left: 1px solid black; height: ${block_height}; margin-top: 0px;"></div>
          ${sub_content['4']}
          </div>
          ${trail_part1}
          ${trail_part2}`;
          stringcontents = stringcontents.replace(/template131e/g, "template131e_landscape");
          stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + content1.replace(/"/g,'\\"') + "</center>");
          return stringcontents;
      }
      else if (semesterCount == 6){
        let content1 = `
        <div style="background-image: url('https://www.certonce.com/images/CUTM/template131background11.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 209mm;">    
        <table style="width: 90%;"><tbody>
          <tr>
          <td id="replace_element" style="width: 100%; text-align: right;">
          MEMBER_PHOTO
          </td>
          </tr>
          </tbody></table>
          <table style="width: 90%; margin-top: 40px;"><tbody>
          <tr>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}</td>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Name: &nbsp;&nbsp; ${fullname.toString().toUpperCase()}</td>
          <td style="width: 12%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Batch: &nbsp;&nbsp; ${student.subother2}</td>
          <td style="width: 20%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
          </tr>
          <tr>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${student.subother3}</td>
          <td style="width: 34%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Programme: &nbsp;&nbsp;${competencyname}</td>
          <td colspan="2" style="width: 32%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${branch_part}</td>
          </tr>
          </tbody></table>
          <hr style="width: 90%; margin-top: 5px;">
          <div style="display: flex; width: 90%;">
          ${sub_content['1']}
          <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
          ${sub_content['2']}
          </div>
          <hr style="width: 90%;">
          <div style="display: flex; width: 90%;">
          ${sub_content['3']}
          <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
          ${sub_content['4']}
          </div></div>`;

        let content2 = `<div style="position: absolute; top: 797px; background-image: url('https://www.certonce.com/images/CUTM/template131background12.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 207mm">
        <hr style="width: 90%; margin-top: 60px;">
          <div style="display: flex; width: 90%;">
          ${sub_content['5']}
          <div style="border-left: 1px solid black; height: ${block_height2}; margin-top: 5px;"></div>
          ${sub_content['6']}
          </div>            
          ${trail_part1}
          ${trail_part2}
        `;
        stringcontents = stringcontents.replace(/template131e/g, "template131e_landscape");
        stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + content1.replace(/"/g,'\\"') + "</center><center>" + content2.replace(/"/g,'\\"') + '</center>');
        return stringcontents;
      }
      else if (semesterCount == 8){
        let content1 = `
      <div style="background-image: url('https://www.certonce.com/images/CUTM/template131background11.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 210mm;">    
      <table style="width: 90%;"><tbody>
        <tr>
        <td id="replace_element" style="width: 100%; text-align: right;">
        MEMBER_PHOTO
        </td>
        </tr>
        </tbody></table>
        <table style="width: 90%; margin-top: 40px;"><tbody>
        <tr>
        <td style="width: 34%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}</td>
        <td style="width: 34%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Name: &nbsp;&nbsp; ${fullname.toString().toUpperCase()}</td>
        <td style="width: 12%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Batch: &nbsp;&nbsp; ${student.subother2}</td>
        <td style="width: 20%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
        </tr>
        <tr>
        <td style="width: 34%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${student.subother3}</td>
        <td style="width: 34%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Programme: &nbsp;&nbsp;${competencyname}</td>
        <td colspan="2" style="width: 32%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${branch_part}</td>
        </tr>
        </tbody></table>
        <hr style="width: 90%; margin-top: 5px;">
        <div style="display: flex; width: 90%;">
        ${sub_content['1']}
        <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
        ${sub_content['2']}
        </div>
        <hr style="width: 90%;">
        <div style="display: flex; width: 90%;">
        ${sub_content['3']}
        <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
        ${sub_content['4']}
        </div></div>`;

        let content2 = `<div style="position: absolute; top: 797px; background-image: url('https://www.certonce.com/images/CUTM/template131background12.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 207mm">
        <hr style="width: 90%; margin-top: 60px;">
          <div style="display: flex; width: 90%;">
          ${sub_content['5']}
          <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
          ${sub_content['6']}
          </div>
          <hr style="width: 90%;">
          <div style="display: flex;width: 90%;">
          ${sub_content['7']}
          <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
          ${sub_content['8']}
          </div>
          ${trail_part1}
          ${trail_part2}
          `;
        stringcontents = stringcontents.replace(/template131e/g, "template131e_landscape");
        stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + content1.replace(/"/g,'\\"') + "</center><center>" + content2.replace(/"/g,'\\"') + '</center>');
        return stringcontents;
      }
      else return stringcontents;
    }
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
}

async function template_replace_134(stringcontents, puserid, cohortfullid, rollnumber, fullname, completiondate, other5, other6, other7, other8, other9){
  try{
    let content1 = "";
    let content2 = "";
    let content3 = "";
    let content4 = "";
    let line_height1 = '15px';
    let line_height2 = '15px';
    let font_size = '7pt';
    let descQuery, descResult, semesQuery, semesResult;
    let roman_list = ['', '&#8544;', '&#8545;', '&#8546;', '&#8547;', '&#8548;', '&#8549;', '&#8550;', '&#8551;', '&#8552;', '&#8553;'];
    let roman_list_new = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];
    // 'SEMESTER: I SEAT NO.: W2140031054 CREDIT EARNED: 38 GRADE POINT: 284 SPI: 7.47';
    // 'COURSE CODE AND TITLE     CREDIT    EXPERIENTIAL LEARNING    MODULAR EXAMINATION    PROJECT VIVA    GRADE    GRADE POINT'
    descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='1'`);
    descResult = await pool.query(descQuery);
    if(descResult.rowCount > 0){
      content1 += `<hr style="width: 95%;" /><hr style="width: 95%; margin-top: -5px;" />`;
      content1 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEMESTER: ${roman_list_new[1]}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEAT NO.: ${descResult.rows[0].other1}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">CREDIT EARNED: ${descResult.rows[0].other2}</td>
      <td style="width: 20%; text-align: center; font-size: ${font_size};">GRADE POINT: ${descResult.rows[0].other3}</td>
      <td style="width: 20%; text-align: right; font-size: ${font_size};">SPI: ${descResult.rows[0].other4}</td></tr></tbody></table>`;      
    }
    else return stringcontents;    
    
    semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='1' order by subjectcode`);
    semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount >0){
      content1 += '<hr style="width: 95%;" />';
      content1 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 45%; text-align: left; font-size: ${font_size};">COURSE CODE AND TITLE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">CREDIT</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">EXPERIENTIAL LEARNING</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">MODULAR EXAMINATION</td>
      <td style="width: 10%; text-align: center; font-size: ${font_size};">PROJECT VIVA</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE POINT</td></tr></tbody></table><hr style="width: 95%;" />`;
      let tempcontent = "";
      for(let index=0; index < semesResult.rowCount; index++){
        tempcontent += `<tr style="height: ${line_height1};">
        <td style="width: 45%; text-align: left; font-size: ${font_size};">${semesResult.rows[index].subjectcode}   ${semesResult.rows[index].subjecttype}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].credit}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other3}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other4}</td>
        <td style="width: 10%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other5}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].grade}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other6}</td></tr>`;
      }
      content1 += `<table style="width: 92%;"><tbody>${tempcontent}</tbody></table>`;
    }
    else return stringcontents;

    descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='2'`);
    descResult = await pool.query(descQuery);
    if(descResult.rowCount > 0){
      content2 += `<hr style="width: 95%;" /><hr style="width: 95%; margin-top: -5px;" />`;
      content2 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEMESTER: ${roman_list_new[2]}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEAT NO.: ${descResult.rows[0].other1}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">CREDIT EARNED: ${descResult.rows[0].other2}</td>
      <td style="width: 20%; text-align: center; font-size: ${font_size};">GRADE POINT: ${descResult.rows[0].other3}</td>
      <td style="width: 20%; text-align: right; font-size: ${font_size};">SPI: ${descResult.rows[0].other4}</td></tr></tbody></table>`;      
    }
    else return stringcontents;    
    
    semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='2' order by subjectcode`);
    semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount >0){
      content2 += '<hr style="width: 95%;" />';
      content2 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 45%; text-align: left; font-size: ${font_size};">COURSE CODE AND TITLE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">CREDIT</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">EXPERIENTIAL LEARNING</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">MODULAR EXAMINATION</td>
      <td style="width: 10%; text-align: center; font-size: ${font_size};">PROJECT VIVA</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE POINT</td></tr></tbody></table><hr style="width: 95%;" />`;
      let tempcontent = "";
      for(let index=0; index < semesResult.rowCount; index++){
        tempcontent += `<tr style="height: ${line_height1};">
        <td style="width: 45%; text-align: left; font-size: ${font_size};">${semesResult.rows[index].subjectcode}   ${semesResult.rows[index].subjecttype}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].credit}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other3}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other4}</td>
        <td style="width: 10%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other5}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].grade}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other6}</td></tr>`;
      }
      content2 += `<table style="width: 92%;"><tbody>${tempcontent}</tbody></table><hr style="width: 95%;" />`;
    }
    else return stringcontents;

    descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='3'`);
    descResult = await pool.query(descQuery);
    if(descResult.rowCount > 0){
      content3 += `<hr style="width: 95%;" /><hr style="width: 95%; margin-top: -5px;" />`;
      content3 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEMESTER: ${roman_list_new[3]}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEAT NO.: ${descResult.rows[0].other1}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">CREDIT EARNED: ${descResult.rows[0].other2}</td>
      <td style="width: 20%; text-align: center; font-size: ${font_size};">GRADE POINT: ${descResult.rows[0].other3}</td>
      <td style="width: 20%; text-align: right; font-size: ${font_size};">SPI: ${descResult.rows[0].other4}</td></tr></tbody></table>`;      
    }
    else return stringcontents;    
    
    semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='3' order by subjectcode`);
    semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount >0){
      content3 += '<hr style="width: 95%;" />';
      content3 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 45%; text-align: left; font-size: ${font_size};">COURSE CODE AND TITLE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">CREDIT</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">EXPERIENTIAL LEARNING</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">MODULAR EXAMINATION</td>
      <td style="width: 10%; text-align: center; font-size: ${font_size};">PROJECT VIVA</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE POINT</td></tr></tbody></table><hr style="width: 95%;" />`;
      let tempcontent = "";
      for(let index=0; index < semesResult.rowCount; index++){
        tempcontent += `<tr style="height: ${line_height1};">
        <td style="width: 45%; text-align: left; font-size: ${font_size};">${semesResult.rows[index].subjectcode}   ${semesResult.rows[index].subjecttype}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].credit}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other3}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other4}</td>
        <td style="width: 10%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other5}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].grade}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other6}</td></tr>`;
      }
      content3 += `<table style="width: 92%;"><tbody>${tempcontent}</tbody></table>`;
    }
    else return stringcontents;

    descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='4'`);
    descResult = await pool.query(descQuery);
    if(descResult.rowCount > 0){
      content4 += `<hr style="width: 95%;" /><hr style="width: 95%; margin-top: -5px;" />`;
      content4 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEMESTER: ${roman_list_new[4]}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">SEAT NO.: ${descResult.rows[0].other1}</td>
      <td style="width: 20%; text-align: left; font-size: ${font_size};">CREDIT EARNED: ${descResult.rows[0].other2}</td>
      <td style="width: 20%; text-align: center; font-size: ${font_size};">GRADE POINT: ${descResult.rows[0].other3}</td>
      <td style="width: 20%; text-align: right; font-size: ${font_size};">SPI: ${descResult.rows[0].other4}</td></tr></tbody></table>`;      
    }
    else return stringcontents;    
    
    semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortfullid}' and studentid='${rollnumber}' and semesternumber='4' order by subjectcode`);
    semesResult = await pool.query(semesQuery);
    if (semesResult.rowCount >0){
      content4 += '<hr style="width: 95%; " />';
      content4 += `<table style="width: 92%;"><tbody><tr style="height: ${line_height2}">
      <td style="width: 45%; text-align: left; font-size: ${font_size};">COURSE CODE AND TITLE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">CREDIT</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">EXPERIENTIAL LEARNING</td>
      <td style="width: 12%; text-align: center; font-size: ${font_size};">MODULAR EXAMINATION</td>
      <td style="width: 10%; text-align: center; font-size: ${font_size};">PROJECT VIVA</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE</td>
      <td style="width: 7%; text-align: center; font-size: ${font_size};">GRADE POINT</td></tr></tbody></table><hr style="width: 95%;" />`;
      let tempcontent = "";
      for(let index=0; index < semesResult.rowCount; index++){
        tempcontent += `<tr style="height: ${line_height1};">
        <td style="width: 45%; text-align: left; font-size: ${font_size};">${semesResult.rows[index].subjectcode}   ${semesResult.rows[index].subjecttype}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].credit}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other3}</td>
        <td style="width: 12%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other4}</td>
        <td style="width: 10%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other5}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].grade}</td>
        <td style="width: 7%; text-align: center; font-size: ${font_size};">${semesResult.rows[index].other6}</td></tr>`;
      }
      content4 += `<table style="width: 92%;"><tbody>${tempcontent}</tbody></table><hr style="width: 95%;" />`;
    }
    else return stringcontents;
    let lastcontent = `<p style="font-size:8pt; font-weight: bold; text-align: left;">THIS IS TO CERTIFY THAT ${fullname.toUpperCase()} HAS CLEARED HIS/HER ${other7} WITH PPI OF ${other9} (CLASS:
      FIRST).</p>
      <table style="width: 95%; margin-top: 100px;"><tbody>
      <tr>
      <td style="width: 33%;font-size:8pt; font-weight: bold;">Date:</td>
      <td style="width: 34%"></td>
      <td style="width: 33%"></td>
      </tr>
      <tr>
      <td style="width: 33%"><hr style="width: 75%; margin-top: -3px; margin-left: 40px; text-align: center;" /></td>
      <td style="width: 34%"><hr style="width: 85%; margin-top: -3px; text-align: center;" /></td>
      <td style="width: 33%"><hr style="width: 85%; margin-top: -3px; text-align: center;" /></td>
      </tr>
      <tr>
      <td style="width: 33%"></td>
      <td style="width: 34%;"><p style="font-size: 8pt; font-weight: bold; text-align: center; margin-top: -10px;">VERIFIED BY (NAME & SIGNATURE)</p></td>
      <td style="width: 33%;"><p style="font-size: 8pt; font-weight: bold; text-align: center; margin-top: -10px;">DIRECTOR’S SIGNATURE</p></td>
      </tr></tbody></table>`
    let part1 = content1 + content2;
    let part2 = `<div style="width: 100%; position: absolute; top: 1135px;">
    ${content3} ${content4} ${lastcontent}</div>`;
    stringcontents = stringcontents.replace("LOGO_IMAGE", "https://www.certonce.com/images/LJKU/logoljk1.png");
    stringcontents = stringcontents.replace("REPLACE_PART_ONE", part1.replace(/"/g,'\\"'));
    stringcontents = stringcontents.replace("REPLACE_PART_TWO", part2.replace(/"/g,'\\"'));
    stringcontents = stringcontents.replace("STD_NAME", fullname.toUpperCase());
    stringcontents = stringcontents.replace("STD_ID", rollnumber);
    stringcontents = stringcontents.replace("SCHOOL_NAME", other5.toUpperCase());
    stringcontents = stringcontents.replace("MEDIUM_INSTRUCTION", other6.toUpperCase());
    stringcontents = stringcontents.replace("PROGRAMME_PROGRAMME", other7.toUpperCase());
    stringcontents = stringcontents.replace("ADMISSION_DATE", other8);
    stringcontents = stringcontents.replace("COMPLETION_DATE", completiondate);
    // stringcontents = stringcontents.replace("", );
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
  return stringcontents;
}

async function template_replace_136(stringcontents, studentid, rollnumber, serialnumber, fullname, fathername, competency_name, coursename, convocation_date, facultyname, department, coursecompletiondate, other1){
  try{
    let studentQuery = format(`select * from student_language where studentid='${studentid}'`);
    console.log(studentQuery);
    let studentResult = await pool.query(studentQuery);
    if(studentResult.rowCount > 0){
      let element = studentResult.rows[0];
      let hindi_firstname = element.firstname.replace(/UPPER_DOT/g, "'");
      let hindi_fathername = element.fathername.replace(/UPPER_DOT/g, "'");
      let hindi_competencyname = element.competencyname.replace(/UPPER_DOT/g, "'");
      let hindi_specialization = element.coursename.replace(/UPPER_DOT/g, "'");
      let hindi_facultyname = element.facultyname.replace(/UPPER_DOT/g, "'");
      let hindi_division = element.department.replace(/UPPER_DOT/g, "'");
      let hindi_other1 = element.other1;
      let hindi_other2 = element.other2.replace(/UPPER_DOT/g, "'");
      console.log("hindi_other2=",hindi_other2);
      if(hindi_other1 == null || hindi_other1 == "" || hindi_other1 == undefined) hindi_other1 = "";
      if(hindi_other1 != ""){
        hindi_other1 = hindi_other1.replace(/UPPER_DOT/g, "'");
        hindi_other1 = hindi_other1.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
        hindi_other1 = ` ${hindi_other1}`;
      }
      if (other1 != "") other1 = ` ${other1}`;
      hindi_firstname = hindi_firstname.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
      hindi_fathername = hindi_fathername.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
      hindi_competencyname = hindi_competencyname.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
      hindi_specialization = hindi_specialization.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
      hindi_facultyname = hindi_facultyname.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
      hindi_division = hindi_division.toString().trim().split(" ").map((element) => element = `<span style=\\"white-space: nowrap;\\">${element}</span>`).join(" ");
      console.log("studentid = : ", studentid);
      if ( studentid == 220991) {
        hindi_fathername = `<span style=\\"white-space: nowrap; font-size: 12pt\\">पंढरीनाथ सोनवणे</span>`;
      }
      else if ( studentid == 221027 ) {
        hindi_firstname = `<span style=\\"white-space: nowrap; font-size: 12pt\\">नादिव लोंढे</span>`;
        hindi_fathername = `<span style=\\"white-space: nowrap; font-size: 12pt\\">विजय कुमार लोंढे</span>`;
      }
      else if ( studentid == 221512 ) {
        hindi_firstname = `<span style=\\"white-space: nowrap; font-size: 12pt\\">आशीष ढोके</span>`;
        hindi_fathername = `<span style=\\"white-space: nowrap; font-size: 12pt\\">मोहन ढोके</span>`;
      }
      else if ( studentid == 221211 ) {
        hindi_firstname = `<span style=\\"white-space: nowrap; font-size: 12pt\\">छवि ढालिया</span>`;
        hindi_fathername = `<span style=\\"white-space: nowrap; font-size: 12pt\\">वासुदेव ढालिया</span>`;
      }
      else if ( studentid == 220817 ) {
        hindi_firstname = `<span style=\\"white-space: nowrap; font-size: 12pt\\">पार्थ ढगे</span>`;
        hindi_fathername = `<span style=\\"white-space: nowrap; font-size: 12pt\\">सुरेश ढगे</span>`;
      }
      let replace_part = "";
      let line_height = '35px';
      let competency_hindi_font = '22pt';
      let competency_eng_font = '20pt';
      let content_hindi_font = '16pt';
      let content_eng_font = '14pt';
      if (competency_name.length > 50) {
        line_height = '31px';
        competency_hindi_font = '20pt';
        competency_eng_font = '17pt';
        content_hindi_font = '14pt';
        content_eng_font = '13pt';
      }
      if(coursename == ""){
        let temp_sentence_1 = `Áekf.krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSSPACE_SYMBOLfdSPACE_SYMBOLJh@lqJhSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_firstname}</span>SPACE_SYMBOLiq=@iq=hSPACE_SYMBOLJh@JherhSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_fathername}</span>SPACE_SYMBOLusSPACE_SYMBOLl=SPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_other2}</span>SPACE_SYMBOLesaSPACE_SYMBOLblSPACE_SYMBOLfo”ofo|ky;SPACE_SYMBOLlsSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_competencyname}${hindi_other1}</span>SPACE_SYMBOLdhSPACE_SYMBOLijh{kkSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_division}</span>SPACE_SYMBOLesaSPACE_SYMBOLmRrh.kZSPACE_SYMBOLdhSPACE_SYMBOLgSA`;
        temp_sentence_1 = temp_sentence_1.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span") == -1 ? `<span style=\\"white-space: nowrap;\\">${element}</span>` : element).join(" ");
        let temp_sentence_2 = `vr%SPACE_SYMBOLbUgsaSPACE_SYMBOL${hindi_facultyname}SPACE_SYMBOLdsSPACE_SYMBOLvarxZrSPACE_SYMBOL${hindi_competencyname}SPACE_SYMBOLdhSPACE_SYMBOLmikf/kSPACE_SYMBOLlsSPACE_SYMBOLfoHkwf’krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSA`;
        temp_sentence_2 = temp_sentence_2.split("SPACE_SYMBOL").map((element) =>  element = element.indexOf("<span ") == -1 ? `<span style=\\"white-space: nowrap;\\">${element}</span>`: element).join(" ") ;
        replace_part = `
        <center>
          <table style=\\"width: 78%; margin-top: 15px;\\">
            <tbody>
              <tr>
                <td style=\\"font-size: ${competency_hindi_font}; font-family: krutidev010regular; color: red; text-align: center; margin-top: 20px; font-weight: bold;\\">${hindi_competencyname}</td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #1F497D; text-align: justify; line-height: ${line_height};\\">
                ${temp_sentence_1}
                </td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #1F497D; text-align: justify; margin-top: 20px; line-height: ${line_height};\\"> 
                  ${temp_sentence_2}
                </td>
              </tr>
              <tr>
                <td style=\\"font-size: ${competency_eng_font}; font-family: timesnewroman; color: red; text-align: center; padding-top: 30px; font-weight: bold;\\">${competency_name}</td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_eng_font}; font-family: timesnewroman; color: #1F497D; text-align: justify; line-height: ${line_height};\\">
                  This is to certify that Mr./Ms. <span style=\\"font-weight: bold;\\">${fullname}</span> son/daughter of Shri/Smt. <span style=\\"font-weight: bold;\\">${fathername}</span> has passed the examination of <span style=\\"font-weight: bold;\\">${competency_name}${other1}</span> of this University with <span style=\\"font-weight: bold;\\">${department}</span> in the <span style=\\"letter-spacing: -2px;\\">Y</span>ear <span style=\\"font-weight: bold;\\">${coursecompletiondate}</span>.
                </td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_eng_font}; font-family: timesnewroman; color: #1F497D; text-align: justify; line-height: ${line_height};\\"> 
                  Hence, he/she is awarded the degree of ${competency_name} under the ${facultyname}.
                </td>
              </tr>
            </tbody>
          </table>
        </center>`;
      }
      else {
        let temp_sentence_1 = `Áekf.krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSSPACE_SYMBOLfdSPACE_SYMBOLJh@lqJhSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_firstname}</span>SPACE_SYMBOLiq=@iq=hSPACE_SYMBOLJh@JherhSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_fathername}</span>SPACE_SYMBOLusSPACE_SYMBOLl=SPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_other2}</span>SPACE_SYMBOLesaSPACE_SYMBOLblSPACE_SYMBOLfo”ofo|ky;SPACE_SYMBOLlsSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_competencyname}${hindi_other1}</span>SPACE_SYMBOLdhSPACE_SYMBOLijh{kkSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_specialization}</span>SPACE_SYMBOLesaSPACE_SYMBOL<span style=\\"font-weight: bold;\\">${hindi_division}</span>SPACE_SYMBOLesaSPACE_SYMBOLmRrh.kZSPACE_SYMBOLdhSPACE_SYMBOLgSA`;
        temp_sentence_1 = temp_sentence_1.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style=\\"white-space: nowrap;\\">${element}</span>` : element).join(" ");
        let temp_sentence_2 = `vr%SPACE_SYMBOLbUgsaSPACE_SYMBOL${hindi_facultyname}SPACE_SYMBOLdsSPACE_SYMBOLvarxZrSPACE_SYMBOL${hindi_competencyname}SPACE_SYMBOLdhSPACE_SYMBOLmikf/kSPACE_SYMBOLlsSPACE_SYMBOLfoHkwf’krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSA`;
        temp_sentence_2 = temp_sentence_2.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style=\\"white-space: nowrap;\\">${element}</span>` : element).join(" ");
        replace_part = `
        <center>
          <table style=\\"width: 78%; margin-top: 15px;\\">
            <tbody>
              <tr>
                <td style=\\"font-size: ${competency_hindi_font}; font-family: krutidev010regular; color: red; text-align: center; margin-top: 20px; font-weight: bold;\\">${hindi_competencyname}</td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #1F497D; text-align: justify; line-height: ${line_height};\\">
                ${temp_sentence_1}
                </td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #1F497D; text-align: justify; line-height: ${line_height};\\"> 
                  ${temp_sentence_2}
                </td>
              </tr>
              <tr>
                <td style=\\"font-size: ${competency_eng_font}; font-family: timesnewroman; color: red; text-align: center; padding-top: 30px; font-weight: bold;\\">${competency_name}</span></td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_eng_font}; font-family: timesnewroman; color: #1F497D; text-align: justify; line-height: ${line_height};\\">
                  This is to certify that Mr./Ms. <span style=\\"font-weight: bold;\\">${fullname}</span> son/daughter of Shri/Smt. <span style=\\"font-weight: bold;\\">${fathername}</span> has passed the examination of <span style=\\"font-weight: bold;\\">${competency_name}${other1}</span> in <span style=\\"font-weight: bold;\\">${coursename}</span> of this University with <span style=\\"font-weight: bold;\\">${department}</span> in the <span style=\\"letter-spacing: -2px;\\">Y</span>ear <span style=\\"font-weight: bold;\\">${coursecompletiondate}</span>.
                </td>
              </tr>
              <tr>
                <td style=\\"font-size: ${content_eng_font}; font-family: timesnewroman; color: #1F497D; text-align: justify; line-height: ${line_height};\\"> 
                  Hence, he/she is awarded the degree of ${competency_name} under the ${facultyname}.
                </td>
              </tr>
            </tbody>
          </table>
        </center>`;
      }
      stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);
      stringcontents = stringcontents.replace(/STD_ID/g, rollnumber);
      stringcontents = stringcontents.replace(/CONVOCATION_DATE/g, convocation_date);
      stringcontents = stringcontents.replace("top: 1055px", "top: 1091px");
      // stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + print_part.replace(/"/g,'\\"') + '</center><center>' + replace_part.replace(/"/g,'\\"') + '</center>');
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", replace_part);
    }
    return stringcontents; 
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
}

async function convertEnglishDateToKrutidevHindi(englishDate) {
  const englishDigits = "0123456789.";
  const krutidevDigits = "०१२३४५६७८९.";

  const englishMonths = [
    "01", "02", "03", "04", "05", "06",
    "07", "08", "09", "10", "11", "12"
  ];

  const hindiMonths = [
    "०१", "०२", "०३", "०४", "०५", "०६",
    "०७", "०८", "०९", "१०", "११", "१२"
  ];

  if (typeof englishDate !== 'string') {
    return "Invalid input. Please provide a date string.";
  }

  const parts = englishDate.split('.');

  if (parts.length !== 3) {
    return "Invalid date format. Please use DD.MM.YYYY.";
  }

  let day = parts[0];
  let month = parts[1];
  let year = parts[2];

  if (day.length !== 2 || month.length !== 2 || year.length !== 4) {
    return "Invalid date format. Please use DD.MM.YYYY.";
  }

  let hindiDay = "";
  for (let char of day) {
    hindiDay += krutidevDigits[englishDigits.indexOf(char)];
  }

  let hindiMonth = "";
  const monthIndex = englishMonths.indexOf(month);
  if (monthIndex === -1) {
    return "Invalid month in date";
  } else {
    hindiMonth = hindiMonths[monthIndex];
  }

  let hindiYear = "";
  for (let char of year) {
    hindiYear += krutidevDigits[englishDigits.indexOf(char)];
  }

  return `${hindiDay}.${hindiMonth}.${hindiYear}`;
}

async function generateBarcodeBase64(text) {
  try {
    // Create a canvas element
    const canvas = createCanvas();

    // Generate the barcode on the canvas
    JsBarcode(canvas, text, {
      format: 'CODE128',
      lineColor: '#000000',
      width: 2,
      height: 100,
      displayValue: false,
    });

    // Convert the canvas to a base64-encoded image
    const base64 = canvas.toDataURL('image/png');
    return base64;
  } catch (err) {
    console.error('Error generating barcode:', err);
    return null;
  }
}

async function template_replace_185(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername, competency_name, convocation_date, facultyname, phdtitle, other1, other2, other3){
  try{                      
    let studentQuery = format(`select * from student_language where studentid='${mainstudentid}'`);
    console.log(studentQuery);
    let studentResult = await pool.query(studentQuery);
    if(studentResult.rowCount > 0){
      let element = studentResult.rows[0];
      let hindi_firstname = element.firstname.replace(/UPPER_DOT/g, "'").replace(/</g, "&lt;");
      let hindi_fathername = element.fathername.replace(/UPPER_DOT/g, "'").replace(/</g, "&lt;");
      let hindi_coursename = element.coursename.replace(/UPPER_DOT/g, "'");
      let hindi_facultyname = element.facultyname.replace(/UPPER_DOT/g, "'");
      let hindi_phdtitle = element.phdtitle.replace(/UPPER_DOT/g, "'");
      let hindi_convercationdate = element.other1.replace(/UPPER_DOT/g, "'");
      let hindi_gender = element.other2.replace(/UPPER_DOT/g, "'");
      console.log("gender=",other2);

      const [day, month, year] = hindi_convercationdate.split('-');
      let temp_date = `${day}.${month}.${year}`;
      let isoDate = `${year}-${month}-${day}`;
      let hindi_date = await convertEnglishDateToKrutidevHindi(temp_date);
      let [hday, hmonth, hyear] = hindi_date.split('.');

      let hindi_hisar=`१२५००१`;
      let hdate = `fglkj<span style="font-family: calibri;">,</span>${hindi_hisar}SPACE_SYMBOLfrfFk<span style="font-family: calibri;">:</span>SPACE_SYMBOL${hday}<span style="font-family: calibri;">.</span>${hmonth}<span style="font-family: calibri;">.</span>${hyear}`;
      hdate = hdate.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      if (other1 != "") other1 = ` ${other1}`;
      hindi_firstname = hindi_firstname.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_fathername = hindi_fathername.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_coursename = hindi_coursename.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_facultyname = hindi_facultyname.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_phdtitle = hindi_phdtitle.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");

      let line_height = '34px';
      let competency_hindi_font = '24pt';
      let competency_eng_font = '22pt';
      let faculty_hindi_font = '20pt';
      let content_hindi_font = '16pt';
      let content_eng_font = '14pt';

      const length = phdtitle.length;

      if(length >= 110){
        content_hindi_font = '14.5pt';
        content_eng_font = '12.5pt';
        line_height = '30px';
      }
      
      let hindi_competencyname = `MkWDVjSPACE_SYMBOLvkWQSPACE_SYMBOLfQykWlQ+h`;
      hindi_competencyname = hindi_competencyname.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      let temp_sentence_1 = `izekf.krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSSPACE_SYMBOLfdSPACE_SYMBOL<span style="font-weight: bold;">${hindi_firstname}</span>SPACE_SYMBOL${hindi_gender}SPACE_SYMBOL<span style="font-weight: bold;">JhSPACE_SYMBOL${hindi_fathername}</span>SPACE_SYMBOLdksSPACE_SYMBOL<span style="font-weight: bold;">${hindi_coursename}</span>SPACE_SYMBOLesaSPACE_SYMBOL<span>${hindi_competencyname}</span>SPACE_SYMBOLdhSPACE_SYMBOLmikfèkSPACE_SYMBOLiznkuSPACE_SYMBOLdhSPACE_SYMBOLtkrhSPACE_SYMBOLgSA`;
      temp_sentence_1 = temp_sentence_1.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      let temp_sentence_2 = `'kks/kSPACE_SYMBOLizcU/kuSPACE_SYMBOLdkSPACE_SYMBOLfo"k;SPACE_SYMBOL%SPACE_SYMBOL<span style="font-weight: bold;">${hindi_phdtitle}SPACE_SYMBOLA`;
      temp_sentence_2 = temp_sentence_2.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");

      // let bar_code = await generateBarcodeBase64(serialnumber);
      console.log("Duration",other3);
      let backpath="";
      if(other3 == "6 Months"){
        backpath = 'template185back1';
      }
      else if(other3 == "Nil"){
        backpath = 'template185back2';
      }
      else if(other3 == "15 Days"){
        backpath = 'template185back3';
      }
      console.log("Back page",backpath);

      const viceChancellors = [
        { name: "Prof. Tankeshwar Kumar.png", from: "2015-10-13", to: "2021-07-27" },
        { name: "Prof. B.R. Kamboj.png", from: "2021-08-07", to: "2023-05-02" },
        { name: "Prof. Narsi Ram Bishnoi.png", from: "2023-05-03", to: "9999-12-31" }, // Till Continued
      ];
      
      const registrars = [
        { name: "Dr. Anil Kumar Pundir.png", from: "2016-03-31", to: "2019-12-15" },
        { name: "Prof. Harbhajan Bansal.png", from: "2019-12-20", to: "2020-08-28" },
        { name: "Dr. Avnesh Verma.png", from: "2020-08-28", to: "2023-08-28" },
        { name: "Prof. Vinod Chhokar.png", from: "2023-08-29", to: "9999-12-31" }, // Till Date
      ];
      
      const chancellors = [
        { name: "Prof. Kaptan Singh Solanki.png", from: "2014-07-27", to: "2018-08-24" },
        { name: "Sh. Satyadeo Narain Arya.png", from: "2018-08-25", to: "2021-07-14" },
        { name: "Sh. Bandaru Dattatraya.png", from: "2021-07-15", to: "9999-12-31" }, // Till Continued
      ];
      let viceChancellor ='';
      let registrar ='';
      let chancellor ='';
      for (let vc of viceChancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          viceChancellor = vc.name;
          break;
        }
      }
      for (let vc of registrars) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          registrar = vc.name;
          break;
        }
      }
      for (let vc of chancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          chancellor = vc.name;
          break;
        }
      }
      if(serialnumber!=""){
        let bar_code = await generateBarcodeBase64(serialnumber);
        serialpart =`
        <div style="position: absolute; top:17.5mm; left: 15mm; font-family: zapfc; font-style: italic; font-size: 11pt; color: #000000;">Sl. No. ${serialnumber}</div>
        <img src="${bar_code}" style="position: absolute; width: 30mm; height:7mm; top:23mm; left:14mm;"/>`;
      }
      // other1 =  other1.toLowerCase().split(/[^a-zA-Z0-9&]+/).map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');

      let main_content = `
      <img style="width: 210mm; height: 297mm; position: absolute; top: 0px; left: 0px;" src="${myip}/images/Gjust/template185front.png" />
      <img style="width: 210mm; height: 297mm; position: absolute; top: 297mm; left: 0px;" src="${myip}/images/Gjust/${backpath}.png" />
      ${serialpart}
      <div style="position: absolute; top:15.5mm; left: 171mm; font-family: timesnewroman; font-size: 12pt; font-style: italic;color: #000000;">${rollnumber}</div>
      <table style="width: 170mm; position: absolute; top:67mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_hindi_font}; font-family: krutidev010regular; color: #33cccc; text-align: center; margin-top: 20px; font-weight: bold;">${hindi_competencyname}</td>
          </tr>
          <tr>
          <td style="font-size: ${faculty_hindi_font}; font-family: krutidev010regular; color: #0000ff; text-align: center; line-height: ${line_height};">
            <span style="font-family: calibri;">(</span>${hindi_facultyname}<span style="font-family: calibri;">)</span>
          </td>
          </tr>
          <tr>
            <td style="font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #000000; text-align: justify; line-height: ${line_height};text-indent: 20mm;"> 
              ${temp_sentence_1}
            </td>
          </tr>
          <tr>
            <td style="font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #000000; text-align: justify; line-height: ${line_height};text-indent: 20mm;"> 
              ${temp_sentence_2}
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 170mm; position: absolute; top:140mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_eng_font}; font-family: oldenglish; color: #33cccc; text-align: center; padding-top: 30px; font-weight: bold;">Doctor of Philosophy</span></td>
          </tr>
          <tr>
            <td style="font-size: ${content_eng_font}; font-family: algerian; color: #0000ff; text-align: center; line-height: ${line_height};">
            (${facultyname})
            </td>
          </tr>
          <tr>
            <td style="font-size: ${content_eng_font}; font-family: oldenglish; color: #000000; text-align: justify; line-height: 32px; text-indent: 20mm;">
              This is to certify that <span style="font-weight: bold; font-style: italic; font-family: bankgothicmd;">${fullname}</span> ${other2} of <span style="font-weight: bold; font-style: italic; font-family: bankgothicmd;">SH. ${fathername}</span> is hereby awarded the degree of <span>Doctor of Philosophy</span> in <span style="font-weight: 500;">${other1}</span>.
            </td>
          </tr>
          <tr>
            <td style="font-size: ${content_eng_font}; font-family: oldenglish; color: #000000; text-align: justify; line-height: ${line_height}; text-indent: 20mm;"> 
            Title of the thesis : <span style="font-weight: bold; font-style: italic; font-family: bankgothicmd;">${phdtitle}</span>.
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 190mm; position: absolute; top:233mm; left: 50%; transform: translateX(-50%);">
        <tbody>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                  
            <img style="text-align: center; height: 18mm; margin-left:21mm" src="${myip}/images/Gjust/CoE1.png">                
            </td>                
            <td style="width: 76mm; text-align: center;">               
            </td>                
            <td style="width: 50mm; text-align: center;">                  
              <img style="text-align: center; height: 12mm; margin-bottom:6mm;" src="${myip}/images/Gjust/${registrar}">                
            </td>              
          </tr>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                  
              <img style="text-align: center; height: 12mm; width: 26mm; margin-top: 6mm; margin-left:15mm" src="${myip}/images/Gjust/${viceChancellor}">                
            </td>                
            <td style="width: 76mm; text-align: center;">                
            </td>                
            <td style="width: 50mm; text-align: center;">                  
              <img style="text-align: center; height: 10mm; width: 30mm; margin-top: 6mm;" src="${myip}/images/Gjust/${chancellor}">                
            </td>              
          </tr>          
        </tbody>
      </table>
      <div style="position: absolute; top:277mm; left:75mm;">
      <div style="font-family: krutidev010regular; font-size: 11pt; color: #000000;">${hdate}</div>
      <div style="font-family: timesnewromanitalic; font-size: 11pt; color: #000000;">Hisar-125001, Dated: ${convocation_date}</div>
      </div>
      <div style="width: 60mm; position: absolute; top:460mm; left:110mm;">
        <div style="text-align: center; position: relative;">
          <img style="text-align: center; height: 20mm; position: relative; z-index: 2;" src="${myip}/images/Gjust/checker1.png">
          <img style="text-align: center;height: 20mm;position: relative; top: -8mm; z-index: 1;" src="${myip}/images/Gjust/checker2.png">
          <img style="text-align: center;height: 27mm;position: relative; z-index: 1; top: -18mm;" src="${myip}/images/Gjust/checker3.png">
        </div>
      </div>`;
      stringcontents = stringcontents.replace("MAIN_CONTENT", `${main_content}`.replace(/"/g,'\\"'));
    }
      return stringcontents;
      
  }
  catch(err){
      console.log(err);
      return stringcontents;
  }
}
async function convertEnglishNumToKrutidevHindi(englishNum) {
  const englishDigits = "0123456789";
  const krutidevDigits = "०१२३४५६७८९";

  let hindiNum = "";
  for (let char of englishNum) {
    if (englishDigits.includes(char)) {
      hindiNum += krutidevDigits[englishDigits.indexOf(char)];
    } else {
      hindiNum += char;
    }
  }

  return hindiNum;
}

async function template_replace_187(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername,convocation_date, other1, other2, other3, other4, other5, other6, other7){
  try{                      
    let studentQuery = format(`select * from student_language where studentid='${mainstudentid}'`);
    console.log(studentQuery);
    let studentResult = await pool.query(studentQuery);
    if(studentResult.rowCount > 0){
      let element = studentResult.rows[0];
      let hindi_firstname = element.firstname.replace(/UPPER_DOT/g, "'");
      let hindi_fathername = element.fathername.replace(/UPPER_DOT/g, "'");
      let hindi_coursename = element.coursename.replace(/UPPER_DOT/g, "'");
      let hindi_crsecontent = element.specializationone.replace(/UPPER_DOT/g, "'");
      let hindi_convercationdate = element.other3.replace(/UPPER_DOT/g, "'");
      let hindi_department = element.department.replace(/UPPER_DOT/g, "'");
      let hindi_session1 = element.other1.replace(/UPPER_DOT/g, "'");
      let hindi_session2 = element.other2.replace(/UPPER_DOT/g, "'");
      let hindi_dist = element.other5.replace(/UPPER_DOT/g, "'");
      let hindi_division = element.other4.replace(/UPPER_DOT/g, "'");

      const [day, month, year] = hindi_convercationdate.split('-');
      let temp_date = `${day}.${month}.${year}`;
      let isoDate = `${year}-${month}-${day}`;
      let hindi_date = await convertEnglishDateToKrutidevHindi(temp_date);
      let [hday, hmonth, hyear] = hindi_date.split('.');
      let hindi_hisar=`१२५००१`;
      let hdate = `fglkj&${hindi_hisar}]SPACE_SYMBOLfrfFk<span style="font-family: calibri;">:</span>SPACE_SYMBOL${hday}<span style="font-family: calibri;">.</span>${hmonth}<span style="font-family: calibri;">.</span>${hyear}`;

      let [from, to] = other4.split('-');
      let hfrom = await convertEnglishNumToKrutidevHindi(from);
      let hto = await convertEnglishNumToKrutidevHindi(to);
      hindi_session2 = await convertEnglishNumToKrutidevHindi(hindi_session2);
      hdate = hdate.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      if (other1 != "") other1 = ` ${other1}`;
      hindi_firstname = hindi_firstname.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_fathername = hindi_fathername.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_coursename = hindi_coursename.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_department = hindi_department.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_session1 = hindi_session1.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_dist = hindi_dist.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_division = hindi_division.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      let serialpart ="";
      if(serialnumber!=""){
        let bar_code = await generateBarcodeBase64(serialnumber);
        serialpart =`
        <div style="position: absolute; top:17.5mm; left: 15mm; font-family: zapfc; font-style: italic; font-size: 11pt; color: #000000;">Sl. No. ${serialnumber}</div>
        <img src="${bar_code}" style="position: absolute; width: 30mm; height:7mm; top:23mm; left:14mm;"/>`;
      }
      
      let line_height = '35px';
      let competency_hindi_font = '24pt';
      let competency_eng_font = '22pt';
      let content_hindi_font = '16pt';
      let content_eng_font = '14pt';
      
      const viceChancellors = [
        { name: "Prof. Tankeshwar Kumar.png", from: "2015-10-13", to: "2021-07-27" },
        { name: "Prof. B.R. Kamboj.png", from: "2021-08-07", to: "2023-05-02" },
        { name: "Prof. Narsi Ram Bishnoi.png", from: "2023-05-03", to: "9999-12-31" }, // Till Continued
      ];
      
      const registrars = [
        { name: "Dr. Anil Kumar Pundir.png", from: "2016-03-31", to: "2019-12-15" },
        { name: "Prof. Harbhajan Bansal.png", from: "2019-12-20", to: "2020-08-28" },
        { name: "Dr. Avnesh Verma.png", from: "2020-08-28", to: "2023-08-28" },
        { name: "Prof. Vinod Chhokar.png", from: "2023-08-29", to: "9999-12-31" }, // Till Date
      ];
      
      const chancellors = [
        { name: "Prof. Kaptan Singh Solanki.png", from: "2014-07-27", to: "2018-08-24" },
        { name: "Sh. Satyadeo Narain Arya.png", from: "2018-08-25", to: "2021-07-14" },
        { name: "Sh. Bandaru Dattatraya.png", from: "2021-07-15", to: "9999-12-31" }, // Till Continued
      ];
      let viceChancellor ='';
      let chancellor ='';
      for (let vc of viceChancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          viceChancellor = vc.name;
          break;
        }
      }
      for (let vc of chancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          chancellor = vc.name;
          break;
        }
      }

  
      temp_sentence_1 = `izekf.krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSSPACE_SYMBOLfdSPACE_SYMBOL<span style="font-weight: bold;">${hindi_firstname}</span>SPACE_SYMBOLlqiq=@lqiq=hSPACE_SYMBOLJh<span style="font-weight: bold;">SPACE_SYMBOL${hindi_fathername}</span>]SPACE_SYMBOL<span style="font-weight: bold;">${hindi_department}SPACE_SYMBOLcSPkSPACE_SYMBOL<span style="font-size: 12pt;">${hfrom}&${hto}]</span></span>SPACE_SYMBOLdsSPACE_SYMBOLfo|kFkhZSPACE_SYMBOLd¨SPACE_SYMBOLblSPACE_SYMBOLfo'ofo|ky;SPACE_SYMBOL}kjkSPACE_SYMBOL<span style="font-weight: bold;">${hindi_session1}SPACE_SYMBOL<span style="font-size: 12pt;">${hindi_session2}</span></span>SPACE_SYMBOLesaSPACE_SYMBOLvk;¨ftrSPACE_SYMBOLrRlEcUèkhSPACE_SYMBOLlEiw.kZSPACE_SYMBOLijh{kkSPACE_SYMBOL<span style="font-weight: bold;">${hindi_division}</span>SPACE_SYMBOLJs.khSPACE_SYMBOLesaSPACE_SYMBOL<span style="font-weight: bold;">${hindi_dist}</span>SPACE_SYMBOLmÙkh.kZSPACE_SYMBOLdjusSPACE_SYMBOLdsSPACE_SYMBOLmijkUrSPACE_SYMBOL<span style="font-weight: bold;">${hindi_crsecontent}</span>SPACE_SYMBOLdhSPACE_SYMBOLmikfèkSPACE_SYMBOLiznkuSPACE_SYMBOLdhSPACE_SYMBOLtkrhSPACE_SYMBOLgSA`;
      temp_sentence_1 = temp_sentence_1.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      
      let  eng_sentence_1 = `This is to certify that <span style="font-weight: bold; font-family: calibri;">${fullname}</span> son/daughter of <span style="font-weight: bold; font-family: calibri;">Sh. ${fathername},</span> a student of <span style="font-weight: bold; font-family: calibri;">${other3}, Batch ${other4},</span> is hereby awarded the degree of <span style="font-weight: bold; font-family: calibri;">${other2}</span> after passing  the entire examination for the said degree held in <span style="font-weight: bold; font-family: calibri;">${other5}</span> in <span style="font-weight: bold; font-family: calibri;">${other6}</span> division<span style="font-weight: bold; font-family: calibri;">${other7 ? ` ${other7}` : ''}</span>.`;
      
      let main_content = `
      <img style="width: 210mm; height: 297mm; position: absolute; top: 0px; left: 0px;" src="${myip}/images/Gjust/template187front.png" />
      ${serialpart}
      <div style="position: absolute; top:17.5mm; left: 171mm; font-family: timesnewroman; font-size: 12pt; font-style: italic;color: #000000;">${rollnumber}</div>
      <table style="width: 170mm; position: absolute; top:87mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_hindi_font}; font-family: krutidev010regular; color: #33cccc; text-align: center; margin-top: 20px; font-weight: bold;">${hindi_coursename}</td>
          </tr>
          </tr>
          <tr>
            <td style="font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #000000; text-align: justify; line-height: ${line_height};text-indent: 20mm;"> 
              ${temp_sentence_1}
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 170mm; position: absolute; top:165mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_eng_font}; font-family: oldenglish; color: #33cccc; text-align: center; padding-top: 30px; font-weight: bold;">${other1}</span></td>
          </tr>
          <tr>
            <td style="font-size: ${content_eng_font}; font-family: oldenglish; color: #000000; text-align: justify; line-height: ${line_height}; text-indent: 20mm;">
              ${eng_sentence_1}  
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 190mm; position: absolute; top:240mm; left: 50%; transform: translateX(-50%);">
        <tbody>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                  
            <img style="text-align: center; height: 18mm; margin-left:21mm" src="${myip}/images/Gjust/CoE1.png">                
            </td>                
            <td style="width: 86mm; text-align: center;">               
            </td>                
            <td style="width: 40mm; text-align: center;">                  
              <img style="text-align: center; height: 10mm; width: 24mm; margin-bottom:6mm;" src="${myip}/images/Gjust/${viceChancellor}">                
            </td>              
          </tr>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                               
            </td>                
            <td style="width: 86mm; text-align: center;">                
            </td>                
            <td style="width: 40mm; text-align: center;">                  
              <img style="text-align: center; width:35mm; height: 9mm;margin-top: 5mm;" src="${myip}/images/Gjust/${chancellor}">                
            </td>              
          </tr>          
        </tbody>
      </table>
      <div style="position: absolute; top:273mm; left:15mm;">
      <div style="font-family: krutidev010regular; font-size: 12pt; color: #000000; text-align: left;">${hdate}</div>
      <div style="font-family: timesnewromanitalic; font-size: 13pt; color: #000000;">Hisar-125001, Dated: <span style="font-family: timesnewroman; font-size: 13pt; color: #000000;">${convocation_date}</span></div>
      </div>
      </div>`;
      stringcontents = stringcontents.replace("MAIN_CONTENT", `${main_content}`.replace(/"/g,'\\"'));
    }
      return stringcontents;
      
  }
  catch(err){
      console.log(err);
      return stringcontents;
  }
}

async function template_replace_189(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername,convocation_date, other1, other2, other3, other4, other5, other6, other7, other8){
  try{                      
    let studentQuery = format(`select * from student_language where studentid='${mainstudentid}'`);
    console.log(studentQuery);
    let studentResult = await pool.query(studentQuery);
    if(studentResult.rowCount > 0){
      let element = studentResult.rows[0];
      let hindi_firstname = element.firstname.replace(/UPPER_DOT/g, "'");
      let hindi_fathername = element.fathername.replace(/UPPER_DOT/g, "'");
      let hindi_coursename = element.coursename.replace(/UPPER_DOT/g, "'");
      let hindi_crsecontent = element.specializationone.replace(/UPPER_DOT/g, "'");
      let hindi_convercationdate = element.other3.replace(/UPPER_DOT/g, "'");
      let hindi_department = element.department.replace(/UPPER_DOT/g, "'");
      let hindi_session1 = element.other1.replace(/UPPER_DOT/g, "'");
      let hindi_session2 = element.other2.replace(/UPPER_DOT/g, "'");
      let hindi_dist = element.other5.replace(/UPPER_DOT/g, "'");
      let hindi_division = element.other4.replace(/UPPER_DOT/g, "'");
      let hindi_spec = element.facultyname.replace(/UPPER_DOT/g, "'");

      const [day, month, year] = hindi_convercationdate.split('-');
      let temp_date = `${day}.${month}.${year}`;
      let isoDate = `${year}-${month}-${day}`;
      let hindi_date = await convertEnglishDateToKrutidevHindi(temp_date);
      let [hday, hmonth, hyear] = hindi_date.split('.');
      let hindi_hisar=`१२५००१`;
      let hdate = `fglkj&${hindi_hisar}]SPACE_SYMBOLfrfFk<span style="font-family: calibri;">:</span>SPACE_SYMBOL${hday}<span style="font-family: calibri;">.</span>${hmonth}<span style="font-family: calibri;">.</span>${hyear}`;

      let [from, to] = other4.split('-');
      let hfrom = await convertEnglishNumToKrutidevHindi(from);
      let hto = await convertEnglishNumToKrutidevHindi(to);
      hindi_session2 = await convertEnglishNumToKrutidevHindi(hindi_session2);
      hdate = hdate.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      if (other1 != "") other1 = ` ${other1}`;
      hindi_firstname = hindi_firstname.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_fathername = hindi_fathername.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_coursename = hindi_coursename.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_department = hindi_department.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_session1 = hindi_session1.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_dist = hindi_dist.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_division = hindi_division.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_crsecontent = hindi_crsecontent.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_spec = hindi_spec.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      
      let serialpart ="";
      if(serialnumber!=""){
        let bar_code = await generateBarcodeBase64(serialnumber);
        serialpart =`
        <div style="position: absolute; top:17.5mm; left: 15mm; font-family: zapfc; font-style: italic; font-size: 11pt; color: #000000;">Sl. No. ${serialnumber}</div>
        <img src="${bar_code}" style="position: absolute; width: 30mm; height:7mm; top:23mm; left:14mm;"/>`;
      }
      
      let line_height = '34px';
      let competency_hindi_font = '24pt';
      let competency_eng_font = '22pt';
      let content_hindi_font = '16pt';
      let content_eng_font = '14pt';
      
      const viceChancellors = [
        { name: "Prof. Tankeshwar Kumar.png", from: "2015-10-13", to: "2021-07-27" },
        { name: "Prof. B.R. Kamboj.png", from: "2021-08-07", to: "2023-05-02" },
        { name: "Prof. Narsi Ram Bishnoi.png", from: "2023-05-03", to: "9999-12-31" }, // Till Continued
      ];
      
      const registrars = [
        { name: "Dr. Anil Kumar Pundir.png", from: "2016-03-31", to: "2019-12-15" },
        { name: "Prof. Harbhajan Bansal.png", from: "2019-12-20", to: "2020-08-28" },
        { name: "Dr. Avnesh Verma.png", from: "2020-08-28", to: "2023-08-28" },
        { name: "Prof. Vinod Chhokar.png", from: "2023-08-29", to: "9999-12-31" }, // Till Date
      ];
      
      const chancellors = [
        { name: "Prof. Kaptan Singh Solanki.png", from: "2014-07-27", to: "2018-08-24" },
        { name: "Sh. Satyadeo Narain Arya.png", from: "2018-08-25", to: "2021-07-14" },
        { name: "Sh. Bandaru Dattatraya.png", from: "2021-07-15", to: "9999-12-31" }, // Till Continued
      ];
      let viceChancellor ='';
      let chancellor ='';
      for (let vc of viceChancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          viceChancellor = vc.name;
          break;
        }
      }
      for (let vc of chancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          chancellor = vc.name;
          break;
        }
      }

      temp_sentence_1 = `izekf.krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSSPACE_SYMBOLfdSPACE_SYMBOL<span style="font-weight: bold;">${hindi_firstname}</span>SPACE_SYMBOLlqiq=@lqiq=hSPACE_SYMBOLJh<span style="font-weight: bold;">SPACE_SYMBOL${hindi_fathername}</span>]SPACE_SYMBOL${hindi_department}SPACE_SYMBOLesaSPACE_SYMBOL${hindi_crsecontent}SPACE_SYMBOL¼cSp%SPACE_SYMBOL<span style="font-size: 12pt;">${hfrom}&${hto}</span>½SPACE_SYMBOLdsSPACE_SYMBOLfo|kFkhZSPACE_SYMBOLd¨SPACE_SYMBOLblSPACE_SYMBOLfo'ofo|ky;SPACE_SYMBOL}kjkSPACE_SYMBOL<span style="font-weight: bold;">${hindi_session1}SPACE_SYMBOL<span style="font-size: 12pt;">${hindi_session2}</span></span>SPACE_SYMBOLesaSPACE_SYMBOLvk;¨ftr rRlEcUèkh lEiw.kZ ijh{kk <span style="font-weight: bold;">${hindi_division}</span>SPACE_SYMBOLJs.khSPACE_SYMBOLesaSPACE_SYMBOL<span style="font-weight: bold;">${hindi_dist}</span>SPACE_SYMBOLmÙkh.kZSPACE_SYMBOLdjusSPACE_SYMBOLdsSPACE_SYMBOLmijkUrSPACE_SYMBOL<span style="font-weight: bold;">${hindi_spec}</span>SPACE_SYMBOLdhSPACE_SYMBOLmikfèkSPACE_SYMBOLiznkuSPACE_SYMBOLdhSPACE_SYMBOLtkrhSPACE_SYMBOLgSA`;
      temp_sentence_1 = temp_sentence_1.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      
      let  eng_sentence_1 = `This is to certify that <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${fullname}</span> son/daughter of <span style="font-weight: bold; font-family: bankgothicmd; font-style:italic;">Sh. ${fathername},</span> a student of ${other2}, (Batch: ${other4}) in the ${other3} is hereby awarded the degree of <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other8}</span> on his/her having passed the entire examination for the said degree held in <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other5}</span> in <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other6}</span> division<span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other7 ? ` ${other7}` : ''}</span>.`;
      
      let main_content = `
      <img style="width: 210mm; height: 297mm; position: absolute; top: 0px; left: 0px;" src="${myip}/images/Gjust/template189front.png" />
      ${serialpart}
      <div style="position: absolute; top:17.5mm; left: 171mm; font-family: timesnewroman; font-size: 12pt; font-style: italic;color: #000000;">${rollnumber}</div>
      <table style="width: 170mm; position: absolute; top:74mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_hindi_font}; font-family: krutidev010regular; color: #33cccc; text-align: center; margin-top: 30px; font-weight: bold;">${hindi_coursename}</td>
          </tr>
          </tr>
          <tr>
            <td style="font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #000000; text-align: justify; line-height: ${line_height};text-indent: 20mm;"> 
              ${temp_sentence_1}
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 170mm; position: absolute; top:150mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_eng_font}; font-family: oldenglish; color: #33cccc; text-align: center; padding-top: 30px; font-weight: bold;">${other1}</span></td>
          </tr>
          <tr>
            <td style="font-size: ${content_eng_font}; font-family: oldenglish; color: #000000; text-align: justify; line-height: ${line_height}; text-indent: 20mm;">
              ${eng_sentence_1}  
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 190mm; position: absolute; top:240mm; left: 50%; transform: translateX(-50%);">
        <tbody>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                  
            <img style="text-align: center; height: 18mm; margin-left:21mm" src="${myip}/images/Gjust/CoE1.png">                
            </td>                
            <td style="width: 86mm; text-align: center;">               
            </td>                
            <td style="width: 40mm; text-align: center;">                  
              <img style="text-align: center; height: 10mm; width: 24mm; margin-bottom:6mm;" src="${myip}/images/Gjust/${viceChancellor}">                
            </td>              
          </tr>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                               
            </td>                
            <td style="width: 86mm; text-align: center;">                
            </td>                
            <td style="width: 40mm; text-align: center;">                  
              <img style="text-align: center; width:35mm; height: 9mm;margin-top: 5mm;" src="${myip}/images/Gjust/${chancellor}">                
            </td>              
          </tr>          
        </tbody>
      </table>
      <div style="position: absolute; top:273mm; left:15mm;">
      <div style="font-family: krutidev010regular; font-size: 12pt; color: #000000; text-align: left;">${hdate}</div>
      <div style="font-family: timesnewromanitalic; font-size: 13pt; color: #000000;">Hisar-125001, Dated: <span style="font-family: timesnewroman; font-size: 13pt; color: #000000;">${convocation_date}</span></div>
      </div>
      </div>`;
      stringcontents = stringcontents.replace("MAIN_CONTENT", `${main_content}`.replace(/"/g,'\\"'));
    }
      return stringcontents;
      
  }
  catch(err){
      console.log(err);
      return stringcontents;
  }
}
async function template_replace_190(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername,convocation_date, other1, other2, other3, other4, other5, other6, other7, other8){
  try{                      
    let studentQuery = format(`select * from student_language where studentid='${mainstudentid}'`);
    console.log(studentQuery);
    let studentResult = await pool.query(studentQuery);
    if(studentResult.rowCount > 0){
      let element = studentResult.rows[0];
      let hindi_firstname = element.firstname.replace(/UPPER_DOT/g, "'");
      let hindi_fathername = element.fathername.replace(/UPPER_DOT/g, "'");
      let hindi_coursename = element.coursename.replace(/UPPER_DOT/g, "'");
      let hindi_crsecontent = element.specializationone.replace(/UPPER_DOT/g, "'");
      let hindi_convercationdate = element.other3.replace(/UPPER_DOT/g, "'");
      let hindi_department = element.department.replace(/UPPER_DOT/g, "'");
      let hindi_session1 = element.other1.replace(/UPPER_DOT/g, "'");
      let hindi_session2 = element.other2.replace(/UPPER_DOT/g, "'");
      let hindi_dist = element.other5.replace(/UPPER_DOT/g, "'");
      let hindi_division = element.other4.replace(/UPPER_DOT/g, "'");
      let hindi_spec = element.facultyname.replace(/UPPER_DOT/g, "'");

      const [day, month, year] = hindi_convercationdate.split('-');
      let temp_date = `${day}.${month}.${year}`;
      let isoDate = `${year}-${month}-${day}`;
      let hindi_date = await convertEnglishDateToKrutidevHindi(temp_date);
      let [hday, hmonth, hyear] = hindi_date.split('.');
      let hindi_hisar=`१२५००१`;
      let hdate = `fglkj&${hindi_hisar}]SPACE_SYMBOLfrfFk<span style="font-family: calibri;">:</span>SPACE_SYMBOL${hday}<span style="font-family: calibri;">.</span>${hmonth}<span style="font-family: calibri;">.</span>${hyear}`;

      let [from, to] = other4.split('-');
      let hfrom = await convertEnglishNumToKrutidevHindi(from);
      let hto = await convertEnglishNumToKrutidevHindi(to);
      hindi_session2 = await convertEnglishNumToKrutidevHindi(hindi_session2);
      hdate = hdate.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      if (other1 != "") other1 = ` ${other1}`;
      hindi_firstname = hindi_firstname.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_fathername = hindi_fathername.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_coursename = hindi_coursename.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_department = hindi_department.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_session1 = hindi_session1.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_dist = hindi_dist.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_division = hindi_division.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_crsecontent = hindi_crsecontent.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      hindi_spec = hindi_spec.toString().trim().split(" ").map((element) => element = `<span style="white-space: nowrap;">${element}</span>`).join(" ");
      
      let serialpart ="";
      if(serialnumber!=""){
        let bar_code = await generateBarcodeBase64(serialnumber);
        serialpart =`
        <div style="position: absolute; top:17.5mm; left: 15mm; font-family: zapfc; font-style: italic; font-size: 11pt; color: #000000;">Sl. No. ${serialnumber}</div>
        <img src="${bar_code}" style="position: absolute; width: 30mm; height:7mm; top:23mm; left:14mm;"/>`;
      }
      
      let line_height = '33.8px';
      let competency_hindi_font = '24pt';
      let competency_eng_font = '22pt';
      let content_hindi_font = '16pt';
      let content_eng_font = '14pt';
      
      const viceChancellors = [
        { name: "Prof. Tankeshwar Kumar.png", from: "2015-10-13", to: "2021-07-27" },
        { name: "Prof. B.R. Kamboj.png", from: "2021-08-07", to: "2023-05-02" },
        { name: "Prof. Narsi Ram Bishnoi.png", from: "2023-05-03", to: "9999-12-31" }, // Till Continued
      ];
      
      const registrars = [
        { name: "Dr. Anil Kumar Pundir.png", from: "2016-03-31", to: "2019-12-15" },
        { name: "Prof. Harbhajan Bansal.png", from: "2019-12-20", to: "2020-08-28" },
        { name: "Dr. Avnesh Verma.png", from: "2020-08-28", to: "2023-08-28" },
        { name: "Prof. Vinod Chhokar.png", from: "2023-08-29", to: "9999-12-31" }, // Till Date
      ];
      
      const chancellors = [
        { name: "Prof. Kaptan Singh Solanki.png", from: "2014-07-27", to: "2018-08-24" },
        { name: "Sh. Satyadeo Narain Arya.png", from: "2018-08-25", to: "2021-07-14" },
        { name: "Sh. Bandaru Dattatraya.png", from: "2021-07-15", to: "9999-12-31" }, // Till Continued
      ];
      let viceChancellor ='';
      let chancellor ='';
      for (let vc of viceChancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          viceChancellor = vc.name;
          break;
        }
      }
      for (let vc of chancellors) {
        const input = new Date(isoDate);
        const from = new Date(vc.from);
        const to = new Date(vc.to);
        if (input >= from && input <= to) {
          chancellor = vc.name;
          break;
        }
      }

      temp_sentence_1 = `izekf.krSPACE_SYMBOLfd;kSPACE_SYMBOLtkrkSPACE_SYMBOLgSSPACE_SYMBOLfdSPACE_SYMBOL<span style="font-weight: bold;">${hindi_firstname}</span>SPACE_SYMBOLlqiq=@lqiq=hSPACE_SYMBOLJh<span style="font-weight: bold;">SPACE_SYMBOL${hindi_fathername}</span>]SPACE_SYMBOL${hindi_department}SPACE_SYMBOLesaSPACE_SYMBOL${hindi_crsecontent}SPACE_SYMBOL¼cSp%SPACE_SYMBOL<span style="font-size: 12pt;">${hfrom}&${hto}</span>½SPACE_SYMBOLdsSPACE_SYMBOLfo|kFkhZSPACE_SYMBOLd¨SPACE_SYMBOLblSPACE_SYMBOLfo'ofo|ky;SPACE_SYMBOL}kjkSPACE_SYMBOL<span style="font-weight: bold;">${hindi_session1}SPACE_SYMBOL<span style="font-size: 12pt;">${hindi_session2}</span></span>SPACE_SYMBOLesaSPACE_SYMBOLvk;¨ftr rRlEcUèkh lEiw.kZ ijh{kk <span style="font-weight: bold;">${hindi_division}</span>SPACE_SYMBOLJs.khSPACE_SYMBOLesaSPACE_SYMBOL<span style="font-weight: bold;">${hindi_dist}</span>SPACE_SYMBOLmÙkh.kZSPACE_SYMBOLdjusSPACE_SYMBOLdsSPACE_SYMBOLmijkUrSPACE_SYMBOL<span style="font-weight: bold;">${hindi_spec}</span>SPACE_SYMBOLdhSPACE_SYMBOLmikfèkSPACE_SYMBOLiznkuSPACE_SYMBOLdhSPACE_SYMBOLtkrhSPACE_SYMBOLgSA`;
      temp_sentence_1 = temp_sentence_1.split("SPACE_SYMBOL").map((element) => element = element.indexOf("<span ") == -1 ? `<span style="white-space: nowrap;">${element}</span>` : element).join(" ");
      
      let  eng_sentence_1 = `This is to certify that <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${fullname}</span> son/daughter of <span style="font-weight: bold; font-family: bankgothicmd; font-style:italic;">Sh. ${fathername},</span> a student of ${other2} (Batch: ${other4}) in the ${other3} is hereby awarded the degree of <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other8}</span> on his/her having passed the entire examination for the said degree held in <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other5}</span> in <span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other6}</span> division<span style="font-weight: bold; font-style:italic; font-family: bankgothicmd;">${other7 ? ` ${other7}` : ''}</span>.`;
      
      let main_content = `
      <img style="width: 210mm; height: 297mm; position: absolute; top: 0px; left: 0px;" src="${myip}/images/Gjust/template190front.png" />
      ${serialpart}
      <div style="position: absolute; top:17.5mm; left: 171mm; font-family: timesnewroman; font-size: 12pt; font-style: italic;color: #000000;">${rollnumber}</div>
      <table style="width: 170mm; position: absolute; top:75mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_hindi_font}; font-family: krutidev010regular; color: #33cccc; text-align: center; margin-top: 30px; font-weight: bold;">${hindi_coursename}</td>
          </tr>
          </tr>
          <tr>
            <td style="font-size: ${content_hindi_font}; font-family: krutidev010regular; color: #000000; text-align: justify; line-height: ${line_height};text-indent: 20mm;"> 
              ${temp_sentence_1}
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 170mm; position: absolute; top:151mm; left: 50%; transform: translateX(-50%);">
        <tbody>
          <tr>
            <td style="font-size: ${competency_eng_font}; font-family: oldenglish; color: #33cccc; text-align: center; padding-top: 30px; font-weight: bold;">${other1}</span></td>
          </tr>
          <tr>
            <td style="font-size: ${content_eng_font}; font-family: oldenglish; color: #000000; text-align: justify; line-height: ${line_height}; text-indent: 20mm;">
              ${eng_sentence_1}  
            </td>
          </tr>
        </tbody>
      </table>
      <table style="width: 190mm; position: absolute; top:240mm; left: 50%; transform: translateX(-50%);">
        <tbody>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                  
            <img style="text-align: center; height: 18mm; margin-left:21mm" src="${myip}/images/Gjust/CoE1.png">                
            </td>                
            <td style="width: 86mm; text-align: center;">               
            </td>                
            <td style="width: 40mm; text-align: center;">                  
              <img style="text-align: center; height: 10mm; width: 24mm; margin-bottom:6mm;" src="${myip}/images/Gjust/${viceChancellor}">                
            </td>              
          </tr>              
          <tr>                
            <td style="width: 64mm; text-align: left;">                               
            </td>                
            <td style="width: 86mm; text-align: center;">                
            </td>                
            <td style="width: 40mm; text-align: center;">                  
              <img style="text-align: center; width:35mm; height: 9mm;margin-top: 5mm;" src="${myip}/images/Gjust/${chancellor}">                
            </td>              
          </tr>          
        </tbody>
      </table>
      <div style="position: absolute; top:273mm; left:15mm;">
      <div style="font-family: krutidev010regular; font-size: 12pt; color: #000000; text-align: left;">${hdate}</div>
      <div style="font-family: timesnewromanitalic; font-size: 13pt; color: #000000;">Hisar-125001, Dated: <span style="font-family: timesnewroman; font-size: 13pt; color: #000000;">${convocation_date}</span></div>
      </div>
      </div>`;
      stringcontents = stringcontents.replace("MAIN_CONTENT", `${main_content}`.replace(/"/g,'\\"'));
    }
      return stringcontents;
      
  }
  catch(err){
      console.log(err);
      return stringcontents;
  }
}

async function template_replace_137(stringcontents, rollnumber, serialnumber, fullname, competency_name, coursename, facultyname, department, coursecompletiondate, convocation_date, certificationcategory){
  try{
    fullname = fullname.replace(/UPPER_DOT/g, `'`);
    competency_name = competency_name.replace(/UPPER_DOT/g, `'`);
    facultyname = facultyname.replace(/UPPER_DOT/g, `'`);
    department = department.replace(/UPPER_DOT/g, `'`);
    coursecompletiondate = coursecompletiondate.replace(/UPPER_DOT/g, `'`);
    convocation_date = convocation_date.replace(/UPPER_DOT/g, `'`);
    coursename = coursename.replace(/UPPER_DOT/g, `'`);

    let replace_part = "";
    if(certificationcategory.toString().toLowerCase() == "english"){
      replace_part = `<center>
      <table style="width: 85%; margin-top: 20px;">
        <tbody>
          <tr style="line-height: 35px;">
            <td style="font-size: 14pt; font-family: timesnewroman; color: #1F497D; text-align: center; font-style: italic;">Upon the recommendation of the Academic Council hereby confers the degree of</td>
          </tr>          
          <tr>
            <td style="font-size: 22pt; font-family: timesnewroman; color: red; text-align: center; padding-top: 20px; font-weight: bold;">${competency_name}</td>
          </tr>
          <tr>
            <td style="font-size: 14pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px;">on</td>
          </tr>
          <tr>
            <td style="font-size: 16pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px;">Mr./Ms. <span style="font-weight: bold;">${fullname}</span></td>
          </tr>
          <tr>
            <td style="font-size: 14pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px; font-style: italic;">in recognition of the research work on</td>
          </tr>
          <tr style="line-height: 35px;">
            <td style="font-size: 16pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px; font-weight: bold;">${coursename}</td>
          </tr>
          <tr>
            <td style="font-size: 14pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px;"><span style="font-style: italic;">from the</span> <span style="font-weight: bold;">${department}</span> <span style="font-style: italic;">under the</span> <span style="font-weight: bold;">${facultyname}</span></td>
          </tr>
          <tr>
            <td style="font-size: 14pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px;"><span style="font-style: italic;">on</span> <span style="font-weight: bold;">${coursecompletiondate}</span></td>
          </tr>
          <tr>
            <td style="font-size: 14pt; font-family: timesnewroman; color: #1F497D; text-align: center; padding-top: 15px; font-style: italic;">which has fulfilled all the requirements as prescribed by the UGC.</td>
          </tr>
        </tbody>
      </table>
      </center>`;
      stringcontents = stringcontents.replace("REPLACE_SUB_1", "");
      stringcontents = stringcontents.replace("REPLACE_SUB_2", `<span style=\\"font-size: 14pt;\\">English Translation</span>`);
      stringcontents = stringcontents.replace(/REPLACE_SUB_3/g, 'timesnewroman');
      stringcontents = stringcontents.replace("REPLACE_SUB_4", `No.: ${serialnumber}`);
      stringcontents = stringcontents.replace("REPLACE_SUB_5", `Enrollment No.: ${rollnumber}`);
    }
    else if(certificationcategory.toString().toLowerCase() == "hindi"){
      replace_part = `<table style="width: 78%; margin-top: 20px; margin-left: 85px;">
        <tbody>
          <tr>
            <td style="font-size: 14pt; font-family: krutidev010regular; color: #1F497D; text-align: center;">अकादमिक परिषद की अनुशंसा पर</td>
          </tr>          
          <tr>
            <td style="font-size: 22pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 20px;">Jh@lqJh <span style="font-weight: bold;">${fullname}</span></td>
          </tr>
          <tr>
            <td style="font-size: 18pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 15px;">dks</td>
          </tr>
          <tr style="line-height: 35px;">
            <td style="font-size: 20pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 15px; font-weight: bold;">${coursename}</td>
          </tr>
          <tr>
            <td style="font-size: 18pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 15px;">ij fd;s x, 'kks/k dk;Z dks Lohdkj djrs gq,</td>
          </tr>
          <tr>
            <td style="font-size: 26pt; font-family: krutidev010regular; color: red; text-align: center; padding-top: 15px; font-weight: bold;">${competency_name}</td>
          </tr>
          <tr>
            <td style="font-size: 13pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 15px;">की उपाधि <span style="font-weight: bold;font-size: 18pt;">${facultyname}</span> के तहत <span style="font-weight: bold;font-size: 18pt;">${department}</span> में</td>
          </tr>
          <tr>
            <td style="font-size: 18pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 15px;"><span style="font-weight: bold;">${coursecompletiondate}</span> dks çnku djrk gS]</td>
          </tr>
          <tr>
            <td style="font-size: 16pt; font-family: krutidev010regular; color: #1F497D; text-align: center; padding-top: 15px;">ftlls ;wthlh }kjk fu/kkZfjr lHkh vko';drkvksa dks iw.kZ fd;k x;k gSA</td>
          </tr>
        </tbody>
      </table>`;
      stringcontents = stringcontents.replace("REPLACE_SUB_1", `Ø- % <span style=\\"font-family: timesnewroman;\\">${serialnumber}</span>`);
      stringcontents = stringcontents.replace("REPLACE_SUB_2", `ukekadu Ø- % <span style=\\"font-family: timesnewroman;\\">${rollnumber}</span>`);
      stringcontents = stringcontents.replace(/REPLACE_SUB_3/g, 'krutidev010regular');
      stringcontents = stringcontents.replace("REPLACE_SUB_4", "");
      stringcontents = stringcontents.replace("REPLACE_SUB_5", "");
    }
    else {
      return stringcontents;
    }
    stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);
    stringcontents = stringcontents.replace(/STD_ID/g, rollnumber);
    stringcontents = stringcontents.replace(/CONVOCATION_DATE/g, convocation_date);
    stringcontents = stringcontents.replace("top: 1055px", "top: 1090px");
    stringcontents = stringcontents.replace("MAIN_REPLACE_PART", replace_part.replace(/"/g,'\\"'));
    return stringcontents; 
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
}

async function template_replace_138(stringcontents, fullname, certificationcategory, competency_name, coursename, rollnumber, serialnumber, coursecompletiondate){
  try{
    let main_content = "";
    if (certificationcategory.toString().toLowerCase().trim() == "degree"){
      if (coursename == ""){
        main_content = `
        <table style="width: 95%; margin-top: 370px;">
          <tbody>
            <tr>
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">having fulfilled the academic requirements successfully</td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">in <span style="font-weight: bold;">${coursecompletiondate}</span></td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">has this day been admitted by the</td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">Governing Body</td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">to the Degree of</td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${competency_name}</td>
            </tr>
            <tr style="line-height: 55px;">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">Given under the seal of the University</td>
            </tr>
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; margin-top: 60px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      else {
        main_content = `
        <table style="width: 95%; margin-top: 370px;">
          <tbody>
          <tr>
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">having fulfilled the academic requirements successfully</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">in <span style="font-weight: bold;">${coursecompletiondate}</span></td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">has this day been admitted by the</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">Governing Body</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">to the Degree of</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${competency_name}</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${coursename}</td>
          </tr>
          <tr style="line-height: 55px;">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">Given under the seal of the University</td>
          </tr>
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; margin-top: 0px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      stringcontents = stringcontents.replace("SUB_REPLACE_1", "S. No. ");
      stringcontents = stringcontents.replace("SUB_REPLACE_2", serialnumber);
      stringcontents = stringcontents.replace("MAIN_CONTENT", main_content.replace(/"/g,'\\"'));
    }    
    else if (certificationcategory.toString().toLowerCase().trim() == "phd"){      
      if (coursename == ""){
        let line_height = '55px';
        main_content = `
        <table style="width: 95%; margin-top: 355px;">
          <tbody>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">This is certify that</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">was awarded the degree of</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">Doctor</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">of</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">Philosophy</td>
            </tr>
            <tr style="line-height: ${line_height};">
            <td style="text-align: center; font-size: 15pt; font-family: cambria;">On the ${coursecompletiondate}.</td>
            </tr>
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; margin-top: 90px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      else {
        let line_height = '45px';
        main_content = `
        <table style="width: 95%; margin-top: 355px;">
          <tbody>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">This is certify that</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">${fullname.toString().toUpperCase()}</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">was awarded the degree of</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">Doctor</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">of</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold; letter-spacing: 1.2px;">Philosophy</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">in</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 16pt; font-family: cambria; font-weight: bold;">${coursename}</td>
            </tr>
            <tr style="line-height: ${line_height};">
              <td style="text-align: center; font-size: 15pt; font-family: cambria;">On the ${coursecompletiondate}.</td>
            </tr>
          </tbody>
        </table>
        <table style="width: 100%; height: 80px; margin-top: 50px;">
          <tbody>
            <tr>
              PRINT_CODE
            </tr>
          </tbody>
        </table>
        `;
      }
      stringcontents = stringcontents.replace("SUB_REPLACE_1", "S. No. ");
      stringcontents = stringcontents.replace("SUB_REPLACE_2", serialnumber);
      stringcontents = stringcontents.replace("MAIN_CONTENT", main_content.replace(/"/g,'\\"'));  
    }
    else{
      return stringcontents;
    }
    stringcontents = stringcontents.replace("STD_ID", rollnumber);
    
    stringcontents = stringcontents.replace("COMPLETION_DATE", coursecompletiondate);
    // stringcontents = stringcontents.replace("TEMPLATE_138_BACKGROUND", "https://www.certonce.com/images/CUTM/template130background.png");
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_139(stringcontents, puserid, cohortid, main_std_id, fullname, competencyname, rollnumber, aadhaarnumber, student){
  try{
    let sub_content = {};
    let font_size_1 = '9pt';
    let font_size_2 = '8pt';
    let font_size_3 = '8pt';
    let aadhaar_content = "";
    if (aadhaarnumber != "") aadhaar_content=`Aadhaar No.: &nbsp;&nbsp;${aadhaarnumber}`;
    for (let index = 1; index < 9; index++){
      let semester_title = "";
      if (index == 1) semester_title = "1st Semester";
      else if (index == 2) semester_title = "2nd Semester";
      else if (index == 3) semester_title = "3rd Semester";
      else semester_title = `${index.toString()}th Semester`;
      let descQuery = format(`select * from transcriptdescribe where cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${index.toString()}';`);
      let descResult = await pool.query(descQuery);
      let semesQuery = format(`select * from semestertranscript where cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${index.toString()}' order by other1;`);
      let semesResult = await pool.query(semesQuery);
      let tempcontent = "";
      semesResult.rows.forEach(element => {
        tempcontent += `<tr>
        <td style="width: 6%; font-size: ${font_size_3}; text-align: center; font-family: timesnewroman; vertical-align: top;">${element.other1}</td>
        <td style="width: 18%; font-size: ${font_size_3}; text-align: center; font-family: timesnewroman; vertical-align: top;">${element.subjecttype}</td>
        <td style="width: 60%; font-size: ${font_size_3}; text-align: left; font-family: timesnewroman; vertical-align: top;">${element.subjectcode}</td>
        <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: timesnewroman; vertical-align: top;">${element.credit}</td>
        <td style="width: 8%; font-size: ${font_size_3}; text-align: center; font-family: timesnewroman; vertical-align: top;">${element.grade}</td>
        </tr>`
      })
      tempcontent = `<table style="width: 98%;"><tbody>
      <tr>
      <td colspan="5" style="font-size: ${font_size_1};  text-align: center; font-family: kartikab;">${semester_title}</td>
      </tr>
      <tr>
        <td style="width: 6%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: kartikab;">Sl.No.</td>
        <td style="width: 18%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: kartikab;">Subject Code</td>
        <td style="width: 60%; font-size: ${font_size_2}; text-align: left; text-decoration: underline; font-family: kartikab;">Subject Name</td>
        <td style="width: 8%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: kartikab;">Credit</td>
        <td style="width: 8%; font-size: ${font_size_2}; text-align: center; text-decoration: underline; font-family: kartikab;">Grade</td>
        </tr>
      ${tempcontent}
      </tbody></table>`;
      tempcontent = `<div style="width: 50%; height: 230px; display: flex; flex-direction: column; justify-content: space-between;">
      ${tempcontent}
      <table style="width: 98%;"><tbody>
      <tr><td style="width: 100%; text-align: right; font-size: ${font_size_2}; font-family: kartikab;">Total Credit: &nbsp;&nbsp;${descResult.rows[0].other1}&nbsp;&nbsp;SGPA:${descResult.rows[0].other3}</td><tr>
      <tr><td style="width: 100%; text-align: right; font-size: ${font_size_2}; font-family: kartikab;">CGPA:${descResult.rows[0].cgpa}</td><tr>
      </tbody></table>
      </div>`;
      sub_content[index.toString()] = tempcontent;      
    }
    let content1 = `
    <div style="background-image: url('https://www.certonce.com/images/CUTM-AP/template139background11.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 210mm;">    
    <table style="width: 90%;"><tbody>
      <tr>
      <td id="replace_element" style="width: 100%; text-align: right;">
      MEMBER_PHOTO
      </td>
      </tr>
      </tbody></table>
      <table style="width: 90%; margin-top: 40px;"><tbody>
      <tr>
      <td style="width: 30%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Regd. No.: &nbsp;&nbsp;${rollnumber}</td>
      <td style="width: 30%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Name: &nbsp;&nbsp; ${fullname.toString().toUpperCase()}</td>
      <td style="width: 15%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">Batch: &nbsp;&nbsp; ${student.subother2}</td>
      <td style="width: 25%; text-align: left; font-size: ${font_size_1}; padding-top: 6px; font-family: kartikab;">${aadhaar_content}</td>
      </tr>
      <tr>
      <td style="width: 30%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">${student.subother3}</td>
      <td style="width: 30%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Programme: &nbsp;&nbsp;${competencyname}</td>
      <td colspan="2" style="width: 40%; text-align: left; font-size: ${font_size_1}; font-family: kartikab;">Branch: &nbsp;&nbsp;${student.subother4}</td>
      </tr>
      </tbody></table>
      <hr style="width: 90%; margin-top: 5px;">
      <div style="display: flex; width: 90%;">
      ${sub_content['1']}
      <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
      ${sub_content['2']}
      </div>
      <hr style="width: 90%;">
      <div style="display: flex; width: 90%;">
      ${sub_content['3']}
      <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
      ${sub_content['4']}
      </div></div>`;
    

    let content2 = `<div style="position: absolute; top: 797px; background-image: url('https://www.certonce.com/images/CUTM-AP/template139background12.png'); background-repeat: no-repeat; background-size: cover; width: 297mm; height: 207mm">
    <hr style="width: 90%; margin-top: 60px;">
      <div style="display: flex; width: 90%;">
      ${sub_content['5']}
      <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
      ${sub_content['6']}
      </div>
      <hr style="width: 90%;">
      <div style="display: flex;width: 90%;">
      ${sub_content['7']}
      <div style="border-left: 1px solid black; height: 220px; margin-top: 5px;"></div>
      ${sub_content['8']}
      </div>
      SUB_REPLACE_PART
      `;
    // stringcontents = stringcontents.replace(/template131e/g, "template131e_landscape");
    stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + content1.replace(/"/g,'\\"') + "</center><center>" + content2.replace(/"/g,'\\"') + '</center>');
    
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }  
}

async function template_replace_old_141_old(stringcontents, fullname, competency_name, rollnumber, certificationcategory, student){
  try{
    if (certificationcategory == "degree"){
      main_content = `<center>
      <p style="font-size: 18pt; margin-top: 150px; font-family: timesnewroman;">Hereby confers upon</p>
      <p style="font-size: 37pt; margin-top: 40px; font-family: edwarddianscript; text-decoration: underline; text-decoration-thickness: 2px; text-underline-offset: 3px;">${fullname}</p>
      <p style="font-size: 18pt; margin-top: 30px; font-family: timesnewroman;">the Degree of</p>
      <p style="font-size: 24pt; margin-top: 30px; font-family: timesnewroman; font-weight: bold;">${competency_name}</p>
      <p style="font-size: 18pt; margin-top: 30px; font-family: timesnewroman;">in fulfilment of the requirements prescribed for the award of the Degree</p>
      <p style="font-size: 18pt; margin-top: 30px; font-family: timesnewroman;">at the Convocation held on the <span style="font-weight: bold;">${student['subother2']}</span> of <span style="font-weight: bold;">${student['subother3']}</span> <span style="font-weight: bold;">${student['subother3']}</span></p>
      <p style="font-size: 16pt; margin-top: 30px;">Given under the seal of IILM University.</p>
      <table style="width: 95%; margin-top: 110px;"><tbody>
      <tr>
      <td style="width: 25%; text-align: center;">
      <img src="${myip}/images/IILM/iilm_gurugram_registrar.png" style="height: 40px; margin-bottom: 0px;">
      </td>
      <td rowspan="3" style="width: 50%; text-align: center;"></td>
      <td style="width: 25%; text-align: center;">
      <img src="${myip}/images/IILM/iilm_gurugram_chancellor.png" style="height: 40px; margin-bottom: -5px;"></td>
      </tr>
      <tr>
      <td style="width: 25%; text-align: center;">
      <hr style="width: 60%; margin: 0px auto;">
      </td>
      <td style="width: 25%; text-align: center;">
      <hr style="width: 60%; margin: 0px auto;">
      </td>
      </tr>
      <tr>
      <td style="width: 25%; text-align: center; font-size: 16pt; font-family: timesnewroman;">Registrar</td>
      <td style="width: 25%; text-align: center; font-size: 16pt; font-family: timesnewroman;">Vice Chancellor</td>
      </tr>
      </tbody></table>
      </center>`;
      stringcontents = stringcontents.replace("first_background", 'first_background_degree');
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", main_content.replace(/"/g,'\\"'));
    }
    else if (certificationcategory == "gold"){
      main_content = `<center>
      <p style="font-size: 24pt; margin-top: 150px; font-family: timesnewroman;">Dr Kulwant Rai Gold Medal</p>      
      <p style="font-size: 18pt; margin-top: 30px; font-family: timesnewroman;">for Overall Best Performance in Academic & Co-curricular Activities</p>
      <p style="font-size: 18pt; margin-top: 15px; font-family: timesnewroman;">in</p>
      <p style="font-size: 24pt; margin-top: 15px; font-family: timesnewroman; font-weight: bold;">${competency_name}</p>
      <p style="font-size: 18pt; margin-top: 15px; font-family: timesnewroman;">Awarded to</p>
      <p style="font-size: 37pt; margin-top: 20px; font-family: edwarddianscript; border-bottom: 2px solid #000;">${fullname}</p>
      <p style="font-size: 18pt; margin-top: 30px; font-family: timesnewroman;">at the Convocation held on the <span style="font-weight: bold;">${student['subother2']}</span> of <span style="font-weight: bold;">${student['subother3']}</span> <span style="font-weight: bold;">${student['subother4']}</span></p>
      <p style="font-size: 16pt; margin-top: 30px;">Given under the seal of IILM University.</p>
      <table style="width: 95%; margin-top: 180px;"><tbody>
      <tr>
      <td style="width: 25%; text-align: center;">
      <img src="${myip}/images/IILM/iilm_gurugram_registrar.png" style="height: 40px; margin-bottom: 0px;">
      </td>
      <td rowspan="3" style="width: 50%; text-align: center;"></td>
      <td style="width: 25%; text-align: center;">
      <img src="${myip}/images/IILM/iilm_gurugram_chancellor.png" style="height: 40px; margin-bottom: -5px;"></td>
      </tr>
      <tr>
      <td style="width: 25%; text-align: center;">
      <hr style="width: 60%; margin: 0px auto;">
      </td>
      <td style="width: 25%; text-align: center;">
      <hr style="width: 60%; margin: 0px auto;">
      </td>
      </tr>
      <tr>
      <td style="width: 25%; text-align: center; font-size: 16pt; font-family: timesnewroman;">Registrar</td>
      <td style="width: 25%; text-align: center; font-size: 16pt; font-family: timesnewroman;">Vice Chancellor</td>
      </tr>
      </tbody></table>
      </center>`;
      stringcontents = stringcontents.replace("first_background", 'first_background_gold');
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", main_content.replace(/"/g,'\\"'));
    }
    // stringcontents = stringcontents.replace("STD_NAME", fullname);
    // stringcontents = stringcontents.replace("COMPETENCY_NAME", competency_name);
    stringcontents = stringcontents.replace("STD_ID", rollnumber);
    // stringcontents = stringcontents.replace("CONVOCATION_DAY", student.subother2);
    // stringcontents = stringcontents.replace("CONVOCATION_MONTH", student.subother3);
    // stringcontents = stringcontents.replace("CONVOCATION_YEAR", student.subother4);
    stringcontents = stringcontents.replace("DEGREE_NUMBER", student.subother5);
    stringcontents = stringcontents.replace("IMAGE_REPLACE_1", `${myip}/images/IILM/iilm_gurugram_mark.png`);
    stringcontents = stringcontents.replace("IMAGE_REPLACE_2", `${myip}/images/IILM/iilm_gurugram_registrar.png`);
    stringcontents = stringcontents.replace("IMAGE_REPLACE_3", `${myip}/images/IILM/iilm_gurugram_chancellor.png`);
    stringcontents = stringcontents.replace("IMAGE_REPLACE_4", `${myip}/images/IILM/iilm_gurugram_stamp.png`);
    stringcontents = stringcontents.replace("SIGNATURE_REPLACE_1", `${myip}/images/IILM/iilm_gurugram_preparedbyr.png`);
    stringcontents = stringcontents.replace("SIGNATURE_REPLACE_2", `${myip}/images/IILM/iilm_gurugram_verification.png`);
    stringcontents = stringcontents.replace("SIGNATURE_REPLACE_3", `${myip}/images/IILM/iilm_gurugram_examination.png`);
    
   
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
}

async function template_replace_141(stringcontents, cohortid, certificationcategory, fullname, competency_name, rollnumber, coursecompletiondate, student){
  try{
    var footer_part = `<center><table style="width: 80%; position: absolute; top: 900px; left: 100px;"><tbody>      
      <tr>
        <td style="text-align: left; font-size: 12pt; font-family: timesnewroman;">
          <p style="margin-top: 5px; font-size: 12pt;">Authorized Signatory</p>
          <p style="margin-top: 5px; font-size: 12pt;">Contact- +911212775637</p>
          <p style="margin-top: 5px; font-size: 12pt;">Email ID- lalit.kapoor@iilm.edu</p>
          <p style="margin-top: 5px; font-size: 12pt;">DATE_OF_ISSUE</td>
        </td>
      </tr>
    </tbody></table></center>`;
    let sub1 = "";
    let sub2 = "";
    let sub3= "";
    let sub4 = "";
    if (student['sex'] == "F"){
      sub1 = "Ms";
      sub2 = "D/o";
      sub3 = "her";
      sub4 = "She";
    }
    else if (student['sex'] == "M"){
      sub1 = "Mr";
      sub2 = "S/o";
      sub3 = "his";
      sub4 = "He";
    }
    
    let main_content = "";
    if (certificationcategory.toLowerCase() == "migration"){
      main_content = `<center><table style="width: 75%; margin-top: 290px;"><tbody>        
        <tr>
          <td style="text-align: center;">
            <p style=" text-decoration: underline; font-size: 14pt; font-weight: bold; margin-top: 20px; font-family: timesnewroman;">MIGRATION CERTIFICATE</p>
          </td>
        </tr>
        <tr>
          <td style="text-align: center; ">
            <p style="font-size: 14pt; font-weight: bold; margin-top: 40px; font-family: timesnewroman;">TO WHOMSOEVER IT MAY CONCERN</p>
          </td>
        </tr>
        <tr style="line-height: 23pt;">
          <td style="">
            <p style="margin-top: 40px; text-align: justify; font-size: 12pt; font-family: timesnewroman; ">
            This is to certify that <span style="font-weight: bold;">${sub1}. ${fullname}</span> ${sub2} <span style="font-weight: bold;"> ${student['fathername']}</span> bearing registration No. <span style="font-weight: bold;">${rollnumber}</span> was a regular student of <span style="font-weight: bold;">${competency_name}</span> Course Batch ${student['subother1']}. ${sub4} was enrolled in IILM University, Gurugram and has successfully completed ${sub3} <span style="font-weight: bold;">${competency_name}</span> Course in year ${coursecompletiondate}.</p>
          </td>
        </tr>
        <tr style="line-height: 20pt;">
          <td style="">
            <p style="margin-top: 20px; text-align: justify; font-size: 12pt; font-family: timesnewroman;">IILM University has ‘No Objection’ to ${sub3} migration to another Educational Institution to pursure ${sub3} further studies.</p>
          </td>
        </tr>
        <tr style="line-height: 20pt;">
          <td style="">
            <p style="margin-top: 20px; text-align: justify; font-size: 12pt; font-family: timesnewroman;">This Migration Certificate may also be treated as a Transfer Certificate, if required by another Educational Institution.</p>
          </td>
        </tr>        
      </tbody></table></center>`;
      main_content += footer_part;
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", main_content.replace(/"/g,'\\"'));
      return stringcontents;
    }
    else if (certificationcategory.toLowerCase() == "bonafide"){
      main_content = `<center><table style="width: 80%; margin-top: 65px;"><tbody>            
      <tr>
        <td style="text-align: right; ">
          <img style="height: 90px; margin-right: 20px;" src="https://digi-record.iilm.edu.in/image/${cohortid}_${rollnumber}">
        </td>
      </tr>
    </tbody></table></center>
    <center><table style="width: 75%; margin-top: 150px;"><tbody>        
        <tr>
          <td style="text-align: center; ">
            <p style="text-decoration: underline; font-size: 14pt; font-weight: bold; font-family: timesnewroman;">To Whomsoever It May Concern</p>
          </td>
        </tr>
        <tr style="line-height: 23pt;">
          <td style="">
            <p style="margin-top: 50px; text-align: justify; font-size: 12pt; font-family: timesnewroman;">
            This is to certify that ${sub1}. ${fullname} ${sub2} ${student['fathername']} bearing Registration No. ${rollnumber} is a bona-fide student of ${competency_name} Batch ${student['subother1']} at IILM University, Gurugram.</p>
          </td>
        </tr>
        <tr style="line-height: 20pt;">
          <td style="">
            <p style="margin-top: 20px; text-align: justify; font-size: 12pt; font-family: timesnewroman;">As per record ${sub3} address is ${student['subother2']}.</p>
          </td>
        </tr>    
      </tbody></table></center>`;
      
      main_content += footer_part;
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", main_content.replace(/"/g,'\\"'));
      return stringcontents;
    }
    else return stringcontents;
  }
  catch(err){
    console.log(err);
    return stringcontents;
  }
}

async function template_replace_142(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, student){
  try{
    let body_html = "";
    let maincontent = [];
    let cgpa = "";
    let font_size_1 = '9pt';
    let font_size_2 = '11pt';
    let font_size_3 = '7pt';
    let font_size_4 = '13pt';
    let line_height = '12pt';
    let line_height_1 = '15pt';
    let continue_flag = true;
    let continue_index = 0;
    let headercontent = `<center><table style="width: 90%; padding-top: 130px; margin-bottom: 50px;"><tbody>
        <tr>
        <td colspan="3" style="font-size: ${font_size_4}; text-align: center;">MBA IN MARKETING AND INNOVATION (${student.subother1})</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Student Name</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${fullname}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Father Name</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${student.fathername}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Mother Name</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${student.mothername}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Roll Number</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${rollnumber}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left"></td>
        <td style="width: 3%; text-align: center"></td>
        <td style="width: 80%; text-align: right; font-weight: bold;">Issue Date: ${student.issueddate}</td>
        </tr>
      </tbody></table></center>`;
    while(continue_flag){      
      let sub_content = [];
      
      for(let count=1; count < 3; count++){
        let semester_index = continue_index * 2 + count;
        let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${semester_index.toString()}';`);
        let descResult = await pool.query(descQuery);
        let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${semester_index.toString()}';`);
        let semesResult = await pool.query(semesQuery);
        
        if (descResult.rowCount == 0 || semesResult.rowCount == 0) {
          continue_flag = false;
          for (let index=0; index < maincontent.length; index++){
            if (index == (maincontent.length - 1)) maincontent[index] = maincontent[index].replace(/CGPA_REPLACE/g, `<tr style="line-height: ${line_height_1}">
            <td colspan="6" style="font-size: ${font_size_1}; font-weight: bold;">CGPA : ${cgpa}</td>
            </tr>`);
            else maincontent[index] = maincontent[index].replace(/CGPA_REPLACE/g, '');
          }
          break;
        }
        else{
          cgpa = descResult.rows[0].cgpa;
          let tempcontent = "";
          semesResult.rows.forEach(element => {
            tempcontent += `<tr style="line-height: ${line_height};">
            <td style="width: 11%; font-size: ${font_size_1}; text-align: left; border: 1px solid black;">${element.subjecttype}</td>
            <td style="width: 49%; font-size: ${font_size_1}; text-align: left; border: 1px solid black;">${element.subjectcode}</td>
            <td style="width: 5%; font-size: ${font_size_1}; text-align: center; border: 1px solid black;">${element.credit}</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: left; padding-left: 30px; border: 1px solid black;">${element.other1}</td>
            <td style="width: 11%; font-size: ${font_size_1}; text-align: center; border: 1px solid black;">${element.other2}</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: center; border: 1px solid black;">${element.other3}</td>
            </tr>`;
          })
          tempcontent = `<center><table style=" width: 90%; border-collapse: collapse;"><tbody>
          <tr>
            <td colspan="6" style="font-size: ${font_size_2}; text-align: center; font-weight: bold;"><span style="font-size: ${font_size_4};">TRANSCRIPT</span> - Trimester ${descResult.rows[0].semesternumber}</td>
          </tr>
          <tr style="line-height: ${line_height};">
            <td style="width: 11%; font-size: ${font_size_1}; text-align: left; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Course Code</td>
            <td style="width: 49%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Course Name</td>
            <td style="width: 5%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Credit</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Grade Obtained</td>
            <td style="width: 11%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Grade Points</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Credit Points</td>
          </tr>
          ${tempcontent}
          <tr style="line-height: ${line_height};">
            <td colspan="2" style="text-align: right; background: #d3d3d3; border-left: 1px solid black; boder-bottom: 1px solid bottom; font-size: ${font_size_1}; font-weight: bold;">Total</td>
            <td style="text-align: center; background: #d3d3d3; font-size: ${font_size_1}; font-weight: bold;">${descResult.rows[0].other1}</td>
            <td style="text-align: center; background: #d3d3d3; boder-bottom: 1px solid bottom;"></td>
            <td style="text-align: center; background: #d3d3d3; boder-bottom: 1px solid bottom;"></td>
            <td style="text-align: center; background: #d3d3d3;border-right: 1px solid black; boder-bottom: 1px solid bottom; font-size: ${font_size_1}; font-weight: bold;">${descResult.rows[0].other2}</td>
          </tr>
          <tr style="line-height: ${line_height}">
          <td colspan="6"></td>
          </tr>
          <tr style="line-height: ${line_height_1};">
          <td colspan="6" style="font-size: ${font_size_1}; border-top: 1px solid black; padding-top: 20px; font-weight: bold;">Total Credit Points : ${descResult.rows[0].other2}</td>
          </tr>
          <tr style="line-height: ${line_height_1};">
          <td colspan="6" style="font-size: ${font_size_1}; font-weight: bold;">Total Credits : ${descResult.rows[0].other1}</td>
          </tr>
          <tr style="line-height: ${line_height_1};">
          <td colspan="6" style="font-size: ${font_size_1}; font-weight: bold;">SGPA : ${descResult.rows[0].other3}</td>
          </tr>`;
          if (count == 2) tempcontent += `CGPA_REPLACE</tbody></table></center>`;
          else tempcontent += `</tbody></table></center>`;
          // sub_content.push(tempcontent);
          sub_content += tempcontent;
        }
      }
      
      // if (sub_content.length > 0) maincontent.push(sub_content);      
      if (sub_content != "") maincontent.push(sub_content);      
      continue_index ++;
    }
    let note_content = `<center><table style="width: 90%;"><tbody>
    <tr>
    <td style="width: 85%; vertical-align: middle; font-size: ${font_size_3};">
      <table style="width: 100%;"><tbody>
      <tr>
      <td colspan="2" style="vertical-align: top; font-size: ${font_size_3}; font-weight: bold;">Note:</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">1.</td>
      <td style="width: 99%; font-size: ${font_size_3};">This is a web-based transcript. This is valid for all official purpose. Students are advised to get this transcript duly authenticated by the competent authority of IILM University, Gurugram.</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">2.</td>
      <td style="width: 99%; font-size: ${font_size_3};">Zero Credit course(s) do not count towards SGPA / CGPA computation.</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">3.</td>
      <td style="width: 99%; font-size: ${font_size_3};">Student obtaining Grade F or Ab shall be considered failed in that paper/subject and be required to reappear in the examination as per University norms.</td>
      </tr>
      </tbody></table>
    </td>
    <td style="width: 15%; text-align: center;">
    <img style="height: 80px; text-align: center;" src="PRINT_CODE" />
    </td>
    </tr>
    </tbody></table>
    <table style="width: 90%; margin-top: 0px;"><tbody>
    <tr>
    <td style="width: 75%; vertical-align: middle; text-align: left;">
      <table style="width: 100%;"><tbody>
      <tr>
      <td colspan="2" style="font-size: ${font_size_3}; font-weight: bold;">Disclaimer:</td>
      </tr>
      <tr>
      <td style="width: 1%; font-size: ${font_size_3};">1.</td>
      <td style="width: 99%; font-size: ${font_size_3};">The result displayed on the university website and transcript is subject to correction, if any discrepancy is noticed at any point of time.</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">2.</td>
      <td style="width: 99%; font-size: ${font_size_3};">Students should immediately contact the examination department if there is any discrepancy in the above result Controller of Examination IILM University, Gurugram.</td>
      </tr>    
      </tbody></table>
    </td>
    <td style="width: 25%; text-align: center;">
    <img style="height: 45px; text-align: center;" src="${myip}/images/IILM/iilm_gurugram_controller.png" />
    <p style="font-weight: bold; text-align: center; font-size: ${font_size_2}; margin-top: -5px;">Controller of Examination</p>
    <p style="text-align: center; font-size: ${font_size_2};">IILM University, Gurugram</p>
    </td>
    </tr>
    </tbody></table></center>`;
    let last_content = `<center>    
    <table style="width: 90%; border-collapse: collapse;"><tbody>
    <tr>
    <td colspan="3">
      <p style="font-size: ${font_size_4}; margin-top: 15px;">GRADING SYSTEM</p>
      <p style="font-size: ${font_size_3}; margin-top: 5px;">IILM university, Gurugram follows a unique course credit regulation and grading for its post-graduate programs. Flexibility in course offering and spread of marks for a grade are the hall mark of the system.</p>
      <p style="font-size: ${font_size_3}; margin-top: 10px; margin-bottom: 5px;">Each letter grade awarded to the student in indicates the level of performance in a course and has a grade point for the purpose of computing Semester Grade Point Average(SGPA) and Cumulative Grade Point Average (CGPA) as given below:</p>
    </td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_4}; border: 1px solid black; text-align: left; background: #d3d3d3;">Academic Performance</td>
    <td style="width: 15%; font-size: ${font_size_4}; border: 1px solid black; text-align: center; background: #d3d3d3;">Grade</td>
    <td style="width: 30%; font-size: ${font_size_4}; border: 1px solid black; text-align: center; background: #d3d3d3;">Grade Points</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Outstanding</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">A+</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">10</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Excellent</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">A</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">9</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Very Good</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">B+</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">8</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Good</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">B</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">7</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Above Average</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">C+</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">6</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Average</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">C</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">5</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Pass</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">D</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">4</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Fail</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">F</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">0</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Absent</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">Ab</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">0</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Incomplet</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">I</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;"></td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Withdrawal</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">W</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">-</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Satisfactory</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">S</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">-</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Unsatisfactory</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">X</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">-</td>
    </tr>
    <tr>
    <td colspan="3" style="text-align: left;">
    <p style="font-size: ${font_size_3}; margin-top: 10px;">Semester Grade Point Average (SGPA) is calculated as below for all the coursed in which the student has enrolled in the Semester:</p>
    <p style="font-size: ${font_size_3}; padding-left: 190px;">SGPA (Si) = (Ci x Gi) / Ci</p>
    <p style="font-size: ${font_size_3}; margin-top: 10px;">where Ci is the number of credits of the ith course and Gi is the grade scored by student in the ith course.</p>
    <p style="font-size: ${font_size_3}; margin-top: 20px;">Cumulative Grade Point Average (CGPA) is calculated as below for all the coursed in which the student has enrolled in the Semester:</p>
    <p style="font-size: ${font_size_3}; padding-left: 200px;">CGPA = (Ci x Si) / Ci</p>
    <p style="font-size: ${font_size_3}; margin-top: 10px;">where Si is the SGPA for the ith Semester and Ci is the total number of credits in that Semester</p>
    <p style="font-size: ${font_size_3}; margin-top: 20px;">Conversion of Cumulative Grade Point Average (CGPA) into percentage (%):</p>
    <p style="font-size: ${font_size_3}; padding-left: 180px;">Percentage (%) = CGPA * 9.5</p>
    </tr>
    <tr>
    <td colspan="3" style="text-align: left;">
      <img style="height: 30px; margin-left: 60px; margin-top: -10px;" src="${myip}/images/IILM/iilm_gurugram_checkedby.png" />
    </td>   
    </tr>
    <tr>
    <td colspan="3" style="text-align: left;">   
    <p style="font-size: ${font_size_3}; margin-top: -10px;">Checked by: &nbsp;&nbsp;&nbsp;<span style="text-decoration: underline; text-decoration-style: dotted;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>(Exam Co-ordinator)</p>
    </td>
    </tr>
    </tbody></table>
    <p style="font-size: ${font_size_4}; margin-top: 245px;">1 Knowledge Cneter, Gold Course Road, IILM University, Sector 53, Gurugram, Haryana 122003</p>
    </center>
    `;

    // maincontent[maincontent.length - 1].push(note_content);   
    maincontent[maincontent.length - 1] += note_content;
    // maincontent.map((element) => {
    //   let temp1 = "";
    //   for (let index = 0; index < element.length; index++){
    //     temp1 += element[index];
    //   }
    //   return `${headercontent}${temp1}`;
    //   // return headercontent + element.join('');
    // });
    maincontent.push(`${last_content}`);
    for (let index=0; index < maincontent.length; index++){
      body_html += `<div style="background-image: url('${myip}/images/IILM/template142background.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 296mm;">${headercontent}${maincontent[index]}</div>`;
    }
    stringcontents = stringcontents.replace("MAIN_REPLACE_PART", body_html.replace(/"/g,'\\"'));
    
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
  
}
async function template_replace_207(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, student){
  try{
    let body_html = "";
    let maincontent = "";

    mainContent=`
    <p style="position: absolute; top: 25mm; width: 10%; left: 90%; transform: translateX(-50%); fontSize: 14pt; fontFamily:calibri; marginTop:10px; marginBottom:0px;>EnrollNumber</p>
    <p style="position: absolute; top: 80mm; width: 80%; left: 50%; transform: translateX(-50%); fontSize: 29pt; fontFamily:timesnewromanbold; marginTop:10px; marginBottom:0px; color:#1f2f57;">STD_NAME</p>
    <p style="position: absolute; top: 100mm; width: 80%; left: 50%; transform: translateX(-50%); fontSize: 17pt; fontFamily:timesnewromanbold; marginTop:10px; marginBottom:0px; color:#1f2f57;">COMPETENCY_NAME</p>
    <p style="position: absolute; top: 110mm; width: 20%; left: 75%; transform: translateX(-50%); fontSize: 16pt; fontFamily:calibri; marginTop:10px; marginBottom:0px;>COMPLETION_DATE</p>
    <p style="position: absolute; top: 130mm; width: 40%; left: 50%; transform: translateX(-50%); fontSize: 16pt; fontFamily:calibri; marginTop:10px; marginBottom:0px;>DIVISION</p>
    <center style="position: absolute; top: 170mm; width: 90%; left: 50%; transform: translateX(-50%);>
      <table style={{ width: '100%', marginTop: '320px' }}>
        <tbody>
            <tr>
                <td style={{ width: '33%', textAlign: 'center' }}>
                    <img style={{ height: '51px' }} src="${myip}/images/IILM/iilm_gn_reg_new.png" />
                </td>
                <td style={{ width: '34%', textAlign: 'center' }}>
                    <img style={{ height: '51px' }} src="${myip}/images/IILM/iilm_gn_vice.png" />
                </td>
                <td style={{ width: '33%', textAlign: 'center' }}>
                    <img style={{ height: '39px' }} src="${myip}/images/IILM/controller_exam.png" />
                </td>
            </tr>
        </tbody>
      </table>
    </center>`;

        
    for (let index=0; index < maincontent.length; index++){
      body_html += `<div style="background-image: url('${myip}/images/IILM/template207background.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 296mm;">${maincontent}</div>`;
    }
    stringcontents = stringcontents.replace("MAIN_REPLACE_PART", body_html.replace(/"/g,'\\"'));
    
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
  
}

async function template_replace_143(stringcontents, certificationcategory, fullname, competency_name, rollnumber, coursecompletiondate, student){
  try{
    let header_part = `<center><table style="width: 80%; margin-top: 20px;"><tbody>
      <tr>
        <td><img style="height: 30px;" src="${myip}/images/IILM/iilm_gurugram_mark.png" /></td>
      </tr>
      <tr>
        <td><hr style="width: 100%; margin-top: 5px;"></td>
      </tr>
      <tr>
        <td style="text-align: right; font-size: 10pt;">
          <p style="margin-top: 0px;">16, Knowledge PArk II,</p>
          <p style="margin-top: 0px;">Greater Noida</p>
          <p style="margin-top: 0px;">Ittar Pradesh 201306</p>
          <p style="margin-top: 0px;">www.iilm.edu</p>
        </td>
      </tr>
    </tbody></table></center>`;
    let sub1 = "";
    let sub2 = "";
    let sub3= "";
    let sub4 = "";
    if (student['sex'] == "F"){
      sub1 = "Ms";
      sub2 = "D/o";
      sub3 = "her";
      sub4 = "She";
    }
    else if (student['sex'] == "M"){
      sub1 = "Mr";
      sub2 = "S/o";
      sub3 = "his";
      sub4 = "He";
    }
    let main_content = "";
    if (certificationcategory.toLowerCase() == "bonafide"){
      main_content = `<center><table style="width: 80%; margin-top: 255px;"><tbody>
        <tr>
          <td style="width: 100%; font-size: 14pt; font-weight: bold; text-align: right; padding-top: 50px;">Dated : ${coursecompletiondate}</td>
        </tr>
        <tr>
          <td style="text-align: center; ">
            <p style="font-size: 18pt; font-weight: bold; margin-top: 50px;">TO WHOMSOEVER IT MAY CONCERN</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 50px; text-align: justify; font-size: 14pt; letter-spacing: 1.2px;">
            This is to certify that ${fullname.toUpperCase()} <span style="font-weight: bold;">${sub2} ${student['fathername']}, ROLL NO. ${rollnumber}</span> is a bonafide student of ${competency_name} ${student['subother1']} year in session ${student['subother2']} of this college.</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 25px; text-align: justify; font-size: 14pt; letter-spacing: 1.2px;">This certificate is being issued upon ${sub3} request for the purpose of ${student['subother3']}.</p>
          </td>
        </tr>
        <tr>
          <td><img style="height: 70px; margin-top: 20px;" src="${myip}/images/backend/empty.png" /></td>
        </tr>
        <tr>
          <td style="width: 100%;">
            <p style=" font-size: 14pt; font-weight: bold; text-align: left;">(Authorized Signatory)</p>
          </td>
        </tr>
      </tbody></table></center>`;
      // main_content = header_part + main_content;
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + main_content.replace(/"/g,'\\"') + '</center>');
      return stringcontents;
    }
    else if (certificationcategory.toLowerCase() == "degree"){
      main_content = `<center>
      <p style="font-size: 16pt; margin-top: 150px;">Hereby confers upon</p>
      <p style="font-size: 24pt; margin-top: 40px; font-family: BaroqueScript; text-decoration: underline;">${fullname}</p>
      <p style="font-size: 16pt; margin-top: 30px;">the Degree of</p>
      <p style="font-size: 22pt; margin-top: 30px; font-weight: bold;">${competency_name}</p>
      <p style="font-size: 16pt; margin-top: 30px;">in fulfilment of the requirements prescribed for the award of the Degree</p>
      <p style="font-size: 16pt; margin-top: 30px;">at the Convocation held on the <span style="font-weight: bold;">Twenty Second Day</span> of <span style="font-weight: bold;">July</span> <span style="font-weight: bold;">Twenty Twenty Three</span></p>
      <p style="font-size: 16pt; margin-top: 30px;">given under the seal of <span style="font-weight: bold;">IILM University, Gurugram Noida</span></p>
      <table style="width: 95%; margin-top: 110px;"><tbody>
      <tr>
        <td style="width: 20%; text-align: center;">
          <img src="${myip}/images/backend/empty.png" style="height: 25px; margin-bottom: 0px;">
        </td>
        <td rowspan="2" style="width: 60%; text-align: center;">
          <img src="${myip}/images/IILM/iilm_gurugram_mark.png" style="height: 35px;">
        </td>
        <td style="width: 20%; text-align: center;">
          <img src="${myip}/images/backend/empty.png" style="height: 25px; margin-bottom: -5px;">
        </td>
      </tr>      
      <tr>
        <td style="width: 20%; text-align: center; font-size: 16pt;">Registrar</td>
        <td style="width: 20%; text-align: center; font-size: 16pt;">Vice Chancellor</td>
      </tr>
      </tbody></table></center>`
      stringcontents = stringcontents.replace(/template143e/g, "template143e_degree");
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", main_content.replace(/"/g,'\\"'));
      return stringcontents;
    }
    else if (certificationcategory.toLowerCase() == "migration"){
      main_content = `<center>
      <table style="width: 80%; margin-top: 225px;"><tbody>
        <tr style="line-height: 22px;">
          <td style="width: 100%; text-align: right; padding-top: 50px;">Migration No. : ${student['subother1']}</td>
        </tr>
        <tr>
          <td style="text-align: center;">
            <p style=" text-decoration: underline; font-size: 18pt; font-weight: bold; margin-top: 30px; margin-bottom: 50px;">MIGRATION CERTIFICATE</p>
          </td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22px;">
          <td style="width: 12%; ">Sh./Smt./KM.</td>
          <td style="width: 88%; text-align: center;">${fullname}</td>
        </tr>
        <tr>
          <td style="width: 12%;">
          </td>
          <td style="width: 88%;"><hr style="width: 100%; border-top: 1px solid black; margin-top: -3px;"></hr></td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22px;">
          <td style="width: 22%; ">Son/daughter of Shri </td>
          <td style="width: 78%; text-align: center;">${student['fathername']}</td>
        </tr>
        <tr>
          <td style="width: 22%;">
          </td>
          <td style="width: 78%;"><hr style="width: 100%; border-top: 1px solid black; margin-top: -3px;"></hr></td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22px;">
          <td colspan="2" style="text-align: left">Student of IILM University, Greater Noida</td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22px;">
          <td style="width: 21%; ">University Roll No.</td>
          <td style="width: 79%; text-align: center;"> ${rollnumber}</td>
        </tr>
        <tr>
          <td style="width: 21%;"></td>
          <td style="width: 79%;"><hr style="width: 100%; border-top: 1px solid black; margin-top: -3px;"></hr></td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22px;">
          <td style="width: 16%; ">Coure / Branch </td>
          <td style="width: 84%; text-align: center;">${competency_name}</td>
        </tr>
        <tr>
          <td style="width: 16%;"></td>
          <td style="width: 84%;"><hr style="width: 100%; border-top: 1px solid black; margin-top: -3px;"></hr></td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22px;">
          <td style="width: 8%; ">Division: </td>
          <td style="width: 42%; text-align: center;">${student['subother3']}</td>
          <td style="width: 15%; ">Passing Year:</td>
          <td style="width: 35%; text-align: center;"> ${student['subother2']}</td>
        </tr>
        <tr>
          <td style="width: 8%;"></td>
          <td style="width: 42%;"><hr style="width: 100%; border-top: 1px solid black; margin-top: -3px;"></hr></td>
          <td style="width: 15%;"></td>
          <td style="width: 35%;"><hr style="width: 100%; border-top: 1px solid black; margin-top: -3px;"></hr></td>
        </tr>
      </tbody></table>
      <table style="width: 80%;"><tbody>
        <tr style="line-height: 22pt;">
          <td colspan="2" style="text-align: justify;">is informed that this University has no objection to his / her joining any other University.</td>
        </tr>
        <tr style="line-height: 22pt;">
          <td colspan="2" style="">
          <p style="text-align: justify; margin-top: 25px;">The University is not aware of anything against his / her character or conduct which should be bar to his / her admission to another University.</p></td>
        </tr>
        <tr>
          <td style="width: 50%; text-align: left;">
            <img style="width: 60px; text-align: left" src="${myip}/images/backend/empty.png" />
          </td>
          <td style="">
            <img style="width: 60px; text-align: left" src="${myip}/images/backend/empty.png" />
          </td>
        </tr>
        <tr>
          <td style="width: 50%; text-align: left;">Date: DATE_OF_ISSUE</td>
          <td style="width: 50%; text-align: right;">Registrar</td>
        </tr>
        <tr>
          <td style="width: 50%; text-align: left; padding-top: 15px;">Place: Greater Noida</td>
          <td style="width: 50%; text-align: left;"></td>
        </tr>
      </tbody></table>
      </center>`;
      // main_content = header_part + main_content;
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + main_content.replace(/"/g,'\\"') + '</center>');
      return stringcontents;
    }
    else if (certificationcategory.toLowerCase() == "transfer"){
      main_content = `<center><table style="width: 80%; margin-top: 255px;"><tbody>
        <tr>
          <td style="width: 50%; text-align: left; padding-top: 50px;">${student['subother2']}</td>
          <td style="width: 50%; text-align: right; padding-top: 50px;">Dated: ${coursecompletiondate}</td>
        </tr>
        <tr>
          <td colspan="2" style="text-align: center; text-decoration: underline; font-size: 18pt; font-weight: bold; padding-top: 30px;">TRANSFER CERTIFICATE</td>
        </tr>
        <tr style="line-height: 18pt;">
          <td colspan="2" style="padding-top: 50px; text-align: justify;">
          Certified that ${fullname.toUpperCase()} ${sub2} ${student['fathername']} (Roll No. ${rollnumber}) had been a bonafide student of ${student['subother1']} ${competency_name} ${student['subother3']} batch of our institution.
          </td>
        </tr>
        <tr style="line-height: 18pt;">
          <td colspan="2" style="padding-top: 25px; text-align: justify;">
          ${sub4} has successfully passed out in ${student['subother4']} in the year ${student['subother5']}. Our Institution has “NO OBJECTION” if <span style="text-align: justify">${fullname}</span> is being selected in any programme of any University / Institution within the country or abroad.
          </td>
        </tr>
        <tr style="line-height: 18pt;">
          <td colspan="2" style="padding-top: 25px; text-align: justify;">
          To the best of my knowledge, ${sub4.toLowerCase()} bears a good moral character.
          </td>
        </tr>
        <tr>
          <td  colspan="2">
          <img style="height: 70px;" src="${myip}/images/backend/empty.png"/>
          </td>
        </tr>
        <tr>
          <td colspan="2" style="width: 100%; font-weight: bold; text-align: left; padding-top: 20px;">(Authorized Signatory)</td>
        </tr>
        <tr>
          <td colspan="2" style="width: 100%; text-align: left; padding-top: 90px;">Date: DATE_OF_ISSUE</td>
        </tr>
        <tr>
          <td colspan="2" style="width: 100%; text-align: left;  padding-top: 25px;">Place: Greater Noida</td>
        </tr>
      </tbody></table></center>`;
      // main_content = header_part + main_content;
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", main_content.replace(/"/g,'\\"'));
      return stringcontents;
    }
    else if (certificationcategory.toLowerCase() == "relieving"){
      main_content = `<center><table style="width: 80%; margin-top: 50px;"><tbody>
        <tr>
          <td style="width: 100%; font-size: 14pt; font-weight: bold; text-align: right">Dated : ${coursecompletiondate}</td>
        </tr>
        <tr style="line-height: 23pt;">
          <td style="width: 100%; font-size: 14pt; font-weight: bold; text-align: left">NAME : ${fullname}</td>
        </tr>
        <tr style="line-height: 23pt;">
          <td style="width: 100%; font-size: 14pt; font-weight: bold; text-align: left">ADDRESS : ${student['subother1']}</td>
        </tr>
        <tr>
          <td style="text-align: center; ">
            <p style="text-decoration: underline; font-size: 18pt; font-weight: bold; margin-top: 50px;">RELIEVING AFTER RESIGNATION</p>
          </td>
        </tr>
        <tr>
          <td style="text-align: left; ">
            <p style="font-size: 14pt; margin-top: 35px;">Dear <span style="text-decoration: underline; ">&nbsp;&nbsp;&nbsp;${fullname}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>,</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 35px; text-align: justify; font-size: 14pt;">
            This has reference to your letter tendering resignation from the services of the organization. We wish to inform you that your resignation was accepted and you were relieved from services of the organization with effect from <span style="text-decoration: underline; text-align: justify;">&nbsp;&nbsp;&nbsp;&nbsp;${student['subother2']}&nbsp;&nbsp;&nbsp;&nbsp;,</span> after closing of working hours.</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 25px; text-align: justify; font-size: 14pt;">Final settlement of your dues or recovery, if any, will be done after completion of internal clearance process.</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 25px; text-align: justify; font-size: 14pt;">Wishing you all the best in your future endeavors.</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 25px; text-align: justify; font-size: 14pt;">Thanking You,</p>
          </td>
        </tr>
        <tr style="line-height: 25pt;">
          <td style="">
            <p style="margin-top: 25px; text-align: justify; font-size: 14pt;">Yours faithfully</p>
          </td>
        </tr>
        <tr>
          <td><img style="height: 70px; margin-top: 20px;" src="${myip}/images/backend/empty.png" /></td>
        </tr>
        <tr>
          <td style="width: 100%;">
            <p style=" font-size: 14pt; font-weight: bold; text-align: left;">(Authorized Signatory)</p>
          </td>
        </tr>
      </tbody></table></center>`;
      main_content = header_part + main_content;
      stringcontents = stringcontents.replace("MAIN_REPLACE_PART", '<center>' + main_content.replace(/"/g,'\\"') + '</center>');
      return stringcontents;
    }
    else return stringcontents;
  }
  catch(err){
    console.log(err);
    return stringcontents;
  }
}

async function template_replace_144(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, student){
  try{
    let body_html = "";
    let maincontent = [];
    let cgpa = "";
    let font_size_1 = '9pt';
    let font_size_2 = '11pt';
    let font_size_3 = '7pt';
    let font_size_4 = '13pt';
    let line_height = '12pt';
    let line_height_1 = '15pt';
    let continue_flag = true;
    let continue_index = 0;
    let headercontent = `<center><table style="width: 90%; padding-top: 70px;"><tbody>
        <tr>
          <td colspan="3" style="text-align: center;">
            <p style="font-size: 9pt; padding-top: -10px;">Plost No. 16-18, Knowledge Park - II, Greater Noida, Uttar Pradesh 201306</p>
            <p style="font-size: 9pt; margin-top: 0px;">www.iilm.edu</p>
          </td>
        </tr>
        <tr>
        <td colspan="3" style="font-size: ${font_size_4}; text-align: center; padding-top: 15px; font-weight: bold;">LLM (${student.subother1})</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Student Name</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${fullname}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Father Name</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${student.fathername}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Mother Name</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${student.mothername}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left; font-weight: bold;">Roll Number</td>
        <td style="width: 3%; text-align: center; font-weight: bold;">:</td>
        <td style="width: 80%; text-align: left; font-weight: bold;">${rollnumber}</td>
        </tr>
        <tr>
        <td style="width: 17%; text-align: left"></td>
        <td style="width: 3%; text-align: center"></td>
        <td style="width: 80%; text-align: right; font-weight: bold;">Issue Date: ${student.issueddate}</td>
        </tr>
      </tbody></table></center>`;
    while(continue_flag){      
      let sub_content = [];
      
      for(let count=1; count < 3; count++){
        let semester_index = continue_index * 2 + count;
        let descQuery = format(`select * from transcriptdescribe where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${semester_index.toString()}';`);
        let descResult = await pool.query(descQuery);
        let semesQuery = format(`select * from semestertranscript where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${main_std_id}' and semesternumber='${semester_index.toString()}';`);
        let semesResult = await pool.query(semesQuery);
        
        if (descResult.rowCount == 0 || semesResult.rowCount == 0) {
          continue_flag = false;
          for (let index=0; index < maincontent.length; index++){
            if (index == (maincontent.length - 1)) maincontent[index] = maincontent[index].replace(/CGPA_REPLACE/g, `<tr style="line-height: ${line_height_1}">
            <td colspan="6" style="font-size: ${font_size_1}; font-weight: bold;">CGPA : ${cgpa}</td>
            </tr>`);
            else maincontent[index] = maincontent[index].replace(/CGPA_REPLACE/g, '');
          }
          break;
        }
        else{
          cgpa = descResult.rows[0].cgpa;
          let tempcontent = "";
          semesResult.rows.forEach(element => {
            tempcontent += `<tr style="line-height: ${line_height};">
            <td style="width: 16%; font-size: ${font_size_1}; text-align: left; border: 1px solid black; padding: 0px 2px;">${element.subjecttype}</td>
            <td style="width: 44%; font-size: ${font_size_1}; text-align: left; border: 1px solid black; padding: 0px 2px;">${element.subjectcode}</td>
            <td style="width: 5%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; padding: 0px 2px;">${element.credit}</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: left; padding-left: 30px; border: 1px solid black; padding: 0px 2px;">${element.other1}</td>
            <td style="width: 11%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; padding: 0px 2px;">${element.other2}</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; padding: 0px 2px;">${element.other3}</td>
            </tr>`;
          })
          tempcontent = `<center><table style=" width: 90%; border-collapse: collapse;"><tbody>
          <tr>
            <td colspan="6" style="font-size: ${font_size_2}; text-align: center; font-weight: bold;"><span style="font-size: ${font_size_4};">TRANSCRIPT</span> - Semester ${descResult.rows[0].semesternumber}</td>
          </tr>
          <tr style="line-height: ${line_height};">
            <td style="width: 16%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Course Code</td>
            <td style="width: 44%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Course Name</td>
            <td style="width: 5%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Credit</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Grade Obtained</td>
            <td style="width: 11%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Grade Points</td>
            <td style="width: 12%; font-size: ${font_size_1}; text-align: center; border: 1px solid black; background: #d3d3d3; font-weight: bold;">Credit Points</td>
          </tr>
          ${tempcontent}
          <tr style="line-height: ${line_height};">
            <td colspan="2" style="text-align: right; background: #d3d3d3; border-left: 1px solid black; boder-bottom: 1px solid bottom; font-size: ${font_size_1}; font-weight: bold;">Total</td>
            <td style="text-align: center; background: #d3d3d3; font-size: ${font_size_1}; font-weight: bold;">${descResult.rows[0].other1}</td>
            <td style="text-align: center; background: #d3d3d3; boder-bottom: 1px solid bottom;"></td>
            <td style="text-align: center; background: #d3d3d3; boder-bottom: 1px solid bottom;"></td>
            <td style="text-align: center; background: #d3d3d3;border-right: 1px solid black; boder-bottom: 1px solid bottom; font-size: ${font_size_1}; font-weight: bold;">${descResult.rows[0].other2}</td>
          </tr>
          <tr style="line-height: ${line_height}">
          <td colspan="6"></td>
          </tr>
          <tr style="line-height: ${line_height_1};">
          <td colspan="6" style="font-size: ${font_size_1}; border-top: 1px solid black; padding-top: 20px; font-weight: bold;">Total Credit Points : ${descResult.rows[0].other2}</td>
          </tr>
          <tr style="line-height: ${line_height_1};">
          <td colspan="6" style="font-size: ${font_size_1}; font-weight: bold;">Total Credits : ${descResult.rows[0].other1}</td>
          </tr>
          <tr style="line-height: ${line_height_1};">
          <td colspan="6" style="font-size: ${font_size_1}; font-weight: bold;">SGPA : ${descResult.rows[0].other3}</td>
          </tr>`;
          if (count == 2) tempcontent += `CGPA_REPLACE</tbody></table></center>`;
          else tempcontent += `</tbody></table></center>`;
          // sub_content.push(tempcontent);
          sub_content += tempcontent;
        }
      }
      
      // if (sub_content.length > 0) maincontent.push(sub_content);      
      if (sub_content != "") maincontent.push(sub_content);      
      continue_index ++;
    }
    let note_content = `<center><table style="width: 90%;"><tbody>
    <tr>
    <td style="width: 85%; vertical-align: middle; font-size: ${font_size_3};">
      <table style="width: 100%;"><tbody>
      <tr>
      <td colspan="2" style="vertical-align: top; font-size: ${font_size_3}; font-weight: bold;">Note:</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">1.</td>
      <td style="width: 99%; font-size: ${font_size_3};">This is a web-based transcript. This is valid for all official purpose. Students are advised to get this transcript duly authenticated by the competent authority of IILM University, Greater Noida.</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">2.</td>
      <td style="width: 99%; font-size: ${font_size_3};">Zero Credit course(s) do not count towards SGPA / CGPA computation.</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">3.</td>
      <td style="width: 99%; font-size: ${font_size_3};">Student obtaining Grade F or Ab shall be considered failed in that paper/subject and be required to reappear in the examination as per University norms.</td>
      </tr>
      </tbody></table>
    </td>
    <td style="width: 15%; text-align: center;">
    <img style="height: 80px; text-align: center;" src="PRINT_CODE" />
    </td>
    </tr>
    </tbody></table>
    <table style="width: 90%; margin-top: 0px;"><tbody>
    <tr>
    <td style="width: 75%; vertical-align: middle; text-align: left;">
      <table style="width: 100%;"><tbody>
      <tr>
      <td colspan="2" style="font-size: ${font_size_3}; font-weight: bold;">Disclaimer:</td>
      </tr>
      <tr>
      <td style="width: 1%; font-size: ${font_size_3};">1.</td>
      <td style="width: 99%; font-size: ${font_size_3};">The result displayed on the university website and transcript is subject to correction, if any discrepancy is noticed at any point of time.</td>
      </tr>
      <tr>
      <td style="width: 1%; vertical-align: top; font-size: ${font_size_3};">2.</td>
      <td style="width: 99%; font-size: ${font_size_3};">Students should immediately contact the examination department if there is any discrepancy in the above result Controller of Examination IILM University, Greater Noida.</td>
      </tr>    
      </tbody></table>
    </td>
    <td style="width: 25%; text-align: center;">
      <img style="height: 45px; text-align: center;" src="${myip}/images/backend/empty.png" />
      <p style="font-weight: bold; text-align: right; font-size: ${font_size_1}; margin-top: -5px;">Controller of Examination</p>
      <p style="text-align: right; font-size: ${font_size_1};">IILM University, Greater Noida</p>
    </td>
    </tr>
    </tbody></table></center>`;
    let last_content = `<center>    
    <table style="width: 90%; border-collapse: collapse;"><tbody>
    <tr>
    <td colspan="3">
      <p style="font-size: ${font_size_4}; margin-top: 15px; text-align: center; font-weight: bold;">GRADING SYSTEM</p>
      <p style="font-size: ${font_size_3}; margin-top: 5px;">IILM university, Greater Noida follows a unique course credit regulation and grading for its post-graduate programs. Flexibility in course offering and spread of marks for a grade are the hall mark of the system.</p>
      <p style="font-size: ${font_size_3}; margin-top: 10px; margin-bottom: 5px;">Each letter grade awarded to the student in indicates the level of performance in a course and has a grade point for the purpose of computing Semester Grade Point Average(SGPA) and Cumulative Grade Point Average (CGPA) as given below:</p>
    </td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_4}; border: 1px solid black; text-align: left; background: #d3d3d3;">Academic Performance</td>
    <td style="width: 15%; font-size: ${font_size_4}; border: 1px solid black; text-align: center; background: #d3d3d3;">Grade</td>
    <td style="width: 30%; font-size: ${font_size_4}; border: 1px solid black; text-align: center; background: #d3d3d3;">Grade Points</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Outstanding</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">A+</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">10</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Excellent</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">A</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">9</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Very Good</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">B+</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">8</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Good</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">B</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">7</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Above Average</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">C+</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">6</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Average</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">C</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">5</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Pass</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">D</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">4</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Fail</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">F</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">0</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Absent</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">Ab</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">0</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Incomplet</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">I</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;"></td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Withdrawal</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">W</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">-</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Satisfactory</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">S</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">-</td>
    </tr>
    <tr>
    <td style="width: 55%; font-size: ${font_size_2}; border: 1px solid black; text-align: left;">Unsatisfactory</td>
    <td style="width: 15%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">X</td>
    <td style="width: 30%; font-size: ${font_size_2}; border: 1px solid black; text-align: center;">-</td>
    </tr>
    <tr>
    <td colspan="3" style="text-align: left;">
    <p style="font-size: ${font_size_3}; margin-top: 10px;">Semester Grade Point Average (SGPA) is calculated as below for all the coursed in which the student has enrolled in the Semester:</p>
    <p style="font-size: ${font_size_3}; padding-left: 190px;">SGPA (Si) = (Ci x Gi) / Ci</p>
    <p style="font-size: ${font_size_3}; margin-top: 10px;">where Ci is the number of credits of the ith course and Gi is the grade scored by student in the ith course.</p>
    <p style="font-size: ${font_size_3}; margin-top: 20px;">Cumulative Grade Point Average (CGPA) is calculated as below for all the coursed in which the student has enrolled in the Semester:</p>
    <p style="font-size: ${font_size_3}; padding-left: 200px;">CGPA = (Ci x Si) / Ci</p>
    <p style="font-size: ${font_size_3}; margin-top: 10px;">where Si is the SGPA for the ith Semester and Ci is the total number of credits in that Semester</p>
    <p style="font-size: ${font_size_3}; margin-top: 20px;">Conversion of Cumulative Grade Point Average (CGPA) into percentage (%):</p>
    <p style="font-size: ${font_size_3}; padding-left: 180px;">Percentage (%) = CGPA * 9.5</p>
    </tr>    
    </tbody></table>
    <table style="width: 90%; border-collapse: collapse;"><tbody>
    <tr>
      <td style="text-align: left; vertical-align: middle; width: 10%;">   
        <p style="font-size: ${font_size_3};">Checked by:</p>
      </td>   
      <td style="text-align: left; width: 90%;">
        <p style="font-size: ${font_size_3};">1<span style="text-decoration: underline; text-decoration-style: dotted;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
        <p style="font-size: ${font_size_3}; padding-top: -5px;">(Exam Co-ordinator)</p>
      </td>
    </tr>
    </tbody></table>
    <p style="font-size: ${font_size_4}; margin-top: 245px;">Plot No. 16-18, Knowledge Part II, Greater Noida, Uttar Pradesh 201306</p>
    </center>
    `;

    // maincontent[maincontent.length - 1].push(note_content);   
    maincontent[maincontent.length - 1] += note_content;
    // maincontent.map((element) => {
    //   let temp1 = "";
    //   for (let index = 0; index < element.length; index++){
    //     temp1 += element[index];
    //   }
    //   return `${headercontent}${temp1}`;
    //   // return headercontent + element.join('');
    // });
    maincontent.push(`${last_content}`);
    for (let index=0; index < maincontent.length; index++){
      body_html += `<div style="background-image: url('${myip}/images/IILM/template144background.png'); background-repeat: no-repeat; background-size: cover; width: 210mm; height: 296mm;">${headercontent}${maincontent[index]}</div>`;
    }
    stringcontents = stringcontents.replace("MAIN_REPLACE_PART", body_html.replace(/"/g,'\\"'));
    
    return stringcontents;
  }
  catch(err){
    console.log(err.message);
    return stringcontents;
  }
  
}

function nitkkr_date_format(date) {
  var options = { year: 'numeric', month: 'long', day: 'numeric' };
  //var result_date = "";
  var tempdate = new Date([date.split("/")[2], date.split("/")[1], date.split("/")[0]].join("-"));
  tempdate = tempdate.toLocaleDateString("en-US", options).replace(",", "").split(" ");
  if (tempdate[1].slice(-1) == 1) tempdate[1] += `<sup style=\\"color: black;\\">st</sup>`;
  else if (tempdate[1].slice(-1) == 2) tempdate[1] += `<sup style=\\"color: black;\\">nd</sup>`;
  else if (tempdate[1].slice(-1) == 3) tempdate[1] += `<sup style=\\"color: black;\\">rd</sup>`;
  else tempdate[1] += `<sup style=\\"color: black;\\">th</sup>`;
  return tempdate[1] + " " + tempdate[0] + " " + tempdate[2];

  // tempdate.split(" ").forEach((value, index) => {
  //   if(index===1){
  //     if(value.replace(",", "").slice(-1) == 1) result_date += " " + value.replace(",", "") + `<sup style=\\"color: rgb(46, 47, 62);\\">st</sup>`;
  //       else if(value.replace(",", "").slice(-1) == 2) result_date += " " + value.replace(",", "") + `<sup style=\\"color: rgb(46, 47, 62);\\">nd</sup>`;
  //       else if(value.replace(",", "").slice(-1) == 3) result_date += " " + value.replace(",", "") + `<sup style=\\"color: rgb(46, 47, 62);\\">rd</sup>`;
  //       else result_date += " " + value.replace(",", "") + `<sup style=\\"color: rgb(46, 47, 62);\\">th</sup>`;
  //   }
  //   else result_date += " " + value;    
  // })
  // result_date = result_date.trim();
  // return result_date;
}

function template_86_convert_hindi_institute(unicode_hindi)
{  
  var arr = [];
  if(unicode_hindi.indexOf("<br />") != -1) arr=unicode_hindi.split("<br />");
  else if( unicode_hindi.indexOf("<br/>" != -1)) arr=unicode_hindi.split("<br/>");
  
  let result = "";
  // result += `<p style="margin-bottom: 0px; margin-top: 40px; font-size: 34px; color: rgb(1, 42, 98); font-family: krutidev40wide; font-weight: bold;">` + Convert_to_Kritidev(arr[0].trim()) + `</p>`;
  // result += `<p style="margin-bottom: 0px; margin-top: 10px; font-size: 34px; color: rgb(1, 42, 98); font-family: krutidev40wide; font-weight: bold;">` + Convert_to_Kritidev(arr[1].trim()) + `</p>`;
  arr.forEach((value, index) => {
    if(index == 0) result += `<p style="margin-bottom: 0px; margin-top: 40px; font-size: 34px; color: rgb(1, 42, 98); font-family: krutidev40wide; font-weight: bold;">` + Convert_to_Kritidev(value.trim()) + `</p>`;
    else result += `<p style="margin-bottom: 0px; margin-top: 10px; font-size: 34px; color: rgb(1, 42, 98); font-family: krutidev40wide; font-weight: bold;">` + Convert_to_Kritidev(value.trim()) + `</p>`;
  })
  return result;
}

function Convert_to_Kritidev(unicode_text_var) {

    var array_one = new Array(
        // ignore all nuktas except in ड़ and ढ़
        "‘", "’", "“", "”", "(", ")", "{", "}", "=", "।", "?", "-", "µ", "॰", ",", ".", "् ",
        "०", "१", "२", "३", "४", "५", "६", "७", "८", "९", "x",

        "फ़्", "क़", "ख़", "ग़", "ज़्", "ज़", "ड़", "ढ़", "फ़", "य़", "ऱ", "ऩ",    // one-byte nukta varNas
        "त्त्", "त्त", "क्त", "दृ", "कृ",

        "ह्न", "ह्य", "हृ", "ह्म", "ह्र", "ह्", "द्द", "क्ष्", "क्ष", "त्र्", "त्र", "ज्ञ",
        "छ्य", "ट्य", "ठ्य", "ड्य", "ढ्य", "द्य", "द्व",
        "श्र", "ट्र", "ड्र", "ढ्र", "छ्र", "क्र", "फ्र", "द्र", "प्र", "ग्र", "रु", "रू",
        "्र",

        "ओ", "औ", "आ", "अ", "ई", "इ", "उ", "ऊ", "ऐ", "ए", "ऋ",

        "क्", "क", "क्क", "ख्", "ख", "ग्", "ग", "घ्", "घ", "ङ",
        "चै", "च्", "च", "छ", "ज्", "ज", "झ्", "झ", "ञ",

        "ट्ट", "ट्ठ", "ट", "ठ", "ड्ड", "ड्ढ", "ड", "ढ", "ण्", "ण",
        "त्", "त", "थ्", "थ", "द्ध", "द", "ध्", "ध", "न्", "न",

        "प्", "प", "फ्", "फ", "ब्", "ब", "भ्", "भ", "म्", "म",
        "य्", "य", "र", "ल्", "ल", "ळ", "व्", "व",
        "श्", "श", "ष्", "ष", "स्", "स", "ह",

        "ऑ", "ॉ", "ो", "ौ", "ा", "ी", "ु", "ू", "ृ", "े", "ै",
        "ं", "ँ", "ः", "ॅ", "ऽ", "् ", "्")

    var array_two = new Array(

        "^", "*", "Þ", "ß", "¼", "½", "¿", "À", "¾", "A", "\\", "&", "&", "Œ", "]", "-", "~ ",
        "å", "ƒ", "„", "…", "†", "‡", "ˆ", "‰", "Š", "‹", "Û",

        "¶", "d", "[k", "x", "T", "t", "M+", "<+", "Q", ";", "j", "u",
        "Ù", "Ùk", "ä", "–", "—",

        "à", "á", "â", "ã", "ºz", "º", "í", "{", "{k", "«", "=", "K",
        "Nî", "Vî", "Bî", "Mî", "<î", "|", "}",
        "J", "Vª", "Mª", "<ªª", "Nª", "Ø", "Ý", "æ", "ç", "xz", "#", ":",
        "z",

        "vks", "vkS", "vk", "v", "bZ", "b", "m", "Å", ",s", ",", "_",

        "D", "d", "ô", "[", "[k", "X", "x", "?", "?k", "³",
        "pkS", "P", "p", "N", "T", "t", "÷", ">", "¥",

        "ê", "ë", "V", "B", "ì", "ï", "M", "<", ".", ".k",
        "R", "r", "F", "Fk", ")", "n", "/", "/k", "U", "u",

        "I", "i", "¶", "Q", "C", "c", "H", "Hk", "E", "e",
        "¸", ";", "j", "Y", "y", "G", "O", "o",
        "'", "'k", "\"", "\"k", "L", "l", "g",

        "v‚", "‚", "ks", "kS", "k", "h", "q", "w", "`", "s", "S",
        "a", "¡", "%", "W", "·", "~ ", "~")   // "~j"

    //************************************************************
    //Put "Enter chunk size:" line before "<textarea name= ..." if required to be used.    
    //************************************************************
    //Enter chunk size: <input type="text" name="chunksize" value="6000" size="7" maxsize="7" style="text-align:right"><br/><br/>
    //************************************************************
    // The following two characters are to be replaced through proper checking of locations:

    // "र्" (reph) 
    // "Z" )

    // "ि"  
    // "f" )


    var array_one_length = array_one.length;

    var modified_substring = unicode_text_var;

    //****************************************************************************************
    //  Break the long text into small bunches of max. max_text_size  characters each.
    //****************************************************************************************
    var text_size = unicode_text_var.length;

    var processed_text = '';  //blank

    var sthiti1 = 0; var sthiti2 = 0; var chale_chalo = 1;

    var max_text_size = 6000;

    //************************************************************
    // var max_text_size = chunksize;	
    // alert(max_text_size);
    //************************************************************

    while (chale_chalo == 1) {
        sthiti1 = sthiti2;

        if (sthiti2 < (text_size - max_text_size)) {
            sthiti2 += max_text_size;
            while (unicode_text_var.charAt(sthiti2) != ' ') { sthiti2--; }
        }
        else { sthiti2 = text_size; chale_chalo = 0 }

        var modified_substring = unicode_text_var.substring(sthiti1, sthiti2);

        Replace_Symbols();

        processed_text += modified_substring;

        //****************************************************************************************
        //  Breaking part code over
        //****************************************************************************************
        //  processed_text = processed_text.replace( /mangal/g , "Krutidev010" ) ;   

        legacy_text_var = processed_text;
        
    }
    
    return legacy_text_var;
    //**************************************************

    function Replace_Symbols() {


        // if string to be converted is non-blank then no need of any processing.
        if (modified_substring != "") {

            // first replace the two-byte nukta_varNa with corresponding one-byte nukta varNas.

            modified_substring = modified_substring.replace(/क़/, "क़");
            modified_substring = modified_substring.replace(/ख़‌/g, "ख़");
            modified_substring = modified_substring.replace(/ग़/g, "ग़");
            modified_substring = modified_substring.replace(/ज़/g, "ज़");
            modified_substring = modified_substring.replace(/ड़/g, "ड़");
            modified_substring = modified_substring.replace(/ढ़/g, "ढ़");
            modified_substring = modified_substring.replace(/ऩ/g, "ऩ");
            modified_substring = modified_substring.replace(/फ़/g, "फ़");
            modified_substring = modified_substring.replace(/य़/g, "य़");
            modified_substring = modified_substring.replace(/ऱ/g, "ऱ");


            // code for replacing "ि" (chhotee ee kii maatraa) with "f"  and correcting its position too.

            var position_of_f = modified_substring.indexOf("ि");
            while (position_of_f != -1)  //while-02
            {
                var character_left_to_f = modified_substring.charAt(position_of_f - 1);
                modified_substring = modified_substring.replace(character_left_to_f + "ि", "f" + character_left_to_f);

                position_of_f = position_of_f - 1;

                while ((modified_substring.charAt(position_of_f - 1) == "्") & (position_of_f != 0)) {
                    var string_to_be_replaced = modified_substring.charAt(position_of_f - 2) + "्";
                    modified_substring = modified_substring.replace(string_to_be_replaced + "f", "f" + string_to_be_replaced);

                    position_of_f = position_of_f - 2;
                }
                position_of_f = modified_substring.search(/ि/, position_of_f + 1); // search for f ahead of the current position.

            } // end of while-02 loop
            //************************************************************     
            //     modified_substring = modified_substring.replace( /fर्/g , "£"  )  ;
            //************************************************************     
            // Eliminating "र्" and putting  Z  at proper position for this.

            set_of_matras = "ािीुूृेैोौं:ँॅ"

            modified_substring += '  ';  // add two spaces after the string to avoid UNDEFINED char in the following code.

            var position_of_half_R = modified_substring.indexOf("र्");
            while (position_of_half_R > 0)  // while-04
            {
                // "र्"  is two bytes long
                var probable_position_of_Z = position_of_half_R + 2;

                var character_right_to_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z + 1)

                // trying to find non-maatra position right to probable_position_of_Z .

                while (set_of_matras.indexOf(character_right_to_probable_position_of_Z) != -1) {
                    probable_position_of_Z = probable_position_of_Z + 1;
                    character_right_to_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z + 1);
                } // end of while-05

                string_to_be_replaced = modified_substring.substr(position_of_half_R + 2, (probable_position_of_Z - position_of_half_R - 1));
                modified_substring = modified_substring.replace("र्" + string_to_be_replaced, string_to_be_replaced + "Z");
                position_of_half_R = modified_substring.indexOf("र्");
            } // end of while-04


            modified_substring = modified_substring.substr(0, modified_substring.length - 2);



            //substitute array_two elements in place of corresponding array_one elements

            for (input_symbol_idx = 0; input_symbol_idx < array_one_length; input_symbol_idx++) {
                idx = 0;  // index of the symbol being searched for replacement

                while (idx != -1) //whie-00
                {
                    modified_substring = modified_substring.replace(array_one[input_symbol_idx], array_two[input_symbol_idx])
                    idx = modified_substring.indexOf(array_one[input_symbol_idx])
                } // end of while-00 loop
            } // end of for loop

        } // end of IF  statement  meant to  supress processing of  blank  string.

    } // end of the function  Replace_Symbols( )
    
    
} 

function Convert_to_Kritidev_for_Galgotias(unicode_text_var) {

  var array_one = new Array(
      // ignore all nuktas except in ड़ and ढ़
      "‘", "’", "“", "”", "(", ")", "{", "}", "=", "।", "?", "-", "µ", "॰", ",", ".", "् ",
      "०", "१", "२", "३", "४", "५", "६", "७", "८", "९", "x",

      "फ़्", "क़", "ख़", "ग़", "ज़्", "ज़", "ड़", "ढ़", "फ़", "य़", "ऱ", "ऩ",    // one-byte nukta varNas
      "त्त्", "त्त", "क्त", "दृ", "कृ",

      "ह्न", "ह्य", "हृ", "ह्म", "ह्र", "ह्", "द्द", "क्ष्", "क्ष", "त्र्", "त्र", "ज्ञ",
      "छ्य", "ट्य", "ठ्य", "ड्य", "ढ्य", "द्य", "द्व",
      "श्र", "ट्र", "ड्र", "ढ्र", "छ्र", "क्र", "फ्र", "द्र", "प्र", "ग्र", "रु", "रू",
      "्र",

      "ओ", "औ", "आ", "अ", "ई", "इ", "उ", "ऊ", "ऐ", "ए", "ऋ",

      "क्", "क", "क्क", "ख्", "ख", "ग्", "ग", "घ्", "घ", "ङ",
      "चै", "च्", "च", "छ", "ज्", "ज", "झ्", "झ", "ञ",

      "ट्ट", "ट्ठ", "ट", "ठ", "ड्ड", "ड्ढ", "ड", "ढ", "ण्", "ण",
      "त्", "त", "थ्", "थ", "द्ध", "द", "ध्", "ध", "न्", "न",

      "प्", "प", "फ्", "फ", "ब्", "ब", "भ्", "भ", "म्", "म",
      "य्", "य", "र", "ल्", "ल", "ळ", "व्", "व",
      "श्", "श", "ष्", "ष", "स्", "स", "ह",

      "ऑ", "ॉ", "ो", "ौ", "ा", "ी", "ु", "ू", "ृ", "े", "ै",
      "ं", "ँ", "ः", "ॅ", "ऽ", "् ", "्")

  var array_two = new Array(

      "^", "*", "Þ", "ß", "¼", "½", "¿", "À", "¾", "A", "\\", "&", "&", "Œ", "]", "-", "~ ",
      "å", "ƒ", "„", "…", "†", "‡", "ˆ", "‰", "Š", "‹", "Û",

      "¶", "d", "[k", "x", "T", "t", "M+", "<+", "Q", ";", "j", "u",
      "Ù", "Ùk", "ä", "–", "—",

      "à", "á", "â", "ã", "ºz", "º", "í", "{", "{k", "«", "=", "K",
      "Nî", "Vî", "Bî", "Mî", "<î", "|", "}",
      "J", "Vª", "Mª", "<ªª", "Nª", "Ø", "Ý", "æ", "ç", "xz", "#", ":",
      "z",

      "vks", "vkS", "vk", "v", "bZ", "b", "m", "Å", ",s", ",", "_",

      "D", "d", "ô", "[", "[k", "X", "x", "?", "?k", "³",
      "pkS", "P", "p", "N", "T", "t", "÷", ">", "¥",

      "ê", "ë", "V", "B", "ì", "ï", "M", "<", ".", ".k",
      "R", "r", "F", "Fk", ")", "n", "/", "/k", "U", "u",

      "I", "i", "¶", "Q", "C", "c", "H", "Hk", "E", "e",
      "¸", ";", "j", "Y", "y", "G", "O", "o",
      "'", "'k", "\"", "\"k", "L", "l", "g",

      "v‚", "‚", "ks", "kS", "k", "h", "q", "w", "`", "s", "S",
      "a", "¡", "%", "W", "·", "~ ", "~")   // "~j"

  //************************************************************
  //Put "Enter chunk size:" line before "<textarea name= ..." if required to be used.    
  //************************************************************
  //Enter chunk size: <input type="text" name="chunksize" value="6000" size="7" maxsize="7" style="text-align:right"><br/><br/>
  //************************************************************
  // The following two characters are to be replaced through proper checking of locations:

  // "र्" (reph) 
  // "Z" )

  // "ि"  
  // "f" )


  var array_one_length = array_one.length;

  var modified_substring = unicode_text_var;

  //****************************************************************************************
  //  Break the long text into small bunches of max. max_text_size  characters each.
  //****************************************************************************************
  var text_size = unicode_text_var.length;

  var processed_text = '';  //blank

  var sthiti1 = 0; var sthiti2 = 0; var chale_chalo = 1;

  var max_text_size = 6000;

  //************************************************************
  // var max_text_size = chunksize;	
  // alert(max_text_size);
  //************************************************************

  while (chale_chalo == 1) {
      sthiti1 = sthiti2;

      if (sthiti2 < (text_size - max_text_size)) {
          sthiti2 += max_text_size;
          while (unicode_text_var.charAt(sthiti2) != ' ') { sthiti2--; }
      }
      else { sthiti2 = text_size; chale_chalo = 0 }

      var modified_substring = unicode_text_var.substring(sthiti1, sthiti2);

      Replace_Symbols();

      processed_text += modified_substring;

      //****************************************************************************************
      //  Breaking part code over
      //****************************************************************************************
      //  processed_text = processed_text.replace( /mangal/g , "Krutidev010" ) ;   

      legacy_text_var = processed_text;
      
  }
  legacy_text_var = legacy_text_var.replace(/‚/g, "kW");
  legacy_text_var = legacy_text_var.replace(/"/g, "TOP_DOUBLE_DOT");
  return legacy_text_var;
  //**************************************************

  function Replace_Symbols() {


      // if string to be converted is non-blank then no need of any processing.
      if (modified_substring != "") {

          // first replace the two-byte nukta_varNa with corresponding one-byte nukta varNas.

          modified_substring = modified_substring.replace(/क़/, "क़");
          modified_substring = modified_substring.replace(/ख़‌/g, "ख़");
          modified_substring = modified_substring.replace(/ग़/g, "ग़");
          modified_substring = modified_substring.replace(/ज़/g, "ज़");
          modified_substring = modified_substring.replace(/ड़/g, "ड़");
          modified_substring = modified_substring.replace(/ढ़/g, "ढ़");
          modified_substring = modified_substring.replace(/ऩ/g, "ऩ");
          modified_substring = modified_substring.replace(/फ़/g, "फ़");
          modified_substring = modified_substring.replace(/य़/g, "य़");
          modified_substring = modified_substring.replace(/ऱ/g, "ऱ");


          // code for replacing "ि" (chhotee ee kii maatraa) with "f"  and correcting its position too.

          var position_of_f = modified_substring.indexOf("ि");
          while (position_of_f != -1)  //while-02
          {
              var character_left_to_f = modified_substring.charAt(position_of_f - 1);
              modified_substring = modified_substring.replace(character_left_to_f + "ि", "f" + character_left_to_f);

              position_of_f = position_of_f - 1;

              while ((modified_substring.charAt(position_of_f - 1) == "्") & (position_of_f != 0)) {
                  var string_to_be_replaced = modified_substring.charAt(position_of_f - 2) + "्";
                  modified_substring = modified_substring.replace(string_to_be_replaced + "f", "f" + string_to_be_replaced);

                  position_of_f = position_of_f - 2;
              }
              position_of_f = modified_substring.search(/ि/, position_of_f + 1); // search for f ahead of the current position.

          } // end of while-02 loop
          //************************************************************     
          //     modified_substring = modified_substring.replace( /fर्/g , "£"  )  ;
          //************************************************************     
          // Eliminating "र्" and putting  Z  at proper position for this.

          set_of_matras = "ािीुूृेैोौं:ँॅ"

          modified_substring += '  ';  // add two spaces after the string to avoid UNDEFINED char in the following code.

          var position_of_half_R = modified_substring.indexOf("र्");
          while (position_of_half_R > 0)  // while-04
          {
              // "र्"  is two bytes long
              var probable_position_of_Z = position_of_half_R + 2;

              var character_right_to_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z + 1)

              // trying to find non-maatra position right to probable_position_of_Z .

              while (set_of_matras.indexOf(character_right_to_probable_position_of_Z) != -1) {
                  probable_position_of_Z = probable_position_of_Z + 1;
                  character_right_to_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z + 1);
              } // end of while-05

              string_to_be_replaced = modified_substring.substr(position_of_half_R + 2, (probable_position_of_Z - position_of_half_R - 1));
              modified_substring = modified_substring.replace("र्" + string_to_be_replaced, string_to_be_replaced + "Z");
              position_of_half_R = modified_substring.indexOf("र्");
          } // end of while-04


          modified_substring = modified_substring.substr(0, modified_substring.length - 2);



          //substitute array_two elements in place of corresponding array_one elements

          for (input_symbol_idx = 0; input_symbol_idx < array_one_length; input_symbol_idx++) {
              idx = 0;  // index of the symbol being searched for replacement

              while (idx != -1) //whie-00
              {
                  modified_substring = modified_substring.replace(array_one[input_symbol_idx], array_two[input_symbol_idx])
                  idx = modified_substring.indexOf(array_one[input_symbol_idx])
              } // end of while-00 loop
          } // end of for loop

      } // end of IF  statement  meant to  supress processing of  blank  string.

  } // end of the function  Replace_Symbols( )
  
  
}

async function getProfileFromAccountId(accountId)
{
  var profileInfo={};
  var query = format(`SELECT * FROM setting where accountid='${accountId}';`);    
  var settingresult=await pool.query(query);      
  if(settingresult.rows && settingresult.rows.length != 0) {
    profileInfo=settingresult.rows[0];
  }
  return profileInfo;
}
async function checkPdfFormat(filePath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, (err, data) => {
      if (err) {
        reject(err);
        return;
      }
      const magicNumber = Buffer.from([0x25, 0x50, 0x44, 0x46]); // PDF magic number
      const isPdf = data.slice(0, 4).compare(magicNumber) === 0;     
      resolve(isPdf);
    });
  });
}

async function CoreGenerateCertificate(currentUser, puserid, cohorttablename, certtype, params, isPreview = false) {
  try {
    var curdateobj = new Date();
    var curyear = curdateobj.getFullYear();
    var result = {};
    successItems=[];
    var os = new os_func();
    var organization_verify_uri = currentUser.organization_verify_uri;
    if (organization_verify_uri == "" || organization_verify_uri == "null" || organization_verify_uri == null || organization_verify_uri == undefined) organization_verify_uri = "certonce";
    var logoimage = "";
    var fetchQuery = format(`select logoimages from certtemplate_logo where accountid = '${puserid}' LIMIT 1`);
    var temp_result = await pool.query(fetchQuery);
    if (temp_result.rows && temp_result.rows.length != 0) {
      logoimage = temp_result.rows[0]['logoimages'];
    }
    else {
      return { Status: 400, message: 'Please upload logo image.'};
    }


    if (currentUser.blockchain != 'bitcoin' && currentUser.blockchain != 'ethereum')
    {
      return { Status: 400, message: "There is no selected blockchain"};
    }
    
    var awsinfo = await getS3BucketInformation(puserid);
    var bucket_result = await createBucket(awsinfo.s3obj, awsinfo.s3bucketname);
    if (bucket_result == "") {
      return res.json({ Status: 400, message: "S3 bucket creation has been failed." });
    }
    ///////////////////////////////////////////////////////////////////////
    var currentpublickkey = "";
    var profileQuery = format(`select publickey from wallet_pk where accountid = '${puserid}' and blockchain='${currentUser.blockchain}' LIMIT 1`);
    var result = await pool.query(profileQuery);
    var userData = {};
    if (result.rows && result.rows.length != 0) {
      userData = result.rows[0];
      if (userData.publickey != "" && userData.publickey != null) {
        currentpublickkey = userData.publickey;
      } else {
        return res.json({Status: 400, message: 'There is no generated blockchain'});
      }
    } else {
      return res.json({Status: 400, message: 'There is no selected blockchain'})
    }
    var ishtml = true;
    var iss3 = true;
    var s_baseurl = "";
    var s_issuerurl = "";
    var s_revocationurl = "";
    var s_issuername = "";
    var s_issueremail = "";
    var s_verifybaseurl = "";

    var settingInfo = await getProfileFromAccountId(puserid);
    ishtml = settingInfo.ishtml;
    iss3 = settingInfo.iss3;
    s_baseurl = settingInfo.baseurl;
    s_issuerurl = settingInfo.issuerurl;
    s_revocationurl = settingInfo.revocationurl;
    s_issuername = settingInfo.issuername;
    s_issueremail = settingInfo.issueremail;
    s_verifybaseurl = settingInfo.verifybaseurl;      
    ///////////////////////////////////////////////////////////////////////
    var pathsjson = await readyForGenerate(currentUser.user_id);
    if (pathsjson == false) {
      result = {
        Status: 400,
        message: 'Workdir creation is failed!',
      }
      //res.json(obj);
      return result;
    }
    else if (pathsjson == true) {
      result = {
        Status: 400,
        message: 'The same account is working at the same time!',
      }
      //res.json(obj);
      return result;
    }
    let iswriting = true;
    let isremain = false;
    let writer = null;

    let isTotal = false;
    let glcohortid = "";
    for (let index = 0; index < params.length; index++) {
      const element = params[index];
      let cohortid = element.split("=")[0];
      let studentid = element.split("=")[1];
      if (studentid == '') {
        isTotal = true;
        glcohortid = cohortid;
        break;
      }
    }
    
    isTotal = false;
    if (isTotal == false) {
      
      for (let index = 0; index < params.length; index++) {
        const element = params[index];
        let cohortid = element.split("=")[0];
        let studentid = element.split("=")[1];
        if (cohortid == '' || studentid == '') { continue; }
        var whereClause = "WHERE c.cohortid='" + cohortid + "' and b.id='" + studentid + "' and e.accountid='"+ puserid +"' and b.certificatetype='"+certtype+"'";
        var studentQuery = format(`SELECT a.id as mainstudentid, a.studentid,a.emailaddress,a.firstname,a.middlename,
                                    a.convocation_number, a.convocation_date, a.institute_name, a.institute_address,a.aadhaarnumber,a.other1,a.other2,a.other3,a.other4,a.other5,a.other6,a.other7,a.other8,a.other9,a.other10,a.other11,a.other12,a.other13,
                                    a.lastname,a.sex,a.letterofreco,b.id as studentidentify, b.cohortid as ccohortid,b.publickey,b.marks,b.certificateid,b.onetimeblockcertscode,
                                    b.coursename,b.coursestartdate,b.coursecompletiondate, b.department, b.phdtitle, b.public, b.expiredate, b.template_type, b.content, b.secondpage, 
                                    c.cohortid as cohortfullid, c.name,c.competencyname,c.description,c.competencystartdate,c.competencyenddate,c.semesternumber as cohortsemesternumber,c.backgroundfilename,c.trbackgroundfilename,c.country,c.country,  
                                    a.fathername,a.mothername,a.specializationone, b.partnercompanyname as mainpartnername, 
                                    a.specializationtwo,a.enrollnumber,b.serialnumber,a.preparedby, b.unsignedcertificateurl, b.certificationcategory, b.issueddate, b.photourl, 
                                    a.facultyname, a.cgpa, a.rank, a.medaltype, a.completiondate, b.issuedate,
                                    d.logoimage, d.signatureimage, d.signaturename, d.signername, d.partnercompanyname, 
                                    d.logoimage1, d.signatureimage1, d.signaturename1, d.signername1, d.partnercompanyname1,
                                    d.logoimage2, d.signatureimage2, d.signaturename2, d.signername2, d.partnercompanyname2, d.detail, d.customername, b.other1 as subother1, b.other2 as subother2, b.other3 as subother3, b.other4 as subother4, b.other5 as subother5, b.other6 as subother6, b.other7 as subother7, b.other8 as subother8, b.other9 as subother9, b.other10 as subother10, b.other11 as subother11, b.other12 as subother12, b.other13 as subother13, b.other14 as subother14, b.other15 as subother15, b.other16 as subother16, b.other17 as subother17, b.other18 as subother18, b.other19 as subother19, b.other20 as subother20, b.other21 as subother21, b.other22 as subother22, b.other23 as subother23, b.other24 as subother24, b.other25 as subother25 ,
                                    f.certjson, f.previewtemplate  
                                    FROM student a 
                                    LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                      LEFT JOIN cohort c ON c.id=b.cohortid 
                                      LEFT JOIN competencypartner d ON trim(from d.competencyname)=trim(from c.competencyname) 
                                      LEFT JOIN cohort_group e ON e.cohortid=c.cohortid  
                                      LEFT JOIN certtemplate f ON f.id=e.certtemplateid ${whereClause}
                              `);

        //console.log(studentQuery);
        let students = await pool.query(studentQuery);
        if (students.rowCount > 0) {
          for (const student of students.rows) {
            var student_uuid = UUID.v4();
            if(puserid == "20173")
              student_uuid = student['serialnumber'];
            console.log("Student UUID => ", student_uuid);
            Object.keys(student).forEach(function(key, value){
              if (student[key] == undefined || student[key] == null) student[key] = "";
            });
            var unsignedcertificateurl = student['unsignedcertificateurl'];
            //if(unsignedcertificateurl!=null&&unsignedcertificateurl!="" && !isPreview) continue;
            var distinguishing_line = `<img style=\\"margin-top: 6px;\\" src=\\"${myip}/images/backend/hr.png\\"  />`;

            var onetimecode = isPreview ? "TestOneTimeCode" + student['onetimeblockcertscode'] : student['onetimeblockcertscode'];
            var logoimage = student['logoimage'];
            if (logoimage == null || logoimage == "") logoimage = "";
            else if (logoimage.indexOf("<img ") == -1) {
              logoimage = '<img  src=\\"' + logoimage + '\\" style=\\"width: 85%; \\" />';
            }
            else {
              logoimage = logoimage.replace(/"/g, '\\"');
            }
            var signatureimage = student['signatureimage'];
            if (signatureimage == null || signatureimage == "") signatureimage = "";
            else if (signatureimage.indexOf("<img ") == -1) {
              signatureimage = '<img src=\\"' + signatureimage + '\\" style=\\"width: 70%; \\" />';
            }
            else {
              signatureimage = signatureimage.replace(/"/g, '\\"');
            }
            var signaturename = student['signaturename'];
            if (signaturename == null) signaturename = "";
            var signername = student['signername'];
            if (signername == null) signername = "";
            var partnercompanyname = student['partnercompanyname'];
            if (partnercompanyname == null) partnercompanyname = "";

            var logoimage1 = student['logoimage1'];
            if (logoimage1 == null || logoimage1 == "") logoimage1 = "";
            else if (logoimage1.indexOf("<img ") == -1) {
              logoimage1 = '<img  src=\\"' + logoimage1 + '\\" style=\\"width: 85%; \\" />';
            }
            else {
              logoimage1 = logoimage1.replace(/"/g, '\\"');
            }
            var signatureimage1 = student['signatureimage1'];
            if (signatureimage1 == null || signatureimage1 == "") signatureimage1 = "";
            else if (signatureimage1.indexOf("<img ") == -1) {
              signatureimage1 = '<img src=\\"' + signatureimage1 + '\\" style=\\"width: 70%; \\" />';
            }
            else {
              signatureimage1 = signatureimage1.replace(/"/g, '\\"');
            }
            var signaturename1 = student['signaturename1'];
            if (signaturename1 == null) signaturename1 = "";
            var signername1 = student['signername1'];
            if (signername1 == null) signername1 = "";
            var partnercompanyname1 = student['partnercompanyname1'];
            if (partnercompanyname1 == null) partnercompanyname1 = "";

            var logoimage2 = student['logoimage2'];
            if (logoimage2 == null || logoimage2 == "") logoimage2 = "";
            else if (logoimage2.indexOf("<img ") == -1) {
              logoimage2 = '<img  src=\\"' + logoimage2 + '\\" style=\\"width: 85%; \\" />';
            }
            else {
              logoimage2 = logoimage2.replace(/"/g, '\\"');
            }
            var signatureimage2 = student['signatureimage2'];
            if (signatureimage2 == null || signatureimage2 == "") signatureimage2 = "";
            else if (signatureimage2.indexOf("<img ") == -1) {
              signatureimage2 = '<img src=\\"' + signatureimage2 + '\\" style=\\"width: 70%; \\" />';
            }
            else {
              signatureimage2 = signatureimage2.replace(/"/g, '\\"');
            }

            var signaturename2 = student['signaturename2'];
            if (signaturename2 == null) signaturename2 = "";
            var signername2 = student['signername2'];
            if (signername2 == null) signername2 = "";
            var partnercompanyname2 = student['partnercompanyname2'];
            if (partnercompanyname2 == null) partnercompanyname2 = "";

            var customername = student['customername'];
            if (customername == null || customername == undefined || typeof customername === undefined) customername = "";

            var mainstudentid = student['mainstudentid'];
            studentid = student['studentidentify'];
            if (studentid == '') continue;
            var ccohortid = student['ccohortid'];
            if (ccohortid == '') continue;

            var email = isPreview ? "PreviewTestEmail@gmail.com" : student['emailaddress'];
            var publickey = student['publickey'];

            var first_name = isPreview ? "Test_First_Name" : student['firstname'];
            var middle_name = isPreview ? "Test_Middle_Name" : student['middlename'];
            var last_name = isPreview ? "Test_Last_Name" : student['lastname'];
            var fullname = "";
            if (middle_name == null || middle_name == "") {
              fullname = first_name + " " + last_name;
            }
            else {
              fullname = first_name + " " + middle_name + " " + last_name;
            }
            if (isPreview) fullname = "FNAME MNAME LNAME";
            if (certtype == "transcript") {
              fullname = fullname.toLowerCase().replace(/\b(\w)/g, s => s.toUpperCase());
            }
            let country = student['country'];

            var competency_name = student['competencyname'];
            
            var fathername = isPreview ? "TestFatherName" : student['fathername'];
            if (fathername == null) fathername = "";
            var mothername = isPreview ? "TestMotherName" : student['mothername'];
            if (mothername == null) mothername = "";
            var enrollnumber = student['enrollnumber'];
            if (enrollnumber == null) enrollnumber = "";
            var serialnumber = student['serialnumber'];
            if (serialnumber == null) serialnumber = "";
            var preparedby = student['preparedby'];
            if (preparedby == null) preparedby = "";

            var marks = student['marks'];
            if (marks == null || marks == "") marks = "";

            var backgroundfilename = student['backgroundfilename'];
            if (backgroundfilename == null || backgroundfilename == undefined) backgroundfilename = "";
            var trbackgroundfilename = student['trbackgroundfilename'];
            if (trbackgroundfilename == null || trbackgroundfilename == undefined) trbackgroundfilename = "";

            var specializationone = student['specializationone'];
            if (specializationone == null || specializationone == undefined) specializationone = "";
            var specializationtwo = student['specializationtwo'];
            if (specializationtwo == null) specializationtwo = "";

            var sex = student['sex'];
            if (sex == null || sex == "") sex = "";
            if (sex == "F") sex = "D/o";
            else sex = "S/o";
            var cohortname = student['name'];
            var cohortfullid = student['cohortfullid'];
            var cohortsemesternumber = student['cohortsemesternumber'];
            
            var description = student['description'];
            if (description == null) description = "";

            var main_std_id = student['studentid'];
            if (main_std_id == null || main_std_id == undefined) main_std_id = "";
            var rollnumber = student['enrollnumber'];
            if (rollnumber == null || rollnumber == undefined) rollnumber = main_std_id;
            // rollnumber = main_std_id;
            //batchnumber = student['cohortid'];
            var batchnumber = student['cohortfullid'];
            if (batchnumber == null) batchnumber = "";
            batchnumber = batchnumber.toString();
            var letterofreco = student['letterofreco'];
            if (letterofreco == null) letterofreco = "";

            var certificateid = student['certificateid'];
            if (certificateid == null) certificateid = "";

            var facultyname = student['facultyname'];
            if (facultyname == null || facultyname == undefined) facultyname = "";

            var department = student['department'];
            if (department == null || department == undefined) department = "";
            var phdtitle = student['phdtitle'];
            if (phdtitle == null || phdtitle == undefined) phdtitle = "";
            var aadhaarnumber = student['aadhaarnumber'];
            if (aadhaarnumber == null || aadhaarnumber == undefined) aadhaarnumber = "";
            var coursename = student['coursename'];
            if (coursename == null || coursename == undefined) coursename = "";
            var coursestartdate = student['coursestartdate'];
            if (coursestartdate == null || coursestartdate == "") coursestartdate = "";
            var coursecompletiondate = student['coursecompletiondate'];
            if (coursecompletiondate == null || coursecompletiondate == "") coursecompletiondate = "";
            ////////////////////// Certification Category /////////////////////////////
            var certificationcategory = student['certificationcategory'];
            if (certificationcategory == null || certificationcategory == "") certificationcategory = "";
            ///////////////////// End ////////////////////////////////////////////////
            var cmembersissueddate = student['issueddate'];
            if (cmembersissueddate == null) cmembersissueddate = "";

            var convocation_number = student['convocation_number'];
            if (convocation_number == null || convocation_number == undefined) convocation_number = "";
            var convocation_date = student['convocation_date'];
            if (convocation_date == null || convocation_date == undefined) convocation_date = "";
            var institute_name = student['institute_name'];
            if (institute_name == null || institute_name == undefined) institute_name = "";
            var institute_address = student['institute_address'];
            if (institute_address == null) institute_address = "";
            var dateofissue = student['issueddate'];
            if (dateofissue == null) dateofissue = "";

            var completiondate = student['completiondate'];
            if (completiondate == null || completiondate == undefined) completiondate = "";
            var competencystartdate = student['competencystartdate'];
            if (competencystartdate == null || competencystartdate == "") competencystartdate = "";
            var competencyenddate = student['competencyenddate'];
            if (competencyenddate == null || competencyenddate == "") competencyenddate = "";
            var expiredate = student['expiredate'];
            if (expiredate == null || expiredate == undefined) expriredate = "";
            var templatetype = student['template_type'];
            if (templatetype == null || templatetype == undefined) templatetype = "";

            var other1 = student['other1'];
            if (other1 == null || other1 == undefined || other1.indexOf("test") != -1) other1 = "";
            var other2 = student['other2'];
            if (other2 == null || other2 == undefined || other2.indexOf("test") != -1) other2 = "";
            var other3 = student['other3'];
            if (other3 == null || other3 == undefined || other3.indexOf("test") != -1) other3 = "";
            var other4 = student['other4'];
            if (other4 == null || other4 == undefined) other4 = "";
            var other5 = student['other5'];
            if (other5 == null || other5 == undefined) other5 = "";
            var other6 = student['other6'];
            if (other6 == null || other6 == undefined) other6 = "";
            var other7 = student['other7'];
            if (other7 == null || other7 == undefined) other7 = "";
            var other8 = student['other8'];
            if (other8 == null || other8 == undefined) other8 = "";
            var other9 = student['other9'];
            if (other9 == null || other9 == undefined) other9 = "";
            var other10 = student['other10'];
            if (other10 == null || other10 == undefined) other10 = "";
            var other11 = student['other11'];
            if (other11 == null || other11 == undefined) other11 = "";
            var other12 = student['other12'];
            if (other12 == null || other12 == undefined) other12 = "";
            var other13 = student['other13'];
            if (other13 == null || other13 == undefined) other13 = "";
            var mainpartnername = student['mainpartnername'];
            if (mainpartnername == null || mainpartnername == undefined) mainpartnername ="";
            
            // var subother1 = student['subother1'];
            // var subother2 = student['subother2'];
            // var subother3 = student['subother3'];
            // var subother4 = student['subother4'];
            // var subother5 = student['subother5'];
            // var subother6 = student['subother6'];
            // var subother7 = student['subother7'];
            // var subother8 = student['subother8'];
            // var subother9 = student['subother9'];
            // var subother10 = student['subother10'];
            // var subother11 = student['subother11'];
            // var subother12 = student['subother12'];
            // var subother13 = student['subother13'];
            // var subother14 = student['subother14'];
            // var subother15 = student['subother15'];
            // var subother16 = student['subother16'];
            // var subother17 = student['subother17'];
            // var subother18 = student['subother18'];
            // var subother19 = student['subother19'];
            // var subother20 = student['subother20'];

            var subother1 = student['subother1'];
            if (subother1 == null || subother1 == undefined ) subother1 = "";
            var subother2 = student['subother2'];
            if (subother2 == null || subother2 == undefined ) subother2 = "";
            var subother3 = student['subother3'];
            if (subother3 == null || subother3 == undefined ) subother3 = "";
            var subother4 = student['subother4'];
            if (subother4 == null || subother4 == undefined ) subother4 = "";
            var subother5 = student['subother5'];
            if (subother5 == null || subother5 == undefined ) subother5 = "";
            var subother6 = student['subother6'];
            if (subother6 == null || subother6 == undefined ) subother6 = "";
            var subother7 = student['subother7'];
            if (subother7 == null || subother7 == undefined ) subother7 = "";
            var subother8 = student['subother8'];
            if (subother8 == null || subother8 == undefined ) subother8 = "";
            var subother9 = student['subother9'];
            if (subother9 == null || subother9 == undefined ) subother9 = "";
            var subother10 = student['subother10'];
            if (subother10 == null || subother10 == undefined ) subother10 = "";
            var subother11 = student['subother11'];
            if (subother11 == null || subother11 == undefined ) subother11 = "";
            var subother12 = student['subother12'];
            if (subother12 == null || subother12 == undefined ) subother12 = "";
            var subother13 = student['subother13'];
            if (subother13 == null || subother13 == undefined ) subother13 = "";
            var subother14 = student['subother14'];
            if (subother14 == null || subother14 == undefined ) subother14 = "";
            var subother15 = student['subother15'];
            if (subother15 == null || subother15 == undefined ) subother15 = "";
            var subother16 = student['subother16'];
            if (subother16 == null || subother16 == undefined ) subother16 = "";
            var subother17 = student['subother17'];
            if (subother17 == null || subother17 == undefined ) subother17 = "";
            var subother18 = student['subother18'];
            if (subother18 == null || subother18 == undefined ) subother18 = "";
            var subother19 = student['subother19'];
            if (subother19 == null || subother19 == undefined ) subother19 = "";
            var subother20 = student['subother20'];
            if (subother20 == null || subother20 == undefined ) subother20 = "";
            var subother21 = student['subother21'];
            if (subother21 == null || subother21 == undefined ) subother21 = "";
            var subother22 = student['subother22'];
            if (subother22 == null || subother22 == undefined ) subother22 = "";
            var subother23 = student['subother23'];
            if (subother23 == null || subother23 == undefined ) subother23 = "";
            var subother24 = student['subother24'];
            if (subother24 == null || subother24 == undefined ) subother24 = "";
            var subother25 = student['subother25'];
            if (subother25 == null || subother25 == undefined ) subother25 = "";
            var subother40 = student['subother40'];
            if (subother40 == null || subother40 == undefined ) subother40 = "";
            // if (isPreview) {
            //     contents.recipientProfile.publicKey = email;
            //     publickey = email;
            // }

            if (student["template_type"] !== null && student["template_type"] !== "") {
              certtemplatejson = getcertificatetemplatejson(student, puserid, country, student["template_type"], isPreview, cohortid, student['certifiateid']);
            } else {
              certtemplatejson = getcertificatetemplatejson(student, puserid, country, "", isPreview, cohortid, student['certificateid']);
            }
            
            if (certtemplatejson == null || certtemplatejson == "") {
              result = {
                Status: 400,
                message: "There is no selected certificate template"
              }
              //res.json(obj);  
              return result;
            }

            

            /////change bitcoin or ethereum(issuing address ,issuer id and revocation list)            
            let templateid="";
            if(settingInfo.version=="v2")
            {
              certtemplatejson.version="v2";
              certtemplatejson.badge.signatureLines[0].name = currentUser.organization_name;
              certtemplatejson.badge.criteria.narrative = "";
              if (s_issuername != "" && s_issuername != null) {
                certtemplatejson.badge.issuer.name = s_issuername;
              }
              else {
                certtemplatejson.badge.issuer.name = currentUser.organization_name;
              }

              if (s_issuerurl != "" && s_issuerurl != null) {
                certtemplatejson.badge.issuer.url = s_issuerurl;
                certtemplatejson.badge.issuer.id = s_issuerurl + "/issuereth.json";
              }
              else {
                certtemplatejson.badge.issuer.url = myip + subwwwurl;
                certtemplatejson.badge.issuer.id = myip + subwwwurl + "/blockchain/" + puserid + "/issuereth.json";
              }

              if (s_issueremail != "" && s_issueremail != null) {
                certtemplatejson.badge.issuer.email = s_issueremail;
              }
              else {
                certtemplatejson.badge.issuer.email = "admin@certonce.com";
              }

              if (s_revocationurl != "" && s_revocationurl != null) {
                certtemplatejson.badge.issuer.revocationList = s_revocationurl + "/revocation-list-eth.json";
              }
              else {
                certtemplatejson.badge.issuer.revocationList = myip + subwwwurl + "/blockchain/" + puserid + "/revocation-list-eth.json";
              }
              certtemplatejson.verification.publicKey = "ecdsa-koblitz-pubkey:" + currentpublickkey;
              certtemplatejson.badge.issuer.image = "";
              
              certtemplatejson.verification.identity = email;
              certtemplatejson.recipientProfile.publicKey = `ecdsa-koblitz-pubkey:${onetimecode}`;
              certtemplatejson.recipientProfile.name = fullname;

              certtemplatejson.badge.description = description;
              certtemplatejson.recipient.firstname = first_name;
              certtemplatejson.recipient.lastname = last_name;
              certtemplatejson.recipient.competencyname = competency_name;
              templateid = await getHtmlTemplateID(certtemplatejson.displayHtml);
              certtemplatejson.templateid = templateid;
              certtemplatejson.badge.name = cohortname;
              if (s_verifybaseurl !== "" && s_verifybaseurl !== null) {
                certtemplatejson.badge.id = "urn:uuid:" + getUuid(s_verifybaseurl + "/" + student_uuid);
              }
              else {
                certtemplatejson.badge.id = "urn:uuid:" + getUuid(verifier_url_direct + student_uuid);
              }

            }
            else if(settingInfo.version=="v3")
            {
              certtemplatejson.version="v3";
              if (s_issuerurl != "" && s_issuerurl != null) {                  
                certtemplatejson.issuer = s_issuerurl + "/issuereth.json";
              }
              else {                  
                certtemplatejson.issuer = myip + subwwwurl + "/blockchain/" + puserid + "/issuereth.json";
              }

              certtemplatejson.credentialSubject.publicKey = `ecdsa-koblitz-pubkey:${onetimecode}`;
              certtemplatejson.credentialSubject.name = fullname;
              certtemplatejson.credentialSubject.email = email;
              templateid = await getHtmlTemplateID(certtemplatejson.display.content);
              certtemplatejson.templateid = templateid;
              certtemplatejson.organization_name = currentUser.organization_name;
              certtemplatejson.competencyname = competency_name;
            }

            if (puserid == "20001") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "MIT - WPU";
              certtemplatejson.badge.issuer.email = "certifications@mitwpu.edu.in";
              certtemplatejson.badge.issuer.url = "https://certification.mitwpu.edu.in";
              certtemplatejson.badge.issuer.id = "https://certification.mitwpu.edu.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://certification.mitwpu.edu.in/revocation-list-eth.json";
            }
            if (puserid == "20021") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "SPJIMR";
              certtemplatejson.badge.issuer.email = "verification.spjimr.org";
              certtemplatejson.badge.issuer.url = "https://verification.spjimr.org";
              certtemplatejson.badge.issuer.id = "https://verification.spjimr.org/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://verification.spjimr.org/revocation-list-eth.json";
            }
            if (puserid == "20045") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "NDIM";
              certtemplatejson.badge.issuer.email = "www.ndimdelhi.org";
              certtemplatejson.badge.issuer.url = "https://verification.ndimexamination.org";
              certtemplatejson.badge.issuer.id = "https://verification.ndimexamination.org/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://verification.ndimexamination.org/revocation-list-eth.json";
            }
            if (puserid == "20027") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "360DigiTMG";
              certtemplatejson.badge.issuer.email = "360digitmg.com";
              certtemplatejson.badge.issuer.url = "https://360digitmg.com";
              certtemplatejson.badge.issuer.id = "https://360digitmg.com/verifier/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://360digitmg.com/verifier/revocation-list-eth.json";
            }
            if (puserid == "20077") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "NITKKR";
              certtemplatejson.badge.issuer.email = "admin@nitkkr.ac.in";
              certtemplatejson.badge.issuer.url = "https://credentials.nitkkr.ac.in";
              certtemplatejson.badge.issuer.id = "https://credentials.nitkkr.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://credentials.nitkkr.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20080") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "Arfeen Khan";
              certtemplatejson.badge.issuer.email = "admin@arfeenkhan.com";
              certtemplatejson.badge.issuer.url = "https://www.arfeenkhanuniversity.com/verifier";
              certtemplatejson.badge.issuer.id = "https://www.arfeenkhanuniversity.com/verifier/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://www.arfeenkhanuniversity.com/verifier/revocation-list-eth.json";
            }
            if (puserid == "20081") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "CHARUSAT";
              certtemplatejson.badge.issuer.email = "charusat@certonce.com";
              certtemplatejson.badge.issuer.url = "https://digicert.charusat.ac.in";
              certtemplatejson.badge.issuer.id = "https://digicert.charusat.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://digicert.charusat.ac.in/revocation-list-eth.json";
            }
            // if (puserid == "20088") {
            if(puserid == "20088" || puserid == "20"){
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "LJKU";
              certtemplatejson.badge.issuer.email = "ljku@certonce.com";
              certtemplatejson.badge.issuer.url = "https://certification.ljku.edu.in";
              certtemplatejson.badge.issuer.id = "https://certification.ljku.edu.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://certification.ljku.edu.in/revocation-list-eth.json";
            }
            // if (puserid == "20091" || puserid == "11") {
            if (puserid == "20091" || puserid=="30") {
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "Galgotias";
              certtemplatejson.badge.issuer.email = "certificate@galgotiasuniversity.edu.in";
              certtemplatejson.badge.issuer.url = "https://certificates.galgotiasuniversity.edu.in";
              certtemplatejson.badge.issuer.id = "https://certificates.galgotiasuniversity.edu.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://certificates.galgotiasuniversity.edu.in/revocation-list-eth.json";
            }
            if (puserid == "20094") {
            // if (puserid == "20094" || puserid == "11") {  
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "MIET";
              certtemplatejson.badge.issuer.email = "certificates@mietjammu.in";
              certtemplatejson.badge.issuer.url = "https://certification.mietjmu.in";
              certtemplatejson.badge.issuer.id = "https://certification.mietjmu.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://certification.mietjmu.in/revocation-list-eth.json";
            }
            if (puserid == "20099") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "CUTM";
              certtemplatejson.badge.issuer.email = "verification@cutm.ac.in";
              certtemplatejson.badge.issuer.url = "https://verification.cutm.ac.in";
              certtemplatejson.badge.issuer.id = "https://verification.cutm.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://verification.cutm.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20102" || puserid == "24") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "Garden City University";
              certtemplatejson.badge.issuer.email = "verify@gardencity.university";
              certtemplatejson.badge.issuer.url = `https://verify.gardencity.university`;
              certtemplatejson.badge.issuer.id = `https://verify.gardencity.university/issuereth.json`;
              certtemplatejson.badge.issuer.revocationList = `https://verify.gardencity.university/revocation-list-eth.json`;
            }
            if (puserid == "20103" || puserid == "32") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "Medi-Caps";
              certtemplatejson.badge.issuer.email = "verification.medicaps.ac.in";
              certtemplatejson.badge.issuer.url = "https://verification.medicaps.ac.in";
              certtemplatejson.badge.issuer.id = "https://verification.medicaps.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://verification.medicaps.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20107") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "CUTM AP";
              certtemplatejson.badge.issuer.email = "verification@cutmap.ac.in";
              certtemplatejson.badge.issuer.url = "https://verification.cutmap.ac.in";
              certtemplatejson.badge.issuer.id = "https://verification.cutmap.ac.in/issuerethap.json";
              certtemplatejson.badge.issuer.revocationList = "https://verification.cutmap.ac.in/revocation-list-ethap.json";
            }
            if (puserid == "20108") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "IILM Greater Noida";
              certtemplatejson.badge.issuer.email = "verification@cutmap.ac.in";
              certtemplatejson.badge.issuer.url = "https://digi-record.iilm.ac.in";
              certtemplatejson.badge.issuer.id = "https://digi-record.iilm.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://digi-record.iilm.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20109") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "IILM Gurugram";
              certtemplatejson.badge.issuer.email = "digi-record-gn@iilm.edu";
              certtemplatejson.badge.issuer.url = "https://digi-record.iilm.edu.in";
              certtemplatejson.badge.issuer.id = "https://digi-record.iilm.edu.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://digi-record.iilm.edu.in/revocation-list-eth.json";
            }
            if (puserid == "20117") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "IILM Lucknow";
              certtemplatejson.badge.issuer.email = "digi-record@iilmlko.ac.in";
              certtemplatejson.badge.issuer.url = "https://digi-record.iilmlko.ac.in";
              certtemplatejson.badge.issuer.id = "https://digi-record.iilmlko.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://digi-record.iilmlko.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20110") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "Jain University";
              certtemplatejson.badge.issuer.email = "certificate@onlinejain.com";
              certtemplatejson.badge.issuer.url = "https://verify.jainuniversity.ac.in";
              certtemplatejson.badge.issuer.id = "https://verify.jainuniversity.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://verify.jainuniversity.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20111" || puserid == "26") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "IIIT Bhopal";
              certtemplatejson.badge.issuer.email = "iiitsbhopal@gmail.com";
              certtemplatejson.badge.issuer.url = "https://deekshaakosh.iiitbhopal.ac.in";
              certtemplatejson.badge.issuer.id = "https://deekshaakosh.iiitbhopal.ac.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://deekshaakosh.iiitbhopal.ac.in/revocation-list-eth.json";
            }
            if (puserid == "20113" || puserid == "19") {                
              certtemplatejson.badge.criteria.narrative = "";
              certtemplatejson.badge.signatureLines[0].name = "D Y Patil Education Society";
              certtemplatejson.badge.issuer.email = "coe@dypunik.edu.in";
              certtemplatejson.badge.issuer.url = "https://verification.dypunik.edu.in";
              certtemplatejson.badge.issuer.id = "https://verification.dypunik.edu.in/issuereth.json";
              certtemplatejson.badge.issuer.revocationList = "https://verification.dypunik.edu.in/revocation-list-eth.json";
            }

            //fs.writeFileSync("/home/ubuntu/template.json",JSON.stringify(certtemplatejson),"utf-8");                                     

            let contents = certtemplatejson;

            var curdate = new Date();
            var monthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var fullMonthShortNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            var issueddate = curdate.getDate() + '-' + monthShortNames[curdate.getMonth()] + '-' + curdate.getFullYear();

            var day = curdate.getDate().toString().length == 1 ? ("0" + curdate.getDate()) : curdate.getDate();
            var month = curdate.getMonth().toString().length == 1 ? ("0" + (curdate.getMonth() + 1)) : (curdate.getMonth() + 1);
            var ndimdecstring = '16<sup style=\\"color: black;\\">th</sup> September, 2021';
            if (cmembersissueddate != "") {
              if (cmembersissueddate.split("-").length > 2 && cmembersissueddate.indexOf("T") == -1) {

                cmembersissueddate = cmembersissueddate.split("-")[2] + "/" + cmembersissueddate.split("-")[1] + "/" + cmembersissueddate.split("-")[0];
              }
              else if (cmembersissueddate.split("-").length > 2 && cmembersissueddate.indexOf("T") !== -1) {
                cmembersissueddate = cmembersissueddate.split("T")[0];
                cmembersissueddate = cmembersissueddate.split("-")[2] + "/" + cmembersissueddate.split("-")[1] + "/" + cmembersissueddate.split("-")[0];
              }
              if (cmembersissueddate.split("/").length > 2) {
                var isodate = getIso8601TimeForIssue(cmembersissueddate.split("/")[1] + "/" + cmembersissueddate.split("/")[0] + "/" + cmembersissueddate.split("/")[2] + " UTC");
                console.log("isodate", isodate);
                if (isodate !== "NaN-NaN-NaNTNaN:NaN:NaN-NaN:NaN") {
                  contents.issuedOn = isodate;

                  let ndimdecyear = cmembersissueddate.split("/")[2];
                  let ndimdecmonth = fullMonthShortNames[parseInt(cmembersissueddate.split("/")[1]) - 1];
                  let ndimdecday = parseInt(cmembersissueddate.split("/")[0]);
                  if (ndimdecday == 1)
                    ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">st</sup>';
                  else if (ndimdecday == 2)
                    ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">nd</sup>';
                  else if (ndimdecday == 3)
                    ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">rd</sup>';
                  else
                    ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">th</sup>';

                  ndimdecstring = ndimdecday + " " + ndimdecmonth + ", " + ndimdecyear;
                }
                else {
                  var isodate1 = getIso8601TimeForIssue(cmembersissueddate + " UTC");
                  console.log("isodate1", isodate1);
                  if (isodate1 !== "NaN-NaN-NaNTNaN:NaN:NaN-NaN:NaN") {
                    contents.issuedOn = isodate1;

                    let ndimdecyear = cmembersissueddate.split("/")[2];
                    let ndimdecmonth = fullMonthShortNames[parseInt(cmembersissueddate.split("/")[0]) - 1];
                    let ndimdecday = parseInt(cmembersissueddate.split("/")[1]);
                    if (ndimdecday == 1)
                      ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">st</sup>';
                    else if (ndimdecday == 2)
                      ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">nd</sup>';
                    else if (ndimdecday == 3)
                      ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">rd</sup>';
                    else
                      ndimdecday = ndimdecday + '<sup style=\\"color: black;\\">th</sup>';

                    ndimdecstring = ndimdecday + " " + ndimdecmonth + ", " + ndimdecyear;
                  }
                }
              }
            }
            //contents.id=verifier_url_direct+file.replace(".json","");
            var qr_verifier_url = verifier_url_direct  + student_uuid;
            ///////////////////////// asdfghjk
            if (puserid == "20001") {
              let subdir = "";
              if ((cohortname.toLowerCase().indexOf("o21") !== -1 || cohortfullid.toLowerCase().indexOf("o21") !== -1))
                subdir = "O21/";
              else if ((cohortname.toLowerCase().indexOf("j22") !== -1 || cohortfullid.toLowerCase().indexOf("j22") !== -1))
                subdir = "J22/";
              else if ((cohortname.toLowerCase().indexOf("a21") !== -1 || cohortfullid.toLowerCase().indexOf("a21") !== -1))
                subdir = "A21/";
              else if ((cohortname.toLowerCase().indexOf("m22") !== -1 || cohortfullid.toLowerCase().indexOf("m22") !== -1))
                subdir = "M22/";

              contents.id = "https://certification.mitwpu.edu.in/verify/" + subdir + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20021") {
              contents.id = "https://verification.spjimr.org/verify/mdp/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20045") {
              contents.id = "https://verification.ndimexamination.org/verify/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20027") {
              contents.id = "https://360digitmg.com/verifier/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20077") {
              //contents.id = "https://credentials.nitkkr.ac.in/verifier/" + curyear + "/" + student_uuid;
              contents.id = "https://credentials.nitkkr.ac.in/verifier/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20080") {
              contents.id = "https://www.arfeenkhanuniversity.com/verifier/verify/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20081") {
              contents.id = "https://digicert.charusat.ac.in/verify/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            // else if (puserid == "20088") {
            else if(puserid == "20088" || puserid == "20"){
              contents.id = "https://certification.ljku.edu.in/verifier/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            // else if (puserid == "20091" || puserid == "11") {
            else if (puserid == "20091" || puserid=="30") {
              contents.id = "https://certificates.galgotiasuniversity.edu.in/verify/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20094") {
            // else if (puserid == "20094" || puserid == "11") {  
              contents.id = "https://certification.mietjmu.in/verify/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20099") {
              // else if (puserid == "20099" || puserid == "11") {  
              contents.id = "https://verification.cutm.ac.in/verify/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }            
            else if(puserid == "20102" || puserid == "24"){
              contents.id = `https://verify.gardencity.university/verify/` + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20103" || puserid == "32") {
              // else if (puserid == "20099" || puserid == "11") {  
              //contents.id = "https://verification.medicaps.ac.in/verify/" + curyear + "/" + student_uuid;
              contents.id = "https://verification.medicaps.ac.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20107") {
              // else if (puserid == "20099" || puserid == "11") {  
              contents.id = "https://verification.cutmap.ac.in/verifyap/" + curyear + "/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20108") {
              // else if (puserid == "20099" || puserid == "11") {  
              contents.id = "https://digi-record.iilm.ac.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20109") {
              // else if (puserid == "20099" || puserid == "11") {  
              contents.id = "https://digi-record.iilm.edu.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20110") {
              contents.id = "https://verify.jainuniversity.ac.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20111" || puserid == "26") {
              contents.id = "https://deekshaakosh.iiitbhopal.ac.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20113" || puserid == "19") {
              contents.id = "https://verification.dypunik.edu.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20117") {
              // else if (puserid == "20099" || puserid == "11") {  
              contents.id = "https://digi-record.iilmlko.ac.in/verify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            //else if (puserid == "20122") {
            else if (puserid == "20122" || puserid=="25") {                      
              contents.id = "https://documentverification.rvce.edu.in/verify/" + student_uuid;
              //contents.id = "https://test.certonce.com/localverify/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else if (puserid == "20164" || puserid=="48") {      

              contents.id = "https://certificate.gjuonline.ac.in/verify/" + student_uuid;
              //contents.id = "https://certificate.gjuonline.ac.in/" + student_uuid;
              qr_verifier_url = contents.id;
            }
            else {
              if (s_verifybaseurl !== "" && s_verifybaseurl !== null) {
                contents.id = s_verifybaseurl + "/" + student_uuid;
                qr_verifier_url = contents.id;
              }
              else {
                //contents.id = verifier_url_direct + organization_verify_uri + "/" + puserid + "/" + student_uuid;
                contents.id = verifier_url_direct + student_uuid;
                qr_verifier_url = contents.id;
              }
            }
            console.log("templateid===", templateid);
            if(templateid == "template105e"){
              contents.expires = getIso8601TimeForIssue(expiredate.split("-")[1] + "/" + expiredate.split("-")[0] + "/" + expiredate.split("-")[2] + " UTC");
            }
            stringcontents = JSON.stringify(contents);
            if (templateid == "template171e" && fullname != null & fullname != "") {
              stringcontents = stringcontents.replace("*|RECEIPIENT_NAME|*",fullname.toUpperCase());
            } else {
              stringcontents = stringcontents.replace("*|RECEIPIENT_NAME|*",fullname);
            }
            if (templateid == "template71e") {
              var accreditation = student['public'];
              if (accreditation == null || accreditation == undefined) accreditation = "";                      
              stringcontents = await template_replace_71(stringcontents, awsinfo, puserid, batchnumber, specializationone, rollnumber, convocation_number, convocation_date, enrollnumber, coursename, phdtitle, facultyname, aadhaarnumber, fullname, competency_name, accreditation);
            }
            else if (templateid == "template72e") {
              stringcontents = await template_replace_72(stringcontents, mainstudentid, serialnumber, enrollnumber, competency_name, convocation_date, other1);
            }
            else if (templateid == "template74e" || templateid == "template75e" || templateid == "template76e") {
              stringcontents = await template_replace_74_76(stringcontents, awsinfo, mainstudentid, facultyname)
            }
            else if (templateid == "template60e" || templateid == "template61e") {
              stringcontents = await template_replace_60_61(stringcontents, coursestartdate, coursecompletiondate, student['sex'], rollnumber, other1)
            }
            else if (templateid == "template79e" || templateid == "template80e" || templateid == "template81e") {
              if (cmembersissueddate != "") {
                stringcontents = await template_replace_79_81(stringcontents, cmembersissueddate);
              }
              else {
                stringcontents = await template_replace_79_81(stringcontents, issueddate);
              }
            }
            else if (templateid == "template86e" || templateid == "template88e") {
              stringcontents = await template_replace_86(stringcontents, mainstudentid, fullname, fathername, completiondate, serialnumber, enrollnumber, coursename, department, phdtitle, institute_name);
            }
            else if (templateid == "template87e") {
              stringcontents = await template_replace_87(stringcontents, dateofissue);
            }
            else if (templateid == "template93e") {
                                // stringcontents = await template_replace_93(stringcontents, competency_name, dateofissue, signatureimage, signatureimage1, signatureimage2, logoimage, logoimage1, logoimage2);
                                stringcontents = await template_replace_93(stringcontents, fullname, competency_name, dateofissue, logoimage2);
                              }
            else if (templateid == "template95e" || templateid == "template106e" || templateid == "template107e" || templateid == "template120e" || templateid == "template194e") {
              stringcontents = await template_replace_95(stringcontents, rollnumber, certificationcategory, competency_name, competencystartdate, competencyenddate, 
                logoimage, signatureimage, signaturename, signername, partnercompanyname,
                logoimage1, signatureimage1, signaturename1, signername1, partnercompanyname1,
                logoimage2, signatureimage2, signaturename2, signername2, partnercompanyname2, customername, coursename, department, student);
            }
            else if (templateid == "template98e") {
              let partnercompanyname = student['mainpartnername'];
              if (partnercompanyname != null && partnercompanyname != ""){
                let partnerQuery = format(`select * from partnercompany where partnercompanyname='${partnercompanyname}'`);
                let partnerResult = await pool.query(partnerQuery);
                if (partnerResult.rowCount > 0){
                  stringcontents = await template_module_1.template_replace_98(stringcontents, rollnumber, certificationcategory, competency_name, competencystartdate, competencyenddate, marks, partnerResult.rows[0].signatureimage.replace(/"/g,'\\"'), partnerResult.rows[0].logoimage.replace(/"/g,'\\"'), partnerResult.rows[0].signaturename, partnerResult.rows[0].signername);
                }
              }                      
            }
            else if (templateid == "template100e"){
              stringcontents = await template_replace_100(stringcontents, fullname, competency_name, coursename, coursecompletiondate, marks, certificationcategory);
            }
            else if(templateid == "template103e"){                      
              stringcontents = await template_replace_103(stringcontents, puserid, batchnumber, rollnumber, serialnumber, fullname, institute_name, competency_name, coursecompletiondate, other1, other2, other3);                      
            }
            else if(templateid == "template104e"){                      
              stringcontents = await template_replace_104(stringcontents, rollnumber, fullname, other1, other2, other3);                      
            }
            else if(templateid == "template105e"){                      
              stringcontents = await template_replace_105(stringcontents, competency_name, phdtitle, rollnumber, fullname, serialnumber, coursename, coursestartdate, coursecompletiondate, department, marks, expiredate, templatetype, other1, other2, other3);                      
            }           
            else if(templateid == "template10e" || templateid == "template108e"){  
              console.log("mainPartner name:", mainpartnername);                    
              stringcontents = await template_replace_108(stringcontents, mainpartnername, puserid);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template109e"){                      
              stringcontents = await template_replace_109(stringcontents, puserid, cohortfullid, rollnumber, fullname, other2, other7, other8, other9, other10);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template110e"){                      
              stringcontents = await template_replace_110(stringcontents, puserid, cohortfullid, rollnumber, fullname, other2, other3, other4, other5, other6);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template111e"){                      
              stringcontents = await template_replace_111(stringcontents, serialnumber, rollnumber, facultyname, competency_name, coursename, fullname, completiondate);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template112e"){  
              //let verifyurlqrcode = '<img src=\\"' + await getQRwithbase64(contents.id, 300) + '\\" style=\\"height: 60px;border: 1px solid orange;\\" />';            
              //stringcontents = stringcontents.replace("QR_CODE", verifyurlqrcode);                    
              stringcontents = await template_replace_112(stringcontents, mainstudentid, serialnumber, rollnumber , fullname, competency_name, coursename, phdtitle, other1, other2, other3, other4, other5);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template115e"){                      
              stringcontents = await template_replace_115(stringcontents, cohortid, rollnumber, certtype, subother20);
            }
            else if(templateid == "template116e"){                      
              stringcontents = await template_replace_116(stringcontents, puserid, cohortfullid, qr_verifier_url, serialnumber, rollnumber , fullname, fathername, mothername, competency_name, coursename, completiondate, other1, other2, cohortsemesternumber);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template117e"){                      
              stringcontents = await template_replace_117(stringcontents, puserid, cohortfullid, rollnumber, fullname, fathername, mothername, competency_name, facultyname, other1, other2, other3, other4, other5, other6, other7, other8, other9, other10);
            }
            else if(templateid == "template118e"){                      
              stringcontents = await template_replace_118(stringcontents, rollnumber, fullname, fathername, competency_name, coursename, completiondate, other1, other2, other3, other4, other5);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template119e"){                      
              stringcontents = await template_replace_119(stringcontents, fullname, completiondate);//, rollnumber, marks, coursestartdate, coursecompletiondate);
            }
            else if(templateid == "template121e" || templateid == "template135e" || templateid == "template172e"){
              if (templateid == "template172e") {
                s_baseurl = "https://certificates-galgotia.s3.ap-south-1.amazonaws.com";
              }
              stringcontents = await template_module_1.template_replace_121(stringcontents, s_baseurl, cohortid, rollnumber, other6, other7, certtype);
            }
            else if(templateid == "template122e"){                      
              stringcontents = await template_replace_122(stringcontents, rollnumber, fullname, fathername, competency_name, student['sex'], other1, other2, other3, other4, other5, other6, other7, other8, other9);
            }
            else if(templateid == "template123e"){
              stringcontents = await template_replace_123(stringcontents,puserid, cohortfullid, rollnumber, fullname, fathername, competency_name, other1, other2) ;
            }
            else if(templateid == "template124e"){
              // stringcontents = await template_replace_124(stringcontents, puserid, cohortfullid, rollnumber, fullname, competency_name, dateofissue, other2, other6, cohortsemesternumber) ;
              let frontimgdata = `https://certification.ljku.edu.in/image/${cohortid}_${rollnumber}`;
              console.log("frontimgdata=",frontimgdata);
              console.log('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.png ' + frontimgdata);
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.png ' + frontimgdata);
              stringcontents = await template_module_1.template_replace_124(stringcontents, cohortid, rollnumber, student, student_uuid) ;
            }
            else if(templateid == "template125e"){
              stringcontents = await template_replace_125(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername, competency_name, coursename, facultyname, convocation_date, aadhaarnumber, other1, other2, other3) ;
            }
            else if(templateid == "template126e"){                      
              stringcontents = await template_replace_126(stringcontents, cohortid, rollnumber);
            }
            else if(templateid == "template128e"){                      
              stringcontents = await template_module_1.template_replace_128(stringcontents, student);
            }
            else if(templateid == "template3e"){                      
              stringcontents = await template_module_1.template_replace_3(stringcontents, cohortid, main_std_id, rollnumber, serialnumber, fullname);
            }
            else if(templateid == "template7e"){                      
              stringcontents = await template_replace_7(stringcontents, fullname);
            }
            else if(templateid == "template129e"){                      
              stringcontents = await template_replace_129(stringcontents, fullname);
            }
            else if(templateid == "template130e"){
              if (serialnumber == "0636/01-19/2024" || serialnumber == "0219/04-20/2024" || serialnumber == "0078/04-20/2024" || (cmembersissueddate.includes("/"))) {
                let decyear = cmembersissueddate.split("/")[2];
                let decmonth = fullMonthShortNames[parseInt(cmembersissueddate.split("/")[1]) - 1];
                let decday = parseInt(cmembersissueddate.split("/")[0]);
                decday = decday < 10 ? "0" + decday.toString() : decday.toString();
                if (decday == 1) decmonth = decmonth + 'st';
                else if (decday == 2) decday = decday + 'nd';
                else if (decday == 3) decday = decday + 'rd';
                else decday = decday + 'th';
                cmembersissueddate = decday + " " + decmonth + ", " + decyear;
              }
              stringcontents = await template_replace_130(stringcontents, fullname, certificationcategory, competency_name, coursename, rollnumber, serialnumber, coursecompletiondate, department, student);
              if (certificationcategory == "gold" || certificationcategory == "merit") templateid = "template130goldmerit";
            }
            else if(templateid == "template131e"){
              stringcontents = await template_replace_131(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, aadhaarnumber, student);
              let portrait_list = [
                'bachelor of fisheries science',
                'Bachelor of Science in Agriculture',
                'b.sc.(hons) agriculture',
                'm.sc. (agri.)',
                'm.sc. (hort.)'
              ]
              if (portrait_list.indexOf(competency_name.trim().toLowerCase()) !== -1) templateid = "template131e_portrait";
              else templateid = "template131e_landscape";
            }
            else if(templateid == "template133e"){                      
              stringcontents = await template_module_1.template_replace_133(stringcontents, fullname, competency_name, coursename, rollnumber, department, student);
            }
            else if(templateid == "template134e"){
              stringcontents = await template_replace_134(stringcontents, puserid, cohortfullid, rollnumber, fullname, completiondate, other5, other6, other7, other8, other9);
            }
            else if(templateid == "template136e"){
              stringcontents = await template_replace_136(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername, competency_name, coursename, convocation_date, facultyname, department, coursecompletiondate, other1);
            }
            else if(templateid == "template137e"){
              stringcontents = await template_replace_137(stringcontents, rollnumber, serialnumber, fullname, competency_name, coursename, facultyname, department, coursecompletiondate, convocation_date, certificationcategory);
            }
            else if(templateid == "template138e"){                      
              stringcontents = await template_replace_138(stringcontents, fullname, certificationcategory, competency_name, coursename, rollnumber, serialnumber, coursecompletiondate);
            }
            else if(templateid == "template139e"){                      
              stringcontents = await template_replace_139(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, aadhaarnumber, student);                      
            }
            else if(templateid == "template140e"){             
              stringcontents = await template_module_1.template_replace_140(stringcontents, fullname, certificationcategory, competency_name, coursename, rollnumber, serialnumber, coursecompletiondate, student);
            }
            else if(templateid == "template195e"){             
              stringcontents = await template_module_1.template_replace_195(stringcontents, fullname, certificationcategory, competency_name, coursename, rollnumber, serialnumber, coursecompletiondate, student);
            }
            else if(templateid == "template141e"){
              stringcontents = await template_replace_141(stringcontents, cohortid, certificationcategory, fullname, competency_name, rollnumber, coursecompletiondate, student);
            }
            else if(templateid == "template142e"){                      
              stringcontents = await template_replace_142(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, student);
            }
            else if(templateid == "template207e"){                      
              stringcontents = await template_replace_207(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, student);
            }
            else if (templateid == "template143e") {
              stringcontents = await template_replace_143(stringcontents, certificationcategory, fullname, competency_name, rollnumber, coursecompletiondate, student);
              if (certificationcategory.toLowerCase() == "degree" ) templateid = "template143e_degree"
            }
            else if(templateid == "template144e"){                      
              stringcontents = await template_replace_144(stringcontents, puserid, cohortid, main_std_id, fullname, competency_name, rollnumber, student);
            }
            else if (templateid == "template145e") {
              stringcontents = await template_module_1.template_replace_145(stringcontents, certificationcategory, fullname, competency_name, coursename, rollnumber, student);
            }
            else if (templateid == "template146e") {
              stringcontents = await template_module_1.template_replace_146(stringcontents, certificationcategory, fullname, competency_name, coursename, rollnumber, serialnumber,student);
            }
            else if(templateid == "template147e"){   
              let azurepath = 'https://certificate1certonce.blob.core.windows.net';
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + azurepath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_147(stringcontents, cohortid, rollnumber, student_uuid);
            }
            else if (templateid == "template148e" || templateid == "template149e") {
              stringcontents = await template_module_1.template_replace_148(stringcontents, rollnumber, fullname, competency_name, coursecompletiondate, student);
            }
            else if (templateid == "template205e" || templateid == "template206e") {
              stringcontents = await template_module_1.template_replace_205(stringcontents, rollnumber, fullname, competency_name, coursecompletiondate, student);
            }
            else if(templateid == "template150e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + temppath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_150(stringcontents, cohortid, rollnumber, serialnumber, student_uuid);
            }
            else if(templateid == "template151e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + temppath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_151(stringcontents, cohortid, rollnumber, serialnumber, student_uuid);
            }
            else if(templateid == "template152e"){                      
              stringcontents = await template_module_1.template_replace_152(stringcontents, cohortid, main_std_id, rollnumber, serialnumber, fullname, student);
            }
            else if(templateid == "template153e" || templateid == "template182e" || templateid == "template209e"){
              stringcontents = stringcontents.replace("NDIM_TRANSCRIPT_EXPERIENTIAL", subother40);  // subother40 == experientialpoints
              if ( main_std_id == "21017" ) {
                stringcontents = stringcontents.replace("Mother’s Name&nbsp;&nbsp;:&nbsp;MOTHER_NAME", "&nbsp;&nbsp;");
              } else if ( main_std_id == "21294" ) {
                stringcontents = stringcontents.replace("Mother’s Name&nbsp;&nbsp;:&nbsp;MOTHER_NAME", "&nbsp;&nbsp;");
                stringcontents = stringcontents.replace("Father’s Name&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;FATHER_NAME", "Mother&rsquo;s Name&nbsp;&nbsp;:&nbsp;MOTHER_NAME");
              }
              stringcontents = await template_module_1.template_replace_153(stringcontents, fullname, enrollnumber);
            }
            else if(templateid == "template154e"){                      
              stringcontents = await template_module_1.template_replace_154(stringcontents, fullname, competency_name, rollnumber, coursecompletiondate, coursename, student);
            }
            else if(templateid == "template155e"){
              // let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              console.log(s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf');
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_155(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template156e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_156(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template188e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_188(stringcontents, student_uuid, student) ;
            }
             else if(templateid == "template202e"){
              // let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              console.log(s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf');
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_202(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template203e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_203(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template204e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_204(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template157e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + temppath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_157(stringcontents, student_uuid) ;
            }
            else if(templateid == "template160e"){
              if(s_baseurl=="") s_baseurl="https://www.certonce.com";
              let ext="png";
              if(student['photourl']!=="" && student['photourl']!==null)
              {
                ext = (student['photourl']).split(".")[(student['photourl']).split(".").length-1];                
              }
              stringcontents = await template_module_1.template_replace_160(stringcontents, certificationcategory, fullname, competency_name, coursename, subother1, subother2, rollnumber, s_baseurl+"/memberphoto/"+main_std_id+"."+ext, student);
            }
            else if(templateid == "template161e"){   
              
              stringcontents = await template_module_1.template_replace_161(stringcontents, puserid, main_std_id, student);
            }
            else if(templateid == "template162e" || templateid == "template173e" || templateid == "template174e" || templateid == "template175e"){ // SBUP
              stringcontents = await template_module_1.template_replace_162(stringcontents, fullname,  main_std_id, student);
            }
            else if (templateid == "template176e" || templateid == "template177e" || templateid == "template178e" || templateid == "template179e") {
              var arr = awsinfo.azureconnectionstring.split(";");
              var accountNameArr = arr[1].split("=");
              var accountName = accountNameArr[1];
              var fileurl = `https://${accountName}.blob.core.windows.net/backgroundimage/${cohortid}/${main_std_id}.pdf`;
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf ' + fileurl);
              stringcontents = await template_module_1.template_replace_176(stringcontents, main_std_id, student_uuid, student);
            }
            else if(templateid == "template163e"){             
              stringcontents = await template_module_1.template_replace_163(stringcontents, fullname, serialnumber, rollnumber, student);
            }
            else if(templateid == "template164e"){     
              if(s_baseurl=="") s_baseurl="https://www.certonce.com";
              stringcontents = await template_module_1.template_replace_164(stringcontents, fullname, rollnumber, student['photourl'], student);
            }
            else if(templateid == "template186e"){     
              if(s_baseurl=="") s_baseurl="https://www.certonce.com";
              stringcontents = await template_module_1.template_replace_186(stringcontents, fullname, rollnumber, student['photourl'], student);
            }
            else if(templateid == "template165e"){    
              if(s_baseurl=="") s_baseurl="https://www.certonce.com";                  
              stringcontents = await template_module_1.template_replace_165(stringcontents, cohortid, main_std_id, s_baseurl);
            }
            else if(templateid == "template158e"){    
              if(s_baseurl=="") s_baseurl="https://certificates.galgotiasuniversity.edu.in";                  
              stringcontents = await template_module_1.template_replace_158(stringcontents, cohortid, main_std_id, s_baseurl);
            }
            else if(templateid == "template166e"){
              // let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';   
              console.log(s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf');
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_166(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template167e"){
              // console.log(s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf');
              // await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + s_baseurl + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              // stringcontents = await template_module_1.template_replace_167(stringcontents, student_uuid, student) ;
              // let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';
              let temppath = 'https://nicmar.s3.ap-south-1.amazonaws.com';
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + temppath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + rollnumber + '.pdf"');
              stringcontents = await template_module_1.template_replace_167(stringcontents, student_uuid, student) ;
            }
            else if(templateid == "template168e"){                            
              stringcontents = await template_module_1.template_replace_168(stringcontents, fullname, rollnumber, competency_name, subother1, subother2, subother3);
            }
            else if (templateid == "template169e") {
              stringcontents = await template_module_1.template_replace_169(stringcontents, fullname, competency_name, student);
            }
            else if (templateid == "template208e") {
              stringcontents = await template_module_1.template_replace_208(stringcontents, fullname, competency_name, student);
            }
            else if (templateid == "template170e") {
              stringcontents = await template_module_1.template_replace_170(stringcontents, fullname, competency_name, student);
            }
            else if(templateid == "template180e"){
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf "' + temppath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + main_std_id + '_1.pdf"');
              stringcontents = await template_module_1.template_replace_180(stringcontents, main_std_id, student_uuid, student);
            }
            else if (templateid == "template183e"){
              stringcontents = await template_module_1.template_replace_183(stringcontents, main_std_id, student_uuid, student);
            }
            else if (templateid == "template184e"){
              stringcontents = await template_module_1.template_replace_184(stringcontents, main_std_id, student_uuid, student);
            }
            else if(templateid == "template185e"){
              stringcontents = await template_replace_185(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername, competency_name, convocation_date, facultyname, phdtitle, other1, other2, other3);
            }
            else if(templateid == "template187e"){
              stringcontents = await template_replace_187(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername,convocation_date, other1, other2, other3, other4, other5, other6, other7);
            }
            else if(templateid == "template189e"){
              stringcontents = await template_replace_189(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername,convocation_date, other1, other2, other3, other4, other5, other6, other7, other8);
            }
            else if(templateid == "template190e"){
              stringcontents = await template_replace_190(stringcontents, mainstudentid, rollnumber, serialnumber, fullname, fathername,convocation_date, other1, other2, other3, other4, other5, other6, other7, other8);
            }
            else if (templateid == "template196e"){
              stringcontents = await template_module_1.template_replace_196(stringcontents, main_std_id, student_uuid, student);
            }
            else if (templateid == "template201e" || templateid == "template193e") {
              let temppath = 'https://certonce.s3.us-east-2.amazonaws.com';
              // var fileurl = `https://${accountName}.blob.core.windows.net/backgroundimage/${cohortid}/${main_std_id}.pdf`;
              await os.execCommand('wget --user-agent="Mozilla/5.0" --user-agent="Mozilla/5.0" -O /home/ubuntu/download/' + student_uuid + '_temp.pdf ' + temppath + '/backgroundimage/' +cohortid.replace(/ /g, "_") + '/' + main_std_id + '.pdf');
              stringcontents = await template_module_1.template_replace_201(stringcontents, main_std_id, student_uuid, student);
            }
            stringcontents = stringcontents.replace(/DATE_NDIM_CONV_OF_ISSUE/g, ndimdecstring);
            /////////////////////////// Certificate Category Replace ///////////////////////////
            if (certificationcategory == "") {
              if (templateid == "template35e" || templateid == "template36e" || templateid == "template65e" || templateid == "template66e" || templateid == "template67e" || templateid == "template68e") {
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_SUB_REPLACE/g, '');
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_NAME_REPLACE/g, '<br></br>');
              }
              else {
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_SUB_REPLACE/g, '<br></br>');
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_NAME_REPLACE/g, '<br></br>');
              }
            }
            else {
              if (templateid == "template35e" || templateid == "template36e" || templateid == "template65e" || templateid == "template66e" || templateid == "template67e" || templateid == "template68e") {
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_SUB_REPLACE/g, 'and is awarded');
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_NAME_REPLACE/g, certificationcategory);
              }
              else if (templateid == "template79e" || templateid == "template80e") {
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_SUB_REPLACE/g, 'and is being awarded');
                stringcontents = stringcontents.replace(/CERTIFICATE_CATEGORY_NAME_REPLACE/g, certificationcategory);
              }
            }
            ////////////////////////// Certificate Category Replace End  ///////////////////////

            if (competencystartdate != "" && competencyenddate != "")
              stringcontents = stringcontents.replace("COMPETENCY_START_END_DATE", "from " + competencystartdate + " to " + competencyenddate + ", offered by");
            else
              stringcontents = stringcontents.replace("COMPETENCY_START_END_DATE", "");

            ///////////////////// Template 35, 36 with COMPETENCY_FROM_DATE ///////////////////
            if (templateid == "template35e" || templateid == "template36e" || templateid == "template65e" || templateid == "template66e" || templateid == "template67e" ||
              templateid == "template68e" || templateid == "template79e" || templateid == "template80e" || templateid == "template81e") {
              if (competencystartdate != "" && competencyenddate == "") {
                stringcontents = stringcontents.replace("COMPETENCY_FROM_DATE", competencystartdate);
              }
              else if (competencystartdate != "" && competencyenddate != "") {
                if (templateid == "template79e" || templateid == "template80e") {
                  stringcontents = stringcontents.replace("On COMPETENCY_FROM_DATE", "From " + competencystartdate + " to " + competencyenddate);
                }
                else {
                  stringcontents = stringcontents.replace("On COMPETENCY_FROM_DATE", "From " + competencystartdate + " To " + competencyenddate);
                }
              }
              else {
                stringcontents = stringcontents.replace("On COMPETENCY_FROM_DATE", "");
              }
            }
            ///////////////////// End ///////////////////////
            if (templateid == "template30e" || templateid == "template31e") {
              if (competencystartdate != "" && competencyenddate != "" && competencystartdate == competencyenddate) {
                stringcontents = stringcontents.replace("From COMPETENCY_START_DATE to COMPETENCY_END_DATE", "On " + competencystartdate);
              }

            }
            /////////////////////// CUSTOMER_NAME Replace /////////////////////////
            if (customername != "" && customername != null) {
              stringcontents = stringcontents.replace(/CUSTOMER_NAME/g, customername);
              stringcontents = stringcontents.replace(/BR_CUSTOMER_REPLACE/g, '');
            }
            else {
              if (templateid == "template35e" || templateid == "template36e" || templateid == "template30e" || templateid == "template31e" || templateid == "template65e" || templateid == "template66e" || templateid == "template67e" || templateid == "template68e" || templateid == "template81e") {
                stringcontents = stringcontents.replace(/Conducted for CUSTOMER_NAME/g, '');
                stringcontents = stringcontents.replace(/BR_CUSTOMER_REPLACE/g, '<br></br>');
                // if(certificationcategory=="") {
                //   stringcontents=stringcontents.replace(/Conducted for CUSTOMER_SPJIMR_NAME/g,'<br>');
                //   stringcontents=stringcontents.replace(/by S.P. Jain Institute of Management and Research/g,'<br>');
                // }
                // else {
                //   stringcontents=stringcontents.replace(/Conducted for CUSTOMER_SPJIMR_NAME/g,'');
                //   stringcontents=stringcontents.replace(/by S.P. Jain Institute of Management and Research/g,'');
                // }                        
              }
            }


            ///////////////////////////// End /////////////////////
            ////////////////// 360 MIT Replace ////////////////////
            if (templateid == "template51e") {
              if (competencyenddate != "") {
                stringcontents = stringcontents.replace("360_DATEOFISSUE", competencyenddate);
              }
              else {
                stringcontents = stringcontents.replace("Date of issue: 360_DATEOFISSUE", "<br/>");
              }
            }
            /////////////////// End //////////////////////
            var htmlsnippet = student['detail'];
            if (htmlsnippet == null) htmlsnippet = "";
            htmlsnippet = htmlsnippet.replace(/"/g, '\\"');

            stringcontents = stringcontents.replace("360_MODULE_360", htmlsnippet);

            if (coursestartdate != "" && coursecompletiondate != "")
              stringcontents = stringcontents.replace("COURSE_START_END_DATE", "from " + coursestartdate + " to " + coursecompletiondate + ", offered by");
            else
              stringcontents = stringcontents.replace("COURSE_START_END_DATE", "");

            ////////////growthschool////////////  
            signername0_low = "VAIBHAV SISINTY".toLowerCase().replace(/\s/g, "").trim();
            signername_low = signername.toLowerCase().replace(/\s/g, "").trim();
            signername1_low = signername1.toLowerCase().replace(/\s/g, "").trim();
            if (signername0_low == signername_low && signername1_low == "") {
              stringcontents = stringcontents.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g, "");
              stringcontents = stringcontents.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g, "");
              stringcontents = stringcontents.replace(/SIGNER_GROWTHSCHOOL_NAME/g, "");
              stringcontents = stringcontents.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g, "");
              stringcontents = stringcontents.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g, "");
              stringcontents = stringcontents.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "");

              stringcontents = stringcontents.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage);
              stringcontents = stringcontents.replace(/DISTINGUISHING1_LINE/g, distinguishing_line);
              stringcontents = stringcontents.replace("SIGNATURE_1_NAME", "TRAINER & FOUNDER, GROWTHSCHOOL");
              stringcontents = stringcontents.replace("SIGNER_1_NAME", "VAIBHAV SISINTY");

              stringcontents = stringcontents.replace("SIGNATUREIMAGE_REPLACE", "");
              stringcontents = stringcontents.replace(/DISTINGUISHING_LINE/g, "");
              stringcontents = stringcontents.replace("SIGNATURE_NAME", "");
              stringcontents = stringcontents.replace("SIGNER_NAME", "");

              stringcontents = stringcontents.replace("GROWTHSCHOOL_TRAINER_NAME", signername);


              stringcontents = stringcontents.replace(/GROWTH_BR_SCHOOL/g, '<hr style=\\"height:10px; visibility:hidden;\\" />');
            }
            else {
              var growthschoolfoundersignature = `<img style=\\"height: 50px;\\" src=\\"${myip}/images/backend/vaibhav_sisnty.png\\"  />`;
              stringcontents = stringcontents.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g, growthschoolfoundersignature);
              stringcontents = stringcontents.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g, distinguishing_line);
              stringcontents = stringcontents.replace(/SIGNER_GROWTHSCHOOL_NAME/g, "VAIBHAV SISINTY");
              stringcontents = stringcontents.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g, "FOUNDER");
              stringcontents = stringcontents.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g, "GROWTHSCHOOL");
              stringcontents = stringcontents.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "FOUNDER, GROWTHSCHOOL");

              if (signername != "" && signername1 == "")
                stringcontents = stringcontents.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
              else if (signername != "" && signername1 != "")
                stringcontents = stringcontents.replace("GROWTHSCHOOL_TRAINER_NAME", signername1 + " and " + signername);
              else stringcontents = stringcontents.replace("GROWTHSCHOOL_TRAINER_NAME", "Vaibhav Sisinty");

              stringcontents = stringcontents.replace(/GROWTH_BR_SCHOOL/g, "");
            }
            /////////////////////////////////////     

            /////////////////////////////////////////// LeadWomen //////////////////////////////////////
            if (stringcontents.indexOf("LEADWOMEN_") != -1) {
              // stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_NAME", "Anne Abraham");
              // stringcontents = stringcontents.replace("LEADWOMEN_FOUNDER_NAME", "Founder and Chair<br>LeadWomen");
              stringcontents = stringcontents.replace("LEADWOMEN_COMPETENCY_START_DATE", competencystartdate);
              stringcontents = stringcontents.replace("LEADWOMEN_COMPETENCY_END_DATE", competencyenddate);
              var distinguish_replace = `<hr style=\\"width:230px; border-top: 2px solid #d9d9d9; margin-top: 0px;\\">`;
              if (logoimage != "" && signatureimage != "" && signaturename != "" && partnercompanyname != "") {
                stringcontents = stringcontents.replace("LEADWOMEN_LOGOIMAGE_REPLACE", logoimage);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATUREIMAGE_REPLACE", signatureimage);
                stringcontents = stringcontents.replace("DISTINGUISH_LEADWOMEN_LINE", distinguish_replace);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATURE_NAME", signaturename);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_NAME", signername);
                stringcontents = stringcontents.replace("LEADWOMEN_COMPANY_NAME", partnercompanyname);
              }
              else {
                stringcontents = stringcontents.replace("LEADWOMEN_LOGOIMAGE_REPLACE", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATUREIMAGE_REPLACE", "");
                stringcontents = stringcontents.replace("DISTINGUISH_LEADWOMEN_LINE", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATURE_NAME", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_NAME", "");
                stringcontents = stringcontents.replace("LEADWOMEN_COMPANY_NAME", "");
              }

              if (logoimage1 != "" && signatureimage1 != "" && signaturename1 != "" && partnercompanyname1 != "") {
                //var distinguish_replace = `<hr style=\\"width:230px; border-top: 2px solid #d9d9d9; margin-top: 0px;\\">`;
                stringcontents = stringcontents.replace("LEADWOMEN_LOGOIMAGE_1_REPLACE", logoimage1);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATUREIMAGE_1_REPLACE", signatureimage1);
                stringcontents = stringcontents.replace("DISTINGUISH_LEADWOMEN_1_LINE", distinguish_replace);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATURE_1_NAME", signaturename1);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_1_NAME", signername1);
                stringcontents = stringcontents.replace("LEADWOMEN_COMPANY_1_NAME", partnercompanyname1);
              }
              else {
                stringcontents = stringcontents.replace("LEADWOMEN_LOGOIMAGE_1_REPLACE", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATUREIMAGE_1_REPLACE", "");
                stringcontents = stringcontents.replace("DISTINGUISH_LEADWOMEN_1_LINE", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATURE_1_NAME", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_1_NAME", "");
                stringcontents = stringcontents.replace("LEADWOMEN_COMPANY_1_NAME", "");
              }
              if (logoimage2 != "" && signatureimage2 != "" && signaturename2 != "" && partnercompanyname2 != "") {
                //var distinguish_replace = `<hr style=\\"width:230px; border-top: 2px solid #d9d9d9; margin-top: 0px;\\">`;
                stringcontents = stringcontents.replace("LEADWOMEN_LOGOIMAGE_2_REPLACE", logoimage2);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATUREIMAGE_2_REPLACE", signatureimage2);
                stringcontents = stringcontents.replace("DISTINGUISH_LEADWOMEN_2_LINE", distinguish_replace);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATURE_2_NAME", signaturename2);
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_2_NAME", signername2);
                stringcontents = stringcontents.replace("LEADWOMEN_COMPANY_2_NAME", partnercompanyname2);
              }
              else {
                stringcontents = stringcontents.replace("LEADWOMEN_LOGOIMAGE_2_REPLACE", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATUREIMAGE_2_REPLACE", "");
                stringcontents = stringcontents.replace("DISTINGUISH_LEADWOMEN_2_LINE", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNATURE_2_NAME", "");
                stringcontents = stringcontents.replace("LEADWOMEN_SIGNER_2_NAME", "");
                stringcontents = stringcontents.replace("LEADWOMEN_COMPANY_2_NAME", "");
              }
            }

            /////////////////////////////////// LeadWomen End ///////////////////////////////////////////
            //////////////////////////////////// Tenova //////////////////////////////////////////////
            var tenova_issuedate = student['issuedate'];
            if (tenova_issuedate == undefined || tenova_issuedate == null) tenova_issuedate = "";
            stringcontents = stringcontents.replace("TENOVA_ISSUE_DATE", tenova_issuedate);
            var tenova_signatureimage = `<img style=\\"height: 60px; margin-bottom: 0px; margin-left: 50px\\" src=\\"${myip}/images/backend/sample_signature.png\\" > `;
            stringcontents = stringcontents.replace("TENOVA_SIGNATUREIMAGE", tenova_signatureimage);
            /////////////////////////////////// Tenova End ///////////////////////////////////////////

            stringcontents = stringcontents.replace("LOGOIMAGE_REPLACE", logoimage);
            stringcontents = stringcontents.replace("SIGNATUREIMAGE_REPLACE", signatureimage);
            stringcontents = stringcontents.replace("SIGNATURE_NAME", signaturename);
            stringcontents = stringcontents.replace("SIGNER_NAME", signername);
            if (signername != "" && signername != null)
              stringcontents = stringcontents.replace(/DISTINGUISHING_LINE/g, distinguishing_line);
            else
              stringcontents = stringcontents.replace(/DISTINGUISHING_LINE/g, "");

            stringcontents = stringcontents.replace(/PARTNERCOMPANY_1_NAME/g, partnercompanyname1);
            if (partnercompanyname1 != "")
              stringcontents = stringcontents.replace(/PARTNERCOMPANY_NAME/g, partnercompanyname1 + "," + partnercompanyname);
            else
              stringcontents = stringcontents.replace(/PARTNERCOMPANY_NAME/g, partnercompanyname);

            // var customername=student['customername'];  
            // if(customername==null) customername=""; 
            // if(customername!="")
            // {
            //   stringcontents=stringcontents.replace(/CUSTOMER_SPJIMR_NAME/g, customername);
            // } 
            // else
            // {
            //   if(templateid=="template35e" || templateid=="template36e")
            //   {
            //     if(certificationcategory=="") {
            //       stringcontents=stringcontents.replace(/Conducted for CUSTOMER_SPJIMR_NAME/g,'<br>');
            //       stringcontents=stringcontents.replace(/by S.P. Jain Institute of Management and Research/g,'<br>');
            //     }
            //     else {
            //       stringcontents=stringcontents.replace(/Conducted for CUSTOMER_SPJIMR_NAME/g,'');
            //       stringcontents=stringcontents.replace(/by S.P. Jain Institute of Management and Research/g,'');
            //     }                        
            //   }
            // }

            stringcontents = stringcontents.replace(/PARTNERCOMPANY_B_NAME/g, partnercompanyname);
            if (partnercompanyname.trim() == "") {
              stringcontents = stringcontents.replace("& Enhelion Knowledge", "Enhelion Knowledge");
              stringcontents = stringcontents.replace("and PARTNERCOMPANY_NAME", "");
            }
            stringcontents = stringcontents.replace("LOGOIMAGE_1_REPLACE", logoimage1);
            stringcontents = stringcontents.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage1);
            stringcontents = stringcontents.replace("SIGNATURE_1_NAME", signaturename1);
            stringcontents = stringcontents.replace("SIGNER_1_NAME", signername1);
            if (signername1 != "" && signername1 != null)
              stringcontents = stringcontents.replace(/DISTINGUISHING1_LINE/g, distinguishing_line);
            else
              stringcontents = stringcontents.replace(/DISTINGUISHING1_LINE/g, "");

            stringcontents = stringcontents.replace("LOGOIMAGE_2_REPLACE", logoimage2);
            if (signatureimage2 != "" && signaturename2 != "" && signername2 != "") {
              stringcontents = stringcontents.replace("SIGNATUREIMAGE_2_REPLACE", signatureimage2);
              stringcontents = stringcontents.replace("SIGNATURE_2_NAME", signaturename2);
              stringcontents = stringcontents.replace("SIGNER_2_NAME", signername2);
              stringcontents = stringcontents.replace(/DISTINGUISHING2_LINE/g, distinguishing_line);
              // if(signername2!="" && signername2!=null)
              //   stringcontents=stringcontents.replace(/DISTINGUISHING2_LINE/g,distinguishing_line);
              // else
              //   stringcontents=stringcontents.replace(/DISTINGUISHING2_LINE/g,"");  
            }
            else {
              stringcontents = stringcontents.replace("SIGNATUREIMAGE_2_REPLACE", "");
              stringcontents = stringcontents.replace("SIGNATURE_2_NAME", "");
              stringcontents = stringcontents.replace("SIGNER_2_NAME", "");
              stringcontents = stringcontents.replace(/DISTINGUISHING2_LINE/g, "");
            }
            //////////////////////////////////////////// SPJIMR PartnerCompanyName Replace ////////////////////////////////                    
            stringcontents = spjimr_65_68(stringcontents, partnercompanyname, partnercompanyname1, partnercompanyname2);
            /////////////////////////////////////  End   ////////////////////////////////////////

            stringcontents = stringcontents.replace(/COMPETENCY_NAME/g, competency_name);
            stringcontents = stringcontents.replace("RECEIPIENT_TITLE", student['sex']);
            stringcontents = stringcontents.replace("QR_VERIFIER_CODE",await getQRwithbase64(qr_verifier_url, 300));
            stringcontents = stringcontents.replace("MARKS_PERCENT", marks);
            stringcontents = stringcontents.replace(/ORGANIZATION_NAME/g, currentUser.organization_name);

            if (templateid == "template60e" || templateid == "template61e") {
              if (rollnumber.indexOf("Student ID") == -1) {
                stringcontents = stringcontents.replace("STD_ID, ", "");
                stringcontents = stringcontents.replace(/STD_ID/g, "");
              }
            }
            //stringcontents = stringcontents.replace(/STD_ID/g, rollnumber);
            stringcontents = stringcontents.replace(/STD_ID/g, main_std_id);
            stringcontents = stringcontents.replace(/CONVOCATION_NUMBER/g, convocation_number);
            stringcontents = stringcontents.replace(/CONVOCATION_DATE/g, convocation_date);
            stringcontents = stringcontents.replace(/INSTITUTE_NAME/g, institute_name);
            stringcontents = stringcontents.replace(/INSTITUTE_ADDRESS/g, institute_address);
            stringcontents = stringcontents.replace(/COHORT_ID/g, batchnumber);
            stringcontents = stringcontents.replace(/LETTEROFRECOMMENDATION_CONTENT/g, letterofreco);
            stringcontents = stringcontents.replace(/ENROLL_NO/g, enrollnumber);
            stringcontents = stringcontents.replace(/SERIAL_NO/g, serialnumber);

            if (cmembersissueddate != "") {
              stringcontents = stringcontents.replace(/DATE_OF_ISSUE/g, cmembersissueddate);
              stringcontents = stringcontents.replace(/DATE_NDIM_OF_ISSUE/g, cmembersissueddate);
            } else {
              stringcontents = stringcontents.replace(/DATE_OF_ISSUE/g, issueddate);
              stringcontents = stringcontents.replace(/DATE_NDIM_OF_ISSUE/g, issueddate);
            }

            const qr_data = main_std_id + " | " + first_name + " " + middle_name + " " + last_name;
            const qrcodeskill = '<img src=\\"' + await getQRwithbase64(qr_data, 300) + '\\" style=\\"width: 50%;\\" />';
            stringcontents = stringcontents.replace("SKILL-QR-CODE", qrcodeskill);
            stringcontents = stringcontents.replace("[S/D]", sex);
            stringcontents = stringcontents.replace("major_1", specializationone);
            stringcontents = stringcontents.replace("major_2", specializationtwo);
            stringcontents = stringcontents.replace("PREPARED_BY", preparedby);
            if (fathername == "" || fathername == "null") {
              if (templateid == "template171e") {
                stringcontents = stringcontents.replace("FATHER_NAME &amp;", "");
              }
              stringcontents = stringcontents.replace("FATHER_NAME", "");
            }
            else if (certtype == "transcript")
              stringcontents = stringcontents.replace("FATHER_NAME", fathername.replace("Mr.", "").trim());
            else
              stringcontents = stringcontents.replace("FATHER_NAME", fathername);

            if (mothername == "" || mothername == "null") {
              if (templateid == "template171e") {
                stringcontents = stringcontents.replace("&amp; MOTHER_NAME", "");
              }
              stringcontents = stringcontents.replace("& MOTHER_NAME", "");
              stringcontents = stringcontents.replace("MOTHER_NAME", "");
            }
            else if (certtype == "transcript")
              stringcontents = stringcontents.replace("MOTHER_NAME", mothername.replace("Mrs.", "").trim());
            else
              stringcontents = stringcontents.replace("MOTHER_NAME", mothername);
            var member_photo = "";
            var member_photo_transcript_ljk = "";
            var member_photo_transcript = member_photo_content = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, main_std_id.replace(/\//g, "-"), awsinfo.s3bucketname, student['photourl']);

            if (member_photo_content != "") {
              member_photo = '<img src=\\"' + member_photo_content + '\\" style=\\"width: 75px; height:80px; border: 1px solid orange;\\">';
              member_photo_transcript = '<img src=\\"' + member_photo_content + '\\" style=\\"height: 70px; margin-bottom: 10px;\\">';
              member_photo_transcript_ljk = '<img src=\\"' + member_photo_content + '\\" style=\\"height: 90px; \\">';
            }
            if (templateid == "template86e" || templateid == "template88e") {
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, member_photo_transcript);
            }
            else if (templateid == "template103e" || templateid == "template124e") stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, member_photo_transcript_ljk);
            else if (templateid == "template105e"){
              let temp_photo = '<img src=\\"' + member_photo_content + '\\" style=\\"height: 150px; \\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            else if (templateid == "template112e"){
              let temp_photo = '<img src=\\"' + member_photo_content + '\\" style=\\"height: 100px; \\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            } 
            else if (templateid == "template123e"){
              let temp_photo = '<img src=\\"' + member_photo_content + '\\" style=\\"height: 80px; \\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            else if (templateid == "template125e"){
              let photo_data = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, main_std_id.replace(/\//g, "-"), awsinfo.s3bucketname, student['photourl']);
              let temp_photo = '<img src=\\"' + photo_data + '\\" style=\\"height: 90px; \\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            else if (templateid == "template131e_landscape" || templateid == "template139e"){
              if(s_baseurl=="") s_baseurl="https://www.certonce.com";
              let photo_data = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, main_std_id.replace(/\//g, "-"), awsinfo.s3bucketname, student['photourl']);
              if(photo_data=="") photo_data= s_baseurl+"/images/memberphoto.png";
              let temp_photo = '<img src=\\"' + photo_data + '\\" style=\\"height: 90px; margin-top: 65px;\\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            else if (templateid == "template131e_portrait"){
              if(s_baseurl=="") s_baseurl="https://www.certonce.com";
              let photo_data = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, main_std_id.replace(/\//g, "-"), awsinfo.s3bucketname, student['photourl']);
              if(photo_data=="") photo_data= s_baseurl+"/images/memberphoto.png";
              let temp_photo = '<img src=\\"' + photo_data + '\\" style=\\"height: 90px; margin-top: 65px;\\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            else if (templateid == "template140e"){
              // let photo_data = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, main_std_id.replace(/\//g, "-"), awsinfo.s3bucketname, student['photourl']);
              // let temp_photo = '<img src=\\"' + photo_data + '\\" style=\\"height: 155px; width: 121px; margin-top: -15px; border: 1px solid #500210;\\">';
              // stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            else if (templateid == "template145e"){
              let photo_data = await readPhotoFile(awsinfo.s3obj, puserid, batchnumber, main_std_id.replace(/\//g, "-"), awsinfo.s3bucketname, student['photourl']);
              let temp_photo = '<img src=\\"' + photo_data + '\\" style=\\"height: 90px; width: 80px; margin-top: 0px; border: 1px solid #000;\\">';
              if (certificationcategory == "fellowship") temp_photo = '<img src=\\"' + photo_data + '\\" style=\\"height: 110px; width: 100px; margin-top: 0px; border: 1px solid #000;\\">';
              stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, temp_photo);
            }
            stringcontents = stringcontents.replace(/MEMBER_PHOTO/g, member_photo);
            stringcontents = stringcontents.replace(/MEMBER_TRANSCRIPT_PHOTO/g, member_photo_transcript);

            let qrcode = "";
            let qrcode_transcript = "";
            if (templateid == "template171e") {
              qrcode = '<img src=\\"' + await getQRwithbase64(qr_data, 300) + '\\" style=\\"height: 40px; background: white; padding: 6px;\\" />';
              qrcode_transcript = '<img src=\\"' + await getQRwithbase64(qr_data, 300) + '\\" style=\\"width: 55px;\\" />';
            } else {
              qrcode = '<img src=\\"' + await getQRwithbase64(qr_data, 300) + '\\" style=\\"height: 60px;border: 1px solid orange;\\" />';
              qrcode_transcript = '<img src=\\"' + await getQRwithbase64(qr_data, 300) + '\\" style=\\"width: 55px;\\" />';
            }
            
            stringcontents = stringcontents.replace("QR_CODE", qrcode);
            stringcontents = stringcontents.replace("QR_TRANSCRIPT_CODE", qrcode_transcript);
            ////////////////////////// PGDM Transcript Work //////////////////////////
            if(templateid == "template7e" || templateid == "template132e" || templateid == "template153e" || templateid == "template182e"|| templateid == "template209e") stringcontents = await convertTranscriptToJson(puserid, batchnumber, main_std_id, stringcontents, templateid);

            ////////////////////////// Transcript End ///////////////////////////


            //stringcontents=await replaceTranscript(puserid,batchnumber,rollnumber,stringcontents);

            ////////MIT Custom fields///////
            // certificateid=student['certificateid'];
            // if(certificateid==null) certificateid="";
            stringcontents = stringcontents.replace(/MIT_CERTIFICATEID/g, certificateid);

            if (cohortname.toLowerCase().indexOf("o21") === -1 && cohortfullid.toLowerCase().indexOf("o21") === -1) {
              //if (facultyname.replace(/ /g, '').toLowerCase().indexOf("facultyof<br>") == -1)
              //facultyname = facultyname.replace("Faculty of", "Faculty of<br>");
            }
            stringcontents = stringcontents.replace(/FACULTY_NAME/g, facultyname);
            /*
            if (cohortname.toLowerCase().indexOf("o21") === -1 && cohortfullid.toLowerCase().indexOf("o21") === -1) {
                if (stringcontents.indexOf("MIT_MEDAL_TYPE") !== -1) {
                    if (specializationone.trim() == "" || specializationone.trim() == "-")
                        stringcontents = stringcontents.replace(/SPECIALIZATION_LINE/g, "In the");
                    else
                        stringcontents = stringcontents.replace(/SPECIALIZATION_LINE/g, "In " + specializationone + " Specialization in the");
                }
                else {
                    if (specializationone.trim() == "" || specializationone.trim() == "-")
                        stringcontents = stringcontents.replace(/SPECIALIZATION_LINE/g, "<br>");
                    else
                        stringcontents = stringcontents.replace(/SPECIALIZATION_LINE/g, "In " + specializationone + " Specialization");
                }
            }
            else
            */
            {
              if (specializationone.trim() == "" || specializationone.trim() == "-")
                stringcontents = stringcontents.replace(/SPECIALIZATION_LINE/g, "<br>");
              else
                stringcontents = stringcontents.replace(/SPECIALIZATION_LINE/g, "in " + specializationone + " specialization");
            }

            cgpa = student['cgpa'];
            if (cgpa == null || cgpa == undefined) cgpa = "";
            stringcontents = stringcontents.replace(/MIT_CGPA_TYPE/g, cgpa + " CGPA");

            rank = student['rank'];
            if (rank == null || rank == undefined) rank = "";
            if (cohortname.toLowerCase().indexOf("o21") !== -1 || cohortfullid.toLowerCase().indexOf("o21") !== -1)
              rank = rank.toLowerCase().replace(/\b(\w)/g, s => s.toUpperCase());
            stringcontents = stringcontents.replace(/MIT_RANK_TYPE/g, rank + " rank");

            medaltype = student['medaltype'];
            if (medaltype == null || medaltype == undefined) medaltype = "";
            if (cohortname.toLowerCase().indexOf("o21") !== -1 || cohortfullid.toLowerCase().indexOf("o21") !== -1)
              medaltype = medaltype.toLowerCase().replace(/\b(\w)/g, s => s.toUpperCase());
            stringcontents = stringcontents.replace(/MIT_MEDAL_TYPE/g, medaltype + " medal");

            stringcontents = stringcontents.replace(/MIT_COMPLETIONDATE/g, completiondate);

            issuedate = student['issuedate'];
            if (issuedate == null || issuedate == undefined) issuedate = "";
            stringcontents = stringcontents.replace(/MIT_ISSUEDATE/g, issuedate);

            sex = student['sex'];
            if (sex == null || sex == undefined) sex = "";
            if (sex.trim() == "M")
              stringcontents = stringcontents.replace(/MALE_OR_FERMALE/g, "He");
            else
              stringcontents = stringcontents.replace(/MALE_OR_FERMALE/g, "She");
            //////MIT Custom fields end/////
            ////////DDPI Custom fields///////
            stringcontents = stringcontents.replace("COMPETENCY_START_DATE", competencystartdate);
            stringcontents = stringcontents.replace("COMPETENCY_END_DATE", competencyenddate);
            //////DDPI Custom fields end/////
            stringcontents = stringcontents.replace(/(\r\n|\n|\r|\t)/gm, "");
            var returnpath = {};
            if ( templateid == "template78e" ) {
              if (rollnumber == "NDIM/PGDM/G/19221/1-7231704116" || rollnumber == "NDIM/PGDM/G/19087/1-7231502311" || rollnumber == "NDIM/PGDM/G/19204/1-7231703949" || rollnumber == "NDIM/PGDM/G/19219/1-7231704098") {
                stringcontents = stringcontents.replace(/idr6\\" style=\\"/g, 'idr6\\" style=\\"display: none;');
              }
            }
            var justhtmlunsignedcertificate = stringcontents.replace(/BR_BR_REPLACE/g, '');
            var ispreprocess = false;
            //await fs.writeFileSync("/home/ubuntu/test.json",justhtmlunsignedcertificate,"utf-8");
            if (templateid == "template3e" || templateid == "template78e" || templateid == "template171e") {
              stringcontents = stringcontents.replace(/NDIM_BR_SCAN/g, '');
            }
            if (templateid == "template60e" || templateid == "template61e") {
              stringcontents = stringcontents.replace(/NDIM_BR_SCAN/g, '<br>');
            }
            stringcontents = stringcontents.replace(/BR_BR_REPLACE/g, '<br>');
            if (ishtml == false && ispreprocess == false) {
              ///generate pdf, convert pdf to png as displayhtml///
              
              contents = JSON.parse(stringcontents);
              
              // if (templateid == "template86e" || templateid == "template88e" ) {
              //   stringcontents = await template_replace_86(stringcontents, mainstudentid, fullname, fathername, completiondate, serialnumber, enrollnumber, coursename, department, phdtitle, institute_name);
              // }
              //console.log(contents.displayHtml);
              //await fs.writeFileSync('/home/ubuntu/stringcontents.txt', stringcontents, {flag: 'w'});
              common_lib.StorageInformation = awsinfo;
              
              returnpath = await common_lib.generatePDF(fs, path, pdfparse, puppeteer, homedir, contents.id, awsinfo.s3obj, awsinfo.awsregion, templateid, stringcontents, student_uuid+".json", puserid, organization_verify_uri, iss3, "", awsinfo.s3bucketname, backgroundfilename.split(",")[0], trbackgroundfilename, true, student);
              //console.log(returnpath);
              let base64pngcontent = "";
              if (templateid == "template121e" || templateid == "template135e")
                base64pngcontent = await convertPdf2Png(returnpath.pdffilepath, 600);
              else if (templateid == "template128e")
              base64pngcontent = await convertPdf2Png(returnpath.pdffilepath, 100);
              else if (templateid == "template130e" || templateid == "template131e_landscape" || templateid == "template131e_portrait")
                base64pngcontent = await convertPdf2Png(returnpath.pdffilepath, 200);
              else base64pngcontent = await convertPdf2Png(returnpath.pdffilepath);
              
              if(settingInfo.version=="v2")
              {
                contents.displayHtml = base64pngcontent;
              }
              else if(settingInfo.version=="v3")
              {
                contents.display.content = base64pngcontent;
              }
              // await fs.writeFileSync('/home/ubuntu/testpngbase64.txt', base64pngcontent, {flag: 'w'});
              if (fs.existsSync(returnpath.pdffilepath)) {
                fs.unlinkSync(returnpath.pdffilepath);
              }
              var certificatePngUrl = "";
              if (puserid == "20021") {
                certificatePngUrl = await uploadCertificatePng(awsinfo.s3obj, puserid, base64pngcontent,student_uuid+".png" , "mdp/certificatepng/" + curyear, "https://verification.spjimr.org/certificatepng/mdp/" + curyear, awsinfo.s3bucketname, awsinfo.awsregion);
              }
              else if (puserid == "20045") {
                certificatePngUrl = await uploadCertificatePng(awsinfo.s3obj, puserid, base64pngcontent, student_uuid+".png", "certificatepng/" + curyear, "https://verification.ndimexamination.org/certificatepng/" + curyear, awsinfo.s3bucketname, awsinfo.awsregion);
              }
              else if (puserid == "20027") {
                certificatePngUrl = await uploadCertificatePng(awsinfo.s3obj, puserid, base64pngcontent, student_uuid+".png", "certificatepng", "https://360digitmg.com/certificatepng", awsinfo.s3bucketname, awsinfo.awsregion);
              }
              else {
                certificatePngUrl = await uploadCertificatePng(awsinfo.s3obj, puserid, base64pngcontent, student_uuid+".png", "", "", awsinfo.s3bucketname, awsinfo.awsregion);
              }
              contents.certificatepng = certificatePngUrl;
              stringcontents = JSON.stringify(contents);
            }
            //console.log(cohorttablename, studentid);
            //await fs.writeFileSync(fullpath, stringcontents, {flag: 'w'});
            /////////////////////////////////////////////////////
            if (isPreview) {
              if(settingInfo.version=="v2") {
                result = { Status: 200, content: "<div style='text-align:center;'>" + contents.displayHtml + "</div>" }
              }
              else if(settingInfo.version=="v3") {
                result = { Status: 200, content: "<div style='text-align:center;'>" + contents.display.content + "</div>"}
              }
            }
            else {
              if(certificatePngUrl!=null && certificatePngUrl!="")
              {
                justhtmlunsignedcertificate = justhtmlunsignedcertificate.replace(/'/g, 'TOP_DOT_REPLACE');
                // upload stringcontents in S3 -> migration
                const fileName = `json/unsignedjson/${studentid}-${uuidv4()}.json`;
                const s3_URL = await utils.uploadJsonToS3('certonce', fileName, stringcontents);

                // var updatesql = format(`UPDATE ${cohorttablename} SET unsignedcertificationjsonurl = '${s3_URL}',unsignedcertificateurl='${justhtmlunsignedcertificate}'  WHERE id=${studentid}`);
                var updatesql = format(`UPDATE ${cohorttablename} SET unsignedcertificationjsonurl = '${s3_URL}'  WHERE id=${studentid}`);
                //console.log(updatesql);
                await pool.query(updatesql);
                let updatequery = format(`update generate_status set status='done' where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${studentid}'`);
                await pool.query(updatequery);
                successItems.push(cohortid+"="+studentid);
                result = {
                  successItems:successItems,
                  Status: 200,
                  message: "Certificate generated successfully."
                };
              }
              // else
              // {
              //   let updatequery = format(`update generate_status set status='processing' where accountid='${puserid}' and cohortid='${cohortid}' and studentid='${studentid}'`);
              //   await pool.query(updatequery);
              // }
            }
            
            console.log("studentid=" + rollnumber + ":cohortid=" + batchnumber);
            isbreak = true;

            
            if (fs.existsSync(`${wwwdir}/images/JAIN/${student_uuid}.png`)) {
              fs.unlinkSync(`${wwwdir}/images/JAIN/${student_uuid}.png`);
            }
          }//students loop
        }
      }//for
    }
    else {
      if (glcohortid == "") {
        result = {
          Status: 400,
          message: "Invalid selected students."
        };
        return result;
      }
      var whereClause = "WHERE c.cohortid='" + glcohortid + "' and c.accountid='" + puserid + "' and e.accountid='" + puserid + "' and (b.unsignedcertificateurl='' or b.unsignedcertificateurl is null);"
      var studentQuery = format(`SELECT a.*, c.*,b.*,d.*,b.id as studentidentify FROM student a 
                                  LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                  LEFT JOIN cohort c ON c.id=b.cohortid 
                                  LEFT JOIN cohort_group e ON e.cohortid=c.cohortid 
                                  LEFT JOIN certtemplate d ON d.id=e.certtemplateid ${whereClause}
                                  `);
      let students = await pool.query(studentQuery);
      let index = -1;

    }//else
    if (result == {})
    {
      result = {
        Status: 200,
        content: "There is no generated certifiate"
      }
    }
    return result;
  }
  catch (err) {
    console.log(err);
    if (err.message.indexOf("No such file or directory") != -1) {
      return { Status: 200, message: 'No such file or directory.'}
    } else {
      return { Status: 400, message: err.message };
    }
  }
}

user.bakePreviewOpenBadges = async (req, res, next) => {
  const path = '/home/ubuntu/badgelock.txt';
  try
  {
    ///lock///    
    if (fs.existsSync(path))
    {
       var obj = {
          Status: 400,
            message: "Baking process is running already."
        };
        res.json(obj);
        return;
    }
    else
    {       
     const fd = fs.openSync(path, 'w');       
    }
    ///lock end///

    //var params = req.body.selectedItems;
    var certtype=req.body.certtype;
    var issendopenbadges=false;
    var currentUser = req.user;
    var cohortid = req.body.cohortid;
    var cohorttablename = "cohortmembers_openbadges";
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    //var organization_name=currentUser.organization_name;
    //var os = new os_func();
    var studentquery = format(`SELECT b.id FROM student a LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid LEFT JOIN competencypartner d ON trim(from d.competencyname)=trim(from c.competencyname)  WHERE c.cohortid='${cohortid}' and c.accountid='${puserid}'`)
    var student_list = await pool.query(studentquery);
    //console.log(studentquery);
    //console.log("student data: ", student_list.rows[0].id, student_list.rowCount);
    
    if (student_list.rowCount > 0) {
      var params = [];
      params.push(cohortid + "=" + student_list.rows[0].id);
      //console.log(params);
      var obj = await CoreBakeOpenBadges(currentUser, issendopenbadges, params, true);
      res.json(obj);
      fs.unlinkSync(path);
    }
    else {
      var obj = {
        Status: 400,
          message: "Cohort is not matched with template"        
        }
        res.json(obj); 
    }
  } 
  catch (err) {
    fs.unlinkSync(path);
    var obj = {
      Status: 400,
      message: err.message        
      }
      res.json(obj); 
  }

}

// generate certificate
user.generateCertificate = async (req,res, next) => {
  try 
  {     
    var params = req.body.selectedItems;
    var currentUser = req.user;
    var organization_verify_uri=currentUser.organization_verify_uri;
    if(organization_verify_uri==""||organization_verify_uri=="null"||organization_verify_uri==null|| organization_verify_uri==undefined) organization_verify_uri="certonce";
    //var os = new os_func();
    
    var certtype=req.body.certtype;
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined)
    {      
      cohorttablename=certtypes[certtype];
    }

    if(req.user.business_is_verified==false)
    {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
    }
    var permission=await getPermission(req.user.user_id,"generateCertificate");

    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var awsinfo = await getS3BucketInformation(puserid);
     
    var issetprofile=await UpdateissuerProfile(puserid, currentUser.organization_name);   
    if(issetprofile==false)
    {
      var obj = {
        Status: 400,
          message: "Failed to setting issuer profile."
      };
      res.json(obj);
      return;
    } 
    try
    {
      var pathsjson = await readyForGenerate(currentUser.user_id);
      console.log("pathsjson=",pathsjson);
      if (pathsjson == false) {
        result = {
          Status: 400,
          message: 'Workdir creation is failed!',
        }
        return res.json(result);
        
      }
      else if (pathsjson == true) {
        result = {
          Status: 400,
          message: 'The same account is working at the same time!',
        }
        return res.json(result);
        
      }
  }
  catch(err)
  {
    console.log(err);
  }
  var fail_list = [];
  for (let index = 0; index < params.length; index++) {
    var cohortid = params[index].split("=")[0];
    var studentid = params[index].split("=")[1];
    if(cohortid =="" || studentid == "") continue;
    let whereClause = "WHERE c.cohortid='" + cohortid + "' and b.id='" + studentid + "' and c.accountid='" + puserid + "' and e.accountid='" + puserid + "' and (b.unsignedcertificateurl is null or b.unsignedcertificateurl='') ;"
    let studentQuery = format(`SELECT a.*, c.*,b.*,d.*,b.id as studentidentify, a.studentid as filestudentid, c.cohortid as maincohortid FROM student a 
                                LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                LEFT JOIN cohort c ON c.id=b.cohortid 
                                LEFT JOIN cohort_group e ON e.cohortid=c.cohortid 
                                LEFT JOIN certtemplate d ON d.id=e.certtemplateid ${whereClause}
                                `);
    
    let studentResult = await pool.query(studentQuery);      
    if (studentResult.rowCount > 0){
      let student = studentResult.rows[0];
      let templateid = "";
      if (student["template_type"] !== null && student["template_type"] !== "") {
        certtemplatejson = getcertificatetemplatejson(student, puserid, student['country'], student["template_type"], false, cohortid, student['certifiateid']);
        templateid = await getHtmlTemplateID(certtemplatejson.displayHtml);
      } else {
        certtemplatejson = getcertificatetemplatejson(student, puserid, student['country'], "", false, cohortid, student['certificateid']);
        templateid = await getHtmlTemplateID(certtemplatejson.displayHtml);
      } 
      if (certtemplatejson == null || certtemplatejson == "") {
        obj = {
          Status: 400,
          message: "There is no selected certificate template"
        }
        res.json(obj);
        return;
      }        
        
      if (templateid == "template121e" || templateid == "template135e") {
        try{
          if (awsinfo.baseurl == ""){
            obj = {
              Status: 400,
              message: "Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'."
            }
            res.json(obj);
            return;
          }
          let first_result = "";
          let second_result = "";          
          if (puserid == "11"){
            first_result = await axios.get(`${awsinfo.baseurl}/backgroundimage/${studentResult.rows[0]['maincohortid']}_${certtype}/${studentResult.rows[0]['filestudentid']}_1.png`);
            second_result = await axios.get(`${awsinfo.baseurl}/backgroundimage/${studentResult.rows[0]['maincohortid']}_${certtype}/${studentResult.rows[0]['filestudentid']}_2.png`);
          }
          else {
            first_result = await axios.get(`${awsinfo.baseurl}/backgroundimage/${studentResult.rows[0]['maincohortid']}_${certtype}/${studentResult.rows[0]['filestudentid']}_1`);
            second_result = await axios.get(`${awsinfo.baseurl}/backgroundimage/${studentResult.rows[0]['maincohortid']}_${certtype}/${studentResult.rows[0]['filestudentid']}_2`);
          }
          if (first_result.data.indexOf("NoSuchKey") == -1 && second_result.data.indexOf("NoSuchKey") == -1){
            var addquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
            SELECT '${puserid}','${studentid}', 'processing', '${certtype}','${cohortid}'
            WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${studentid}' and status='processing' and cohortid='${cohortid}')
            RETURNING id;`);
            console.log(studentid); 
            await pool.query(addquery);
          }
          else {
            var obj = {
              Status: 400,
                message: "There are no image files of student to generate certificate. Please upload image files."
            };
            return res.json(obj);
          }
        }
        catch(err){
          console.log("check url error:", err.message);
          var obj = {
            Status: 400,
              message: "There is an error in generating certificate."
          };
          return res.json(obj);
        }             
      }
      else
      {
        var addquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
          SELECT '${puserid}','${studentid}', 'processing', '${certtype}','${cohortid}'
          WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${studentid}' and status='processing' and cohortid='${cohortid}')
          RETURNING id;`);
          await pool.query(addquery);
      }
    }
  }//for params


  var obj = {
    Status: 200,
      message: "All the certificates are registered successfully. It will take some minutes to generate registered certificates."
  };
  return res.json(obj);   
    
    
  } 
  catch (err) {    
    if(err.message.indexOf("No such file or directory")!=-1)
    {
      var obj = {
            Status: 200,
            message: 'No such file or directory.',              
        }
        res.json(obj);
    }
    else
    {
      var obj = {
        Status: 400,
        message: err.message        
        }
        res.json(obj);      
    }
  }
}

async function check_photo_required(awsinfo, puserid, certtablename, cohortid, studentid) {
  try{
    let photoQuery = format(`select b.isphotorequired, a.studentid from ${certtablename} b left join student a on b.studentid=a.id where b.id=${studentid}`)
    let photoResult = await pool.query(photoQuery)
    if (photoResult.rowCount > 0){
      let photo_required = photoResult.rows[0].isphotorequired;
      if (photo_required == "yes"){
        let photocontent = await readPhotoFile(awsinfo.s3obj, puserid, cohortid, photoResult.rows[0].studentid, awsinfo.s3bucketname);
        if (photocontent == "") return false;        
      }
      else return true;
    }
    else return false;
    return true;
  }
  catch(err){
    console.log(err.message);
    return false;
  }
}


async function replaceTranscript(accountid,cohortid,studentid,templatestr)
{
   var returntemplatestr=templatestr;
   try
   {
    var query="select * from semestertranscript a left join transcriptdescribe b on a.accountid=b.accountid and a.cohortid=b.cohortid and a.studentid=b.studentid where a.accountid='"+accountid+"' and a.cohortid='"+cohortid+"' and a.studentid='"+studentid+"';";
    let students = await pool.query(query);            
    if ( students.rowCount > 0 ) {                                 
        for ( const student of students.rows ) {                                    
            subjectcode=student['subjectcode'];
            subjecttype = student['subjecttype'];
            marks = student['marks'];
            credit = student['credit'];
            grade = student['grade'];
            point = student['point'];
            cgpa = (student['cgpa'].replace("(on a 10 point scale)","")).trim();
            cpi = (student['cpi'].replace("(equivalent to Percentage)","")).trim();
            specializationone = student['specializationone'];
            specializationtwo = student['specializationtwo'];
            modeofdelivery = student['modeofdelivery'];
            mediumofstudy = student['mediumofstudy'];
            dateofissue = student['dateofissue'];
            preparedby = student['preparedby'];
            verifiedby = student['verifiedby'];
            returntemplatestr=returntemplatestr.replace("specialization_one", specializationone);
            returntemplatestr=returntemplatestr.replace("specialization_two", specializationtwo);
            returntemplatestr=returntemplatestr.replace("modeofdelivery_dscb", modeofdelivery);
            returntemplatestr=returntemplatestr.replace("mediumofstudy_dscb", mediumofstudy);
            returntemplatestr=returntemplatestr.replace("CGPA_CGPA", cgpa);
            returntemplatestr=returntemplatestr.replace("CPI_CPI", cpi);
            returntemplatestr=returntemplatestr.replace("prepared_t_by", preparedby);
            returntemplatestr=returntemplatestr.replace("verified_t_by", verifiedby);
            returntemplatestr=returntemplatestr.replace(subjectcode+"-Marks", marks);
            returntemplatestr=returntemplatestr.replace(subjectcode+"-Credit", credit);
            returntemplatestr=returntemplatestr.replace(subjectcode+"-Grade", grade);
            returntemplatestr=returntemplatestr.replace(subjectcode+"-Point", point);
        }
    }
   }
   catch(err)
   {

   }
   return returntemplatestr;
}

async function convertTranscriptToJson(accountid,cohortid,studentid,templatestr,templateid)
{
  var returntemplatestr=templatestr;
  var result_json = {
    "1": {
      "core": {},
      "specializationone": {},
      "specializationtwo": {},
      "additional": {}
    },
    "2": {
      "core": {},
      "specializationone": {},
      "specializationtwo": {},
      "additional": {}
    },
    "3": {
      "core": {},
      "specializationone": {},
      "specializationtwo": {},
      "additional": {}
    },
    "4": {
      "core": {},
      "specializationone": {},
      "specializationtwo": {},
      "additional": {}
    }
  }
  try
  {
    var query="select *, a.semesternumber as mainsemesternumber from semestertranscript a left join transcriptdescribe b on a.accountid=b.accountid and a.cohortid=b.cohortid and a.studentid=b.studentid where a.accountid='"+accountid+"' and a.cohortid='"+cohortid+"' and a.studentid='"+studentid+"' order by a.semesternumber, subjecttype, subjectcode;";
    console.log("tr query:", query);
    var cgpa = "";
    var cpi = "";
    var specializationone = "";
    var specializationtwo = "";
    var modeofdelivery = "";
    var mediumofstudy = "";
    var dateofissue = "";
    var preparedby = "";
    var verifiedby = "";
    var experientalpoint = "";
    let fullname = "";
    let students = await pool.query(query);            
    if ( students.rowCount > 0 ) {    
      for ( const student of students.rows ) 
      {
        result_json[student['mainsemesternumber'].toString()][student['subjecttype']][student['subjectcode']] = {"marks": student['marks'], "credit": student['credit'], "grade": student['grade'], "point": student['point']};          
        cgpa = student['cgpa'];//(student['cgpa'].replace("(on a 10 point scale)","")).trim();
        cpi = student['cpi'];//(student['cpi'].replace("(equivalent to Percentage)","")).trim();
        specializationone = student['specializationone'];
        specializationtwo = student['specializationtwo'];
        modeofdelivery = student['modeofdelivery'];
        mediumofstudy = student['mediumofstudy'];
        dateofissue = student['dateofissue'];
        preparedby = student['preparedby'];
        verifiedby = student['verifiedby'];
        experientalpoint = student['other40'] == null || student['other40'] == undefined ? "" : student['other40'];
        studentid = student['studentid'];
      }    
    }

    var semester_length = [0,0,0,0];
    Object.entries(result_json).forEach(item1=>{
      const [key1, value1] = item1;
      var temp_len = 0;
      Object.entries(value1).forEach(item2=>{
        const [key2, value2] = item2;
        if(Object.keys(value2).length > 0) temp_len = temp_len + 1 + Object.keys(value2).length
      })
      semester_length[Number(key1) - 1] = temp_len;
    })
  
    let temp_font_size = "8pt";
    if (templateid == "template132e") temp_font_size = "9.5pt"
    var semesContent = ["", "", "", ""];
    Object.entries(result_json).forEach(entry1=>{
    const [key1, value1] = entry1;
    var temp_content = "";
    Object.entries(value1).forEach(entry2 => {
      const [key2, value2] = entry2;
      if(Object.keys(value2).length > 0)
      {
        var subject_title = "";
        switch(key2.toString())
        {
          case "core":
            subject_title = "Core Subjects";
            break;
          case "specializationone":
            subject_title = "Specialization-I Subjects";
            break;
          case "specializationtwo":
            subject_title = "Specialization-II Subjects";
            break;
          case "additional":
            subject_title = "Additional Subject(Not associated with CGPA/CPI)";
            break;
        }
        temp_content += `<tr>
            <td colspan="5" style="width: 20%; height: 13px; font-weight: bold; font-size: 8pt; color: black; font-family: calibri; font-style: italic; text-align: left; border-top: 1px solid black;">` + subject_title + `</td>
          </tr>`;
        Object.entries(value2).forEach(entry3=>{
          const [key3, value3] = entry3;
          if ((accountid == "20045" || accountid == "37") && (cohortid == "2021-2023" && studentid == "21326" ) && Number(key1) == 2 ) {
            temp_content += `<tr>
              <td style="width: 23%; height: 7px;font-weight: bold;font-size: 7pt;  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + key3 + `</td>
              <td style="width: 18%; height: 7px;font-weight: bold;font-size: 7pt;  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["marks"] + `</td>
              <td style="width: 18%; height: 7px;font-weight: bold;font-size: 7pt;  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["credit"] + `</td>
              <td style="width: 18%; height: 7px;font-weight: bold;font-size: 7pt;  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["grade"] + `</td>
              <td style="width: 23%; height: 7px;font-weight: bold;font-size: 7pt;  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["point"] + `</td>
            </tr>`;
          } else {
            temp_content += `<tr>
              <td style="width: 23%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + key3 + `</td>
              <td style="width: 18%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["marks"] + `</td>
              <td style="width: 18%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["credit"] + `</td>
              <td style="width: 18%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["grade"] + `</td>
              <td style="width: 23%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">` + value3["point"] + `</td>
            </tr>`;
          }
        })
      }
    })
    semesContent[Number(key1) -1] = `<table style="height: 34px; width: 100%; margin: auto; border: 1px solid black; border-collapse: collapse;">
      <tbody>
        <tr>
          <td style="width: 23%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">Sub. Code</td>
          <td style="width: 18%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">Marks</td>
          <td style="width: 18%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">Credit</td>
          <td style="width: 18%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">Grade</td>
          <td style="width: 23%; height: 8px;font-weight: bold;font-size: ${temp_font_size};  color: black; font-family: calibri; text-align: center; border: 1px solid black; padding-top: 0px; padding-bottom: 0px">Grade Point</td>
        </tr>` + temp_content + `</tbody></table>`;      
    })
    returntemplatestr=returntemplatestr.replace("NDIM_TRANSCRIPT_SEMESTER_ONE", semesContent[0].replace(/"/g,'\\"'));
    returntemplatestr=returntemplatestr.replace("NDIM_TRANSCRIPT_SEMESTER_TWO", semesContent[1].replace(/"/g,'\\"'));
    returntemplatestr=returntemplatestr.replace("NDIM_TRANSCRIPT_SEMESTER_THREE", semesContent[2].replace(/"/g,'\\"'));
    returntemplatestr=returntemplatestr.replace("NDIM_TRANSCRIPT_SEMESTER_FOUR", semesContent[3].replace(/"/g,'\\"'));
    returntemplatestr=returntemplatestr.replace("specialization_one", specializationone);
    returntemplatestr=returntemplatestr.replace("specialization_two", specializationtwo);
    returntemplatestr=returntemplatestr.replace("modeofdelivery_dscb", modeofdelivery);
    returntemplatestr=returntemplatestr.replace("mediumofstudy_dscb", mediumofstudy);
    returntemplatestr=returntemplatestr.replace("CGPA_CGPA", cgpa);
    returntemplatestr=returntemplatestr.replace("CPI_CPI", cpi);
    returntemplatestr=returntemplatestr.replace("prepared_t_by", preparedby);
    returntemplatestr=returntemplatestr.replace("verified_t_by", verifiedby);
    returntemplatestr=returntemplatestr.replace("EXPERIENTAL_POINT", experientalpoint);
    //console.log(semesContent);
  }
  catch(err)
  {
    console.log(err);
  }
  return returntemplatestr;
}
// Update validate
user.updatevalidate = async (req,res, next) => {
    var cohortmemberid = req.body.cohortmemberid;  
    var certtype=req.body.certtype;
    
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined)
    {      
      cohorttablename=certtypes[certtype];
    }
    else certtype="degree";   
    var currentUser = req.user;       
    var puserid=await getParentAccountIdFromId(req.user.user_id); 
    var permission=await getPermission(req.user.user_id,"validate");
      if(permission==false)
      {
          var obj = {
            Status: 400,
              message: "Access denied."
          };
          res.json(obj);
          return;
      }
    
    
    if(cohortmemberid!="" && cohortmemberid!=null && cohortmemberid!=="-1")
    {      
      try
      {
        var current_datetime=getIso8601Time();
        var ageQuery = format(`UPDATE ${cohorttablename} SET is_validated=true,validated_by='${puserid}',validation_timestamp='${current_datetime}' WHERE id='${cohortmemberid}' and certificatetype='${certtype}';`);
        pool.query(ageQuery, function (err, result) {
            if (err) {
                var obj = {
                Status: 400,
                message: err.message        
                }
                res.json(obj);      
            }
            else {  
                var obj = {
                     Status: 200,
                     message: "Certificates have been validated."        
                     }
                     res.json(obj);      
            }      
        });
      }
      catch (err)
      {    
          var obj = {
            Status: 400,
            message: err.message        
            }
            res.json(obj);    
            return;  
       }
    }
    else if(cohortmemberid==="-1")
    {
      var cohortdropdownclause = "";
      var selectedCohortJson = req.body.selectedCohortJson;           
      if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
      {
        try {
          selectedCohortJson = JSON.parse(selectedCohortJson);
          if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
          else
          {
            Object.keys(selectedCohortJson).forEach((key, value) => {
              if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
              else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
            });
          }
        } catch (error) {
          
        }
        
      }
      if(cohortdropdownclause!=="")
      {
        
        let pageQuery = format(`select c.cohortid as cohortfullid, c.id as cohortintid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.accountid='${puserid}' and ${cohortdropdownclause}`);
        let pageResult = await pool.query(pageQuery);
        if (pageResult.rowCount > 0){
          for(let index=0; index<pageResult.rowCount; index++)
          {              
            var current_datetime=getIso8601Time();
            var validateQuery = format(`UPDATE ${cohorttablename} SET is_validated=true,validated_by='${puserid}',validation_timestamp='${current_datetime}' WHERE cohortid in (select id from cohort where cohortid='${pageResult.rows[index].cohortfullid}' and accountid='${puserid}') and certificatetype='${certtype}';`);
            await pool.query(validateQuery);
          }
        }
      }
      else
      {
        var cohortQuery = format(`select distinct on (cohortid) * from cohort where accountid='${puserid}'`);
        var defaultCohort="";
        var cohortindex=0;
        var cohorts = await pool.query(cohortQuery);
        if ( cohorts.rowCount > 0 ) {
          for ( const row of cohorts.rows ) {
            if(cohortindex==0) defaultCohort=row['cohortid'];                
            cohortindex++;      
          }
        }
        
        var cohortIds=[];
        if (typeof req.body.cohort==="undefined" || req.body.cohort==="undefined" || req.body.cohort===undefined)
        {          
          cohortIds.push(defaultCohort);     
        }
        else
        {
  
          
          if (Array.isArray(req.body.cohort)) {    
            cohortIds = req.body.cohort;
          } else {
            cohortIds.push(req.body.cohort);
          }
        }
  
        for(const cohortId of cohortIds)
        {
          var current_datetime=getIso8601Time();
          var validateQuery = format(`UPDATE ${cohorttablename} SET is_validated=true,validated_by='${puserid}',validation_timestamp='${current_datetime}' WHERE cohortid in (select id from cohort where cohortid='${cohortId}' and accountid='${puserid}') and certificatetype='${certtype}';`);
          await pool.query(validateQuery);
        }
      }
      return res.json({Status: 200, message: "Validation setting has been successed."});
    }
    else if(cohortmemberid==="" || cohortmemberid===null) {
      return res.json({Status: 400, message: "Incorrect cohort id."});
    }
    else {
      return res.json({Status: 400, message: "Invalid operation."});
    }
}
// Issue confirm - // Issue certificate
user.issueconfirm = async (req,res, next) => {
  var cofirmemail = req.body.email;
  var cofirmpass = req.body.pass;
  var currentUser = req.user;
  cofirmemail = cofirmemail.toLowerCase();
  try {
    var ageQuery = format(`SELECT * from USERMASTER WHERE email='${cofirmemail}';`);
    pool.query(ageQuery, function (err, result) {
      if (err) {
        res.json({ Status: 400, message: err.message});
      }
      else {
        if (result.rows.length != 0) {
          var passwordIsValid = bcrypt.compareSync(cofirmpass, result.rows[0].password); 
          if(passwordIsValid) {
            res.json({Status: 200, message: "Issuing"});
          }
          else {
            res.json({Status: 400, message: "Incorrect email or password."});
          }
        }
        else {
          res.json({ Status: 400, message: "Incorrect email or password."});
        }
      }
    });
  }
  catch (err) {
    res.json({Status: 400, message: err.message});
  }
}

user.issueCertificate = async (req,res, next) => {
  try {
    var currentUser = req.user;
    var params = req.body.selectedItems;    
    var certtype = req.body.certtype;
    var is_cohort=req.body.selectedCohort;  
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(certtype && certtype!="" && certtype!=="null" && certtype!==undefined) {      
      cohorttablename=certtypes[certtype];
    }
    else {
      return res.json({ Status: 400, message: "There is no selected certificate type."});
    }
    
    if(req.user.business_is_verified==false) {
      return res.json({ Status: 400, message: "Your account is currently under verification, please contact certonce team."});
    }
    var permission=await getPermission(req.user.user_id,"issueCertificate");
    if(permission==false) {
      return res.json({ Status: 400, message: "Access denied."});
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var settingInfo = await getProfileFromAccountId(puserid);
    if(currentUser.blockchain=="bitcoin" && settingInfo.version=="v3"){
      return res.json({ Status: 400, message: "Bitcoin blockchain doesn't support Version 3."});
    }
    let isTotal=false; 
    let glcohortid="";     
    if (typeof is_cohort!=="undefined" && is_cohort!=="undefined" && is_cohort!==undefined) {
      isTotal=true;
      glcohortid=is_cohort;
    }
    else {
      for (let index = 0; index <params.length; index++) {
        const element = params[index];
        let cohortid=element.split("=")[0];
        let studentid=element.split("=")[1];
        if(studentid=='') {
          isTotal=true;
          glcohortid=cohortid;
          break;
        }
      }
    }
    isTotal=false;
    if(isTotal==false) {
      for (let index = 0; index < params.length; index++) {
          const element = params[index];
          let cohortid=element.split("=")[0];
          let studentid=element.split("=")[1];
          if ( cohortid == '' || studentid == '') continue;
          //////////////check validate/////////////
          let validatequery=format(`SELECT is_validated FROM ${cohorttablename} WHERE id='${studentid}' and is_validated=false;` ) ;   
          let resultvalidate=   await pool.query(validatequery);
          if (resultvalidate.rows && resultvalidate.rows.length != 0) {
            return res.json({ Status: 400, message: "There is a invalidate certificate."});
          }
      }
    }
    else {
      if(glcohortid=="") {
        return res.json({ Status: 400, message: "Invalid selected students."});
      } 
      var whereClause =  " WHERE cohortid in (select id from cohort where cohortid='"+glcohortid+"' and accountid='"+puserid+"') and is_validated=false;"
      var studentQuery = format(`SELECT id FROM ${cohorttablename} ${whereClause}`);
      let resultvalidate = await pool.query(studentQuery);            
      if (resultvalidate.rows && resultvalidate.rows.length != 0) {
        return res.json({ Status: 400, message: "There is a invalidate certificate."});
      }
    }

    if(isTotal==false) {
      for (let index = 0; index < params.length; index++) {
        const element = params[index];
        let cohortid=element.split("=")[0];
        let studentid=element.split("=")[1];
        if ( cohortid == '' || studentid == '') continue;
        let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status,certtype,blockchain, version)
        SELECT '${puserid}','${cohortid}','${studentid}','issuecertificate','processing','${certtype}','${currentUser.blockchain}','${settingInfo.version}'
        WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${cohortid}' and studentid='${studentid}' and processtype='issuecertificate' and certtype='${certtype}' and status='processing') ;`);
        await pool.query(updateStatusQuery);
      }
    }
    else {
      if(glcohortid=="") {
        return res.json({ Status: 400, message: "Invalid selected students."});
      }
      var whereClause =  " WHERE cohortid in (select id from cohort where cohortid='"+glcohortid+"' and accountid='"+puserid+"');"
      var studentQuery = format(`SELECT id as studentidentify FROM ${cohorttablename} ${whereClause}`);
      console.log(studentQuery);
      let students = await pool.query(studentQuery);              
      if ( students.rowCount > 0 ) {                     
        for ( const student of students.rows ) {
          let studentid = student['studentidentify'];
          if(studentid == '') continue;
          let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status,certtype) SELECT '${puserid}','${glcohortid}','${studentid}','issuecertificate','processing','${certtype}'
          WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${glcohortid}' and studentid='${studentid}' and processtype='issuecertificate' and certtype='${certtype}' and status='processing') ;`);
          await pool.query(updateStatusQuery);
        }
      }
    }      
  } 
  catch (err) {
    return res.json({ Status: 400, message: err.message});
  }
}

user.issueCertificateByCohort = async (req,res, next) => {
  try {
    var glcohortid=req.body.cohortid;
    var api_key=req.body.apikey;
    var cohorttablename="cohortmembers_degree";
    if(api_key=="" || api_key==null ||  api_key==undefined || glcohortid=="" || glcohortid==null ||  glcohortid==undefined) {
      return res.json({ Status: 400, message: "Invalid request parameters."});
    }
    var userid=await getUserIDFromApiKey(api_key); 
    if(userid==null) {
      return res.json({ Status: 400, message: "Invalid api key."});
    }
    var searchQuery = format(`select * from usermaster where user_id='${userid}'`);
    var result = await pool.query(searchQuery);
    var business_is_verified=false;      
    if( result.rowCount > 0 ) {
      business_is_verified=result.rows[0].business_is_verified;
    }
    if(business_is_verified==false) {
      return res.json({ Status: 400, message: "Your account is currently under verification, please contact certonce team."});
    }

    var permission=await getPermission(userid,"issueCertificate");
    if(permission==false) {
      return res.json({ Status: 400, message: "Access denied."});
    }

    var puserid=await getParentAccountIdFromId(userid); 
    var whereClause =  " WHERE cohortid in (select id from cohort where cohortid='"+glcohortid+"' and accountid='"+puserid+"') and is_validated=false;"
    var studentQuery = format(`SELECT id FROM ${cohorttablename} ${whereClause}`);
    let resultvalidate = await pool.query(studentQuery);            
    if (resultvalidate.rows && resultvalidate.rows.length != 0) {
      return res.json({ Status: 400, message: "There is a invalidate certificate."});
    }
    whereClause =  " WHERE cohortid in (select id from cohort where cohortid='"+glcohortid+"' and accountid='"+puserid+"');"
    studentQuery = format(`SELECT id as studentidentify FROM ${cohorttablename} ${whereClause}`);
    console.log(studentQuery)
    let students = await pool.query(studentQuery);              
    if ( students.rowCount > 0 ) {                     
      for ( const student of students.rows ) {
        studentid = student['studentidentify'];
        if(studentid=='') continue;              
        let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status)
        SELECT '${puserid}','${glcohortid}','${studentid}','issuecertificate','processing' WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${glcohortid}' and studentid='${studentid}' and processtype='issuecertificate') ;`);
        await pool.query(updateStatusQuery);
      }
    }
    return res.json({ Status: 200, message: "Certificate issuance may take several minutes or hours."});
  } catch (error) {
    return res.json({ Status: 400, message: err.message});
  }
}

async function getHtmlTemplateID(html) {
  try {
    for(let index=1;index<500;index++) {
      let templateid="template"+index+"e";
      if(html.indexOf(templateid)!==-1) return templateid;
    }   
    return "";
  } catch (error) {
    console.log(error);
    return "";
  }  
}

async function generatePDFEmbededJson(certfilename,certfilepath,collegeid)
{
  try
  {
    pdffilename=certfilename.replace(".json",".pdf");
    inputpdffilepath=homedir+"/certjsonepdf/";    
    inputpdffilepath=homedir+"/certpdf/"+pdffilename;
    if(!fs.existsSync(inputpdffilepath)) {
      console.log("The input file "+inputpdffilepath+" does not exist.");
      return "";
    }
    outputpdffilepath=homedir+"/certjsonembededpdf/";
    //await fsExtra.emptyDirSync(outputpdffilepath);
    outputpdffilepath=homedir+"/certjsonembededpdf/"+pdffilename;  

     
    var os = new os_func();   
    var pdfcommand= 'java -jar /home/ubuntu/java/generatepdf/Generatepdf.jar '+inputpdffilepath+' '+outputpdffilepath+' '+certfilepath+' ' + certfilename.replace(".json","");
    console.log(pdfcommand);
    await os.execCommand(pdfcommand);  
    if(!fs.existsSync(outputpdffilepath)) {
      console.log(outputpdffilepath+" file does not exist.");
      return "";
    }
    var returnpath={};
    pdfurl=await fileUploadPdf(outputpdffilepath,collegeid);
    returnpath.pdfurl=pdfurl;
    console.log("outputpdffilepath="+outputpdffilepath);
    console.log("outputfile="+returnpath.pdfurl);
    returnpath.pdffilepath=outputpdffilepath;
    return returnpath;
  }
  catch(err)
  {
     console.log(err);
     return "";
  }
}


async function getHtmlOpenBadgeTemplate(html, verifyurl, competencyname, organization_name,ispngbased=false)
{
  var headerpart=`
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta content="zh-tw" http-equiv="Content-Language" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <title></title>
    <style>
    html {
     -webkit-print-color-adjust: exact;
    }
    @media print {
      body {-webkit-print-color-adjust: exact;}
      }
     @font-face {
        font-family:"BaroqueScript";
        src: url("https://www.certonce.com/fonts/BaroqueScript.ttf") format("truetype");}
     @font-face {
        font-family:"Playball";
        src: url("https://www.certonce.com/fonts/mit/Playball.ttf") format("truetype");}   
     @font-face {
        font-family:"OPTIEngraversOldEnglish2";
        src: url("https://www.certonce.com/fonts/mit/ENGROLEN.ttf") format("truetype");}
     @font-face {
        font-family:"castlen";
        src: url("https://www.certonce.com/fonts/mit/castlen.ttf") format("truetype");}  
      @font-face {
        font-family:"humnst777CnBTBold";
        src: url("https://www.certonce.com/fonts/mit/humnst777CnBTBold.ttf") format("truetype");}  
      @font-face {
        font-family:"humnst777CnBT";
        src: url("https://www.certonce.com/fonts/mit/humnst777CnBT.ttf") format("truetype");}

      @font-face {
        font-family:"Aspire";
        src: url("https://www.certonce.com/fonts/Aspire-DemiBold.ttf") format("truetype");}        
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    </head>
    <body>
    `;
  
 
 var trailpart=`
  <table style="width: 100%;margin-top: 0px;margin-left: 0px;">
  <tbody>
      <tr>
          <td style="text-align: left;width: 1%;white-space: nowrap;"> 
              <span style="margin: 0px 10px;font-size: 17px;">Click logo to verify on Open Badges&nbsp;</span>                    
          </td>                
          <td style="text-align: left;">     
              <a href="${verifyurl}"><img src="https://www.certonce.com/images/certonce.png" style="width: 39px;" /></a>&nbsp;&nbsp;                    
          </td>
          <td style="text-align: right;">
              <a  target="_blank" href="https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=${competencyname}&organizationName=${organization_name}&certUrl=${verifyurl}"><img src="https://www.certonce.com/images/linkprofile.png" style="height: 32px;position: relative;top:4px;" /></a> &nbsp;&nbsp;&nbsp;
              <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/share.png" style="width: 25px;" /></a> &nbsp;
              <a href="https://www.facebook.com/sharer/sharer.php?u=${verifyurl}"><img src="https://www.certonce.com/images/facebook.png" style="width: 25px;" /></a> &nbsp;
              <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/linkedin.png" style="width: 25px;" /></a> &nbsp;                    
              <a href="https://twitter.com/intent/tweet?url=${verifyurl}"><img src="https://www.certonce.com/images/twitter.png" style="width: 25px;" /></a> 
              &nbsp;
              <a href="https://wa.me/?text=${verifyurl}"><img src="https://www.certonce.com/images/whatsapp.png" style="width: 25px;" /></a>
          </td>
      </tr>
  </tbody>
  </table>   
  <hr style="border: 1px solid rgb(2, 83, 82);background: rgb(2, 83, 82);margin-left: 0px;width: 100%;margin-bottom: -5px;margin-top: 0px;">
  </body>
  </html>
 `;

 if(html.indexOf("template41e")!=-1)
  {
    headerpart=`
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta content="zh-tw" http-equiv="Content-Language" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <title></title>
    <style>
    html {
     -webkit-print-color-adjust: exact;
    }
    @media print {
      body {-webkit-print-color-adjust: exact;}
      }
     @font-face {
        font-family:"BaroqueScript";
        src: url("https://www.certonce.com/fonts/BaroqueScript.ttf") format("truetype");}
     @font-face {
        font-family:"Playball";
        src: url("https://www.certonce.com/fonts/mit/Playball.ttf") format("truetype");}   
     @font-face {
        font-family:"OPTIEngraversOldEnglish2";
        src: url("https://www.certonce.com/fonts/mit/ENGROLEN.ttf") format("truetype");}
     @font-face {
        font-family:"castlen";
        src: url("https://www.certonce.com/fonts/mit/castlen.ttf") format("truetype");}  
      @font-face {
        font-family:"humnst777CnBTBold";
        src: url("https://www.certonce.com/fonts/mit/humnst777CnBTBold.ttf") format("truetype");}  
      @font-face {
        font-family:"humnst777CnBT";
        src: url("https://www.certonce.com/fonts/mit/humnst777CnBT.ttf") format("truetype");}

      @font-face {
        font-family:"Aspire";
        src: url("https://www.certonce.com/fonts/Aspire-DemiBold.ttf") format("truetype");}        
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    </head>
    <body>
  `;   
  trailpart=`    
    <table style="width: 100%;margin-top: 0px;margin-left: 0px;">
    <tbody>
        <tr>
            <td style="text-align: left;width: 1%;white-space: nowrap;"> 
                <span style="margin: 0px 10px;font-size: 17px;">Click logo to verify on Open Badges&nbsp;</span>                    
            </td>                
            <td style="text-align: left;">     
                <a href="${verifyurl}"><img src="https://www.certonce.com/images/certonce.png" style="width: 39px;" /></a>&nbsp;&nbsp;                    
            </td>
            <td style="text-align: right;">
                <a  target="_blank" href="https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=${competencyname}&organizationName=${organization_name}&certUrl=${verifyurl}"><img src="https://www.certonce.com/images/linkprofile.png" style="height: 32px;position: relative;top:4px;" /></a> &nbsp;&nbsp;&nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/share.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.facebook.com/sharer/sharer.php?u=${verifyurl}"><img src="https://www.certonce.com/images/facebook.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/linkedin.png" style="width: 25px;" /></a> &nbsp;                    
                <a href="https://twitter.com/intent/tweet?url=${verifyurl}"><img src="https://www.certonce.com/images/twitter.png" style="width: 25px;" /></a> 
                &nbsp;
                <a href="https://wa.me/?text=${verifyurl}"><img src="https://www.certonce.com/images/whatsapp.png" style="width: 25px;" /></a>
            </td>
        </tr>
    </tbody>
  </table>   
  <hr style="border: 1px solid rgb(2, 83, 82);background: rgb(2, 83, 82);margin-left: 0px;width: 100%;margin-bottom: -5px;margin-top: 0px;">
  </body>
  </html>
  `;
  }
  else if(html.indexOf("template45e")!=-1)
  {
    headerpart=`
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta content="zh-tw" http-equiv="Content-Language" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <title></title>
    <style>
    html {
     -webkit-print-color-adjust: exact;
    }
    @media print {
      body {-webkit-print-color-adjust: exact;}
      }
     @font-face {
        font-family:"BaroqueScript";
        src: url("https://www.certonce.com/fonts/BaroqueScript.ttf") format("truetype");}
     @font-face {
        font-family:"Playball";
        src: url("https://www.certonce.com/fonts/mit/Playball.ttf") format("truetype");}   
     @font-face {
        font-family:"OPTIEngraversOldEnglish2";
        src: url("https://www.certonce.com/fonts/mit/ENGROLEN.ttf") format("truetype");}
     @font-face {
        font-family:"castlen";
        src: url("https://www.certonce.com/fonts/mit/castlen.ttf") format("truetype");}  
      @font-face {
        font-family:"humnst777CnBTBold";
        src: url("https://www.certonce.com/fonts/mit/humnst777CnBTBold.ttf") format("truetype");}  
      @font-face {
        font-family:"humnst777CnBT";
        src: url("https://www.certonce.com/fonts/mit/humnst777CnBT.ttf") format("truetype");}

      @font-face {
        font-family:"Aspire";
        src: url("https://www.certonce.com/fonts/Aspire-DemiBold.ttf") format("truetype");}        
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    </head>
    <body>
  `;   
  trailpart=`    
    <table style="width: 100%;margin-top: 0px;margin-left: 0px;">
    <tbody>
        <tr>
            <td style="text-align: left;width: 1%;white-space: nowrap;"> 
                <span style="margin: 0px 10px;font-size: 17px;">Click logo to verify on Open Badges&nbsp;</span>                    
            </td>                
            <td style="text-align: left;">     
                <a href="${verifyurl}"><img src="https://www.certonce.com/images/certonce.png" style="width: 39px;" /></a>&nbsp;&nbsp;                    
            </td>
            <td style="text-align: right;">
                <a  target="_blank" href="https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=${competencyname}&organizationName=${organization_name}&certUrl=${verifyurl}"><img src="https://www.certonce.com/images/linkprofile.png" style="height: 32px;position: relative;top:4px;" /></a> &nbsp;&nbsp;&nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/share.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.facebook.com/sharer/sharer.php?u=${verifyurl}"><img src="https://www.certonce.com/images/facebook.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/linkedin.png" style="width: 25px;" /></a> &nbsp;                    
                <a href="https://twitter.com/intent/tweet?url=${verifyurl}"><img src="https://www.certonce.com/images/twitter.png" style="width: 25px;" /></a> 
                &nbsp;
                <a href="https://wa.me/?text=${verifyurl}"><img src="https://www.certonce.com/images/whatsapp.png" style="width: 25px;" /></a>
            </td>
        </tr>
    </tbody>
  </table>   
  <hr style="border: 1px solid rgb(2, 83, 82);background: rgb(2, 83, 82);margin-left: 0px;width: 100%;margin-bottom: -5px;margin-top: 0px;">
  </body>
  </html>
  `;
  }
  else if(html.indexOf("template58e")!=-1)
  {
    headerpart=`
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta content="zh-tw" http-equiv="Content-Language" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="viewport" content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes">   
    <title></title>
    <style>
    html {
     -webkit-print-color-adjust: exact;
    }
    @media print {
      body {-webkit-print-color-adjust: exact;}
      }
    @font-face {
      font-family:"BaroqueScript";
      src: url("https://www.certonce.com/fonts/BaroqueScript.ttf") format("truetype");}
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Averia+Serif+Libre:wght@300&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    </head>
    <body> 
  `;   
  trailpart=`    
    <table style="width: 100%;margin-top: 0px;margin-left: 0px;">
    <tbody>
        <tr>
            <td style="text-align: left;width: 1%;white-space: nowrap;"> 
                <span style="margin: 0px 10px;font-size: 17px;">Click logo to verify on Open Badges&nbsp;</span>                    
            </td>                
            <td style="text-align: left;">     
                <a href="${verifyurl}"><img src="https://www.certonce.com/images/certonce.png" style="width: 39px;" /></a>&nbsp;&nbsp;                    
            </td>
            <td style="text-align: right;">
                <a  target="_blank" href="https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=${competencyname}&organizationName=${organization_name}&certUrl=${verifyurl}"><img src="https://www.certonce.com/images/linkprofile.png" style="height: 32px;position: relative;top:4px;" /></a> &nbsp;&nbsp;&nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/share.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.facebook.com/sharer/sharer.php?u=${verifyurl}"><img src="https://www.certonce.com/images/facebook.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/linkedin.png" style="width: 25px;" /></a> &nbsp;                    
                <a href="https://twitter.com/intent/tweet?url=${verifyurl}"><img src="https://www.certonce.com/images/twitter.png" style="width: 25px;" /></a> 
                &nbsp;
                <a href="https://wa.me/?text=${verifyurl}"><img src="https://www.certonce.com/images/whatsapp.png" style="width: 25px;" /></a>
            </td>
        </tr>
    </tbody>
  </table>   
  <hr style="border: 1px solid rgb(0,97,62);background: rgb(0,97,62);margin:10px;">
  </body>
  </html>
  `;
  }
  else if(html.indexOf("template59e")!=-1)
  {
    headerpart=`
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta content="zh-tw" http-equiv="Content-Language" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="viewport" content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes">   
    <title></title>
    <style>
    html {
     -webkit-print-color-adjust: exact;
    }
    @media print {
      body {-webkit-print-color-adjust: exact;}
      }
    @font-face {
      font-family:"BaroqueScript";
      src: url("https://www.certonce.com/fonts/BaroqueScript.ttf") format("truetype");}
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Averia+Serif+Libre:wght@300&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    </head>
    <body> 
  `;   
  trailpart=`    
    <table style="width: 100%;margin-top: 0px;margin-left: 0px;">
    <tbody>
        <tr>
            <td style="text-align: left;width: 1%;white-space: nowrap;"> 
                <span style="margin: 0px 10px;font-size: 17px;">Click logo to verify on Open Badges&nbsp;</span>                    
            </td>                
            <td style="text-align: left;">     
                <a href="${verifyurl}"><img src="https://www.certonce.com/images/certonce.png" style="width: 39px;" /></a>&nbsp;&nbsp;                    
            </td>
            <td style="text-align: right;">
                <a  target="_blank" href="https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=${competencyname}&organizationName=${organization_name}&certUrl=${verifyurl}"><img src="https://www.certonce.com/images/linkprofile.png" style="height: 32px;position: relative;top:4px;" /></a> &nbsp;&nbsp;&nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/share.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.facebook.com/sharer/sharer.php?u=${verifyurl}"><img src="https://www.certonce.com/images/facebook.png" style="width: 25px;" /></a> &nbsp;
                <a href="https://www.linkedin.com/shareArticle?url=${verifyurl}"><img src="https://www.certonce.com/images/linkedin.png" style="width: 25px;" /></a> &nbsp;                    
                <a href="https://twitter.com/intent/tweet?url=${verifyurl}"><img src="https://www.certonce.com/images/twitter.png" style="width: 25px;" /></a> 
                &nbsp;
                <a href="https://wa.me/?text=${verifyurl}"><img src="https://www.certonce.com/images/whatsapp.png" style="width: 25px;" /></a>
            </td>
        </tr>
    </tbody>
  </table>   
  <hr style="border: 1px solid rgb(68,4,68);background: rgb(68,4,68);margin:10px;">
  </body>
  </html>
  `;
  }
  var body_html=html.replace(/"/g,'"');


   if(ispngbased==false)
   {     
     body_html=body_html.replace(/BR_BR_REPLACE/g,'');
     return headerpart+body_html+trailpart;
   }
   else  
   {
     body_html=body_html.replace(/BR_BR_REPLACE/g,'<br>');     
     return headerpart+body_html+`</body></html>`;
   }
}
async function generatePDFForOpenBadges(s3obj, bucket_region, bucket_name, html, pdffilename,collegeid,cohortid,organization_name,competency_name,verifyurl,ispng=false)
{
  try
  {

    pdffilename=pdffilename.replace(".json",".pdf");
    pdffilepath=homedir+"/kullarpdf/";
    //await fsExtra.emptyDirSync(pdffilepath);
    pdffilepath=homedir+"/kullarpdf/"+pdffilename;
    
    let data = {};
    let result_html=await getHtmlOpenBadgeTemplate(html, verifyurl, competency_name, organization_name, ispng);

    const template = hb.compile(result_html, { strict: true });
    const result = template(data);
    const browser = await puppeteer.launch({
    headless:true,
    args: ["--no-sandbox","--start-maximized"]
    });

    const page = await browser.newPage();
    await page.setViewport({width:0, height:0});
    await page.setContent(result_html,{ waitUntil: 'load' });    
    await page.evaluateHandle('document.fonts.ready');
    await page.addStyleTag({
    content: '@page { size: auto; }',
    });


    if(result_html.indexOf("templateopenbadges1e")!=-1)
    {
      await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,landscape: true,margin: "none" });
    }   
    else if(result_html.indexOf("template44e")!=-1 || result_html.indexOf("template45e")!=-1)
    {      
      const pdfParse = require('pdf-parse');
      let height=200;
      let numpages=1;
      await page.pdf({ path: pdffilepath, width:"261mm", height:height+"mm",margin: "none" });      
      let dataBuffer = fs.readFileSync(pdffilepath);
      let pdfParseResult=await pdfParse(dataBuffer);
      numpages=pdfParseResult.numpages;
      while(numpages>1)
      {
        height=height+1;
        await page.pdf({ path: pdffilepath, width:"261mm", height:height+"mm",margin: "none" });      
        dataBuffer = fs.readFileSync(pdffilepath);
        pdfParseResult=await pdfParse(dataBuffer);
        numpages=pdfParseResult.numpages;
      }
    }
    else if(result_html.indexOf("template58e" || result_html.indexOf("template59e")!=-1))
    {      
      const pdfParse = require('pdf-parse');
      let height=200;
      let numpages=1;
      await page.pdf({ path: pdffilepath, printBackground: true, width:"297mm", height:height+"mm",margin: "none" });      
      let dataBuffer = fs.readFileSync(pdffilepath);
      let pdfParseResult=await pdfParse(dataBuffer);
      numpages=pdfParseResult.numpages;
      while(numpages>1)
      {
        height=height+1;
        await page.pdf({ path: pdffilepath, printBackground: true, width:"297mm", height:height+"mm",margin: "none" });      
        dataBuffer = fs.readFileSync(pdffilepath);
        pdfParseResult=await pdfParse(dataBuffer);
        numpages=pdfParseResult.numpages;
      }
    }  
    else
    {
       await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,landscape: true,margin: "none" });
    }
    await browser.close();

    if(ispng==false)
    {
      let pdfurl=await kullarFileUploadPdf(s3obj, bucket_region, pdffilepath,collegeid,cohortid, bucket_name)
      console.log(pdfurl);
      if(await fs.existsSync(pdffilepath))
      {
        fs.unlinkSync(pdffilepath);
      }     
      return pdfurl;
    }
    else
    {
      var base64pngcontent=await convertPdf2Png(pdffilepath);  
      if(await fs.existsSync(pdffilepath))
      {
        fs.unlinkSync(pdffilepath);
      }         
      return base64pngcontent;
    }

  }
  catch(err)
  {
     console.log(err);
     return "";
  }

}
async function generateKullarOpenBadgePDF(pdffilename,collegeid,cohortid,receipient_name,competency_name,issueddate,verifyurl)
{
  try
  {
    pdffilename=pdffilename.replace(".json",".pdf");
    pdffilepath=homedir+"/kullarpdf/";
    //await fsExtra.emptyDirSync(pdffilepath);
    pdffilepath=homedir+"/kullarpdf/"+pdffilename;

    var pdir=require('path').resolve(__dirname, '..');
    pdir=require('path').resolve(pdir, '..');    
    var result_html = fs.readFileSync(pdir+"/template/kullarpdftemplate.html", 'utf8');
    
    result_html=result_html.replace("RECEIPIENT_NAME",receipient_name);
    result_html=result_html.replace("COMPETENCY_NAME",competency_name);
    result_html=result_html.replace("DATE_OF_ISSUE",issueddate);
    result_html=result_html.replace("DATE_OF_ISSUE",issueddate);
    result_html=result_html.replace(/VERIFY_URL/g,verifyurl);


    
    let data = {};
    

    const template = hb.compile(result_html, { strict: true });
    const result = template(data);
    const browser = await puppeteer.launch({
    headless:true,
    args: ["--no-sandbox","--start-maximized"]
    });

    const page = await browser.newPage();
    await page.setViewport({width:0, height:0});
    await page.setContent(result_html,{ waitUntil: 'load' });    
    await page.evaluateHandle('document.fonts.ready');
    await page.addStyleTag({
    content: '@page { size: auto; }',
    });


    if(result_html.indexOf("template14")!=-1)
    {
      await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,landscape: true,margin: "none" });
    }
    else if(result_html.indexOf("template11")!=-1)
    {
      await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,portrait: true,margin: "none" });
    }
    else if(result_html.indexOf("template10")!=-1)
    {
      await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,portrait: true,margin: "none" });
    }
    else if(result_html.indexOf("template2")!=-1)
    {
      await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,portrait: true,margin: "none" });
    }
    else if(result_html.indexOf("template8")!=-1)
    {
      await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,portrait: true,margin: "none" });
    }    
    else
    {
       await page.pdf({ path: pdffilepath, format: 'A4',printBackground: true,landscape: true,margin: "none" });
    }
    await browser.close();


    let pdfurl=await kullarFileUploadPdf(pdffilepath,collegeid,cohortid)
    if(await fs.existsSync(pdffilepath))
    {
      fs.unlinkSync(pdffilepath);
    }
    console.log(pdfurl);

    return pdfurl;

  }
  catch(err)
  {
     console.log(err);
     return "";
  }
}


async function encrypt(source) {
  const params = {
    KeyId: config.kmsKeyId,
    Plaintext: source,
  };
  const { CiphertextBlob } = await kms.encrypt(params).promise();

  // store encrypted data as base64 encoded string
  return CiphertextBlob.toString('base64');
}

async function decrypt(source) {
  const params = {
    CiphertextBlob: Buffer.from(source, 'base64'),
  };
  const { Plaintext } = await kms.decrypt(params).promise();
  return Plaintext.toString();
}

// generateAddress
user.generateAddress = async (req,res, next) => {
    var params = req.body;
    var currentUser = req.user;
    var blockchain=req.query.blockchain;
    var os = new os_func();
    var generatedpublickey="";
    var generatedprivatekey="";
    if(req.user.business_is_verified==false)
    {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);   
    try {
     
      if(blockchain=="bitcoin")
      {
        
        var os = new os_func();
        generatedpublickey= await os.execCommand('sudo docker exec -i '+containerid+' bitcoin-cli getnewaddress');
        generatedpublickey=generatedpublickey.replace('\n','');
        generatedprivatekey= await os.execCommand('sudo docker exec -i '+containerid+' bitcoin-cli dumpprivkey '+generatedpublickey);
        generatedprivatekey=generatedprivatekey.replace('\n','');
        
        
        let encdata=await encrypt(Buffer.from(generatedprivatekey));
        let updateAddress = format(`INSERT INTO wallet_pk (accountid,publickey,privatekey,blockchain)
                      SELECT '${puserid}','${generatedpublickey.trim()}','${encdata}','${blockchain.trim()}'
                      WHERE NOT EXISTS ( SELECT 1 FROM wallet_pk WHERE accountid='${puserid}'and blockchain='${blockchain.trim()}') ;`);
        await pool.query(updateAddress);
        try {

            var ageQuery = format(`select a.*,b.publickey from usermaster a
                left join wallet_pk b on b.accountid=a.user_id and b.blockchain=a.blockchain where a.user_id = ${puserid} LIMIT 1`);

            pool.query(ageQuery, function (err, result) {
              if (err) {
                var obj = {
                  Status: 400,
                  message: err.message
                }
                res.json(obj)
              }
              else {
                var userData = {};
                if (result.rows && result.rows.length != 0) {
                  userData = result.rows[0];
                }
                var obj = {
                  Status: 200,
                  message: "Get Profile",
                  Data: userData
                }
                res.json(obj)
              }
            });

          }
          catch (err) {
            var obj = {
              Status: 400,
              message: err.message
            }
            res.json(obj)
          }


      }
      else if(blockchain=="ethereum")
      {

        let addressData = ethWallet.generate();        
         generatedpublickey=addressData.getAddressString();
         generatedprivatekey=addressData.getPrivateKeyString();
         let encdata=await encrypt(Buffer.from(generatedprivatekey));
        let updateAddress = format(`INSERT INTO wallet_pk (accountid,publickey,privatekey,blockchain)
                      SELECT '${puserid}','${generatedpublickey.trim()}','${encdata}','${blockchain.trim()}'
                      WHERE NOT EXISTS ( SELECT 1 FROM wallet_pk WHERE accountid='${puserid}'and blockchain='${blockchain.trim()}') ;`);
        await pool.query(updateAddress);
        try {

            var ageQuery = format(`select a.*,b.publickey from usermaster a
                left join wallet_pk b on b.accountid=a.user_id and b.blockchain=a.blockchain where a.user_id = ${puserid} LIMIT 1`);

            pool.query(ageQuery, function (err, result) {
              if (err) {
                var obj = {
                  Status: 400,
                  message: err.message
                }
                res.json(obj)
              }
              else {
                var userData = {};
                if (result.rows && result.rows.length != 0) {
                  userData = result.rows[0];
                }
                var obj = {
                  Status: 200,
                  message: "Get Profile",
                  Data: userData
                }
                res.json(obj)
              }
            });

          }
          catch (err) {
            var obj = {
              Status: 400,
              message: err.message
            }
            res.json(obj)
          } 
      }
      else
      {
        var obj = {
          Status: 400,
          message: "Not selected blockchain"
          }
          res.json(obj);
     }
  }  
    
   catch (err) {
    var obj = {
          Status: 400,
          message: err.message
          }
          res.json(obj);
     }
}



function decodeBase64Image(dataString) 
        {
          var matches = dataString.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);
          var response = {};

          if (matches.length !== 3) 
          {
            return new Error('Invalid input string');
          }

          response.type = matches[1];
          response.data = Buffer.from(matches[2], 'base64');

          return response;
        }
user.uploadLogoImage = async (req, res, next) => {
  try {
        
      var currentUser=req.user;
      var os = new os_func();
      if(req.user.business_is_verified==false)
      {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
      }
      var permission=await getPermission(req.user.user_id,"uploadLogoImage");
      if(permission==false)
      {
          var obj = {
            Status: 400,
              message: "Access denied."
          };
          res.json(obj);
          return;
      }
      var puserid=await getParentAccountIdFromId(req.user.user_id);

      var params = req.body;

      if(params.value==''||params.value==null) 
      {
          var obj = {
            Status: 400,
            message: "There is no selected logo image."
          }
          res.json(obj)
          return;
      }
      
      if (!await fs.existsSync(wwwdir+subwwwurl+"/logoimages"))
      {
          await os.execCommand('sudo mkdir "'+wwwdir+subwwwurl+'/logoimages"');
          await os.execCommand('sudo chmod -R 777 "'+wwwdir+subwwwurl+'/logoimages"');  
          var imageBuffer = decodeBase64Image(params.value);
          await writeFile(wwwdir+subwwwurl+"/logoimages/"+puserid+".png",imageBuffer.data); 
      }
      else
      {
          var imageBuffer = decodeBase64Image(params.value);
          await writeFile(wwwdir+subwwwurl+"/logoimages/"+puserid+".png",imageBuffer.data); 
      }
        ///////////////////////////////////////////////////////////////////////
      var currentbtcpublickkey="";
      var currentethpublickkey="";      
      var profileQuery = format(`select publickey from wallet_pk where accountid = ${puserid} and blockchain='bitcoin' LIMIT 1`);
      var result=await pool.query(profileQuery);
      var userData = {};      
      if (result.rows && result.rows.length != 0) {
        userData = result.rows[0]; 
        if(userData.publickey!=""&&userData.publickey!=null)
        {            
            currentbtcpublickkey=userData.publickey;
        }
        else 
        { 
            var obj = {
              Status: 400,
              message: 'Please generate bitcoin address',              
              }
              res.json(obj);
              return;
        }
      }
      else
      {
          
           var obj = {
                Status: 400,
                message: 'Please generate bitcoin address',              
                }
                res.json(obj);
                return;
      }
     
      profileQuery = format(`select publickey from wallet_pk where accountid = ${puserid} and blockchain='ethereum' LIMIT 1`);
      result=await pool.query(profileQuery);
      userData = {};      
      if (result.rows && result.rows.length != 0) {
        userData = result.rows[0]; 
        if(userData.publickey!=""&&userData.publickey!=null)
        {            
            currentethpublickkey=userData.publickey;
        }
        else 
        {          
            var obj = {
              Status: 400,
              message: 'Please generate ethereum address',              
              }
              res.json(obj);
              return;
        }
      }
      else
      {
          
           var obj = {
                Status: 400,
                message: 'Please generate ethereum address',              
                }
                res.json(obj);
                return;
      }

      var s_issuerurl="";
      var s_revocationurl="";
      var s_issuername="";
      var s_issueremail="";
      var settingQuery = format(`SELECT * FROM setting where accountid='${puserid}';`);    
      var settingResult=await pool.query(settingQuery);      
      if (settingResult.rows && settingResult.rows.length != 0) {
        s_issuerurl=settingResult.rows[0].issuerurl;
        s_revocationurl=settingResult.rows[0].revocationurl;
        s_issuername=settingResult.rows[0].issuername;
        s_issueremail=settingResult.rows[0].issueremail;        
      }
     ///////////////////////////////////////////////////////////////////////
         
      var fetchQuery = format(`select * from certtemplate_logo where accountid = ${puserid} LIMIT 1`);
      console.log(fetchQuery)
      var result=await pool.query(fetchQuery);  
      if (result.rows && result.rows.length != 0) 
      {
        var updatequery = format(`update certtemplate_logo set logoimages='${params.value}' where accountid = ${puserid}`);
        await pool.query(updatequery);
        var organization_name=currentUser.organization_name;
        var logoimage=params.value;
        
        //var issuer_revocation_base_path="d:/blockchain/";    
        var my_issuer_revocation_base_path=issuer_revocation_base_path+puserid;
        var my_issuer_path=my_issuer_revocation_base_path+"/issuer.json";
        var my_revocation_path=my_issuer_revocation_base_path+"/revocation-list.json";
        
        var my_issuer_eth_path=my_issuer_revocation_base_path+"/issuereth.json";
        var my_revocation_eth_path=my_issuer_revocation_base_path+"/revocation-list-eth.json";
        
        issuercontent_new=issuercontent;
        revokelistcontent_new=revokelistcontent;
        if (!await fs.existsSync(my_issuer_revocation_base_path))
        {
            await os.execCommand('sudo mkdir "'+my_issuer_revocation_base_path+'"');
            await os.execCommand('sudo chmod -R 777 "'+my_issuer_revocation_base_path+'"');  

            //await os.execCommand('mkdir "'+my_issuer_revocation_base_path+'"');                      
        }

        try
        {
          //////bitcoin//////
          if(s_issuerurl!="" && s_issuerurl!=null)
          {
            issuercontent_new.id=s_issuerurl+"/"+puserid+"/issuer.json";
          }
          else
          {
            issuercontent_new.id=issuer_revocation_base_url+puserid+"/issuer.json";
          }
          
          issuercontent_new.introductionURL=myip+introport+subwwwurl+"/blockchain/introduction";
          issuercontent_new.publicKey[0].id="ecdsa-koblitz-pubkey:"+currentbtcpublickkey;

          if(s_revocationurl!="" && s_revocationurl!=null)
          {
            issuercontent_new.revocationList=s_revocationurl+"/"+puserid+"/revocation-list.json";

            revokelistcontent_new.id=s_revocationurl+"/"+puserid+"/revocation-list.json";
            revokelistcontent_new.issuer=s_revocationurl+"/"+puserid+"/issuer.json";
          }
          else
          {
            issuercontent_new.revocationList=issuer_revocation_base_url+puserid+"/revocation-list.json";

            revokelistcontent_new.id=issuer_revocation_base_url+puserid+"/revocation-list.json";
            revokelistcontent_new.issuer=issuer_revocation_base_url+puserid+"/issuer.json"; 
          }
          
          if(s_issuername!="" && s_issuername!=null)
          {
            issuercontent_new.name=s_issuername;
          }
          else
          {
            issuercontent_new.name=organization_name;
          }
          
          issuercontent_new.image=logoimage;

          if(s_issueremail!="" && s_issueremail!=null)
          {
            issuercontent_new.email=s_issueremail;
          }
          else
          {
            issuercontent_new.email="admin@certonce.com";
          } 
          
          //if (!await fs.existsSync(my_issuer_path))
          {
            await writeFile(my_issuer_path,JSON.stringify(issuercontent_new));
          }

          //if (!await fs.existsSync(my_revocation_path))
          {
            await writeFile(my_revocation_path,JSON.stringify(revokelistcontent_new));
          }

          /////////////ethereum////////////////
          if(s_issuerurl!="" && s_issuerurl!=null)
          {
            issuercontent_new.id=s_issuerurl+"/"+puserid+"/issuereth.json";
          }
          else
          {
            issuercontent_new.id=issuer_revocation_base_url+puserid+"/issuereth.json";
          }
          
          issuercontent_new.introductionURL=myip+introport+subwwwurl+"/blockchain/introduction";
          issuercontent_new.publicKey[0].id="ecdsa-koblitz-pubkey:"+currentethpublickkey;

          if(s_revocationurl!="" && s_revocationurl!=null)
          {
            issuercontent_new.revocationList=s_revocationurl+"/"+puserid+"/revocation-list-eth.json";

            revokelistcontent_new.id=s_revocationurl+"/"+puserid+"/revocation-list-eth.json";
            revokelistcontent_new.issuer=s_revocationurl+"/"+puserid+"/issuereth.json";
          }
          else
          {
            issuercontent_new.revocationList=issuer_revocation_base_url+puserid+"/revocation-list-eth.json";

            revokelistcontent_new.id=issuer_revocation_base_url+puserid+"/revocation-list-eth.json";
            revokelistcontent_new.issuer=issuer_revocation_base_url+puserid+"/issuereth.json"; 
          }
          
          if(s_issuername!="" && s_issuername!=null)
          {
            issuercontent_new.name=s_issuername;
          }
          else
          {
            issuercontent_new.name=organization_name;
          }
          
          issuercontent_new.image=logoimage;

          if(s_issueremail!="" && s_issueremail!=null)
          {
            issuercontent_new.email=s_issueremail;
          }
          else
          {
            issuercontent_new.email="admin@certonce.com";
          }
          //if (!await fs.existsSync(my_issuer_eth_path))
          {
            await writeFile(my_issuer_eth_path,JSON.stringify(issuercontent_new));
          }

          //if (!await fs.existsSync(my_revocation_eth_path))
          {
            await writeFile(my_revocation_eth_path,JSON.stringify(revokelistcontent_new));
          }

          
          
          var obj = {
              Status: 200,
              message: "Logoimage is updated successfully",                              
            }                    
              res.json(obj)

        }
        catch(err)
        {
          var obj = {
              Status: 400,
              message: err.message
              }
              res.json(obj);
              return;
        }
                
      }
      else
      {
        var insertquery = format(`insert into certtemplate_logo(logoimages,accountid) values('${params.value}','${puserid}')`); 
        await pool.query(insertquery);
        var organization_name=currentUser.organization_name;
        var logoimage=params.value;                        
        
        //var issuer_revocation_base_path="d:/blockchain/";    
        var my_issuer_revocation_base_path=issuer_revocation_base_path+puserid;
        var my_issuer_path=my_issuer_revocation_base_path+"/issuer.json";
        var my_revocation_path=my_issuer_revocation_base_path+"/revocation-list.json";
        
        var my_issuer_eth_path=my_issuer_revocation_base_path+"/issuereth.json";
        var my_revocation_eth_path=my_issuer_revocation_base_path+"/revocation-list-eth.json";
        
        issuercontent_new=issuercontent;
        revokelistcontent_new=revokelistcontent;
        if (!await fs.existsSync(my_issuer_revocation_base_path))
        {
            await os.execCommand('sudo mkdir "'+my_issuer_revocation_base_path+'"'); 
            await os.execCommand('sudo chmod -R 777 "'+my_issuer_revocation_base_path+'"');  

            //await os.execCommand('mkdir "'+my_issuer_revocation_base_path+'"'); 
            
        }

        try
        {
          //////bitcoin//////
          if(s_issuerurl!="" && s_issuerurl!=null)
          {
            issuercontent_new.id=s_issuerurl+"/"+puserid+"/issuer.json";
          }
          else
          {
            issuercontent_new.id=issuer_revocation_base_url+puserid+"/issuer.json";
          }
          
          issuercontent_new.introductionURL=myip+introport+subwwwurl+"/blockchain/introduction";
          issuercontent_new.publicKey[0].id="ecdsa-koblitz-pubkey:"+currentbtcpublickkey;

          if(s_revocationurl!="" && s_revocationurl!=null)
          {
            issuercontent_new.revocationList=s_revocationurl+"/"+puserid+"/revocation-list.json";

            revokelistcontent_new.id=s_revocationurl+"/"+puserid+"/revocation-list.json";
            revokelistcontent_new.issuer=s_revocationurl+"/"+puserid+"/issuer.json";
          }
          else
          {
            issuercontent_new.revocationList=issuer_revocation_base_url+puserid+"/revocation-list.json";

            revokelistcontent_new.id=issuer_revocation_base_url+puserid+"/revocation-list.json";
            revokelistcontent_new.issuer=issuer_revocation_base_url+puserid+"/issuer.json"; 
          }
          
          if(s_issuername!="" && s_issuername!=null)
          {
            issuercontent_new.name=s_issuername;
          }
          else
          {
            issuercontent_new.name=organization_name;
          }
          
          issuercontent_new.image=logoimage;

          if(s_issueremail!="" && s_issueremail!=null)
          {
            issuercontent_new.email=s_issueremail;
          }
          else
          {
            issuercontent_new.email="admin@certonce.com";
          } 
          
          //if (!await fs.existsSync(my_issuer_path))
          {
            await writeFile(my_issuer_path,JSON.stringify(issuercontent_new));
          }

          //if (!await fs.existsSync(my_revocation_path))
          {
            await writeFile(my_revocation_path,JSON.stringify(revokelistcontent_new));
          }

          /////////////ethereum////////////////
          if(s_issuerurl!="" && s_issuerurl!=null)
          {
            issuercontent_new.id=s_issuerurl+"/"+puserid+"/issuereth.json";
          }
          else
          {
            issuercontent_new.id=issuer_revocation_base_url+puserid+"/issuereth.json";
          }
          
          issuercontent_new.introductionURL=myip+introport+subwwwurl+"/blockchain/introduction";
          issuercontent_new.publicKey[0].id="ecdsa-koblitz-pubkey:"+currentethpublickkey;

          if(s_revocationurl!="" && s_revocationurl!=null)
          {
            issuercontent_new.revocationList=s_revocationurl+"/"+puserid+"/revocation-list-eth.json";

            revokelistcontent_new.id=s_revocationurl+"/"+puserid+"/revocation-list-eth.json";
            revokelistcontent_new.issuer=s_revocationurl+"/"+puserid+"/issuereth.json";
          }
          else
          {
            issuercontent_new.revocationList=issuer_revocation_base_url+puserid+"/revocation-list-eth.json";

            revokelistcontent_new.id=issuer_revocation_base_url+puserid+"/revocation-list-eth.json";
            revokelistcontent_new.issuer=issuer_revocation_base_url+puserid+"/issuereth.json"; 
          }
          
          if(s_issuername!="" && s_issuername!=null)
          {
            issuercontent_new.name=s_issuername;
          }
          else
          {
            issuercontent_new.name=organization_name;
          }
          
          issuercontent_new.image=logoimage;

          if(s_issueremail!="" && s_issueremail!=null)
          {
            issuercontent_new.email=s_issueremail;
          }
          else
          {
            issuercontent_new.email="admin@certonce.com";
          }
          //if (!await fs.existsSync(my_issuer_eth_path))
          {
            await writeFile(my_issuer_eth_path,JSON.stringify(issuercontent_new));
          }

          //if (!await fs.existsSync(my_revocation_eth_path))
          {
            await writeFile(my_revocation_eth_path,JSON.stringify(revokelistcontent_new));
          }
          
          var obj = {
              Status: 200,
              message: "Logoimage is insert successfully",
              
            }                      
            res.json(obj)

        }
        catch(err)
        {
          var obj = {
              Status: 400,
              message: err.message
              }
              res.json(obj);
              return;
        }
      }


  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }
}

// Send invitation
user.sendInvitation = async (req,res, next) => {
    var currentUser = req.user;
    if(req.user.business_is_verified==false)
    {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
    }
    var organization_name=currentUser.organization_name;
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var issuer_url=""; 
    if(currentUser.blockchain=='bitcoin')
    {
        issuer_url=issuer_revocation_base_url+puserid+"/issuer.json";
    }
    else if(currentUser.blockchain=='ethereum')
    {
        issuer_url=issuer_revocation_base_url+puserid+"/issuereth.json";
    }
    else
    {      
      var obj = {
      Status: 400,
      message: "There is no selected blockchain"        
      }
      res.json(obj);  
      return;
    }
    
    //var issuer_revocation_base_path="d:/blockchain/";    
    var my_issuer_revocation_base_path=issuer_revocation_base_path+puserid;
    var my_issuer_path=my_issuer_revocation_base_path+"/issuer.json";    
    if (!await fs.existsSync(my_issuer_path))
    {
        var obj = {
        Status: 400,
        message: "Please upload logo image."        
        }
        res.json(obj);  
        return;
    }

//////////smtp information/////////
  var smtphost="";
  var smtpport="";
  var smtpusername="";
  var smtppassword="";
  var smtpfrom="";
  var smtpcc="";
  var querySmtp=format(`SELECT * FROM setting where accountid='${puserid}';`);
  let smtpresult = await pool.query(querySmtp); 
  if ( smtpresult && smtpresult.rowCount > 0 ) {
    for ( const smtpinfo of smtpresult.rows ) {                   
      smtphost=smtpinfo['smtphost']; 
      smtpport=smtpinfo['smtpport']; 
      smtpusername=smtpinfo['smtpusername'];
      smtppassword=smtpinfo['smtppassword'];
      smtpfrom=smtpinfo['smtpfrom']; 
      smtpcc=smtpinfo['smtpcc'];
    }
  }
  ///////////////////////////////////   
  
///////////////////////////////////////
    var issuer_url1 = issuer_url.split("/").join("%2F");
    var params = req.body;
    var ipflag="";
    var previewemail={};
    var previewemailitem=[];
    if(req.headers.ipflag)
    {
      ipflag = req.headers.ipflag.trim();
      
    }
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(req.headers.certtype)
    {
      certtype = req.headers.certtype.trim();
      cohorttablename=certtypes[certtype];
    }
    try {
      let isTotal=false; 
      let glcohortid="";
      for (let index = 0; index <params.length; index++) {
         const element = params[index];
         let cohortid=element.split("=")[0];
         let studentid=element.split("=")[1];
         glcohortid=cohortid;
         if(studentid=='') 
         {
           isTotal=true;           
           break;
         }   
         isTotal=false;       
          ///////////////////////////////////////////
          if ( cohortid == '' || studentid == '') {continue;}
          var whereClause =  "WHERE b.id='"+studentid+"';";
          var studentQuery = format(`SELECT a.*, c.*,b.* FROM student a
                                        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id
                                        LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause}
                                        `);
          var students = await pool.query(studentQuery);
          if ( students.rowCount > 0 ) {

              for ( const student of students.rows ) {

                  var email=student['emailaddress'];
                  var first_name = student['firstname'];
                  var onetimecode = student['onetimeblockcertscode'];
                  ///test
                  //onetimecode="1234";
                  ///
                  var introduction_url = "https://wallet.blockcerts.org/#/introduce-recipient/"+issuer_url1+"/"+onetimecode
                  var introduction_urlqr = encodeURIComponent("https://wallet.blockcerts.org/#/introduce-recipient/"+issuer_url+"/"+onetimecode);
                  let qr_data = await getQRwithbase64(introduction_urlqr, 300);
                  var qrcode = "<img src='"+qr_data+"' title='Introduction url' />"
                  var introduction_email_subject = organization_name + " wants to issue you a digital credentials"
                  var introduction_email_body = "<p>Dear "+first_name+"</p><p>In order to issue you a blockchain certificate you need to register your wallet with our issuer. Here's how to do that:</p><p><b>Step 1: Install the app</b></p><p>Install the 'Blockcerts Wallet' app on your phone (available on the iOS or Android app stores).</p><br><p><b>Step 2: Add issuer</b></p><p>There are two ways to add us as an issuer:</p><ul><li>If you're reading this email on your mobile device, <a clicktracking='off' href='"+introduction_url+"'>Click this link to add us as an issuer</a>.</li><li>If you're reading this email on your desktop, scan the QR code below using your mobile device.</li></ul>"+qrcode+"<p>Please note: it's important to complete these steps in this order. After you have added us as an issuer, you will be notified when your credential is ready.</p>";
                  var email_body=`<p>Hello ${first_name}</p>
                          <p>${organization_name} would like to issue you a blockchain secured digital credentials.</p>
                          <p>This is the future of tamper proof and instantly verifiable digital credentialing system.<a href="${myip+subwwwurl}">Read More</a></p>
                          <p>If this is the first time you are receiving any blockchain verified credentials, please follow the following steps. Go to step 2 if you already have the app.</p>
                          <p>In order to issue you a blockchain certificate you need to register your wallet with our issuer. Here's how to do that:</p>
                          <p><b>Step 1(For first time users): Install the app</b></p>
                          <p>Install the opensource 'Blockcerts Wallet' app on your phone (available on the iOS or Android app stores). </p>
                          <a href="https://apps.apple.com/us/app/blockcerts-wallet/id1146921514"
                          target="_blank">
                          <img src="https://wallet.blockcerts.org/app_store_badge.png" class="inline sm-marg-l-2">
                          </a>
                          <a href="https://play.google.com/store/apps/details?id=com.learningmachine.android.app"
                          target="_blank">
                          <img src="https://wallet.blockcerts.org/play_store_badge.png" class="inline sm-marg-l-2">
                          </a>
                          <p>
                          This is where you will receive and store the digital certificates.</p><br>
                                                      <p><b>Step 2(for all users): Add ${organization_name} as certificate issuer</b></p>
                                                      <p  >In order for us to issue you the digital credentials, you need to add ${organization_name} as an issuer in your "Blockcerts Wallet"</p>
                                                      <p>There are two ways to add us as an issuer:</p>
                                                      <ul><li>If you're reading this email on your mobile device, <a clicktracking='off' href='${introduction_url}'>Click this link to add us as an issuer</a>.</li>
                                                      <li>If you're reading this email on your desktop, scan the QR code below using your mobile device.</li></ul>${qrcode}
                          <p>Identification URL: ${issuer_url}</p>
                          <p>One-Time Code: ${onetimecode}</p><br>
                          <p>IMPORTANT: Please note: it's important to complete these steps in this order. After you have added us as an issuer, you will be notified when your credential is ready.</p>`;
                  
                  previewemailitem.push({"mailitem":email_body});
              }
          }
      } //for end
      
      var cohortgroupid= await getCohortidFromName(glcohortid,puserid);
      var mail_subject="";                    
      var mail_content = "";
      var selectquery=format(`select * from emailtemplate where cohortid='${cohortgroupid}';`);
      var emailtemplates = await pool.query(selectquery);
      if ( emailtemplates.rowCount > 0 ) {
            for ( const emailtemplate of emailtemplates.rows ) {
              mail_subject = emailtemplate['invitationemail_subject'];                    
              mail_content = emailtemplate['invitationemail_content'];
            }
      }
      if(isTotal==false)
      {
        for (let index = 0; index < params.length; index++) {
          
          const element = params[index];
          let cohortid=element.split("=")[0];
          let studentid=element.split("=")[1];
          ///////////////////////////////////////////
          if ( cohortid == '' || studentid == '') {continue;}
          var whereClause =  "WHERE b.id='"+studentid+"';"
          var studentQuery = format(`SELECT a.*, c.*,b.* FROM student a
                                        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id
                                        LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause}
                                        `);
          var students = await pool.query(studentQuery);
          if ( students.rowCount > 0 ) {

              for ( const student of students.rows ) {

                  var email=student['emailaddress'];
                  var secondemailaddress=student['secondemailaddress'];
                  if(secondemailaddress!="" && secondemailaddress!=null && secondemailaddress!==undefined) smtpcc=secondemailaddress;
                  var first_name = student['firstname'];
                  var onetimecode = student['onetimeblockcertscode'];
                  ///test
                  //onetimecode="1234";
                  ///
                  var introduction_url = "https://wallet.blockcerts.org/#/introduce-recipient/"+issuer_url1+"/"+onetimecode;
                  var introduction_urlqr = encodeURIComponent("https://wallet.blockcerts.org/#/introduce-recipient/"+issuer_url+"/"+onetimecode);
                  let qr_data = await getQRwithbase64(introduction_urlqr, 300);
                  var qrcode = "<img src='"+qr_data+"' title='Introduction url' />";
                  var introduction_email_subject = organization_name + " wants to issue you a digital credentials";
                  var introduction_email_body = "<p>Dear "+first_name+"</p><p>In order to issue you a blockchain certificate you need to register your wallet with our issuer. Here's how to do that:</p><p><b>Step 1: Install the app</b></p><p>Install the 'Blockcerts Wallet' app on your phone (available on the iOS or Android app stores).</p><br><p><b>Step 2: Add issuer</b></p><p>There are two ways to add us as an issuer:</p><ul><li>If you're reading this email on your mobile device, <a clicktracking='off' href='"+introduction_url+"'>Click this link to add us as an issuer</a>.</li><li>If you're reading this email on your desktop, scan the QR code below using your mobile device.</li></ul>"+qrcode+"<p>Please note: it's important to complete these steps in this order. After you have added us as an issuer, you will be notified when your credential is ready.</p>";
                  var email_body=`<p>Hello ${first_name}</p>
                          <p>${organization_name} would like to issue you a blockchain secured digital credentials.</p>
                          <p>This is the future of tamper proof and instantly verifiable digital credentialing system.<a href="${myip+subwwwurl}">Read More</a></p>
                          <p>If this is the first time you are receiving any blockchain verified credentials, please follow the following steps. Go to step 2 if you already have the app.</p>
                          <p>In order to issue you a blockchain certificate you need to register your wallet with our issuer. Here's how to do that:</p>
                          <p><b>Step 1(For first time users): Install the app</b></p>
                          <p>Install the opensource 'Blockcerts Wallet' app on your phone (available on the iOS or Android app stores). </p>
                          <a href="https://apps.apple.com/us/app/blockcerts-wallet/id1146921514"
                          target="_blank">
                          <img src="https://wallet.blockcerts.org/app_store_badge.png" class="inline sm-marg-l-2">
                          </a>
                          <a href="https://play.google.com/store/apps/details?id=com.learningmachine.android.app"
                          target="_blank">
                          <img src="https://wallet.blockcerts.org/play_store_badge.png" class="inline sm-marg-l-2">
                          </a>
                          <p>
                          This is where you will receive and store the digital certificates.</p><br>
                                                      <p><b>Step 2(for all users): Add ${organization_name} as certificate issuer</b></p>
                                                      <p  >In order for us to issue you the digital credentials, you need to add ${organization_name} as an issuer in your "Blockcerts Wallet"</p>
                                                      <p>There are two ways to add us as an issuer:</p>
                                                      <ul><li>If you're reading this email on your mobile device, <a clicktracking='off' href='${introduction_url}'>Click this link to add us as an issuer</a>.</li>
                                                      <li>If you're reading this email on your desktop, scan the QR code below using your mobile device.</li></ul>${qrcode}
                          <p>Identification URL: ${issuer_url}</p>
                          <p>One-Time Code: ${onetimecode}</p><br>
                          <p>IMPORTANT: Please note: it's important to complete these steps in this order. After you have added us as an issuer, you will be notified when your credential is ready.</p>`;
                  if(ipflag=="invite")
                  {

                    var permission=await getPermission(req.user.user_id,"sendInvitation");
                    if(permission==false)
                    {
                        var obj = {
                          Status: 400,
                            message: "Access denied."
                        };
                        res.json(obj);
                        return;
                    }
                    
                    if(mail_subject!="" && mail_subject!=null && mail_subject!=="null" && mail_content!="" && mail_content!=null && mail_content!=="null")
                    { 
                      introduction_email_subject=mail_subject.replace(/ORGANIZATION_NAME/g, organization_name);

                      email_body=mail_content.replace(/FIRST_NAME/g, first_name);
                      email_body=email_body.replace(/ORGANIZATION_NAME/g, organization_name);
                      email_body=email_body.replace(/BASE_URL/g, myip+subwwwurl);
                      email_body=email_body.replace(/INTRODUCTION_URL/g, introduction_url);
                      email_body=email_body.replace(/ISSUER_URL/g, issuer_url);
                      email_body=email_body.replace(/ONETIMECODE/g, onetimecode);
                      email_body=email_body.replace(/QR_CODE/g, qrcode);
                    }

                    
                    var logfilename=logfiledir+req.user.user_id+"/inviteemail.log";
                    mailler_forinvite(email_body, introduction_email_subject, email,smtphost,smtpport,smtpusername,smtppassword,smtpfrom,smtpcc,"","","",logfilename);
                    //sleep(1000);
                    var query = format(`UPDATE ${cohorttablename} SET blockcertsinvitationsent = true  WHERE id='${studentid}'`);
                    await pool.query(query);

                    //Update status
                    /*let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status)
                     SELECT '${puserid}','${cohortid}','${studentid}','invitation','done'
                     WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${cohortid}' and studentid='${studentid}' and processtype='invitation' ) ;`);
                    await pool.query(updateStatusQuery);
                    */
                  }
                  else//preview
                  {

                    var permission=await getPermission(req.user.user_id,"previewInviteEmail");
                      if(permission==false)
                      {
                          var obj = {
                            Status: 400,
                              message: "Access denied."
                          };
                          res.json(obj);
                          return;
                      }                      
                    
                  }
              }
          }
          ///////////////////////////////////////////
        }

          var obj = {
              Status: 200,
              message: 'Send invitation',
              PreviewMail:previewemailitem,
              flag: ipflag
          }
          res.json(obj);
      }
      else
      {
          if(glcohortid=="")
          {
            var obj = {
                Status: 400,
                  message: "Invalid selected students."
              };
              res.json(obj);
              return;
          }
          var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' AND c.accountid='"+puserid+"';"
          var studentQuery = format(`SELECT a.*, c.*,b.*,b.id as studentidentify FROM student a
                                        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id
                                        LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause}
                                        `);
          var students = await pool.query(studentQuery);
          if ( students.rowCount > 0 ) {

              for ( const student of students.rows ) {

                  var email=student['emailaddress'];
                  var secondemailaddress=student['secondemailaddress'];
                  if(secondemailaddress!="" && secondemailaddress!=null && secondemailaddress!==undefined) smtpcc=secondemailaddress;
                  var first_name = student['firstname'];
                  var onetimecode = student['onetimeblockcertscode'];
                  var studentid = student['studentidentify'];
                  if(studentid=='') continue;
                  ///test
                  //onetimecode="1234";
                  ///
                  var introduction_url = "https://wallet.blockcerts.org/#/introduce-recipient/"+issuer_url1+"/"+onetimecode;
                  var introduction_urlqr = encodeURIComponent("https://wallet.blockcerts.org/#/introduce-recipient/"+issuer_url+"/"+onetimecode);
                  let qr_data = await getQRwithbase64(introduction_urlqr, 300);
                  var qrcode = "<img src='"+qr_data+"' title='Introduction url' />";
                  var introduction_email_subject = organization_name + " wants to issue you a digital credentials"
                  var introduction_email_body = "<p>Dear "+first_name+"</p><p>In order to issue you a blockchain certificate you need to register your wallet with our issuer. Here's how to do that:</p><p><b>Step 1: Install the app</b></p><p>Install the 'Blockcerts Wallet' app on your phone (available on the iOS or Android app stores).</p><br><p><b>Step 2: Add issuer</b></p><p>There are two ways to add us as an issuer:</p><ul><li>If you're reading this email on your mobile device, <a clicktracking='off' href='"+introduction_url+"'>Click this link to add us as an issuer</a>.</li><li>If you're reading this email on your desktop, scan the QR code below using your mobile device.</li></ul>"+qrcode+"<p>Please note: it's important to complete these steps in this order. After you have added us as an issuer, you will be notified when your credential is ready.</p>";
                  var email_body=`<p>Hello ${first_name}</p>
                          <p>${organization_name} would like to issue you a blockchain secured digital credentials.</p>
                          <p>This is the future of tamper proof and instantly verifiable digital credentialing system.<a href="${myip+subwwwurl}">Read More</a></p>
                          <p>If this is the first time you are receiving any blockchain verified credentials, please follow the following steps. Go to step 2 if you already have the app.</p>
                          <p>In order to issue you a blockchain certificate you need to register your wallet with our issuer. Here's how to do that:</p>
                          <p><b>Step 1(For first time users): Install the app</b></p>
                          <p>Install the opensource 'Blockcerts Wallet' app on your phone (available on the iOS or Android app stores). </p>
                          <a href="https://apps.apple.com/us/app/blockcerts-wallet/id1146921514"
                          target="_blank">
                          <img src="https://wallet.blockcerts.org/app_store_badge.png" class="inline sm-marg-l-2">
                          </a>
                          <a href="https://play.google.com/store/apps/details?id=com.learningmachine.android.app"
                          target="_blank">
                          <img src="https://wallet.blockcerts.org/play_store_badge.png" class="inline sm-marg-l-2">
                          </a>
                          <p>
                          This is where you will receive and store the digital certificates.</p><br>
                                                      <p><b>Step 2(for all users): Add ${organization_name} as certificate issuer</b></p>
                                                      <p  >In order for us to issue you the digital credentials, you need to add ${organization_name} as an issuer in your "Blockcerts Wallet"</p>
                                                      <p>There are two ways to add us as an issuer:</p>
                                                      <ul><li>If you're reading this email on your mobile device, <a clicktracking='off' href='${introduction_url}'>Click this link to add us as an issuer</a>.</li>
                                                      <li>If you're reading this email on your desktop, scan the QR code below using your mobile device.</li></ul>${qrcode}
                          <p>Identification URL: ${issuer_url}</p>
                          <p>One-Time Code: ${onetimecode}</p><br>
                          <p>IMPORTANT: Please note: it's important to complete these steps in this order. After you have added us as an issuer, you will be notified when your credential is ready.</p>`;
                  if(ipflag=="invite")
                  {

                    var permission=await getPermission(req.user.user_id,"sendInvitation");
                    if(permission==false)
                    {
                        var obj = {
                          Status: 400,
                            message: "Access denied."
                        };
                        res.json(obj);
                        return;
                    }
                    
                    if(mail_subject!="" && mail_subject!=null && mail_subject!=="null" && mail_content!="" && mail_content!=null && mail_content!=="null")
                    { 
                      introduction_email_subject=mail_subject.replace(/ORGANIZATION_NAME/g, organization_name);

                      email_body=mail_content.replace(/FIRST_NAME/g, first_name);
                      email_body=email_body.replace(/ORGANIZATION_NAME/g, organization_name);
                      email_body=email_body.replace(/BASE_URL/g, myip+subwwwurl);
                      email_body=email_body.replace(/INTRODUCTION_URL/g, introduction_url);
                      email_body=email_body.replace(/ISSUER_URL/g, issuer_url);
                      email_body=email_body.replace(/ONETIMECODE/g, onetimecode);
                      email_body=email_body.replace(/QR_CODE/g, qrcode);
                    }
                    var logfilename=logfiledir+req.user.user_id+"/inviteemail.log";
                    mailler_forinvite(email_body, introduction_email_subject, email,smtphost,smtpport,smtpusername,smtppassword,smtpfrom,smtpcc,"","","",logfilename);
                    //sleep(1000);
                    var query = format(`UPDATE ${cohorttablename} SET blockcertsinvitationsent = true  WHERE id='${studentid}'`);
                    await pool.query(query);

                    //Update status
                    /*
                    let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status)
                    SELECT '${puserid}','${glcohortid}','${studentid}','invitation','done'
                    WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${glcohortid}' and studentid='${studentid}' and processtype='invitation' ) ;`);
                    await pool.query(updateStatusQuery);
                    */
                  }
                  else//preview
                  {

                    var permission=await getPermission(req.user.user_id,"previewInviteEmail");
                      if(permission==false)
                      {
                          var obj = {
                            Status: 400,
                              message: "Access denied."
                          };
                          res.json(obj);
                          return;
                      }                      
                    
                  }
              }
          }
          var obj = {
              Status: 200,
              message: 'Send invitation',
              PreviewMail:previewemailitem,
              flag: ipflag
          }
          res.json(obj); 
      }
      
   }
   catch (err) {
    var obj = {
          Status: 400,
          message: err.message
          }
          res.json(obj);
  }
}


function userdatareturn(userid, callback) {
  try {

    var ageQuery = format(`select * from USERMASTER where USER_ID =${userid} `)

    var data = {}

    pool.query(ageQuery, function (err, result) {
      if (err) {
        callback({
          Status: false,
          message: err.message
        })

      }
      else {
        callback({
          Status: true,
          Data: result
        })
      }
    })

  } catch (err) {
    callback({
      Status: false,
      message: err.message
    })

  }
}


user.signupDetailsCheck = (req, res, next) => {

  try {
    var error = false;
    var errormessages = [];
    var InputFIelds = req.body;

    if (!InputFIelds.fname) {
      error = true;
      errormessages.push("First name is required")
    }
    if (!InputFIelds.lname) {
      error = true;
      errormessages.push("Last name is required")
    }

    if (!InputFIelds.email) {
      error = true;
      errormessages.push("Email is required")
    }

    if (!InputFIelds.password) {
      error = true;
      errormessages.push("password  is required")
    }



    if (error) {
      var obj = {
        Status: 400,
        message: errormessages.toString()
      }
      res.json(obj)
      return null;
    }
    else {
      verifier.verify(InputFIelds.email, function (err, info) {
        if (err) {
          console.log(err);
        }
        else {

          if (info.success) {
            next();
          }
          else {
            var obj = {
              Status: 400,
              message: info.info
            }
            res.json(obj)
          }


        }
      })

    }


  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }

}




user.signup = async (req, res, next) => {
  try {    
    var InputFIelds = req.body;
    var hashedPassword = bcrypt.hashSync(InputFIelds.password, 8);

    InputFIelds.email = InputFIelds.email.toLowerCase()
    var ageQuery = format(`INSERT INTO USERMASTER (     
                    fname,
                    email,
                    lname ,
                    Organization_Name ,
                     password,
                     Organization_URL,
                     Job_Title,
                     How_did_you_find_us,
                     Graduates_Members)
                  VALUES('${InputFIelds.fname}',
                  '${InputFIelds.email}',
                  '${InputFIelds.lname}',
                  '${InputFIelds.Organization_Name}',
                  '${hashedPassword}',
                  '${InputFIelds.Organization_URL}',
                  '${InputFIelds.Job_Title}',
                  '${InputFIelds.How_did_you_find_us}',
                  '${InputFIelds.Graduates_Members}'
                  ) RETURNING USER_ID `)
//ageQuery is just a string containing the SQL query.In PostgreSQL, if you INSERT a row and want the newly created primary key back, you can use RETURNING
    pool.query(ageQuery, async function (err, result) {
      if (err) {
        var msg = '';

        if (err.code == '23505') {
          msg = "username or email already exists"
        }
        else {
          msg = err.message;
        }

        var obj = {
          Status: 400,
          message: msg
        }
        res.json(obj)
      }
      else {
        var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        console.log('Your IP address is ' + clientIp);
        let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress) values ('signup(${InputFIelds.email})','${clientIp}');`);
        await pool.query(ipQuery);


        var insertRoleQuery = format(`INSERT INTO role_function (accountid,issuer,viewonly,managemember,uploadmember,sendinvite,previewinviteemail,designcertificate,managecertificate,generatecertificate,previewcertificate,issuecertificate,sendcertificate,changelogo,changetemplatecontent,isadmin,validate)
          SELECT ${result.rows[0].user_id},true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true
          WHERE NOT EXISTS ( SELECT 1 FROM role_function WHERE accountid='${result.rows[0].user_id}') ;`);
        await pool.query(insertRoleQuery);

        var insertsetting = format(`INSERT INTO setting (accountid) SELECT ${result.rows[0].user_id} WHERE NOT EXISTS ( SELECT 1 FROM setting WHERE accountid='${result.rows[0].user_id}') ;`);
        await pool.query(insertsetting);
        
        userdatareturn(result.rows[0].user_id, function (user) {
          var obj = {
            Status: 200,
            message: "A verification email has been sent to " + InputFIelds.email,
            Data: user.Data.rows[0]
          }
          res.json(obj)
          verifytemplatecreate(user.Data.rows[0])
        })


      }
    })



  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }

}
/*
function sleep(milliseconds) {
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
        if ((new Date().getTime() - start) > milliseconds){
            break;
        }
    }
}
*/
function sleep(ms) {  
  return new Promise(resolve => setTimeout(resolve, ms));
}

function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}
function getOnetimecode(n)
{
    var characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var randomString = "";

    for(var i=0;i<n;i++)
    {
       index=getRandomInt(characters.length-1);
       randomString+= characters[index];
    }
    return randomString;
}
async function getParentAccountIdFromId(cid)
{
  try {

     var parentCheckQuery = format(`SELECT parent_accountid from USERMASTER WHERE user_id = ${cid}`);
     var fetchcheckresult=await pool.query(parentCheckQuery);
     if (fetchcheckresult.rows && fetchcheckresult.rows.length != 0) 
     {
       //console.log(fetchcheckresult.rows[0].parent_accountid);
       if(fetchcheckresult.rows[0].parent_accountid=="0")
         return cid;
       else
         return fetchcheckresult.rows[0].parent_accountid;
     }
    }
   catch (err) {
      return 0;   
   }    
}
async function getPermission(cid,funcname)
{
  try {

     var permissionQuery = format(`SELECT * from role_function WHERE accountid = ${cid}`);
     var fetchcheckresult=await pool.query(permissionQuery);
     if (fetchcheckresult.rows && fetchcheckresult.rows.length != 0) 
     {
       if(funcname=="getStudents")
       {
         return fetchcheckresult.rows[0].managemember;
       }
       else if(funcname=="uploadstuduents")
       {
         return fetchcheckresult.rows[0].uploadmember;
       }
       else if(funcname=="sendInvitation")
       {
         return fetchcheckresult.rows[0].sendinvite;
       }
       else if(funcname=="previewInviteEmail")
       {
         return fetchcheckresult.rows[0].previewinviteemail;
       }
       else if(funcname=="fetchCertificateTemplate"||funcname=="updateCertificateTemplate")
       {
         return fetchcheckresult.rows[0].designcertificate;
       }
       else if(funcname=="manageCertificate")
       {
         return fetchcheckresult.rows[0].managecertificate;
       }       
       else if(funcname=="generateCertificate")
       {
         return fetchcheckresult.rows[0].generatecertificate;
       }
       else if(funcname=="previewCertificate")
       {
         return fetchcheckresult.rows[0].previewcertificate;
       }
       else if(funcname=="issueCertificate")
       {
         return fetchcheckresult.rows[0].issuecertificate;
       }
       else if(funcname=="senddCertificate")
       {
         return fetchcheckresult.rows[0].sendcertificate;
       }
       else if(funcname=="uploadLogoImage")
       {
         return fetchcheckresult.rows[0].changelogo;
       }
       else if(funcname=="validate")
       {
         return fetchcheckresult.rows[0].validate;
       }
       
     }
    }
   catch (err) {
      return false;   
   }    
}

async function getStudentIdForEnhelion(studentid, cohortid, cohortname, accountid="20006")
{
  if(studentid!="" && studentid!=null) return studentid;
  else
  {
    if(cohortid.toLowerCase().indexOf("enhelion")!==-1 ||  cohortname.toLowerCase().indexOf("enhelion")!==-1 || accountid=="20006")
    {
      let getExistStudent = format(`SELECT nextval('enhelionstudentidseq') as studentid;`);
      students = await  pool.query(getExistStudent);
      if (students.rowCount > 0) 
      {
          studentId = students.rows[0].studentid;
          return studentId;
      }
      return "";
    } 
    else
    {
      return "";
    }
  }  
}
function padLeadingZeros(num, size) {
  var s = num+"";
  while (s.length < size) s = "0" + s;
  return s;
}
async function getCertificateIdForMIT(certificateid, accountid)
{
  
    if(certificateid=="" || certificateid==null) return "";
    else
    {
      if(accountid=="20001")
      {
        if(certificateid.length!=3) return certificateid;
        else
        {
          prefixyear=certificateid.substring(1)+"";
          try
          {
            let seqname="mit_"+certificateid+"_seq";
            let seqQuery = format(`SELECT nextval('${seqname}') as certificateid;`);
            certificateids = await pool.query(seqQuery);
            if (certificateids.rowCount > 0) {
              let newcertificateid = certificateids.rows[0].certificateid;
              newcertificateid=prefixyear+padLeadingZeros(newcertificateid, 5);
              return newcertificateid;
            }
            return "";   
          }
          catch (error)
          {
            let seqname="mit_"+certificateid+"_seq";
            let seqQuery = format(`CREATE SEQUENCE ${seqname} START 2;`);
            await pool.query(seqQuery);
            let newcertificateid=prefixyear+padLeadingZeros(1, 5);
            return newcertificateid;  
          }
        }
      }
      else return certificateid;      
    }
}

function convertDoubleQuote(instr)
{
  
  var res=""
  var arr=instr.split('"');
  if(arr.length>0)
  {
    for(var i =0 ; i<arr.length;i++)
    {
      if(i%2==0 && i!=arr.length-1)
      {
        res+=arr[i]+"“"
      }
      else if(i%2!==0 && i!=arr.length-1)
      {
        res+=arr[i]+"”"
      }
      else if(i==arr.length-1)
      {
        res+=arr[i]
      }
    }
  }
  return res;
}
function convertQuote(instr)
{  
  return instr.replace(/'/g,"’")
}
String.prototype.replaceAll = function (target, payload) {
    let regex = new RegExp(target, 'g')
    return this.valueOf().replace(regex, payload)
};

async function upload_student_language(studentid, language, row) {
  try {
    var lang_firstname = row['lang_firstname'];
    if (lang_firstname == null || lang_firstname == undefined) lang_firstname = "";
    var lang_middlename = row['lang_middlename'];
    if (lang_middlename == null || lang_middlename == undefined) lang_middlename = "";
    var lang_lastname = row['lang_lastname'];
    if (lang_lastname == null || lang_lastname == undefined) lang_lastname = "";
    var lang_fathername = row['lang_fathername'];
    if (lang_fathername == null || lang_fathername == undefined) lang_fathername = "";
    var lang_department = row['lang_department'];
    if (lang_department == null || lang_department == undefined) lang_department = "";
    var lang_phdtitle = row['lang_phdtitle'];
    if (lang_phdtitle == null || lang_phdtitle == undefined) lang_phdtitle = "";
    var lang_institutename = row['lang_institutename'];
    if (lang_institutename == null || lang_institutename == undefined) lang_institutename = "";
    var lang_coursename = row['lang_coursename'];
    if (lang_coursename == null || lang_coursename == undefined) lang_coursename = "";
    var lang_competencyname = row['lang_competencyname'];
    if (lang_competencyname == null || lang_competencyname == undefined) lang_competencyname = "";
    var lang_facultyname = row['lang_facultyname'];
    if (lang_facultyname == null || lang_facultyname == undefined) lang_facultyname = "";
    var lang_completiondate = row['lang_completiondate'];
    if (lang_completiondate == null || lang_completiondate == undefined) lang_completiondate = "";
    var lang_cgpa = row['lang_cgpa'];
    if (lang_cgpa == null || lang_cgpa == undefined) lang_cgpa = "";
    var lang_medaltype = row['lang_medaltype'];
    if (lang_medaltype == null || lang_medaltype == undefined) lang_medaltype = "";
    var lang_rank = row['lang_rank'];
    if (lang_rank == null || lang_rank == undefined) lang_rank = "";
    var lang_specializationone = row['lang_specializationone'];
    if (lang_specializationone == null || lang_specializationone == undefined) lang_specializationone = "";
    var other1 = row['lang_other1'];
    if (other1 == null || other1 == undefined) other1 = "";
    var other2 = row['lang_other2'];
    if (other2 == null || other2 == undefined) other2 = "";
    var other3 = row['lang_other3'];
    if (other3 == null || other3 == undefined) other3 = "";
    var other4 = row['lang_other4'];
    if (other4 == null || other4 == undefined) other4 = "";
    var other5 = row['lang_other5'];
    if (other5 == null || other5 == undefined) other5 = "";


    lang_firstname = lang_firstname.replace(/'/g, "’");
    lang_middlename = lang_middlename.replace(/'/g, "’");
    lang_lastname = lang_lastname.replace(/'/g, "’");
    lang_fathername = lang_fathername.replace(/'/g, "’");
    lang_department = lang_department.replace(/'/g, "’");
    lang_phdtitle = lang_phdtitle.replace(/'/g, "’");
    lang_institutename = lang_institutename.replace(/'/g, "’");
    lang_coursename = lang_coursename.replace(/'/g, "’");
    lang_competencyname = lang_competencyname.replace(/'/g, "’");
    lang_facultyname = lang_facultyname.replace(/'/g, "’");
    lang_completiondate = lang_completiondate.replace(/'/g, "’");
    lang_cgpa = lang_cgpa.replace(/'/g, "’");
    lang_medaltype = lang_medaltype.replace(/'/g, "’");
    lang_rank = lang_rank.replace(/'/g, "’");
    lang_specializationone = lang_specializationone.replace(/'/g, "’");
    other1 = other1.replace(/'/g, "’");
    other2 = other2.replace(/'/g, "’");
    other3 = other3.replace(/'/g, "’");
    other4 = other4.replace(/'/g, "’");
    other5 = other5.replace(/'/g, "’");

    // var lang_=row['lang_'];
    // if(lang_ == null || lang_ == undefined) lang_="";

    var insertStudentQuery = format(`INSERT INTO student_language (studentid, languageflag, firstname, middlename, lastname, fathername, facultyname, department, phdtitle, institute_name, coursename, competencyname, specializationone, cgpa, rank, medaltype, completiondate, other1, other2, other3, other4, other5)
                                    SELECT '${studentid}', '${language}', '${lang_firstname}', '${lang_middlename}', '${lang_lastname}', '${lang_fathername}', '${lang_facultyname}', '${lang_department}', '${lang_phdtitle}', '${lang_institutename}', '${lang_coursename}', '${lang_competencyname}', '${lang_specializationone}', 
                                    '${lang_cgpa}', '${lang_rank}', '${lang_medaltype}', '${lang_completiondate}', '${other1}', '${other2}', '${other3}', '${other4}', '${other5}' ON CONFLICT (studentid, languageflag) DO UPDATE SET 
                                    firstname='${lang_firstname}', middlename='${lang_middlename}', lastname='${lang_lastname}', fathername='${lang_fathername}', facultyname='${lang_facultyname}', department='${lang_department}', phdtitle='${lang_phdtitle}', institute_name='${lang_institutename}', coursename='${lang_coursename}', competencyname='${lang_competencyname}', 
                                    specializationone='${lang_specializationone}', cgpa='${lang_cgpa}', rank='${lang_rank}', medaltype='${lang_medaltype}', completiondate='${lang_completiondate}', other1='${other1}', other2='${other2}', other3='${other3}', other4='${other4}', other5='${other5}' RETURNING id;`);
    // console.log(insertStudentQuery)
    cohortgroups = await pool.query(insertStudentQuery);
    return true;
    // if(h_firstname!="") data['firstname'] = `{"english": "${firstname}", "hindi": "${h_firstname}"}`;
    // if(h_middlename!="") data['middlename'] = `{"english": "${middlename}", "hindi": "${h_middlename}"}`;
    // if(h_lastname!="") data['lastname'] = `{"english": "${lastname}", "hindi": "${h_lastname}"}`;
    // if(h_facultyname!="") data['facultyname'] = `{"english": "${facultyname}", "hindi": "${h_facultyname}"}`;
    // if(h_competencyname!="") data['competencyname'] = `{"english": "${competencyname}", "hindi": "${h_competencyname}"}`;
    // if(h_specializationone!="") data['specializationone'] = `{"english": "${specializationone}", "hindi": "${h_specializationone}"}`;
    // if(h_cgpa!="") data['cgpa'] = `{"english": "${cgpa}}", "hindi": "${h_cgpa}"}`;
    // if(h_rank!="") data['rank'] = `{"english": "${rank}", "hindi": "${h_rank}"}`;
    // if(h_medaltype!="") data['medaltype'] = `{"english": "${medaltype}", "hindi": "${h_medaltype}"}`;
    // if(h_completiondate!="") data['completiondate'] = `{"english": "${completiondate}", "hindi": "${h_completiondate}"}`;
    // return data;
  }
  catch(err){
    console.log(err);
    return false;
  }
  
}

//Upload students data from csv file
user.uploadstuduents = async (req, res, next) => {
  try {
    //Variables to read file.
    let roman_list_new = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];
    var currentUser = req.user;
    if (req.user.business_is_verified == false) {
      return res.json({ Status: 400, message: "Your account is currently under verification, please contact certonce team."});
    }
    var permission = await getPermission(req.user.user_id, "uploadstuduents");
    if (permission == false) {
      return res.json({ Status: 400, message: "Access denied."});
    }
    var puserid = await getParentAccountIdFromId(req.user.user_id);
    var awsinfo=await getS3BucketInformation(puserid);
    if (awsinfo.baseurl == ""){
      return res.json({ Status: 400, message: "Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION."});
    }
    var selectedcerttypeid = req.body.selectedcerttypeid; 
    if(selectedcerttypeid == "" || selectedcerttypeid == undefined || selectedcerttypeid == null) selectedcerttypeid = "degree";  
    var params = JSON.parse(req.body.value);
    console.log(params);
    //////////////////transcript variable//////////////////    
    var cgpa = "";
    var cpi = "";
    var specializationone = "";
    var specializationtwo = "";
    var modeofdelivery = "";
    var mediumofstudy = "";
    var dateofissue = "";
    var preparedby = "";
    var verifiedby = "";
    ///////////////////////////////////////////////////////

    //////////////////degree variable//////////////////    
    var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var addStudentQuery = '';
    var addCohortQuery = '';
    ///////////////////////////////////////////////////
    var glstudentid = "";
    var glissuedate = "";
    var competencyname = "";
    var competencydetail = "";
    //params=JSON.parse(params);
    // console.log("params.length=",params.length);
    let checkstdid = check_studentid_duplicate(params, puserid);
    // console.log("check result: ", checkstdid);
    if( checkstdid != "") {
      return res.json({Status: 400, message: `Student ID ${checkstdid} has duplicate entries`});
    }
    var smtpaccount = {'type' : true, 'username' : "",  'clientid' : "", 'clientsecret' : "", 'refreshtoken' : "", 'from': "" };
    var cc="";
    var contact_email = "";
    var querySmtp=format(`SELECT * FROM setting where accountid='${puserid}';`);
    let smtpresult = await pool.query(querySmtp);
    if(smtpresult && smtpresult.rowCount > 0){
      smtpaccount['type'] = smtpresult.rows[0].smtptype;
      smtpaccount['host'] = smtpresult.rows[0].smtphost;
      smtpaccount['port'] = smtpresult.rows[0].smtpport;
      smtpaccount['username'] = smtpresult.rows[0].smtpusername;
      smtpaccount['password'] = smtpresult.rows[0].smtppassword;
      smtpaccount['from'] = smtpresult.rows[0].smtpfrom;

      smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
      smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
      smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;

      smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
      smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
      cc=smtpresult.rows[0].smtpcc;
      contact_email = smtpresult.rows[0].contact_email;      
      if (contact_email == null || contact_email == undefined) contact_email = "";
      if (contact_email == ""){
        var obj = {
          Status: 400,
          message: `Contact Email is not defined. Please set contact email in /My PROFILE/Setting/CONTACT INFORMATION`
        };
        return res.json(obj);
      }
    }
    if (puserid == "11" || puserid == "20099" || puserid == "20107"){
      params.map(function(element){
        let temp = {};
        let temp1 = {};
        for (let key in element){
          if (key.toLowerCase().indexOf("distinction_") != -1){
            if (element[key] != "") temp[key.split("_")[1]] = element[key];
          }
        }
        let keys = Object.keys(temp);
        keys.sort();
        keys.forEach((key) => {
          temp1[key] = temp[key];
        })
        element['distinction'] = JSON.stringify(temp1);
      })
    }
    
    params = change_excel_column_name_for_student(params);
    var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    console.log('Your IP address is ' + clientIp);    
    let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress,userid) values ('uploadstudent(${params.length} students are selected)','${clientIp}','${puserid}');`);
    await pool.query(ipQuery);
    res.json({ Status: 200, message: 'Please wait the student data is being uploaded , on completion you will receive an email.'});
    let validate_result = await check_student_validation(puserid, params);
    if (validate_result != ""){
      let email_body = `<p style="color: black;">There are some errors in uploading student. Below are error list.</p>${validate_result}`;
      let email_subject = "Upload Students Error";
      await utils.sendEmail(email_body, email_subject, contact_email, smtpaccount, puserid, "mailer_downloadcertificate", false);
      return;
    }
    if (params != null && params != undefined && params.length > 0) {
      if (puserid == "20134" || puserid == "33") {
        params = await utils.checkStudentDuplication(params, contact_email, smtpaccount, puserid);
      }
      for (const row of params) {
        var istranscript = row['istranscript'];
        if (istranscript == null || istranscript == undefined || istranscript == "") istranscript = false;
        var isgrade = row['isgrade'];
        if (isgrade == null || isgrade == undefined || isgrade == "") isgrade = false;
        let check_code = row['certificationcategory'];
        if(check_code == null || check_code == undefined || check_code == "") check_code = "english";
        // if (check_code == "english") Object.keys(row).forEach(function(key, value){
        //   if (row[key] == undefined || row[key] == null) row[key] = "";
        //   row[key] = row[key].toString().replace(/'/g, "’");});
        if (check_code == "hindi") Object.keys(row).forEach(function(key, value){
          if (row[key] == undefined || row[key] == null) row[key] = "";
          row[key] = row[key].toString().trim().replace(/'/g, `UPPER_DOT`);
          row[key] = row[key].toString().trim().replace(/"/g, `TOP_DOUBLE_DOT`);
        });
        else Object.keys(row).forEach(function(key, value){
          if (row[key] == undefined || row[key] == null) row[key] = "";
          // console.log("hindi", key);
          if (key.indexOf("lang_") !== -1 || key.indexOf("hindi_") !== -1) {
            row[key] = row[key].toString().trim().replace(/'/g, `UPPER_DOT`);
            row[key] = row[key].toString().trim().replace(/"/g, `TOP_DOUBLE_DOT`);
          }
          else row[key] = row[key].toString().replace(/'/g, "’");});
        // console.log("code change result: ", row);
        
        if(isgrade == true){
          var xlsxstudentid = row['studentid'];
          if (xlsxstudentid == null || xlsxstudentid == undefined) xlsxstudentid = "";
          xlsxstudentid = xlsxstudentid.toString();
          xlsxstudentid = xlsxstudentid.trim();

          var xlsxcohortid = row['cohortid'];
          if (xlsxcohortid == null || xlsxcohortid == undefined) xlsxcohortid = "";
          xlsxcohortid = xlsxcohortid.toString();
          xlsxcohortid = xlsxcohortid.trim();

          var xlsxgradeyear = row['grade_year'];
          if (xlsxgradeyear  == null || xlsxgradeyear  == undefined) xlsxgradeyear = "";
          var xlsxgradedate = row['grade_date'];
          if (xlsxgradedate == null || xlsxgradedate  == undefined) xlsxgradedate = "";
          var xlsxsgpa_credit = row['sgpa_credit'];
          if (xlsxsgpa_credit  == null || xlsxsgpa_credit  == undefined) xlsxsgpa_credit = "";
          var xlsxsgpa_point = row['sgpa_point'];
          if (xlsxsgpa_point  == null || xlsxsgpa_point  == undefined) xlsxsgpa_point = "";
          var xlsxsgpa = row['sgpa'];
          if (xlsxsgpa  == null || xlsxsgpa  == undefined) xlsxsgpa = "";
          var xlsxcgpa_credit = row['cgpa_credit'];
          if (xlsxcgpa_credit  == null || xlsxcgpa_credit  == undefined) xlsxcgpa_credit = "";
          var xlsxcgpa_point = row['cgpa_point'];
          if (xlsxcgpa_point  == null || xlsxcgpa_point  == undefined) xlsxcgpa_point = "";
          var xlsxcgpa = row['cgpa'];
          if (xlsxcgpa  == null || xlsxcgpa  == undefined) xlsxcgpa = "";
          var xlsxcode = row['code'];
          if (xlsxcode  == null || xlsxcode  == undefined) xlsxcode = "";
          var xlsxname = row['name'];
          if (xlsxname  == null || xlsxname  == undefined) xlsxname = "";
          var xlsxcredit = row['credit'];
          if (xlsxcredit  == null || xlsxcredit  == undefined) xlsxcredit = "";
          var xlsxgrade = row['grade'];
          if (xlsxgrade  == null || xlsxgrade  == undefined) xlsxgrade = "";
          var xlsxearned_credit = row['earned_credit'];
          if (xlsxearned_credit  == null || xlsxearned_credit  == undefined) xlsxearned_credit = "";          

          var addSemesterQuery = format(`INSERT INTO semestergradetranscript (accountid,cohortid,studentid,code,name,credit,grade,earnedofcredit)
                                      SELECT '${puserid}', '${xlsxcohortid}','${xlsxstudentid}', '${xlsxcode}', '${xlsxname}','${xlsxcredit}','${xlsxgrade}','${xlsxearned_credit}' 
                                      WHERE NOT EXISTS (SELECT 1 FROM semestergradetranscript WHERE  cohortid=('${xlsxcohortid}') and studentid='${xlsxstudentid}' and code='${xlsxcode}' and name='${xlsxname}' and accountid='${puserid}')
                                      RETURNING id;`);
          await pool.query(addSemesterQuery);

          var addTranscriptDescribeQuery = format(`INSERT INTO transcriptgradedescribe (accountid,cohortid,studentid,grade_year,dateofissue,sgpa_credit,sgpa_point,sgpa,cgpa_credit,cgpa_point,cgpa)
                                            SELECT '${puserid}', '${xlsxcohortid}','${xlsxstudentid}','${xlsxgradeyear}','${xlsxgradedate}','${xlsxsgpa_credit}','${xlsxsgpa_point}', '${xlsxsgpa}', '${xlsxcgpa_credit}','${xlsxcgpa_point}','${xlsxcgpa}' 
                                            WHERE NOT EXISTS (SELECT 1 FROM transcriptgradedescribe WHERE  cohortid='${xlsxcohortid}' and studentid='${xlsxstudentid}' and accountid='${puserid}')
                                            RETURNING id;`);
          await pool.query(addTranscriptDescribeQuery);
          
        }
        else {
          if (istranscript == false) {    
            //////////////////////////studen upload part/////////////////////////
            var xlsxstudentid = row['studentid'];
            if (xlsxstudentid == null || xlsxstudentid == undefined) xlsxstudentid = "";
            else xlsxstudentid = xlsxstudentid.toString().trim().replace(/'/g, "’");

            var semesternumbers = row['semesternumber'];
            //if(isNaN(semesternumbers)==true) semesternumbers=1; 
            //if(semesternumbers<0) semesternumbers=1;
            
            var xlsxfirstname = row['firstname'];
            if (xlsxfirstname == null || xlsxfirstname == undefined) xlsxfirstname = "";
            else xlsxfirstname = xlsxfirstname.toString().replace(/'/g, "’");
            var xlsxmiddlename = row['middlename'];
            if (xlsxmiddlename == null || xlsxmiddlename == undefined) xlsxmiddlename = "";
            else xlsxmiddlename = xlsxmiddlename.toString().replace(/'/g, "’");
            xlsxmiddlename = xlsxmiddlename.toString();
            var xlsxlastname = row['lastname'];
            if (xlsxlastname == null || xlsxlastname == undefined) xlsxlastname = "";
            else xlsxlastname = xlsxlastname.toString().replace(/'/g, "’");
            xlsxlastname = xlsxlastname.toString();
            var xlsxemail = row['email'];
            if (xlsxemail == null || xlsxemail == undefined) xlsxemail = "";
            else xlsxemail = xlsxemail.toString().replace(/'/g, "’");
            if (xlsxemail.split(",").length > 1) xlsxemail = xlsxemail.split(",")[0].trim();
            xlsxemail = xlsxemail.trim();
            var xlsxphonenumber = row['phonenumber'];
            if (xlsxphonenumber == null || xlsxphonenumber == undefined) xlsxphonenumber = "";
            else xlsxphonenumber = xlsxphonenumber.toString().replace(/'/g, "’");
            var xlsxcohortid = row['cohortid'];
            if (xlsxcohortid == null || xlsxcohortid == undefined) xlsxcohortid = "";
            else xlsxcohortid = xlsxcohortid.toString().replace(/'/g, "’");
            xlsxcohortid = xlsxcohortid.trim();
            var xlsxcohortname = row['cohortname'];
            if (xlsxcohortname == null || xlsxcohortname == undefined) xlsxcohortname = "";
            else xlsxcohortname = xlsxcohortname.toString().replace(/'/g, "’");
            var xlsxcompetencyname = row['competencyname'];
            
            if (xlsxcompetencyname == null || xlsxcompetencyname == undefined) xlsxcompetencyname = "";
            else xlsxcompetencyname = xlsxcompetencyname.toString().replace(/'/g, "’");
            var xlsxcompetencydetail = row['competencydetail'];
            var xlsxtemplatetype = row['templatetype'];
            if (xlsxtemplatetype == null || xlsxtemplatetype == undefined) xlsxtemplatetype = "";
            else xlsxtemplatetype = xlsxtemplatetype.toString().replace(/'/g, "’");
            var xlsxlanguageflag = row['languageflag'];
            if (xlsxlanguageflag == null || xlsxlanguageflag == undefined) xlsxlanguageflag = "";
            else xlsxlanguageflag = xlsxlanguageflag.toString().replace(/'/g, "’");
            var xlsxpublic = row['public'];
            if (xlsxpublic == null || xlsxpublic == undefined) xlsxpublic = "";
            else xlsxpublic = xlsxpublic.toString().replace(/'/g, "’");

            xlsxcompetencyname = convertDoubleQuote(xlsxcompetencyname);
            xlsxcompetencyname = convertQuote(xlsxcompetencyname);
            if (xlsxcompetencydetail != "" && xlsxcompetencydetail != null && xlsxcompetencydetail != undefined) {
              xlsxcompetencydetail = xlsxcompetencydetail.toString().replace(/'/g, "’");
              xlsxcompetencydetail = xlsxcompetencydetail.split(",").map(element => element.trim());
              //console.log(xlsxcompetencyname, xlsxcompetencydetail);
              await createCompetencyDetail(xlsxcompetencyname, xlsxcompetencydetail);
            }
            var xlsxcountry = row['country'];
            if (xlsxcountry == null || xlsxcountry == undefined) xlsxcountry = "";
            else xlsxcountry = xlsxcountry.toString().replace(/'/g, "’");
            var CompetencyLevel = row['competencylevel'];
            if (CompetencyLevel == null || CompetencyLevel == undefined) CompetencyLevel = "";
            else CompetencyLevel = CompetencyLevel.toString().replace(/'/g, "’");
            var GraduatingDate = row['graduatingdate'];
            if (GraduatingDate == null || GraduatingDate == undefined) GraduatingDate = "";
            else GraduatingDate = GraduatingDate.toString().replace(/'/g, "’");
            var Graduatingmonth = row['graduatingmonth'];
            if (Graduatingmonth == null || Graduatingmonth == undefined) Graduatingmonth = "";
            else Graduatingmonth = Graduatingmonth.toString().replace(/'/g, "’");
            var Graduatingyear = row['graduatingyear'];
            if (Graduatingyear == null || Graduatingyear == undefined) Graduatingyear = "";
            else Graduatingyear = Graduatingyear.toString().replace(/'/g, "’");
            var GratuatingSeason = row['gratuatingseason'];
            if (GratuatingSeason == null || GratuatingSeason == undefined) GratuatingSeason = "";
            else GratuatingSeason = GratuatingSeason.toString().replace(/'/g, "’");
            var competencyExpirationDate = row['competencyexpirationdate'];
            if (competencyExpirationDate == null || competencyExpirationDate == undefined) competencyExpirationDate = "";
            else competencyExpirationDate = competencyExpirationDate.toString().replace(/'/g, "’");
            var CohortDescription = row['cohortdescription'];
            if (CohortDescription == null || CohortDescription == undefined) CohortDescription = "";
            else CohortDescription = CohortDescription.toString().replace(/'/g, "’");
            var LetterOfReco = row['letterofreco'];
            if (LetterOfReco == null || LetterOfReco == undefined) LetterOfReco = "";
            else LetterOfReco = LetterOfReco.toString().replace(/'/g, "’");
            var marks = row['marks'];
            if (marks == null || marks == undefined) marks = "";
            else marks = marks.toString().replace(/'/g, "’");
            var competencystartdate = row['competencystartdate'];
            if (competencystartdate == null || competencystartdate == undefined) competencystartdate = "";
            else competencystartdate = competencystartdate.toString().replace(/'/g, "’");
            // competencystartdate = competencystartdate.replace(/_/g, " ");
            ////////////////////// CertificationCategory ////////////////////////
            var certificationcategory = row['certificationcategory'];
            if (certificationcategory == null || certificationcategory == undefined) certificationcategory = "";
            else certificationcategory = certificationcategory.toString().replace(/'/g, "’");

            var competencyenddate = row['competencyenddate'];
            if (competencyenddate == null || competencyenddate == undefined) competencyenddate = "";
            else competencyenddate = competencyenddate.toString().replace(/'/g, "’");
            // competencyenddate = competencyenddate.replace(/_/g, " ");


            var FatherName = row['fathername'];
            if (FatherName == null || FatherName == undefined) FatherName = "";
            else FatherName = FatherName.toString().replace(/'/g, "’");

            var MotherName = row['mothername'];
            if (MotherName == null || MotherName == undefined) MotherName = "";
            else MotherName = MotherName.toString().replace(/'/g, "’");

            var Sex = row['sex'];
            if (Sex == null || Sex == undefined) Sex = "";
            else {
              Sex = Sex.toString().trim().replace(/'/g, "’");
              if (Sex.toLowerCase() == "male") Sex = "M";
              else if (Sex.toLowerCase() == "female") Sex = "F";
            }

            var specializationone = row['specializationone'];
            if (specializationone == null || specializationone == undefined) specializationone = "";
            else specializationone = specializationone.toString().replace(/'/g, "’");

            var specializationtwo = row['specializationtwo'];
            if (specializationtwo == null || specializationtwo == undefined) specializationtwo = "";
            else specializationtwo = specializationtwo.toString().replace(/'/g, "’");

            var EnrollNumber = row['enrollnumber'];
            if (EnrollNumber == null || EnrollNumber == undefined) {
              EnrollNumber = "";
              if (xlsxstudentid != "") EnrollNumber = xlsxstudentid;
            }
            // else {
            //   EnrollNumber = EnrollNumber.toString().replace(/'/g, "’");
            //   xlsxstudentid = EnrollNumber;
            // }

            var SerialNumber = row['serialnumber'];
            if (SerialNumber == null || SerialNumber == undefined) SerialNumber = "";
            else SerialNumber = SerialNumber.toString().replace(/'/g, "’");

            var PreparedBy = row['preparedby'];
            if (PreparedBy == null || PreparedBy == undefined) PreparedBy = "";
            else PreparedBy = PreparedBy.toString().replace(/'/g, "’");

            var xlsxsdateofissue = row['dateofissue'];
            if (xlsxsdateofissue == null || xlsxsdateofissue == undefined) xlsxsdateofissue = "";
            else xlsxsdateofissue = xlsxsdateofissue.toString().replace(/'/g, "’");
            
            //console.log(xlsxsdateofissue);
            try {
              var xlsxhold = row['hold'];
              if (xlsxhold == null || xlsxhold == undefined) xlsxhold = '';
            } catch (error) {
              var xlsxhold = '';
            }

            xlsxfirstname = xlsxfirstname.replaceAll("'", "`");
            xlsxmiddlename = xlsxmiddlename.replaceAll("'", "`");
            xlsxlastname = xlsxlastname.replaceAll("'", "`");
            xlsxcohortname = xlsxcohortname.replaceAll("'", "`");
            xlsxcohortname = xlsxcohortname.trim();
            xlsxcohortid = xlsxcohortid.replaceAll("'", "`");
            xlsxcompetencyname = xlsxcompetencyname.replaceAll("'", "`");
            xlsxcompetencyname = xlsxcompetencyname.trim();
            xlsxtemplatetype = xlsxtemplatetype.replaceAll("'", "`");
            xlsxtemplatetype = xlsxtemplatetype.trim();

            CompetencyLevel = CompetencyLevel.replaceAll("'", "`");
            CohortDescription = CohortDescription.replaceAll("'", "`");
            LetterOfReco = LetterOfReco.replaceAll("'", "`");
            FatherName = FatherName.replaceAll("'", "`");
            MotherName = MotherName.replaceAll("'", "`");
            specializationone = specializationone.replaceAll("'", "`");
            specializationtwo = specializationtwo.replaceAll("'", "`");
            PreparedBy = PreparedBy.replaceAll("'", "`");

            var aadhaarnumber = row['aadhaar_number'];
            if (aadhaarnumber == null || aadhaarnumber == undefined) aadhaarnumber = "";
            else aadhaarnumber = aadhaarnumber.toString().replace(/'/g, "");
            var department = row['department'];
            if (department == null || department == undefined) department = "";
            var phdtitle = row['phdtitle'];
            if (phdtitle == null || phdtitle == undefined) phdtitle = "";
            var coursename = row['coursename'];
            if (coursename == null || coursename == undefined) coursename = "";
            var coursestartdate = row['coursestartdate'];
            if (coursestartdate == null || coursestartdate == undefined) coursestartdate = "";
            coursestartdate = coursestartdate.replaceAll(/_/g, " ");
            var coursecompletiondate = row['coursecompletiondate'];
            if (coursecompletiondate == null || coursecompletiondate == undefined) coursecompletiondate = "";
            coursecompletiondate = coursecompletiondate.replaceAll(/_/g, " ");
            var expiredate = row['expiredate'];
            if (expiredate == null || expiredate == undefined) expiredate = "";
            var photorequired = row['photorequired'];
            if (photorequired == null || photorequired == undefined) photorequired = '';
            var secondpage = row['secondpage'];
            if (secondpage == null || secondpage == undefined) secondpage = '';
            var photofilename = row['photofilename'];
            if (photofilename == null || photofilename == undefined) photofilename = '';
            

            const keys = ['other1', 'other2', 'other3', 'other4', 'other5', 'other6', 'other7', 'other8', 'other9', 'other10', 'other11', 'other12', 'other13', 'subother1', 'subother2', 'subother3', 'subother4', 'subother5', 'subother6', 'subother7', 'subother8', 'subother9', 'subother10', 'subother11', 'subother12', 'subother13', 'subother14', 'subother15', 'subother16', 'subother17', 'subother18', 'subother19', 'subother20', 'subother21', 'subother22', 'subother23', 'subother24', 'subother25'];
            const updatedRow = {};
            keys.forEach(key => {
              updatedRow[key] = (row[key] == null || row[key] == undefined) ? "" : row[key].trim();
            });
            var other1 = updatedRow['other1'];
            var other2 = updatedRow['other2'];
            var other3 = updatedRow['other3'];
            var other4 = updatedRow['other4'];
            var other5 = updatedRow['other5'];
            var other6 = updatedRow['other6'];
            var other7 = updatedRow['other7'];
            var other8 = updatedRow['other8'];
            var other9 = updatedRow['other9'];
            var other10 = updatedRow['other10'];
            var other11 = updatedRow['other11'];
            var other12 = updatedRow['other12'];
            var other13 = updatedRow['other13'];

            var subother1 = updatedRow['subother1'];
            var subother2 = updatedRow['subother2'];
            var subother3 = updatedRow['subother3'];
            var subother4 = updatedRow['subother4'];
            var subother5 = updatedRow['subother5'];
            var subother6 = updatedRow['subother6'];
            var subother7 = updatedRow['subother7'];
            var subother8 = updatedRow['subother8'];
            var subother9 = updatedRow['subother9'];
            var subother10 = updatedRow['subother10'];
            var subother11 = updatedRow['subother11'];
            var subother12 = updatedRow['subother12'];
            var subother13 = updatedRow['subother13'];
            var subother14 = updatedRow['subother14'];
            var subother15 = updatedRow['subother15'];
            var subother16 = updatedRow['subother16'];
            var subother17 = updatedRow['subother17'];
            var subother18 = updatedRow['subother18'];
            var subother19 = updatedRow['subother19'];
            var subother20 = updatedRow['subother20'];
            var subother21 = updatedRow['subother21'];
            var subother22 = updatedRow['subother22'];
            var subother23 = updatedRow['subother23'];
            var subother24 = updatedRow['subother24'];
            var subother25 = updatedRow['subother25'];
            if (puserid == "20088" || puserid == "20") {
              subother7 = row["certificatetype"] ? row["certificatetype"].trim() : selectedcerttypeid.trim();
            }
            //////////////MIT Custom fields////////////////
            var xlsxcertificateid = row['certificateid'];
            if (xlsxcertificateid == null || xlsxcertificateid == undefined) xlsxcertificateid = "";
            xlsxcertificateid = await getCertificateIdForMIT(xlsxcertificateid, puserid);

            var xlsxfacultyname = row['facultyname'];
            if (xlsxfacultyname == null || xlsxfacultyname == undefined) xlsxfacultyname = "";

            var xlsxcgpa = row['cgpa'];
            if (xlsxcgpa == null || xlsxcgpa == undefined) xlsxcgpa = "";
            if (puserid == "1") {
              try {
                let temp_cgpa = JSON.parse(xlsxcgpa);
                if (temp_cgpa["english"] != "") {
                  temp_cgpa["english"] = parseFloat(temp_cgpa["english"]);
                  const formatter = new Intl.NumberFormat('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  });
                  temp_cgpa["english"] = formatter.format(temp_cgpa["english"]);
                  xlsxcgpa = JSON.stringify(temp_cgpa)
                }
              }
              catch {
                if (xlsxcgpa != "") {
                  xlsxcgpa = parseFloat(xlsxcgpa);
                  const formatter = new Intl.NumberFormat('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  });
                  xlsxcgpa = formatter.format(xlsxcgpa);
                }
              }
            }
            else {
              if (xlsxcgpa != "") {
                xlsxcgpa = parseFloat(xlsxcgpa);
                const formatter = new Intl.NumberFormat('en-US', {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2,
                });
                xlsxcgpa = formatter.format(xlsxcgpa);
              }
            }


            var xlsxrank = row['rank'];
            if (xlsxrank == null || xlsxrank == undefined) xlsxrank = "";

            var xlsxmedaltype = row['medaltype'];
            if (xlsxmedaltype == null || xlsxmedaltype == undefined) xlsxmedaltype = "";

            var xlsxcompletiondate = row['completiondate'];
            if (xlsxcompletiondate == null || xlsxcompletiondate == undefined) xlsxcompletiondate = "";

            var xlsxissuedate = row['issuedate'];
            if (xlsxissuedate == null || xlsxissuedate == undefined) xlsxissuedate = "";

            var xlsxsecondemailaddress = row['secondemailaddress'];
            if (xlsxsecondemailaddress == null || xlsxsecondemailaddress == undefined) xlsxsecondemailaddress = "";

            var cc2 = row['cc2'];
            if (cc2 == null || cc2 == undefined) cc2 = "";

            var cc3 = row['cc3'];
            if (cc3 == null || cc3 == undefined) cc3 = "";

            var convocation_number = row['convocation_number'];
            if (convocation_number == null || convocation_number == undefined || typeof convocation_number == 'undefined') convocation_number = "";

            var convocation_date = row['convocation_date'];
            if (convocation_date == null || convocation_date == undefined || typeof convocation_date == 'undefined') convocation_date = "";

            var institute_name = row['institute_name'];
            if (institute_name == null || institute_name == undefined || typeof institute_name == 'undefined') institute_name = "";

            var institute_address = row['institute_address'];
            if (institute_address == null || institute_address == undefined || typeof institute_address == 'undefined') institute_address = "";

            var xlsxpartnername = row['partnername'];
            if (xlsxpartnername == null || xlsxpartnername == undefined || typeof xlsxpartnername == 'undefined') xlsxpartnername = "";

            var partnercompanyname = row['partnercompanyname'];
            if (partnercompanyname == null || partnercompanyname == undefined || typeof partnercompanyname == 'undefined') partnercompanyname = "";
            
            xlsxstudentid = await getStudentIdForEnhelion(xlsxstudentid, xlsxcohortid, xlsxcohortname, puserid);
            

            var students;
            var studentId;
            var cohortId;


            //Insert data to student table
            var cgparankmedal = "";
            if (xlsxcgpa != "") cgparankmedal = `cgpa='${xlsxcgpa}'`;

            if (xlsxrank != "" && cgparankmedal == "") cgparankmedal = `rank='${xlsxrank}'`;
            else if (xlsxrank != "" && cgparankmedal != "") cgparankmedal += `, rank='${xlsxrank}'`;

            if (xlsxmedaltype != "" && cgparankmedal == "") cgparankmedal = `medaltype='${xlsxmedaltype}'`;
            else if (xlsxmedaltype != "" && cgparankmedal != "") cgparankmedal += `, medaltype='${xlsxmedaltype}'`;

            var cc = "";
            if (cc2 !== "" && cc2 != null && cc2 !== undefined && typeof cc2 !== 'undefined') {
              cc = `cc2='${cc2}'`;
            }
            if (cc3 !== "" && cc3 != null && cc3 !== undefined && typeof cc3 !== 'undefined') {
              if (cc !== "") {
                cc += `, cc3='${cc3}'`;
              }
              else {
                cc += `cc3='${cc3}'`;
              }
            }
            var conflictcause = "";
            if (cgparankmedal == "")
              conflictcause = `firstname='${xlsxfirstname}', emailaddress='${xlsxemail}', secondemailaddress='${xlsxsecondemailaddress}' ,facultyname='${xlsxfacultyname}',completiondate='${xlsxcompletiondate}',specializationone='${specializationone}',institute_name='${institute_name}'`;
            else
              conflictcause = `firstname='${xlsxfirstname}', emailaddress='${xlsxemail}', secondemailaddress='${xlsxsecondemailaddress}' ,facultyname='${xlsxfacultyname}',completiondate='${xlsxcompletiondate}',specializationone='${specializationone}', ${cgparankmedal}`;
            if (cc !== "") {
              conflictcause += `, ${cc}`;
            }
            addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,phonenumber,sex,specializationone,specializationtwo,
                                  fathername,mothername,enrollnumber,serialnumber,preparedby,letterofreco,accountid,aadhaarnumber,
                                  facultyname,cgpa,rank,medaltype,completiondate,secondemailaddress,cc2,cc3,convocation_number,convocation_date,institute_name,institute_address,other1,other2,other3,other4,other5,other6,other7,other8,other9,other10,other11,other12,other13)
                                  SELECT '${xlsxstudentid}','${xlsxfirstname}','${xlsxmiddlename}', '${xlsxlastname}', '${xlsxemail}','${xlsxphonenumber}','${Sex}',
                                  '${specializationone}','${specializationtwo}','${FatherName}','${MotherName}','${EnrollNumber}','${SerialNumber}','${PreparedBy}',
                                  '${LetterOfReco}','${puserid}','${aadhaarnumber}','${xlsxfacultyname}','${xlsxcgpa}','${xlsxrank}','${xlsxmedaltype}','${xlsxcompletiondate}',
                                  '${xlsxsecondemailaddress}','${cc2}','${cc3}','${convocation_number}','${convocation_date}','${institute_name}','${institute_address}','${other1}','${other2}','${other3}','${other4}','${other5}','${other6}','${other7}','${other8}','${other9}','${other10}','${other11}','${other12}','${other13}' ON CONFLICT (studentid,accountid,firstname,middlename,lastname,emailaddress) DO UPDATE SET ${conflictcause} RETURNING id;`);
            //console.log(addStudentQuery);
            students = await pool.query(addStudentQuery);
            console.log("STUDENTS: ", students.rows)
            if (students.rowCount > 0) {
              studentId = students.rows[0].id;
              if (xlsxlanguageflag != "") await upload_student_language(studentId, xlsxlanguageflag.toLowerCase(), row);
              var addCohortGroupQuery = format(`INSERT INTO COHORT_GROUP (name, cohortid, accountid) SELECT '${xlsxcohortname}', '${xlsxcohortid}', '${puserid}' ON CONFLICT (cohortid,accountid) DO UPDATE SET cohortid='${xlsxcohortid}' ,name='${xlsxcohortname}' ,accountid='${puserid}' RETURNING id;`);
              await pool.query(addCohortGroupQuery);
              var addCohortQuery = format(`INSERT INTO COHORT (accountid,cohortid,name,competencyname,competencylevel,graduatingdate,graduatingmonth,graduatingyear,graduatingseason,competencyexpirationdate,description,competencystartdate,competencyenddate,country,semesternumber)
                    SELECT '${puserid}','${xlsxcohortid}','${xlsxcohortname}', '${xlsxcompetencyname}','${CompetencyLevel}','${GraduatingDate}','${Graduatingmonth}','${Graduatingyear}', '${GratuatingSeason}', '${competencyExpirationDate}','${CohortDescription}','${competencystartdate}','${competencyenddate}','${xlsxcountry}', '${semesternumbers}'
                    ON CONFLICT (cohortid, competencyname, accountid,semesternumber) DO UPDATE SET competencyname='${xlsxcompetencyname}', competencystartdate='${competencystartdate}', competencyenddate='${competencyenddate}' RETURNING id;`);
              console.log(addCohortQuery);
              let cohorts = await pool.query(addCohortQuery);
              if (cohorts.rowCount > 0) {
                var cohortId = cohorts.rows[0].id;
                var certtypename = selectedcerttypeid.trim();//"degree";
                var tablenameforcerttype = "cohortmembers_degree";
                tablenameforcerttype = certtypes[selectedcerttypeid.trim()];              
                var studentsforonetimecode;
                var onetimecode = "";
                var loopcount = 0;
                console.log("accountid, cohortid, studentid:", puserid, cohortId, studentId)
                while (loopcount !== Object.keys(certtypes).length) {
                  onetimecode = getOnetimecode(15);
                  loopcount = 0;
                  for (const key1 in certtypes) {
                    var certtypename1 = key1;
                    var tablenameforcerttype1 = certtypes[key1];
                    let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype1} WHERE onetimeblockcertscode='${onetimecode}';`);
                    studentsforonetimecode = await pool.query(getExistStudent);
                    if (studentsforonetimecode.rowCount == 0) {
                      loopcount++;
                    }
                  }
                }
                var marks_column = marks;
                var certificateid_column = xlsxcertificateid;
                let addPivotQuery;
                if (xlsxtemplatetype !== "") { // Enhelion Template Types
                  addPivotQuery = format(`INSERT INTO ${tablenameforcerttype} (cohortid,studentid,onetimeblockcertscode,certificatetype,marks,certificateid,department,phdtitle,coursename,coursestartdate,coursecompletiondate,certificationcategory,serialnumber,issueddate,issuedate,hold,template_type,public,expiredate,partnercompanyname,isphotorequired,secondpage,photofilename,other1,other2,other3,other4,other5,other6,other7,other8,other9,other10,other11,other12,other13,other14,other15,other16,other17,other18,other19,other20,other21,other22,other23,other24,other25)
                                  SELECT '${cohortId}','${studentId}','${onetimecode}','${certtypename}','${marks_column}','${certificateid_column}','${department}','${phdtitle}','${coursename}','${coursestartdate}','${coursecompletiondate}','${certificationcategory}','${SerialNumber}','${xlsxsdateofissue}','${xlsxissuedate}','${xlsxhold}','${xlsxtemplatetype}','${xlsxpublic}','${expiredate}', '${partnercompanyname}', '${photorequired}', '${secondpage}', '${photofilename}', '${subother1}', '${subother2}', '${subother3}', '${subother4}', '${subother5}', '${subother6}', '${subother7}', '${subother8}', '${subother9}', '${subother10}', '${subother11}', '${subother12}', '${subother13}', '${subother14}', '${subother15}', '${subother16}', '${subother17}', '${subother18}', '${subother19}', '${subother20}', '${subother21}', '${subother22}', '${subother23}', '${subother24}', '${subother25}' on conflict (studentid, cohortid, certificaterevoked, certificatetype) do update set cohortid='${cohortId}', other1='${subother1}', other20='${subother20}';`);
                } else {
                  addPivotQuery = format(`INSERT INTO ${tablenameforcerttype} (cohortid,studentid,onetimeblockcertscode,certificatetype,marks,certificateid,department,phdtitle,coursename,coursestartdate,coursecompletiondate,certificationcategory,serialnumber,issueddate,issuedate,hold,public,expiredate,partnercompanyname, isphotorequired,secondpage,photofilename,other1,other2,other3,other4,other5,other6,other7,other8,other9,other10,other11,other12,other13,other14,other15,other16,other17,other18,other19,other20,other21,other22,other23,other24,other25)
                                  SELECT '${cohortId}','${studentId}','${onetimecode}','${certtypename}','${marks_column}','${certificateid_column}','${department}','${phdtitle}','${coursename}','${coursestartdate}','${coursecompletiondate}','${certificationcategory}','${SerialNumber}','${xlsxsdateofissue}','${xlsxissuedate}','${xlsxhold}','${xlsxpublic}','${expiredate}','${partnercompanyname}', '${photorequired}', '${secondpage}', '${photofilename}', '${subother1}', '${subother2}', '${subother3}', '${subother4}', '${subother5}', '${subother6}', '${subother7}', '${subother8}', '${subother9}', '${subother10}', '${subother11}', '${subother12}', '${subother13}', '${subother14}', '${subother15}', '${subother16}', '${subother17}', '${subother18}', '${subother19}', '${subother20}', '${subother21}', '${subother22}', '${subother23}', '${subother24}', '${subother25}' on conflict (studentid, cohortid, certificaterevoked, certificatetype) do update set cohortid='${cohortId}', other1='${subother1}', other20='${subother20}';`);
                }
                console.log(addPivotQuery);
                await pool.query(addPivotQuery);
                console.log("xlsxstudentid: ", xlsxstudentid,"tablenameforcerttype:",tablenameforcerttype);  
              }
            }//loop semester number
            //////////////////////////////student upload part////////////////////////////////
          }
          else if (istranscript == true) {
            var isupdateserialnumber = true;
            var isupdateissuedate = false;
            var xlsxstudentid = row['studentid'];
            if (xlsxstudentid == null || xlsxstudentid == undefined) xlsxstudentid = "";
            xlsxstudentid = xlsxstudentid.toString();
            xlsxstudentid = xlsxstudentid.trim();

            var xlsxcohortid = row['cohortid'];
            if (xlsxcohortid == null || xlsxcohortid == undefined) xlsxcohortid = "";
            xlsxcohortid = xlsxcohortid.toString();
            xlsxcohortid = xlsxcohortid.trim();

            var SerialNumber = row['serialnumber'];
            if (SerialNumber == null || SerialNumber == undefined) SerialNumber = "";
            SerialNumber = SerialNumber.toString();
            SerialNumber = SerialNumber.trim();

            var xlsxsdateofissue = row['dateofissue'];
            if (xlsxsdateofissue == null || xlsxsdateofissue == undefined) xlsxsdateofissue = "";
            if (xlsxsdateofissue != "") {
              //console.log(xlsxsdateofissue);
              var isodate = getIso8601TimeForIssue(xlsxsdateofissue + " UTC");
              if (isodate !== "NaN-NaN-NaNTNaN:NaN:NaN-NaN:NaN") {
                console.log("Incorrect date format!", xlsxsdateofissue);
                if (xlsxsdateofissue.split("/").length > 2) {
                  xlsxsdateofissue = xlsxsdateofissue.split("/")[1] + "/" + xlsxsdateofissue.split("/")[0] + "/" + xlsxsdateofissue.split("/")[2];
                }
              }
              if (xlsxsdateofissue.split("-").length > 2 && xlsxsdateofissue.indexOf("T") == -1) {
                xlsxsdateofissue = xlsxsdateofissue.split("-")[2] + "/" + xlsxsdateofissue.split("-")[1] + "/" + xlsxsdateofissue.split("-")[0];
              }
              if (xlsxsdateofissue.split("-").length > 2 && xlsxsdateofissue.indexOf("T") !== -1) {
                xlsxsdateofissue = xlsxsdateofissue.split("T")[0];
                xlsxsdateofissue = xlsxsdateofissue.split("-")[2] + "/" + xlsxsdateofissue.split("-")[1] + "/" + xlsxsdateofissue.split("-")[0];
              }
            }
            if (xlsxsdateofissue != null && xlsxsdateofissue != undefined && xlsxsdateofissue != "") dateofissue = xlsxsdateofissue;
            if (xlsxsdateofissue != "" && glissuedate !== xlsxsdateofissue) {
              isupdateissuedate = true;
              glissuedate = xlsxsdateofissue;
            }

            var xlsxcgpa = row['cgpa'];
            if (xlsxcgpa != null && xlsxcgpa != undefined && xlsxcgpa != "") cgpa = xlsxcgpa;

            var xlsxcpi = row['cpi'];
            if (xlsxcpi != null && xlsxcpi != undefined && xlsxcpi != "") cpi = xlsxcpi;

            var xlsxspecializationone = row['specializationone'];
            if (xlsxspecializationone != null && xlsxspecializationone != undefined && xlsxspecializationone != "") specializationone = xlsxspecializationone;

            var xlsxspecializationtwo = row['specializationtwo'];
            if (xlsxspecializationtwo != null && xlsxspecializationtwo != undefined && xlsxspecializationtwo != "") specializationtwo = xlsxspecializationtwo;

            var xlsxsmodeofdelivery = row['modeofdelivery'];
            if (xlsxsmodeofdelivery != null && xlsxsmodeofdelivery != undefined && xlsxsmodeofdelivery != "") modeofdelivery = xlsxsmodeofdelivery;

            var xlsxsmediumofstudy = row['mediumofstudy'];
            if (xlsxsmediumofstudy != null && xlsxsmediumofstudy != undefined && xlsxsmediumofstudy != "") mediumofstudy = xlsxsmediumofstudy;

            var xlsxspreparedby = row['preparedby'];
            if (xlsxspreparedby != null && xlsxspreparedby != undefined && xlsxspreparedby != "") preparedby = xlsxspreparedby;

            var xlsxsverifiedby = row['verifiedby'];
            if (xlsxsverifiedby != null && xlsxsverifiedby != undefined && xlsxsverifiedby != "") verifiedby = xlsxsverifiedby;

            var semesternumber = row['semesternumber'];
            if (semesternumber == null || semesternumber == undefined) semesternumber = "";
            semesternumber = semesternumber.toString();
            var subjecttype = row['subjecttype'];
            if (subjecttype == null || subjecttype == undefined) subjecttype = "";

            var subjectname = row['subjectname'];
            if (subjectname == null || subjectname == undefined) subjectname = "";

            var marks = row['marks'];
            if (marks == null || marks == undefined) marks = "";

            var credit = row['credit'];
            if (credit == null || credit == undefined) credit = "";

            var grade = row['grade'];
            if (grade == null || grade == undefined) grade = "";

            var point = row['point'];
            if (point == null || point == undefined) point = "";

            var other1 = row['other1'];
            if ( other1 == null || other1 == undefined) other1 = "";
            var other2 = row['other2'];
            if ( other2 == null || other2 == undefined) other2 = "";
            var other3 = row['other3'];
            if ( other3 == null || other3 == undefined) other3 = "";
            var other4 = row['other4'];
            if ( other4 == null || other4 == undefined) other4 = "";
            var other5 = row['other5'];
            if ( other5 == null || other5 == undefined) other5 = "";
            var other6 = row['other6'];
            if ( other6 == null || other6 == undefined) other6 = "";
            var other7 = row['other7'];
            if ( other7 == null || other7 == undefined) other7 = "";
            var other8 = row['other8'];
            if ( other8 == null || other8 == undefined) other8 = "";
            var other9 = row['other9'];
            if ( other9 == null || other9 == undefined) other9 = "";
            var other10 = row['other10'];
            if ( other10 == null || other10 == undefined) other10 = "";
            var other11 = row['other11'];
            if ( other11 == null || other11 == undefined) other11 = "";
            var other12 = row['other12'];
            if ( other12 == null || other12 == undefined) other12 = "";
            var other13 = row['other13'];
            if ( other13 == null || other13 == undefined) other13 = "";
            var other14 = row['other14'];
            if ( other14 == null || other14 == undefined) other14 = "";
            var other15 = row['other15'];
            if ( other15 == null || other15 == undefined) other15 = "";
            var other16 = row['other16'];
            if ( other16 == null || other16 == undefined) other16 = "";
            var other17 = row['other17'];
            if ( other17 == null || other17 == undefined) other17 = "";
            var other18 = row['other18'];
            if ( other18 == null || other18 == undefined) other18 = "";
            var other19 = row['other19'];
            if ( other19 == null || other19 == undefined) other19 = "";
            var other20 = row['other20'];
            if ( other20 == null || other20 == undefined) other20 = "";
            var other21 = row['other21'];
            if ( other21 == null || other21 == undefined) other21 = "";
            var other22 = row['other22'];
            if ( other22 == null || other22 == undefined) other22 = "";
            var other23 = row['other23'];
            if ( other23 == null || other23 == undefined) other23 = "";
            var other24 = row['other24'];
            if ( other24 == null || other24 == undefined) other24 = "";
            var other25 = row['other25'];
            if ( other25 == null || other25 == undefined) other25 = "";
            var other26 = row['other26'];
            if ( other26 == null || other26 == undefined) other26 = "";
            var other27 = row['other27'];
            if ( other27 == null || other27 == undefined) other27 = "";
            var other28 = row['other28'];
            if ( other28 == null || other28 == undefined) other28 = "";
            var other29 = row['other29'];
            if ( other29 == null || other29 == undefined) other29 = "";
            var other30 = row['other30'];
            if ( other30 == null || other30 == undefined) other30 = "";
            var other31 = row['other31'];
            if ( other31 == null || other31 == undefined) other31 = "";
            var other32 = row['other32'];
            if ( other32 == null || other32 == undefined) other32 = "";
            var other33 = row['other33'];
            if ( other33 == null || other33 == undefined) other33 = "";
            var other34 = row['other34'];
            if ( other34 == null || other34 == undefined) other34 = "";
            var other35 = row['other35'];
            if ( other35 == null || other35 == undefined) other35 = "";
            var other36 = row['other36'];
            if ( other36 == null || other36 == undefined) other36 = "";
            var other37 = row['other37'];
            if ( other37 == null || other37 == undefined) other37 = "";
            var other38 = row['other38'];
            if ( other38 == null || other38 == undefined) other38 = "";
            var other39 = row['other39'];
            if ( other39 == null || other39 == undefined) other39 = "";
            var other40 = row['other40'];
            if ( other40 == null || other40 == undefined) other40 = "";
            
            var semesother1 = row['semesother1'];
            if (semesother1 == null || semesother1 == undefined) semesother1 = "";
            var semesother2 = row['semesother2'];
            if (semesother2 == null || semesother2 == undefined) semesother2 = "";
            var semesother3 = row['semesother3'];
            if (semesother3 == null || semesother3 == undefined) semesother3 = "";
            var semesother4 = row['semesother4'];
            if (semesother4 == null || semesother4 == undefined) semesother4 = "";
            var semesother5 = row['semesother5'];
            if (semesother5 == null || semesother5 == undefined) semesother5 = "";
            var semesother6 = row['semesother6'];
            if (semesother6 == null || semesother6 == undefined) semesother6 = "";
            var semesother7 = row['semesother7'];
            if (semesother7 == null || semesother7 == undefined) semesother7 = "";
            var semesother8 = row['semesother8'];
            if (semesother8 == null || semesother8 == undefined) semesother8 = "";
            var semesother9 = row['semesother9'];
            if (semesother9 == null || semesother9 == undefined) semesother9 = "";
            var semesother10 = row['semesother10'];
            if (semesother10 == null || semesother10 == undefined) semesother10 = "";
            var semesother11 = row['semesother11'];
            if (semesother11 == null || semesother11 == undefined) semesother11 = "";
            var semesother12 = row['semesother12'];
            if (semesother12 == null || semesother12 == undefined) semesother12 = "";
            var semesother13 = row['semesother13'];
            if (semesother13 == null || semesother13 == undefined) semesother13 = "";
            var semesother14 = row['semesother14'];
            if (semesother14 == null || semesother14 == undefined) semesother14 = "";
            var semesother15 = row['semesother15'];
            if (semesother15 == null || semesother15 == undefined) semesother15 = "";
            var semesother16 = row['semesother16'];
            if (semesother16 == null || semesother16 == undefined) semesother16 = "";
            var semesother17 = row['semesother17'];
            if (semesother17 == null || semesother17 == undefined) semesother17 = "";
            var semesother18 = row['semesother18'];
            if (semesother18 == null || semesother18 == undefined) semesother18 = "";
            var semesother19 = row['semesother19'];
            if (semesother19 == null || semesother19 == undefined) semesother19 = "";
            var semesother20 = row['semesother20'];
            if (semesother20 == null || semesother20 == undefined) semesother20 = "";
            var semesother21 = row['semesother21'];
            if (semesother21 == null || semesother21 == undefined) semesother21 = "";
            var semesother22 = row['semesother22'];
            if (semesother22 == null || semesother22 == undefined) semesother22 = "";
            var semesother23 = row['semesother23'];
            if (semesother23 == null || semesother23 == undefined) semesother23 = "";
            var semesother24 = row['semesother24'];
            if (semesother24 == null || semesother24 == undefined) semesother24 = "";
            var semesother25 = row['semesother25'];
            if (semesother25 == null || semesother25 == undefined) semesother25 = "";


            xlsxcohortid = xlsxcohortid.replace("'", "`");
            cgpa = cgpa.toString().replace("'", "`");
            cpi = cpi.toString().replace("'", "`");

            specializationone = specializationone.replace("'", "`");
            specializationtwo = specializationtwo.replace("'", "`");
            modeofdelivery = modeofdelivery.replace("'", "`");
            mediumofstudy = mediumofstudy.replace("'", "`");
            dateofissue = dateofissue.replace("'", "`");
            preparedby = preparedby.replace("'", "`");
            verifiedby = verifiedby.replace("'", "`");
            semesternumber = semesternumber.replace("'", "`");
            subjecttype = subjecttype.toString().replace("'", "`");
            subjectname = subjectname.toString().replace("'", "`");

            // if (xlsxstudentid == "") {
            //   var obj = {
            //     Status: 400,
            //     message: "Studentid field value is required."
            //   };
            //   return res.json(obj);
            // }

            // if (xlsxcohortid == "") {
            //   var obj = {
            //     Status: 400,
            //     message: "Cohortid field value is required."
            //   };
            //   return res.json(obj);
            // }

            try{
              var addSemesterQuery = format(`INSERT INTO SEMESTERTRANSCRIPT (cohortid,studentid,semesternumber,subjecttype,subjectcode,marks,credit,grade,point,accountid,other1,other2,other3,other4,other5,other6,other7,other8,other9,other10,other11,other12,other13,other14,other15,other16,other17,other18,other19,other20,other21,other22,other23,other24,other25)
                                      SELECT '${xlsxcohortid}','${xlsxstudentid}','${semesternumber}','${subjecttype}', '${subjectname}', '${marks}','${credit}','${grade}','${point}','${puserid}','${semesother1}','${semesother2}','${semesother3}','${semesother4}','${semesother5}','${semesother6}','${semesother7}','${semesother8}','${semesother9}','${semesother10}','${semesother11}','${semesother12}','${semesother13}','${semesother14}','${semesother15}','${semesother16}','${semesother17}','${semesother18}','${semesother19}','${semesother20}','${semesother21}','${semesother22}','${semesother23}','${semesother24}','${semesother25}' on conflict (accountid, cohortid, studentid, semesternumber, subjecttype, subjectcode) do update set studentid='${xlsxstudentid}' RETURNING id;`);
              await pool.query(addSemesterQuery);
            }
            catch(err){

            }           

            // if (cgpa != "" && cpi != "" && specializationone != "" && specializationtwo != "" && modeofdelivery != "" && mediumofstudy != "" && dateofissue != "" && preparedby != "" && verifiedby != "") {
            let describeUpdateContent =`cgpa='${cgpa}', cpi='${cpi}', specializationone='${specializationone}', specializationtwo='${specializationtwo}', modeofdelivery='${modeofdelivery}', mediumofstudy='${mediumofstudy}', dateofissue='${dateofissue}', preparedby='${preparedby}', verifiedby='${verifiedby}', other1='${other1}', other2='${other2}', other3='${other3}', other4='${other4}', other5='${other5}', other6='${other6}', other7='${other7}', other8='${other8}', other9='${other9}', other10='${other10}', other11='${other11}', other12='${other12}', other13='${other13}', other14='${other14}', other15='${other15}', other16='${other16}', other17='${other17}', other18='${other18}', other19='${other19}', other20='${other20}', other21='${other21}', other22='${other22}', other23='${other23}', other24='${other24}', other25='${other25}', other26='${other26}', other27='${other27}', other28='${other28}', other29='${other29}', other30='${other30}', other31='${other31}', other32='${other32}', other33='${other33}', other34='${other34}', other35='${other35}', other36='${other36}', other37='${other37}', other38='${other38}', other39='${other39}', other40='${other40}'`;

            var addTranscriptDescribeQuery = format(`INSERT INTO transcriptdescribe (cohortid,studentid, semesternumber,cgpa,cpi,specializationone,specializationtwo,modeofdelivery,mediumofstudy,dateofissue,preparedby,verifiedby,accountid,other1,other2,other3,other4,other5,other6,other7,other8,other9,other10,other11,other12,other13,other14,other15,other16,other17,other18,other19,other20,other21,other22,other23,other24,other25,other26,other27,other28,other29,other30,other31,other32,other33,other34,other35,other36,other37,other38,other39,other40)
                                              SELECT '${xlsxcohortid}','${xlsxstudentid}','${semesternumber}','${cgpa}','${cpi}','${specializationone}','${specializationtwo}', '${modeofdelivery}', '${mediumofstudy}','${dateofissue}','${preparedby}','${verifiedby}','${puserid}','${other1}','${other2}','${other3}','${other4}','${other5}','${other6}','${other7}','${other8}','${other9}','${other10}','${other11}','${other12}','${other13}','${other14}','${other15}','${other16}','${other17}','${other18}','${other19}','${other20}','${other21}','${other22}','${other23}','${other24}','${other25}','${other26}','${other27}','${other28}','${other29}','${other30}','${other31}','${other32}','${other33}','${other34}','${other35}','${other36}','${other37}','${other38}','${other39}','${other40}' on conflict(accountid, cohortid, studentid, semesternumber) do update set ${describeUpdateContent} RETURNING id;`);
            // console.log(addTranscriptDescribeQuery);
            await pool.query(addTranscriptDescribeQuery);              
            // }

            if (isupdateserialnumber == true) {
              var updateSerialQuery = format(`update public.cohortmembers_transcript set serialnumber='${SerialNumber}' where  cohortid in (select id from cohort where cohortid='${xlsxcohortid}' and accountid='${puserid}') and studentid in 
              (select id from student where studentid='${xlsxstudentid}' and accountid='${puserid}');`);
              //console.log(updateSerialQuery);
              await pool.query(updateSerialQuery);
              //isupdateserialnumber=false;
            }

            if (xlsxsdateofissue != "") {
              let updateIssueDateQuery;
              if(semesternumber == ''){
                updateIssueDateQuery = format(`update public.cohortmembers_transcript set issueddate='${xlsxsdateofissue}' where  cohortid in (select id from cohort where cohortid='${xlsxcohortid}' and accountid='${puserid}') and studentid in 
                (select id from student where studentid='${xlsxstudentid}' and accountid='${puserid}');`);
              }
              else{
                if (roman_list_new.indexOf(semesternumber) !== -1){
                  updateIssueDateQuery = format(`update public.cohortmembers_transcript set issueddate='${xlsxsdateofissue}' where  cohortid in (select id from cohort where cohortid='${xlsxcohortid}' and semesternumber='${roman_list_new.indexOf(semesternumber)}' and accountid='${puserid}') and studentid in 
                    (select id from student where studentid='${xlsxstudentid}' and accountid='${puserid}');`);
                }
                else{
                  // if (isNaN(parseInt(semesternumber))){
                  //   var obj = {
                  //     Status: 400,
                  //     message: 'Semesternumber is invalid format.'
                  //   }
                  //   return res.json(obj);
                  // }
                  // else{
                    updateIssueDateQuery = format(`update public.cohortmembers_transcript set issueddate='${xlsxsdateofissue}' where  cohortid in (select id from cohort where cohortid='${xlsxcohortid}' and semesternumber='${semesternumber}' and accountid='${puserid}') and studentid in 
                    (select id from student where studentid='${xlsxstudentid}' and accountid='${puserid}');`);
                  // }
                }
              }              
              //console.log(updateIssueDateQuery);
              await pool.query(updateIssueDateQuery);
            }
            console.log(xlsxstudentid);
          }
        }
      }
      let email_body = `<p style="color: black;">Uploading Students data is completed successfully for cohortid ${params[0]['cohortid']}</p>`;
      let email_subject = "Upload Students Result";

      await utils.sendEmail(email_body, email_subject, contact_email, smtpaccount, puserid, "mailer_downloadcertificate", true);
      return;
    }
    else {
      return res.json({ Status: 400, message: "Please use the exact template file."});
    }
  }
  catch (err) {
    console.log("uploadStudent err = : ", err);
    let email_body = `<p style="color: black;">There is an error in uploading students.</p><p style="color: black;">Error: ${err.message}</p>`
    let email_subject = "Upload Students Result";
    const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
    let logfilename=logfiledir+puserid+"/sendcertificate.log";
    mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
    return;
  }
}

async function check_student_validation(puserid, data){
  try{
    let err_message = [];
    let check_list_1 = ['studentid', 'firstname', 'email', 'cohortid', 'cohortname'];
    let check_list_2 = ['studentid', 'cohortid'];
    let roman_list_new = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];
    for (const [index, row] of data.entries()) {
      var istranscript = row['istranscript'];
      if (istranscript == null || istranscript == undefined || istranscript == "") istranscript = false;
      var isgrade = row['isgrade'];
      if (isgrade == null || isgrade == undefined || isgrade == "") isgrade = false;
      if (istranscript == false){
        check_list_1.forEach((key) => {
          if (row[key] == undefined || row[key] == null || row[key] == "") {
            console.log("check_student_validation value = : ", row[key], "at index:", index);
            if(puserid=="20006") {
              if(key!="studentid") err_message.push(`${key} field of studentid ${row['studentid']} is required.`);
            }
            else if(puserid=="20122" || puserid=="25") { //rv
              if (key == "studentid") err_message.push("Studentid is required.");
              //row['cohortid'] = "rv";
              //row['cohortname'] = "rv";
            }
            else {
              if (key == "studentid") err_message.push("Studentid is required.");
              else err_message.push(`${key} field of studentid ${row['studentid']} is required.`);
            }
          }
          else {
            if (key == "email") {
              if (validator.validate(row[key].trim()) == false) {              
                err_message.push(`Email(${row['email']}) of studentid ${row['studentid']} is incorrect format.`);
              }
            }            
          }          
        });
        if (puserid == "20094"){
          if (row['sex'] == null || row['sex'] == undefined || row['sex'] == "") err_message.push(`The sex of Roll Number ${row['studentid']} is not defined.`);
          else if(row['sex'].trim().toLowerCase() != "f" && row['sex'].trim().toLowerCase() != "m" ) err_message.push(`The sex of Roll Number ${row['studentid']} is invalid.`);
        }
      }
      else if (istranscript == true) {
        let checkQuery = format(`select id from cohort where cohortid='${row['cohortid']}' and accountid='${puserid}'`);
        let checkResult = await pool.query(checkQuery);
        if (checkResult.rowCount == 0) {
          err_message.push("There is no selected cohort. Please retry after upload student excel sheet.");
        }
        check_list_2.forEach((key) => {
          let semesternumber = row['semesternumber'];
          if (row['semesternumber'] == null || row['semesternumber'] == undefined) semesternumber = "";
          if (row[key] == undefined || row[key] == null || row[key] == "") {
            if (key == "studentid")
            err_message = `${key} field of ${row['studentid']} is required.`
          }
          if (semesternumber != "") {
            if (roman_list_new.indexOf (semesternumber) == -1 && isNaN(parseInt(semesternumber))) err_message.push(`Semesternumber of studentid ${row['studentid']}is invalid format`);
          }          
        })
      }      
    }  
    console.log("error message: ",err_message);
    return err_message.join("<br/>");  
  }
  catch(err){
    console.log("Check Stduent Validation Error: ", err.message);
    return err.message;
  }
}

function check_studentid_duplicate(data, accountid){
  if(accountid=="20083")
  {
    let temp1 = data.map(a => a.studentid);
    let temp2 = data.map(a => a.istranscript);
    if (temp2.includes(true)) return "";
    let sorted_arr = temp1.slice().sort(); 
    let results = [];
    for (let i = 0; i < sorted_arr.length - 1; i++) {
      if (sorted_arr[i + 1] == sorted_arr[i]) {
        results.push(sorted_arr[i]);
      }
    }
    if (results.length > 0)  return results.join(", ");
    else return "";
  }
  else return "";
}

function change_excel_column_name_for_student(data){
  let collegefieldreplace = {
    'spjimr': {
      'issuedate': 'subother1'
    },
    'nism': {
      'pannumber': 'other3',
      'registnumber': 'serialnumber',
      'testdate': 'coursestartdate',
      'testcentre': 'coursename',
      'language': 'department',
      'remarks': 'other1',
      'date': 'coursecompletiondate',
      'place': 'other2',
      'validtill': 'expiredate',
      'hindi_competencyname': 'phdtitle'
    },
    'ljku_spr': {
      'pagenumber': 'subother1',
      'studenttype': 'subother2',
      'statementnumber': 'subother3',
      'monthandyear': 'subother4',
      'dateofissue': 'subother5',
      'filename': 'subother6'
    },    
    'ljkstudent': {
      'seatnumber': 'other1',
      'enrollmentnumberold': 'other2',
      // 'statementnumber': 'other3',
      'examperiod': 'other4',
      'school': 'other5',
      'instruction': 'other6',
      'program': 'other7',
      'admissiondate': 'other8',
      'ppi': 'other9'
    },
    'ljktranscript': {
      'creditoffered': 'other1',
      'creditearned': 'other2',
      'gradepointearned': 'other3',
      'spi': 'other4',
      'result': 'other5',
      'class': 'other6'
    },
    'ljknewtranscript': {
      'semestercreditoffered': 'other1',
      'semestercreditearned': 'other2',
      'semestergradepointearned': 'other3',
      'spi': 'other4',
      'progressivecreditoffered': 'other5',
      'progressivecreditearned': 'other6',
      'progressivegradepointearned': 'other7',
      'ppi': 'other8',
      'cgpacreditoffered': 'other9',
      'cgpacreditearned': 'other10',
      'cgpagradepointearned': 'other11',
      'cgpappi': 'other12',
      'result': 'other13',
      'class': 'other14',
      'specialization': 'other15',
      'backlog1': 'other16',
      'backlog2': 'other17',
      'backlog3': 'other18',
      'backlog4': 'other19',
      'backlog5': 'other20',
      'backlog6': 'other21',
      'backlog7': 'other22',
      'backlog8': 'other23',
      'backlog9': 'other24',
      'backlog10': 'other25',
      'mooccoursetitle1': 'other26',
      'platform1': 'other27',
      'universityname1': 'other28',
      'moocresult1': 'other29',
      'mooccoursetitle2': 'other30',
      'platform2': 'other31',
      'universityname2': 'other32',
      'moocresult2': 'other33',
      'mooccoursecompleted': 'other34',
      'mooccreditearned': 'other35',
      'cumulativecoursecompleted': 'other36',
      'cumulativecredit': 'other37',
      'statementnumber': 'other38',
      'seatnumber': 'other39',
      'examperiod': 'other40',
      'cec': 'semesother1',
      'cec out of': 'semesother21',
      'uniexam': 'semesother2',
      'uniexam out of': 'semesother22',
      'total': 'semesother3',
      'total out of': 'semesother23',
      'theorygrade': 'semesother4',
      'practicalgrade': 'semesother5',
      'overallgrade': 'semesother6',
      'coursecredit': 'semesother7',
      'backlogE': 'semesother8',
      'backlogM': 'semesother9',
      'backlogI': 'semesother10',
      'backlogV': 'semesother11',
      'practical': 'semesother12',
      'modularexamination': 'semesother13',
      'experientiallearning': 'semesother14',
      'projectviva': 'semesother15',
      'theorycredit': 'semesother16',
      'practicalcredit': 'semesother17',
      'see': 'semesother18',
      'internaltheory': 'semesother19',
      'internalpractical': 'semesother20'
    },
    'ljktranscript2': {
      'coursecode': 'subjectname',
      'coursetitle': 'subjecttype',
      'experientallearning': 'semesother3',
      'modularexamination': 'semesother4',
      'projectviva': 'semesother5',
      'gradepoint': 'semesother6',
      'seatno': 'other1',
      'creditearned': 'other2',
      'totalgradepoint': 'other3',
      'spi': 'other4'
    },
    'bennett_degree': {
      'hindi_firstname': 'lang_firstname',
      'hindi_competencyname': 'lang_competencyname',
      'convocation_year': 'other1',
      'hindi_convocation_year': 'lang_other1',
      'hindi_convocation_date': 'lang_other2',
      'program': 'other2',
      'year_of_admission': 'other3',
      'date_of_birth': 'other4',
      'school': 'other5',
      'programme_duration': 'other6',
      'semester': 'other7',
      'exam_type': 'other8',
      'status': 'other9',
      'batch': 'other10'
    },    
    'bennett_transcript': {
      'code': 'subjectname',
      'name': 'subjecttype',
      'earned_credit': 'point',
      'academic_year': 'semesother1',
      'total_credit_registered': 'other1',
      'total_credit_earned': 'other2',
      'transcript_year': 'other3',
      'generated_on': 'other4'
    },
    'galgotias_hindi': {
      'division': 'other1',
      'mark': 'other2',
      'month_year_one': 'other3',
      'month_year_two': 'other4',
      'class': 'other5',
      'hindi_firstname': 'lang_firstname',
      'hindi_competencyname': 'lang_competencyname',
      'hindi_division': 'lang_other1',
      'hindi_mark': 'lang_other2',
      'hindi_month_year_one': 'lang_other3',
      'hindi_class': 'lang_other4',
      'hindi_coursename': 'lang_coursename',
      'hindi_phdtitle': 'lang_phdtitle',
      'front': 'other6',
      'back': 'other7'
    },
    'galgotias_degree': {
      'hindi_firstname': 'subother1',
      'programmename': 'competencyname',
      'hindi_programmename': 'subother2',
      'specialization': 'subother3',
      'hindi_specialization': 'subother4',
      'thesis': 'subother5',
      'hindi_thesis': 'subother6',      
      'examyear': 'subother7',
      'hindi_examyear': 'subother8',
      'convocationmonthyear': 'subother9',
      'division': 'subother10',
      'hindi_division': 'subother11',
      'cgpa': 'subother12',
      'hindi_cgpa': 'subother13',
      'duration': 'subother14',
      'hindi_duration': 'subother15',
      'fontname': 'subother16'
    },
    'galgotias_multiple_pdf': {
      'startstring': 'subother1',
      'endstring': 'subother2',
      'endCount': 'subother3',
      'programmename': 'subother4',
      'specialization': 'subother5',
      'examyear': 'subother6'
    },
    'galgotias_gradecard_student': {
      'admissionnumber': 'other1',
      'schoolname': 'other2',
      'secondpage':'subother20'
    },
    'galgotias_gradecard_transcript': {
      'semesterseason' : 'other1',
      'semesteryear' : 'other2',
      'coursenumber' : 'semesother1',
      'coursecode' : 'subjectname',
      'coursename' : 'subjecttype',
      'creditearned' : 'point',
      'total_credit_registered' : 'other3',
      'total_credit_earned' : 'other4',
      'sgpa' : 'other5'
    },
    'galgotias_marksheet_student': {
      'admissionnumber': 'other1',
      'distinction': 'other2',
      'reappear': 'other3',
      'reappearyear': 'other4',
      'examinationdate': 'other5',
      'preparedby': 'other6',
      'checkedby': 'other7',
      'passedorfail': 'other8',
      'marksobtained': 'other9',
      'totalmarks': 'other10',
    },
    'galgotias_marksheet_transcript': {
      'coursenumber': 'semesother1',
      'coursecode': 'subjectname',
      'coursename': 'subjecttype',
      'maxmarks': 'credit',
      'minmarks': 'grade',
      'marks': 'point',
      'checkedby': 'verifiedby'
    },
    'galgotias_migration_student': {
      'admissionnumber': 'other1',
      'duration': 'other2',
      'startyear': 'other3',
      'endyear': 'other4',
      'referencenumber': 'other5'
    },
    'miet_student': {
      'registrationnumber': 'other1',
      'examinationdate': 'other2',
      'resultnumber': 'other3',
      'resultdate': 'other4',
      'pc': 'other5',
      'cgpa': 'other6',
      'division': 'other7',
      'status': 'other8',
      'date': 'other9'
    },
    'miet_transcript': {
      'coursecode': 'subjectname',
      'course': 'subjecttype',
      'examdate': 'semesother1',
      'classification': 'other1',
      'programme': 'other2',
      'coursename': 'other3'
    },
    'manav': {
      'class': 'other1',
      'totalscore': 'other2',
      'earnedscore': 'other3',
      'hindi_coursename': 'lang_coursename',
      'hindi_competencyname': 'lang_competencyname',
      'hindi_firstname': 'lang_firstname',
      'hindi_fathername': 'lang_fathername',
      'hindi_facultyname': 'lang_facultyname',
      'hindi_convocationdate': 'lang_other1',
      'hindi_class': 'lang_other2'
    },
    'cutm_student': {
      'programme': 'competencyname',
      'academicyear': 'subother1',
      'batch': 'subother2',
      'school': 'subother3',
      'branch': 'subother4',
      'class': 'subother5',
      'admissiondate': 'subother21',
      'sports_num': 'subother6',
      'sports_code': 'subother7',
      'sports_desc': 'subother8',
      'sports_marks': 'subother9',
      'sports_grade': 'subother10',
      'credithour': 'subother11',
      'coursework': 'subother12',
      'noncreditcourse': 'subother13',
      'masterresearch': 'subother14',
      'overallgrade': 'subother15',
      'equivalentpercentage': 'subother16',
      'vivadate': 'subother17',
      'chairman': 'subother18',
      'examination': 'subother19',
      'thesis': 'subother20',
      'distinction_one': 'subother22',
      'distinction_two': 'subother23'      
    },
    'cutm_transcript': {
      'sl_number': 'semesother1',
      'type': 'semesother2',
      'subjectcode': 'subjecttype',
      'th': 'semesother3',
      'pr': 'semesother4',
      'pj': 'semesother5',
      'theory_full': 'semesother6',
      'theory_pass': 'semesother7',
      'theory_exam': 'semesother8',
      'theory_sessional': 'semesother9',
      'theory_total': 'semesother10',
      'practical_full': 'semesother11',
      'practical_pass': 'semesother12',
      'practical_exam': 'semesother13',
      'practical_sessional': 'semesother14',
      'practical_total': 'semesother15',
      'totalcredit': 'other1',
      'cumulative': 'other2',
      'sgpa': 'other3',
      'gpa': 'other4',
      'ogpa': 'other5',
      'semesteryear': 'other6',
      'total_marks': 'other7',
      'total': 'other8',
      'result': 'other9',
      'distinction': 'other10'
    },
    'medi_main': {
      'specialization': 'coursename',
      'subcompetencyname': 'other1',
      'convocationdate': 'convocation_date',
      'division': 'department',
      'examyear': 'coursecompletiondate',
      'hindi_firstname': 'lang_firstname',
      'hindi_fathername': 'lang_fathername',
      'hindi_competencyname': 'lang_competencyname',
      'hindi_specialization': 'lang_coursename',
      'hindi_subcompetencyname': 'lang_other1',
      'hindi_facultyname': 'lang_facultyname',
      'hindi_division': 'lang_department',
      'hindi_examyear': 'lang_other2'
    },
    'medi_phd': {
      'thesis': 'coursename',
      'presentationdate': 'coursecompletiondate',
      'convocationdate': 'convocation_date'
    },
    'gcu_student': {
      'specialization': 'coursename',
      'examyear': 'coursecompletiondate',
      'grade': 'subother1',
      'cgpa': 'subother2',
      'thesis': 'subother3',
      'subject': 'subother4',
      'convocationmonthday': 'subother5',
      'convocationyear': 'subother6',
      'convocationdate': 'subother7',
      'internshipcompletiondate': 'subother8',
    },
    'iilm_gurugram_student': {      
      'degreenumber': 'subother5',
      'studentcode': 'subother6',
      'preparedby': 'subother7',
      'verification': 'subother8',
      'controllerofexamination': 'subother9'
    },
    'iilm_gurugram_transcript': {
      'trimesternumber': 'semesternumber',
      'coursecode': 'subjecttype',
      'coursename': 'subjectname',
      'gradeobtained': 'semesother1',
      'gradepoint': 'semesother2',
      'creditpoint': 'semesother3',
      'totalcredit': 'other1',
      'totalcreditpoint': 'other2',
      'sgpa': 'other3'
    },
    'iilm_gurugram_migration': {
      'duration': 'subother1'
    },
    'iilm_gurugram_medal': {
      "programmename":"competencyname",
      "certificatetype":"subother1",
      "awardtype":"subother2",
      "projecttitle":"subother3",
      "specialization":"subother4",
      "medaldate":"subother5",
    },
    'iilm_gurugram_bonafide': {
      'duration': 'subother1',
      'address': 'subother2'
    },
    'iilm_gurugram_phd': {
      "programmename":"competencyname",
      "specialization":"subother10",
      "completionYear":"subother11",
    },
    'iilm_gurugram_degree': {
      "programmename":"competencyname",
      "specialization":"subother10",
      "completionYear":"subother11",
    },
    'iilm_gn_bonafide': {
      'programme': 'competencyname',
      'year': 'subother1',
      'sessionyear': 'subother2',
      'purpose': 'subother3'
    },
    'iilm_gn_degree': {
      'programmename': 'competencyname',
      'convocationdate': 'subother1'
    },
    'iilm_gn_migration': {
      'programme': 'competencyname',
      'migrationnumber': 'subother1',
      'passingyear': 'subother2',
      'division': 'subother3'
    },
    'iilm_gn_transfer': {
      'programme': 'competencyname',
      'programmelength': 'subother1',
      'transfrerid': 'subother2',
      'yearrange': 'subother3',
      'division': 'subother4',
      'currentyear': 'subother5'
    },
    'iilm_gn_relieving': {
      'address': 'subother1',
      'organizationdate': 'subother2'
    },
    'iilm_gn_marksheet_student': {
      'batch': 'subother1'
    },
    'iilm_gn_marksheet_transcript': {
      'coursecode': 'subjecttype',
      'coursename': 'subjectname',
      'gradeobtained': 'semesother1',
      'gradepoint': 'semesother2',
      'creditpoint': 'semesother3',
      'totalcredit': 'other1',
      'totalcreditpoint': 'other2',
      'sgpa': 'other3'
    },
    'iilm_lucknow': {
      'programmename': 'competencyname',
      'batch': 'subother1',
      'programmeduration': 'subother2'
    },
    'patil': {
      'programme': 'competencyname',
      'specialization': 'coursename',
      'examdate': 'subother1',
      'convocationday': 'subother2',
      'convocationmonth': 'subother4',
      'convocationyear': 'subother3',
      'cgpa': 'subother5',
      'class': 'subother6',
      'credit': 'subother7'
    },
    'ct': {
      'courseduration': 'subother1',
      'examinationdate': 'subother2',
      'class': 'subother3',
      'thesis': 'subother4',
      'schoolname': 'coursename',
      'mode': 'subother5',
      'certificatenumber': 'serialnumber',
      'disciplinename': 'subother6',
      'convocationdate': 'subother7'
    },
    'rv': {
      'rv_college': 'subother1',
      'pg_ug': 'subother2',
      'programmename': 'subother3',
      'specialization': 'subother4',
      'year': 'subother5',
      'regular_supplementary_fast_track': 'subother6',
      'odd_even': 'subother7',
      'semester': 'subother8',
      'seatnumber': 'subother9',
      'yearofjoining': 'subother10',
      'yearofcompletion': 'subother11',
      'applicationid': 'subother12'
    },
    'rv_cesd': {
      'programmename': 'subother1',
      'year': 'subother2',
      'apaar_id': 'subother3',
      'startdate': 'subother4',
      'enddate': 'subother5'
    },
    'snu': {
      'programme': 'competencyname',
      'major': 'coursename',
      'minor': 'subother1',
      'convocationdate': 'subother2',
      'governmentid':'subother3',
      'deliverymode':'subother4',
      'admissiondate':'subother5',
      'examcentrename':'subother6',
      'dateofcompletion':'subother7',
    },
    'snu_transcript': {
      'programme': 'subother7',
      'major': 'subother2',
      'minor': 'subother3',
      'specialization': 'subother4',
      'dateofissue':'subother5',
      'pagenumber':'subother1',
      'studenttype':'subother6'
    },
    'sbup_biib': {
      'gender':'sex',
      'courseduration': 'subother1',
      'programme': 'competencyname',
      'programmeabbv': 'subother2', 
      'main_institutename':'subother3',
      'sub_institutename':'subother11',
      'examdates':'subother4',
      'major':'subother5',
      'specialization':'subother6',
      'class':'subother7',
      'characterassessment':'subother8',
      'convocationdate':'subother9',
      'certificatenumber': 'subother10',
    },
    'sbup_bimhrd': {
      'gender':'sex',
      'courseduration': 'subother1',
      'programme': 'competencyname',
      'programmeabbv': 'subother2', 
      'main_institutename':'subother3',
      'sub_institutename':'subother11',
      'examdates':'subother4',
      'major':'subother5',
      'specialization':'subother6',
      'class':'subother7',
      'characterassessment':'subother8',
      'convocationdate':'subother9',
      'certificatenumber': 'subother10',
    },
    'sbup_bimm': {
      'gender':'sex',
      'courseduration': 'subother1',
      'programme': 'competencyname',
      'programmeabbv': 'subother2', 
      'main_institutename':'subother3',
      'sub_institutename':'subother11',
      'examdates':'subother4',
      'major':'subother5',
      'specialization':'subother6',
      'class':'subother7',
      'characterassessment':'subother8',
      'convocationdate':'subother9',
      'certificatenumber': 'subother10',
    },
    'sbup_bitm': {
      'gender':'sex',
      'courseduration': 'subother1',
      'programme': 'competencyname',
      'programmeabbv': 'subother2', 
      'main_institutename':'subother3',
      'sub_institutename':'subother11',
      'examdates':'subother4',
      'major':'subother5',
      'specialization':'subother6',
      'class':'subother7',
      'characterassessment':'subother8',
      'convocationdate':'subother9',
      'certificatenumber': 'subother10',
    },
    'sbup_pdf': {
      'Mr/Ms': 'sex',
      'certificatenumber': 'subother1',
      'pagenumber': 'subother2',
    },
    'sbup_bimhrd_pdf': {
      'gender':'sex',
      'programme': 'competencyname',
      'certificatenumber': 'subother1',
      'pagenumber': 'subother2',
    },
    'sbup_bimm_pdf': {
      'gender':'sex',
      'programme': 'competencyname',
      'certificatenumber': 'subother1',
      'pagenumber': 'subother2',
    },
    'sbup_bitm_pdf': {
      'gender':'sex',
      'programme': 'competencyname',
      'certificatenumber': 'subother1',
      'pagenumber': 'subother2',
    },
    'apex': {
      'institutename':'subother1',
      'programmename':'subother2',
      'specialization':'subother3',
      'thesis':'subother4',
      'completionyear':'subother5',
      'convocationdate':'subother6',
      'division':'subother7'
    },
    'rvim_gradecard_pdf': {
      'startstring': 'subother1',
      'endstring': 'subother2',
      'endcount': 'subother3',
      'programmename': 'subother4'
    },
    'nicmar_gradecard': {
      'pagenumber': 'subother1'      
    },
    'nicmar_provisional': {
      'programmename': 'competencyname',
      'cgpa':'subother1',
      'gender':'subother2',
      'dateofissue':'subother3'
    },
    'nicmar_degree': {
      'gender':'sex',
      'programmename': 'competencyname',
      'convocationdate': 'convocation_date',
      'cgpa':'subother1',
      'exammonthandyear':'subother2',
      'outof':'subother3',
      'class': 'subother4',
      'specialization': 'subother5',
      'convocationyear': 'subother6',
      'certificateid': 'subother7'
    },
    'iilm_gn_degree_2023': {
      'programme': 'competencyname',
      'migrationnumber': 'subother1',
      'passingyear': 'subother2',
      'division': 'subother3'
    },
    'iiit_bhopal_merit_medal': {
      'programmename': 'competencyname',
      'batchyear': 'subother1',
      'awardtype': 'subother2'
    },
    'gjust_phd': {
      'Degree_Sr_No':'serialnumber',
      'REGN_NO':'studentid',
      'NAME':'firstname',
      'Father_NAME':'fathername',
      'Course_NAME':'other1',
      'FACULTY_Name': 'facultyname',
      'TITLE': 'phdtitle',
      'DATE': 'convocation_date',
      'GENDER':'other2',
      'H_NAME': 'lang_firstname',
      'H_FNAME': 'lang_fathername',
      'H_Course_Name': 'lang_coursename',
      'H_FACULTY_Name': 'lang_facultyname',
      'H_TITLE':'lang_phdtitle',
      'H_DATE':'lang_other1',
      'H_GENDER':'lang_other2',
      'Course_Duration':'other3'
    },
    'gjust_ug_pg': {
      'DEGREE_NO':'serialnumber',
      'ROLL':'studentid',
      'NAME':'firstname',
      'FNAME':'fathername',
      'crse_strm':'other1',
      'crse':'other2',
      'DEPT_NM':'other3',
      'BATCH':'other4',
      'D_DATE': 'convocation_date',
      'SESSION':'other5',
      'DIVISION':'other6',
      'DIST':'other7',
      'spec':'other8',
      'H_NAME': 'lang_firstname',
      'H_FNAME': 'lang_fathername',
      'H-CRSE_strm': 'lang_coursename',
      'h_crse':'lang_specializationone',
      'H_DEPT_NM': 'lang_department',
      'H_SESSION1':'lang_other1',
      'H_SESSION2':'lang_other2',
      'H_DATE':'lang_other3',
      'H_DIST':'lang_other5',
      'H_DIVISION':'lang_other4',
      'H_spec':'lang_facultyname'
    },
    'bu_pdf': {
      'pagenumber': 'subother2'
    },
  }
  if("experientialpoints" in data[0]) {
    data.map(function(student){        
      student['other40'] = student['experientialpoints'];
      delete student['experientialpoints']
    })
  }
  if("college" in data[0]){
    let collegename = data[0].college;
    if (collegename.toLowerCase() in collegefieldreplace){
      let tempobj = collegefieldreplace[collegename.toLowerCase()];
      data.map(function(student){
        Object.keys(tempobj).forEach(key => {
          // console.log(key, tempobj[key]);
          student[tempobj[key]] = student[key];
          delete student[key]
        });
      })      
    }       
  }
  return data; 
}

async function fileUploadPng(s3obj,bucket_region,bucket_file,collegeid,p_BucketKey,bucket_name="certonce")
{
  if(bucket_name=="") return "";
  var uploadParams = {Bucket: bucket_name, Key: '', Body: '', ContentType: 'image/png'};
  try
  {
    var fileStream = fs.createReadStream(bucket_file);  
    uploadParams.Body = fileStream;
    var path = require('path');
    var filename= path.basename(bucket_file);
    var suburl=bucket_key_img+collegeid;
    if(p_BucketKey!="")
    {
      suburl=p_BucketKey;      
    }
    uploadParams.Key = suburl+"/"+filename;
    var data=await s3obj.putObject(uploadParams).promise();        
    var bucket_base_url="https://"+bucket_name+".s3."+bucket_region+".amazonaws.com/";
    console.log("image url: ", bucket_base_url+suburl+"/"+filename)
    return bucket_base_url+suburl+"/"+filename;
  }
  catch(err)
  {
    console.log("err uploading ",err);   
    return "" ;
  }
}

///////////
var college_photos_path="/tmp/college_photos";
var storage = multer.diskStorage({
      destination: function (req, file, cb) {
      cb(null, college_photos_path)
    },
    filename: function (req, file, cb) {
      cb(null, Date.now() + '-' +file.originalname )
    }
});
var upload = multer({ storage: storage }).single('file');
//Upload photos from zip file
const getAllFiles = function(dirPath, arrayOfFiles) {
  const path = require("path");
  files = fs.readdirSync(dirPath)

  arrayOfFiles = arrayOfFiles || []

  files.forEach(function(file) {
    if (fs.statSync(dirPath + "/" + file).isDirectory()) {
      arrayOfFiles = getAllFiles(dirPath + "/" + file, arrayOfFiles)
    } else {
      arrayOfFiles.push(dirPath+"/"+file)
    }
  })

  return arrayOfFiles
}

// Function to extract new filename
function getNewFilenameWithoutFirstItem(filename) {
  const parts = filename.split('-');
  // Skip the first element (before the dash)
  return parts.slice(1).join('-');
}


async function downloadPdfFromPdfCo(
  sourcePdfUrl,
  searchString,
  replaceString,
  destinationFile,
  pageCount,
  API_KEY
) {
  
  var os = new os_func();
  const queryPath = "/v1/pdf/edit/replace-text";

  const jsonPayload = {
    name: path.basename(destinationFile),    
    password: "",
    url: sourcePdfUrl,
    searchString,
    replaceString,
    pages:`0-${pageCount-1}`
  };

  const headers = {
    "x-api-key": API_KEY,
    "Content-Type": "application/json",
  };

  try {
    const response = await axios.post(
      `https://api.pdf.co${queryPath}`,
      jsonPayload,
      { headers }
    );

    if (response.data.error === false) {
      
      console.log(response.data.url);
      const downloadStatus = await downloadPdf(response.data.url,destinationFile);
      if(downloadStatus)
      {
        console.log(`Generated PDF file saved as "${destinationFile}".`);
        return true; // Return success
      }
      else
      {
        return false;
      }
    } else {
      console.error(response.data.message);
      return false; // Return failure
    }
  } catch (error) {
    console.error("Error downloading PDF:", error);
    return false; // Return failure
  }
}

async function downloadPdf(url, destinationFile) {
  return new Promise((resolve, reject) => {
    try {
      const request = https.get(url, (response) => {        
        const fileStream = fs.createWriteStream(destinationFile);
        
        response.on('data', (chunk) => fileStream.write(chunk));
        response.on('end', () => {
          //console.log('PDF downloaded successfully!');
          resolve(true); // Resolve the promise with true when the download is complete
        });

        response.on('error', (err) => {
          console.log("Error: " + err.message);
          reject(false); // Reject the promise with false on error
        });
      });
    } catch (error) {
      console.error('An error occurred:', error);
      reject(false); // Reject the promise with false on error
    }
  });
}

//Upload photos from zip file

user.uploadphotos = async (req, res, next) => {
  try {
   
    var os = new os_func();
    try
    {      
      await os.execCommand('mkdir '+college_photos_path);
    }
    catch(err0)
    {

    }    
    
    var currentUser = req.user;
    if(req.user.business_is_verified==false)
    {
      var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
      };
      res.json(obj);
      return;
    }
    var permission=await getPermission(req.user.user_id,"uploadstuduents");
    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);  
    var awsinfo=await getS3BucketInformation(puserid);

    var smtpaccount = {
      'type' : true,
      'username' : "", 
      'clientid' : "",
      'clientsecret' : "",
      'refreshtoken' : "",
      'from': ""
    };
    var baseurl = "";
    var contact_email = "";
    var querySmtp=format(`SELECT * FROM setting where accountid='${puserid}';`);
    var smtpresult = await pool.query(querySmtp);
    var ismemberphotourlmode = "no";
    if(smtpresult && smtpresult.rowCount > 0){
      smtpaccount['type'] = smtpresult.rows[0].smtptype;
      smtpaccount['host'] = smtpresult.rows[0].smtphost;
      smtpaccount['port'] = smtpresult.rows[0].smtpport;
      smtpaccount['username'] = smtpresult.rows[0].smtpusername;
      smtpaccount['password'] = smtpresult.rows[0].smtppassword;
      smtpaccount['from'] = smtpresult.rows[0].smtpfrom;

      smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
      smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
      smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;

      smtpaccount['isoffice365'] = smtpresult.rows[0].isoffice365;
      smtpaccount['office365accesstoken'] = smtpresult.rows[0].office365accesstoken;
      cc=smtpresult.rows[0].smtpcc;
      contact_email = smtpresult.rows[0].contact_email;      
      if (contact_email == null || contact_email == undefined) contact_email = "";
      if (contact_email == ""){
        var obj = {
          Status: 400,
          message: `Contact Email is not defined. Please set contact email in /My PROFILE/Setting/CONTACT INFORMATION`
        };
        return res.json(obj);
      }
      baseurl = smtpresult.rows[0].baseurl;
      ismemberphotourlmode = smtpresult.rows[0].ismemberphotourlmode;
      

    }
    var obj = {
      Status: 200,
      message: 'Please wait the photo data is being uploaded , on completion you will receive an email.',
    }
    res.json(obj);
    try{
      const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
      var logfilename=logfiledir+puserid+"/sendcertificate.log";

      upload(req, res, async function (err) {
        if (err instanceof multer.MulterError) {
          console.log("-1-");
          // var obj = {
          // Status: 400,
          // message: err.message
          // }
          // return res.json(obj);
          let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
          let email_subject = "Upload Photos Error";          
          let logfilename=logfiledir+puserid+"/sendcertificate.log";
          mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
          return;
            
        } else if (err) {
          console.log("-2-");
          // var obj = {
          // Status: 400,
          // message: err.message
          // }
          // return res.json(obj);
          let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
          let email_subject = "Upload Photos Error";
          mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
          return;
        }

        var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        console.log('Your IP address is ' + clientIp);
        let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress,userid) values ('uploadphoto','${clientIp}','${puserid}');`);
        await pool.query(ipQuery);

        
        if ( req.body.cohortid == null ||  req.body.cohortid == undefined ||  req.body.cohortid == "")
        {
          var obj = {
            Status: 400,
            message: "The cohort parameter is empty"
          };
          return res.json(obj);
        }
        console.log(" req.body.cohortid: ",  req.body.cohortid);
        var gl_cohort_ids=[];

        if (Array.isArray( req.body.cohortid)) {    
          gl_cohort_ids= req.body.cohortid;
        } else {
          gl_cohort_ids.push(req.body.cohortid);
        }

        var certtype = req.body.certtype;
        if(certtype == "" || certtype == undefined || certtype == null) certtype = "degree";  
        var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
        var cohorttablename = certtypes[certtype];
        var newfilename=req.file.filename;
        var newfoldername=newfilename.split(".")[0];
        var newfilefullpath=college_photos_path+"/"+newfilename;
        var newfolderfullpath=college_photos_path+"/"+newfoldername;
        console.log("-2-full path",newfilefullpath);
        console.log("-2-full path",newfolderfullpath);
        try
        {        
          await os.execCommand(`mkdir "${newfolderfullpath}"`);
        }
        catch(err0)
        {
          console.log("-3-", err0);
          let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err0}`;
          let email_subject = "Upload Photos Error";
          mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
          return;
        }
       
        for(var glcohortid of gl_cohort_ids)
        {  
          console.log("-4-");
          if(newfilename.toString().toLowerCase().indexOf("ljkuspr") !== -1 && newfilename.toString().toLowerCase().indexOf(".pdf") != -1){
            const poppler = new Poppler('/usr/bin');
            const options = {
                pngFile: true,
            transparentPageColor: true,
            };
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
            let pageCount = mainPdfDoc.getPages().length;

            var cohortdropdownclause = "";
            var selectedCohortJson = req.body.selectedCohortJson;           
            if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
            {
              try {
                selectedCohortJson = JSON.parse(selectedCohortJson);
                if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
                else
                {
                  Object.keys(selectedCohortJson).forEach((key, value) => {
                    if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
                    else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
                  });
                }
              } catch (error) {
                
              }
              
            }
            if(cohortdropdownclause=="") cohortdropdownclause = `c.cohortid='${glcohortid}' and c.accountid='${puserid}' `;
            else cohortdropdownclause = cohortdropdownclause + " and c.accountid='"+puserid+"'";

            let pageQuery = format(`select a.studentid, b.other1, b.other4, b.other5, b.other6, b.secondpage from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where ${cohortdropdownclause} and b.other1!='' and b.other1 is not null and b.other1!='undefined'`);
            let pageResult = await pool.query(pageQuery);
            let isAlumni=false;
            let destinationFileName = newfilename.split(".")[0]+"_pdfco.pdf";
            let destinationFilePath = path.join(path.dirname(newfilefullpath),destinationFileName);
            if(newfilename.toString().toLowerCase().indexOf("replace") !== -1 && pageResult.rowCount > 0)
              {
                for(let index=0; index < pageResult.rowCount; index++){                  
                  try {
                    ////////////Determines whether the content should be replaced
                    if(pageResult.rows[index].other4!==null && pageResult.rows[index].other4!=="" && pageResult.rows[index].other5!==null && pageResult.rows[index].other5!=="" && pageResult.rows[index].other6!==null && pageResult.rows[index].other6!=="")
                    {
                      isAlumni=true;
                      
                      //*
                      const API_KEY = "chengdohan@gmail.com_wlCVdVbG549Rdy8Kqc64Em0OlGYioJ6iE32DGr19R3G1V2pTr6GU233FK163M1F9";
                      const downloadSuccessful = await downloadPdfFromPdfCo(
                        `${myip}/samplepdf/${pageResult.rows[index].other6}.pdf`,
                        pageResult.rows[index].other5,
                        pageResult.rows[index].other4,
                        destinationFilePath,
                        pageCount,
                        API_KEY
                      );
                      //*/
                      /*
                      const downloadSuccessful =true;
                      destinationFilePath = "/tmp/college_photos/1719586540457-ljkuspr_BARCH_SEM_1_REG_2020_BATCH-Apr-2021-188-231_pdfco.pdf";
                      //*/
                      if (downloadSuccessful) {
                        console.log("Download and replacement successful!");
                        let trycount=0;
                        while(true)
                        {
                          try {
                            await sleep(5000); 
                            mainPdfBytes = null;
                            mainPdfDoc = null;
                            mainPdfBytes = fs.readFileSync(destinationFilePath);
                            mainPdfDoc = await PDFDocument.load(mainPdfBytes);
                            console.log("Parsed successfully!");
                            pageCount = mainPdfDoc.getPages().length;
                            console.log("pageCount=", pageCount);                          
                            break;
                            
                          } catch (error) {
                            console.log("Try ",trycount);
                            trycount++;  
                            await sleep(5000);  
                          }
                        }
                        
                      } else {
                        console.error("Download failed!");
                        let email_body = `<p style="color: black;">Download failed from Pdf.co</p>.`;
                        let email_subject = "Upload LJKU SPR Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }
                       

                      break;
                    }
                    else break;
                  }
                  catch(error)
                  {
                    console.log(error);
                    let email_body = `<p style="color: black;">There are some errors in uploading pdf</p>.${error} `;
                    let email_subject = "Upload LJKU SPR Error";
                    mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                    return;
                  }
                }
            }
            
            if (pageResult.rowCount > 0){
              if(newfilename.toString().toLowerCase().indexOf("alumni") != -1 || isAlumni==true)//alumni
              {
                /*
                let tmpSecondPdfDoc = await PDFDocument.create();
                let [tmpSecondPage] = await tmpSecondPdfDoc.copyPages(mainPdfDoc, [pageCount - 1]);
                tmpSecondPdfDoc.addPage(tmpSecondPage);
                let tmpSecondPdfBytes = await tmpSecondPdfDoc.save();
                fs.writeFileSync(`${newfolderfullpath}/template124secondpage.pdf`, tmpSecondPdfBytes);
                */
                
                for(let index=0; index < pageResult.rowCount; index++){
                  if (pageResult.rows[index].other1 <= pageCount){
                    try {

                      /*
                      let secondpage = pageResult.rows[index].secondpage;
                      if(secondpage==null || secondpage=="" || secondpage==undefined) secondpage="BG";
                      await poppler.pdfToCairo(`${newfolderfullpath}/template124secondpage.pdf`, `${newfolderfullpath}/template124secondpage${secondpage}_temp`, options);
                      fs.rename(`${newfolderfullpath}/template124secondpage${secondpage}_temp-1.png`, `${wwwdir}/images/LJKU/template124secondpage${secondpage}.png`, function(err) {
                        if (err) {
                            console.error('Error renaming file:', err);
                        } else {
                            console.log('File renamed successfully');
                        }
                      });
                      */
                      

                      let tmpPdfDoc = await PDFDocument.create();
                      let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
                      tmpPdfDoc.addPage(tmpPage);
                      let tmpPdfBytes = await tmpPdfDoc.save();

                      fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);   
                      await poppler.pdfToCairo(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `${newfolderfullpath}/${pageResult.rows[index].studentid}_temp`, options);
                      fs.rename(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, function(err) {
                        if (err) {
                            console.error('Error renaming file:', err);
                        } else {
                            console.log('File renamed successfully');
                        }
                      });
                      
                      let uploadresult = await common_lib.UploadToGDrive(path, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, "backgroundimage", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
                      console.log("upload ljkuspr student pdf: ", uploadresult);            
                      if (uploadresult == ""){
                        let email_body = `<p style="color: black;">There are some errors in uploading Photo to GDrive. </p>`;
                        let email_subject = "Upload LJKU SPR Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }

                      /*
                      let tmpPdfDoc = await PDFDocument.create();
                      let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
                      tmpPdfDoc.addPage(tmpPage);
                      let tmpPdfBytes = await tmpPdfDoc.save();

                      fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);                
                      await poppler.pdfToCairo(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `${newfolderfullpath}/${pageResult.rows[index].studentid}_temp`, options);
                      await IMAGES(`${wwwdir}/images/LJKU/template124background.png`)
                      .draw(IMAGES(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`).resize(3150,4455), 0, 0)
                      .save(`${newfolderfullpath}/${pageResult.rows[index].studentid}.png`);
                      
                      let uploadresult = await common_lib.UploadToGDrive(path, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, "backgroundimage", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
                      console.log("upload ljkuspr studentphoto: ", uploadresult);            
                      if (uploadresult == ""){
                        let email_body = `<p style="color: black;">There are some errors in uploading Photo to GDrive. `;
                        let email_subject = "Upload LJKU SPR Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }
                      */
                    } catch (error) {
                      console.log(error);                  
                    }
                    
                  }
                }
                await os.execCommand('rm '+newfilefullpath);
                await os.execCommand('rm '+destinationFilePath);                
                await os.execCommand('sudo rm -r '+newfolderfullpath);
              }//alumni
              else //not alumni
              {
                
                let tmpSecondPdfDoc = await PDFDocument.create();
                let [tmpSecondPage] = await tmpSecondPdfDoc.copyPages(mainPdfDoc, [pageCount - 1]);
                tmpSecondPdfDoc.addPage(tmpSecondPage);
                let tmpSecondPdfBytes = await tmpSecondPdfDoc.save();
                fs.writeFileSync(`${newfolderfullpath}/template124secondpagecurrent.pdf`, tmpSecondPdfBytes);
               
                for(let index=0; index < pageResult.rowCount; index++){
                  if (pageResult.rows[index].other1 < pageCount){ ///if (pageResult.rows[index].other1 <= pageCount){ //for only one page pdf file for testing
                    try {
                      let secondpage = pageResult.rows[index].secondpage;
                      if(secondpage==null || secondpage=="" || secondpage==undefined) secondpage="BG";


                      await poppler.pdfToCairo(`${newfolderfullpath}/template124secondpagecurrent.pdf`, `${newfolderfullpath}/template124secondpage${secondpage}_temp`, options);
                      fs.rename(`${newfolderfullpath}/template124secondpage${secondpage}_temp-1.png`, `${wwwdir}/images/LJKU/template124secondpage${secondpage}current.png`, function(err) {
                        if (err) {
                            console.error('Error renaming file:', err);
                        } else {
                            console.log('File renamed successfully');
                        }
                      });

                  
                      let tmpPdfDoc = await PDFDocument.create();
                      let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
                      tmpPdfDoc.addPage(tmpPage);
                      let tmpPdfBytes = await tmpPdfDoc.save();

                      fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);   
                      await poppler.pdfToCairo(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `${newfolderfullpath}/${pageResult.rows[index].studentid}_temp`, options);
                      
                      /*
                      await IMAGES(`${wwwdir}/images/LJKU/template124background.png`)
                      .draw(IMAGES(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`).resize(3150,4455), 0, 0)
                      .save(`${newfolderfullpath}/${pageResult.rows[index].studentid}.png`);
                      */
                      //*
                      fs.rename(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, function(err) {
                        if (err) {
                            console.error('Error renaming file:', err);
                        } else {
                            console.log('File renamed successfully');
                        }
                      });
                      //*/
                      
                      
                      let uploadresult = await common_lib.UploadToGDrive(path, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, "backgroundimage", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
                      console.log("upload Alumni ljkuspr student pdf: ", uploadresult);            
                      if (uploadresult == ""){
                        let email_body = `<p style="color: black;">There are some errors in uploading Photo to GDrive. </p>`;
                        let email_subject = "Upload Alumni LJKU SPR Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }

                      /*
                      let tmpPdfDoc = await PDFDocument.create();
                      let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
                      tmpPdfDoc.addPage(tmpPage);
                      let tmpPdfBytes = await tmpPdfDoc.save();

                      fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);                
                      await poppler.pdfToCairo(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `${newfolderfullpath}/${pageResult.rows[index].studentid}_temp`, options);
                      await IMAGES(`${wwwdir}/images/LJKU/template124background.png`)
                      .draw(IMAGES(`${newfolderfullpath}/${pageResult.rows[index].studentid}_temp-1.png`).resize(3150,4455), 0, 0)
                      .save(`${newfolderfullpath}/${pageResult.rows[index].studentid}.png`);
                      
                      let uploadresult = await common_lib.UploadToGDrive(path, `${newfolderfullpath}/${pageResult.rows[index].studentid}.png`, "backgroundimage", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
                      console.log("upload ljkuspr studentphoto: ", uploadresult);            
                      if (uploadresult == ""){
                        let email_body = `<p style="color: black;">There are some errors in uploading Photo to GDrive. `;
                        let email_subject = "Upload LJKU SPR Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }
                      */
                    } catch (error) {
                      console.log(error);                  
                    }
                    
                  }
                }
                await os.execCommand('rm '+newfilefullpath);
                await os.execCommand('sudo rm -r '+newfolderfullpath);
              }
            }
          }
          else if(newfilename.toString().toLowerCase().indexOf("rv_engineering_gradecard")!==-1 && newfilename.toString().toLowerCase().indexOf(".pdf")!== -1){
            
            if (baseurl == ""){
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            if (awsinfo.localStoragePath == ""){
              let email_body = `<p style="color: black;">Local Storage Path is not defined. Please set base url at 'MY PROFILE/Setting/STORAGE INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
            let pageCount = mainPdfDoc.getPages().length;

            var cohortdropdownclause = "";
            var selectedCohortJson = req.body.selectedCohortJson;           
            if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
            {
              try {
                selectedCohortJson = JSON.parse(selectedCohortJson);
                if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
                else
                {
                  Object.keys(selectedCohortJson).forEach((key, value) => {
                    if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
                    else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
                  });
                }
              } catch (error) {
                
              }
              
            }
            if(cohortdropdownclause=="") cohortdropdownclause = `c.cohortid='${glcohortid}' and c.accountid='${puserid}' `;
            else cohortdropdownclause = cohortdropdownclause + " and c.accountid='"+puserid+"'";
            console.log("cohortdropdownclause = "+cohortdropdownclause);

            let pageQuery = format(`select a.studentid, b.other1, b.other2, b.other3, c.cohortid as cohortfullid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where ${cohortdropdownclause}`);
            console.log(pageQuery);
            let pageResult = await pool.query(pageQuery);
            if (pageResult.rowCount > 0){
                
               
              if (pageResult.rows[0].other1 == null || pageResult.rows[0].other1 == undefined || pageResult.rows[0].other1 == "") {
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. </p>`;
                let email_subject = "Upload Pdf Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              else if ((pageResult.rows[0].other2 == null || pageResult.rows[0].other2 == undefined || pageResult.rows[0].other2 == "") && (pageResult.rows[0].other3 == null || pageResult.rows[0].other3 == undefined || pageResult.rows[0].other3 == "")){
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. </p>`;
                let email_subject = "Upload Pdf Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              const poppler = new Poppler('/usr/bin');
              const options = {
                  pngFile: true,
              transparentPageColor: true,
              };
              for (let index = 0; index < pageCount; index++){
                let tempPdf = await PDFDocument.create();
                let [temppage] = await tempPdf.copyPages(mainPdfDoc, [index]);
                tempPdf.addPage(temppage);
                let tempbytes = await tempPdf.save();

                // Extract text from the page
                let extractedText = await pdfparse(tempbytes);                
                let extractStudentid = "";
                let startIndex = extractedText.text.indexOf("1RV");                
                extractStudentid = extractedText.text.substring(startIndex, startIndex+10);
                console.log("Extracted studentid=", extractStudentid);
                if(extractStudentid.trim()=="")
                {
                  let email_body = `<p style="color: black;">Cannot extract studentid from pdf.</p><p style="color: black;">Note that: we cannot use scanned copy pdf.</p>`;
                  let email_subject = "Upload Pdf Error";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
                else
                {
                  if (pageResult.rows.filter(e => e.studentid === extractStudentid).length > 0) {
                    for(let index1=0; index1<pageResult.rows.filter(e => e.studentid === extractStudentid).length; index1++)
                    {
                      let tmpPageResult = pageResult.rows.filter(e => e.studentid === extractStudentid)[index1];
                      console.log(tmpPageResult);
                      glcohortid = tmpPageResult.cohortfullid;
                      console.log("glcohortid=",glcohortid);
                      fs.writeFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`, tempbytes);
                      let tempbase64 = fs.readFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`).toString('base64');
                      fs.writeFileSync("/home/ubuntu/base64content.txt",tempbase64,"utf-8");
                      const contenttype = mime.lookup(`${newfolderfullpath}/${extractStudentid}.pdf`);
                      let uploadresult = await filUploadLocal(baseurl, tempbase64, `${awsinfo.localstoragepath}/backgroundimage/${glcohortid.replace(/ /g, "_")}`, `${extractStudentid}.pdf`, contenttype)
                      if (uploadresult == "fail"){
                        let email_body = `<p style="color: black;">There are some errors in uploading Photo.</p> `;
                        let email_subject = "Upload Pdf Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }
                    }
                  }
                }
              }
              await os.execCommand('rm '+newfilefullpath);
              await os.execCommand('sudo rm -r '+newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf("rv_engineering_transcript" )!==-1 && newfilename.toString().toLowerCase().indexOf(".pdf")!==-1){

            if (baseurl == ""){
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'`;
              let email_subject = "Upload Pdf Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            if (awsinfo.localstoragepath == ""){
              let email_body = `<p style="color: black;">Local Storage Path is not defined. Please set base url at 'MY PROFILE/Setting/STORAGE INFORMATION'`;
              let email_subject = "Upload Pdf Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }

            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
            let pageCount = mainPdfDoc.getPages().length;

            var cohortdropdownclause = "";
            var selectedCohortJson = req.body.selectedCohortJson;           
            if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
            {
              try {
                selectedCohortJson = JSON.parse(selectedCohortJson);
                if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
                else
                {
                  Object.keys(selectedCohortJson).forEach((key, value) => {
                    if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
                    else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
                  });
                }
              } catch (error) {
                
              }
              
            }
            if(cohortdropdownclause=="") cohortdropdownclause = `c.cohortid='${glcohortid}' and c.accountid='${puserid}' `;
            else cohortdropdownclause = cohortdropdownclause + " and c.accountid='"+puserid+"'";
            console.log("cohortdropdownclause = "+cohortdropdownclause);

            let pageQuery = format(`select  a.studentid, b.other1, b.other2, b.other3, c.cohortid as cohortfullid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where ${cohortdropdownclause}`);
            console.log(pageCount, pageQuery);
            let pageResult = await pool.query(pageQuery);
            if (pageResult.rowCount > 0){
              if (pageResult.rows[0].other1 == null || pageResult.rows[0].other1 == undefined || pageResult.rows[0].other1 == "") {
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. </p>`;
                let email_subject = "Upload Pdf Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              else if ((pageResult.rows[0].other2 == null || pageResult.rows[0].other2 == undefined || pageResult.rows[0].other2 == "") && (pageResult.rows[0].other3 == null || pageResult.rows[0].other3 == undefined || pageResult.rows[0].other3 == "")){
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. </p>`;
                let email_subject = "Upload Pdf Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              for (let index = 0; index < pageCount; index++){
                let tempPdf = await PDFDocument.create();
                let [temppage] = await tempPdf.copyPages(mainPdfDoc, [index]);
                tempPdf.addPage(temppage);
                let tempbytes = await tempPdf.save();

                // Extract text from the page
                let extractedText = await pdfparse(tempbytes);                
                let extractStudentid = "";
                let startIndex = extractedText.text.indexOf("1RV");                
                extractStudentid = extractedText.text.substring(startIndex, startIndex+10);
                console.log("Extracted studentid=", extractStudentid);
                if(extractStudentid.trim()=="")
                {
                  let email_body = `<p style="color: black;">Cannot extract studentid from pdf.</p><p style="color: black;">Note that: we cannot use scanned copy pdf.</p>`;
                  let email_subject = "Upload Pdf Error";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
                else
                {
                  if (pageResult.rows.filter(e => e.studentid === extractStudentid).length > 0) {
                    for(let index1=0; index1<pageResult.rows.filter(e => e.studentid === extractStudentid).length; index1++)
                    {
                      let tmpPageResult = pageResult.rows.filter(e => e.studentid === extractStudentid)[index1];
                      glcohortid = tmpPageResult.cohortfullid;
                      console.log("glcohortid=",glcohortid);
                      fs.writeFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`, tempbytes);
                      let tempbase64 = fs.readFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`).toString('base64');
                      fs.writeFileSync("/home/ubuntu/base64content.txt",tempbase64,"utf-8");
                      const contenttype = mime.lookup(`${newfolderfullpath}/${extractStudentid}.pdf`);
                      let uploadresult = await filUploadLocal(baseurl, tempbase64, `${awsinfo.localstoragepath}/backgroundimage/${glcohortid.replace(/ /g, "_")}`, `${extractStudentid}.pdf`, contenttype)
                      if (uploadresult == "fail"){
                        let email_body = `<p style="color: black;">There are some errors in uploading pdf.</p>`;
                        let email_subject = "Upload Pdf Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }
                    }
  
                    // await poppler.pdfToCairo(`${newfolderfullpath}/${extractStudentid}.pdf`, `${newfolderfullpath}/${extractStudentid}`, options);
                    /*
                    let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion, `${newfolderfullpath}/${extractStudentid}.pdf`, puserid, `backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                    if (uploadresult == ""){
                      let email_body = `<p style="color: black;">There are some errors in uploading Photo.`;
                      let email_subject = "Upload Photos Error";
                      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                      return;
                    }
                    */
                  }
                }
              }
            
              await os.execCommand('rm '+newfilefullpath);
              await os.execCommand('sudo rm -r '+newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf("rvim_gradecard")!==-1 && newfilename.toString().toLowerCase().indexOf(".pdf")!== -1){
            
            if (baseurl == ""){
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            if (awsinfo.localStoragePath == ""){
              let email_body = `<p style="color: black;">Local Storage Path is not defined. Please set base url at 'MY PROFILE/Setting/STORAGE INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
            let pageCount = mainPdfDoc.getPages().length;

            var cohortdropdownclause = "";
            var selectedCohortJson = req.body.selectedCohortJson;           
            if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
            {
              try {
                selectedCohortJson = JSON.parse(selectedCohortJson);
                if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
                else
                {
                  Object.keys(selectedCohortJson).forEach((key, value) => {
                    if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
                    else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
                  });
                }
              } catch (error) {
                
              }
              
            }
            if(cohortdropdownclause=="") cohortdropdownclause = `c.cohortid='${glcohortid}' and c.accountid='${puserid}' `;
            else cohortdropdownclause = cohortdropdownclause + " and c.accountid='"+puserid+"'";
            console.log("cohortdropdownclause = "+cohortdropdownclause);

            let pageQuery = format(`select a.studentid, b.other1, b.other2, b.other3, c.cohortid as cohortfullid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where ${cohortdropdownclause}`);
            console.log(pageQuery);
            let pageResult = await pool.query(pageQuery);
            if (pageResult.rowCount > 0){
              if ((pageResult.rows[0].other2 == null || pageResult.rows[0].other2 == undefined || pageResult.rows[0].other2 == "") && (pageResult.rows[0].other3 == null || pageResult.rows[0].other3 == undefined || pageResult.rows[0].other3 == "")) {
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. </p>`;
                let email_subject = "Upload Pdf Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }              
              const poppler = new Poppler('/usr/bin');
              const options = {
                  pngFile: true,
              transparentPageColor: true,
              };
              
              let startString = "";
              let endString = "";
              let endCount = 0;
              for (let index = 0; index < pageResult.rowCount; index++){
                startString = pageResult.rows[index].other1.toString().trim();
                endString = pageResult.rows[index].other2;
                if (startString == null || startString == undefined) startString = "";
                if (endString == null || endString == undefined) endString = "";
                else endString = endString.toString().trim();
                endCount = pageResult.rows[index].other3;
                break;
              }


              for (let index = 0; index < pageCount; index++){
                let tempPdf = await PDFDocument.create();
                let [temppage] = await tempPdf.copyPages(mainPdfDoc, [index]);
                tempPdf.addPage(temppage);
                let tempbytes = await tempPdf.save();

                // Extract text from the page
                let extractedText = await pdfparse(tempbytes);                
                let extractStudentid = "";
                
                if (endString != ""){
                  let startIndex = extractedText.text.indexOf(startString);
                  let endIndex = extractedText.text.indexOf(endString);
                  extractStudentid = extractedText.text.substring(startIndex, endIndex).replace(startString.trim(),"").replace(/\r/g,"").replace(/\n/g,"").replace(/:/g,"").replace(/ /g,"");
                  console.log("startString, endString, extractStudentid=",startString, endString, extractStudentid);
                }
                else if (endCount != 0){
                  let startIndex = extractedText.text.indexOf(startString);
                  let midIndex;
                  for (let index1 = 0; index1 < endCount; index1 ++){
                    midIndex = extractedText.text.indexOf("\n", startIndex);
                    startIndex = midIndex + 1;
                  }
                  // let midIndex = extractedText.text.indexOf("\n", startIndex);
                  let endIndex = extractedText.text.indexOf("\n", midIndex+1);
                  // console.log(extractedText.text);
                  console.log(startIndex, midIndex, endIndex);
                  console.log("extracted StudentID:", extractedText.text.substring(midIndex, endIndex).replace(/\r/g,"").replace(/\n/g,"").trim());
                  extractStudentid = extractedText.text.substring(midIndex, endIndex).replace(/\r/g,"").replace(/\n/g,"").trim();
                }
                if(extractStudentid.trim()=="")
                {
                  let email_body = `<p style="color: black;">Cannot extract studentid from pdf.</p><p style="color: black;">Note that: we cannot use scanned copy pdf.</p>`;
                  let email_subject = "Upload Pdf Error";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
                else
                {
                  if (pageResult.rows.filter(e => e.studentid === extractStudentid).length > 0) {
                    for(let index1=0; index1<pageResult.rows.filter(e => e.studentid === extractStudentid).length; index1++)
                    {
                      let tmpPageResult = pageResult.rows.filter(e => e.studentid === extractStudentid)[index1];
                      console.log(tmpPageResult);
                      glcohortid = tmpPageResult.cohortfullid;
                      console.log("glcohortid=",glcohortid);
                      fs.writeFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`, tempbytes);
                      let tempbase64 = fs.readFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`).toString('base64');
                      fs.writeFileSync("/home/ubuntu/base64content.txt",tempbase64,"utf-8");
                      const contenttype = mime.lookup(`${newfolderfullpath}/${extractStudentid}.pdf`);
                      //let uploadresult = await filUploadLocal(baseurl, tempbase64, `${awsinfo.localstoragepath}/backgroundimage/${glcohortid.replace(/ /g, "_")}`, `${extractStudentid}.pdf`, contenttype);
                      //*
                      let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion, `${newfolderfullpath}/${extractStudentid}.pdf`, puserid, `backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                      console.log(uploadresult);
                      if (uploadresult == ""){
                        let email_body = `<p style="color: black;">There are some errors in uploading pdf.`;
                        let email_subject = "Upload Photos Error";
                        mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                        return;
                      }
                      //*/
                      
                    }
                  }
                }
              }
              await os.execCommand('rm '+newfilefullpath);
              await os.execCommand('sudo rm -r '+newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf("nicmar_gradecard")!==-1 && newfilename.toString().toLowerCase().indexOf(".pdf")!== -1){
            console.log("Uploading time --");
            if (baseurl == ""){
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            if (awsinfo.localStoragePath == ""){
              let email_body = `<p style="color: black;">Local Storage Path is not defined. Please set base url at 'MY PROFILE/Setting/STORAGE INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }

            
            await os.execCommand(`sudo chmod -R 777 "${newfolderfullpath}"`);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
            let pageCount = mainPdfDoc.getPages().length;

            var cohortdropdownclause = "";
            var selectedCohortJson = req.body.selectedCohortJson;           
            if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
            {
              try {
                selectedCohortJson = JSON.parse(selectedCohortJson);
                if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
                else
                {
                  Object.keys(selectedCohortJson).forEach((key, value) => {
                    if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
                    else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
                  });
                }
              } catch (error) {
                
              }
              
            }
            if(cohortdropdownclause=="") cohortdropdownclause = `c.cohortid='${glcohortid}' and c.accountid='${puserid}' `;
            else cohortdropdownclause = cohortdropdownclause + " and c.accountid='"+puserid+"'";
            console.log("cohortdropdownclause = "+cohortdropdownclause);

            let pageQuery = format(`select a.studentid, b.other1, c.cohortid as cohortfullid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where ${cohortdropdownclause}`);
            console.log(pageQuery);
            let pageResult = await pool.query(pageQuery);
            for(let index=0; index < pageResult.rowCount; index++){
              if (pageResult.rows[index].other1 <= pageCount){ ///if (pageResult.rows[index].other1 <= pageCount){ //for only one page pdf file for testing
                try {
                  let tmpPdfDoc = await PDFDocument.create();
                  let [tmpPage] = await tmpPdfDoc.copyPages(mainPdfDoc, [pageResult.rows[index].other1 - 1]);
                  tmpPdfDoc.addPage(tmpPage);
                  let tmpPdfBytes = await tmpPdfDoc.save();

                  fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tmpPdfBytes);                    
                  let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion, `${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, puserid, `backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                  console.log(uploadresult);
                  if (uploadresult == ""){
                    let email_body = `<p style="color: black;">There are some errors in uploading pdf.`;
                    let email_subject = "Upload Photos Error";
                    mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                    return;
                  }
                  
                } catch (error) {
                  console.log(error);                  
                }
                
              }
            }
            await os.execCommand(`rm "${newfilefullpath}"`);
            await os.execCommand(`sudo rm -r "${newfolderfullpath}"`);      
          }
          else if (newfilename.toString().toLowerCase().indexOf("ljkuteacher") !== -1){
            try{
              let workbook = XLSX.readFile(newfilefullpath);
              let sheetNames = workbook.SheetNames;
              let teachersheet = workbook.Sheets[sheetNames[0]];
              let cohortsheet = workbook.Sheets[sheetNames[1]];
              let cohortdata = XLSX.utils.sheet_to_json(cohortsheet, {header:   1, blankrows: false});
              let teacherdata = XLSX.utils.sheet_to_json(teachersheet, {header:   1, blankrows: false});             
              fs.writeFileSync(`/home/ubuntu/ljkuteacherdata.json`,JSON.stringify(teacherdata),"utf-8"); 
              let cohortJson = {};
              cohortdata[0].forEach((element, index) => {
                cohortJson[element] = cohortdata[1][index];
              });
              if (!cohortJson.hasOwnProperty('cohortid') || !cohortJson.hasOwnProperty('cohortname') || !cohortJson.hasOwnProperty('name') || !cohortJson.hasOwnProperty('email')){
                let email_body = `<p style="color: black;">There are some errors in uploading LJKU Teacher. Second sheet has no neccessary fields.</p>`;
                let email_subject = "Upload LJKU Teacher Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              let tempStudentid = getOnetimecode(15);
              let studentQuery = format(`insert into student (studentid,firstname,middlename,lastname,emailaddress,accountid) select '${tempStudentid}' ,'${cohortJson['name']}' ,'' ,'' ,'${cohortJson['email']}' ,'${puserid}' on conflict (studentid,accountid,firstname,middlename,lastname,emailaddress) do update set emailaddress='${cohortJson['email']}' returning id`)
              let studentResult = await pool.query(studentQuery);
              if (studentResult.rowCount > 0){
                let cohortGQuery = format(`insert into cohort_group (name, cohortid, accountid) select '${cohortJson['cohortname']}', '${cohortJson['cohortid']}', '${puserid}' on conflict (cohortid, accountid) do update set name='${cohortJson['cohortname']}' returning id`);
                await pool.query(cohortGQuery);
                let cohortQuery = format(`insert into cohort (name, cohortid, accountid) select '${cohortJson['cohortname']}', '${cohortJson['cohortid']}', '${puserid}' on conflict (cohortid, accountid, competencyname, semesternumber) do update set name='${cohortJson['cohortname']}' returning id`);
                let cohortResult = await pool.query(cohortQuery);
                if (cohortResult.rowCount > 0){
                  let htmlContent = `<table class="table table-hover table-condensed teacher">`;
                  for (let [key, value] of Object.entries(cohortJson)){
                    htmlContent += `<tr><td style="text-align: left;">${key}</td><td style="text-align: left;">: &nbsp;&nbsp;&nbsp;${value}</td></tr>`
                  }
                  htmlContent += '</table><table border="1" class="table table-bordered table-hover table-condensed teacher">';
                  let headerlength=0;
                  let rowindex=0;
                  teacherdata.forEach(row => {
                    let trHtml = '<tr>';
                    rowindex++;
                    if(rowindex==1) headerlength=row.length;
                    for (let i = 0; i < headerlength; i++) {
                      // Use a try-catch block to safely handle null values
                      try {
                        trHtml += `<td>${row[i] || ''}</td>`;
                        console.log("index=>"+i, row[i]);
                      } catch (e) {
                        // Optionally log errors or handle exceptions
                        console.error("Error processing row:", e);
                      }
                    }
                    trHtml += '</tr>';
                    htmlContent += trHtml;
                  });
                  htmlContent += '</table>';

                 
                fs.writeFileSync(`/home/ubuntu/ljkuteacherdata.html`,htmlContent, "utf-8"); 
                  let onetimecode = "";
                  let loopcount = 0;
                  while (loopcount !== Object.keys(certtypes).length) {
                    onetimecode = getOnetimecode(15);
                    loopcount = 0;
                    for (const key1 in certtypes) {
                      var certtypename1 = key1;
                      var tablenameforcerttype1 = certtypes[key1];
                      let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype1} WHERE onetimeblockcertscode='${onetimecode}';`);
                      studentsforonetimecode = await pool.query(getExistStudent);
                      if (studentsforonetimecode.rowCount == 0) {
                        loopcount++;
                      }
                    }
                  }
                  let teacherQuery = format(`insert into ${cohorttablename} (studentid, cohortid, onetimeblockcertscode, certificatetype, content) select '${studentResult.rows[0].id}', '${cohortResult.rows[0].id}', '${onetimecode}', '${certtype}', '${htmlContent}' on conflict (cohortid, studentid, certificatetype,certificaterevoked) do update set content='${htmlContent}'`);
                  //console.log("teacherQuery=",teacherQuery);

                  await pool.query(teacherQuery);
                }
              }
            }
            catch(error){
              console.log(error.message);
              let email_body = `<p style="color: black;">There are some errors in uploading LJKU Teacher. Below are error list.</p>${error}`;
              let email_subject = "Upload LJKU Teacher Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            
          }
          else if(newfilename.toString().toLowerCase().indexOf("galgotias") !== -1 && newfilename.toString().toLowerCase().indexOf(".pdf") != -1){        
            if (awsinfo.baseurl == "")  {
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'.`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = await PDFDocument.load(mainPdfBytes);
            let pageCount = mainPdfDoc.getPages().length;

            let pageQuery = format(`select a.studentid, b.other1, b.other2, b.other3 from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}'`);
            let pageResult = await pool.query(pageQuery);
            // console.log(pageQuery);
            if (pageResult.rowCount > 0){
              // console.log(pageResult.rows[0]);
              if (pageResult.rows[0].other1 == null || pageResult.rows[0].other1 == undefined || pageResult.rows[0].other1 == "") {
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. `;
                let email_subject = "Upload Photos Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              else if ((pageResult.rows[0].other2 == null || pageResult.rows[0].other2 == undefined || pageResult.rows[0].other2 == "") && (pageResult.rows[0].other3 == null || pageResult.rows[0].other3 == undefined || pageResult.rows[0].other3 == "")){
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. `;
                let email_subject = "Upload Photos Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              const poppler = new Poppler('/usr/bin');
              const options = {
                  pngFile: true,
              transparentPageColor: true,
              };
              let startString = "";
              let endString = "";
              let endCount = 0;
              for (let index = 0; index < pageResult.rowCount; index++){
                startString = pageResult.rows[index].other1.toString().trim();
                endString = pageResult.rows[index].other2;
                if (startString == null || startString == undefined) startString = "";
                if (endString == null || endString == undefined) endString = "";
                else endString = endString.toString().trim();
                endCount = pageResult.rows[index].other3;
                break;
              }
              let workflag=false;
              for (let index2 = 0; index2 < pageCount-1; index2+=2){
                
                  let tempPdf = await PDFDocument.create();
                  let [temppage] = await tempPdf.copyPages(mainPdfDoc, [index2]);
                  tempPdf.addPage(temppage);
                  let tempbytes = await tempPdf.save();

                  let tempPdf1 = await PDFDocument.create();
                  let [temppage1] = await tempPdf1.copyPages(mainPdfDoc, [index2+1]);
                  tempPdf1.addPage(temppage1);
                  let tempbytes1 = await tempPdf1.save();

                  // Extract text from the page
                  
                  let extractedText = await pdfparse(tempbytes);
                  let extractStudentid = "";
                  if (endString != ""){
                    let startIndex = extractedText.text.indexOf(startString);
                    let endIndex = extractedText.text.indexOf(endString);
                    extractStudentid = extractedText.text.substring(startIndex, endIndex).replace(startString.trim(),"").replace(/\r/g,"").replace(/\n/g,"").replace(/:/g,"").replace(/ /g,"");
                    console.log("startString, endString, extractStudentid, index2=",startString, endString, extractStudentid,index2);
                  }
                  else if (endCount != 0){
                    let startIndex = extractedText.text.indexOf(startString);
                    let midIndex;
                    for (let index1 = 0; index1 < endCount; index1 ++){
                      midIndex = extractedText.text.indexOf("\n", startIndex);
                      startIndex = midIndex + 1;
                    }
                    // let midIndex = extractedText.text.indexOf("\n", startIndex);
                    let endIndex = extractedText.text.indexOf("\n", midIndex+1);
                    // console.log(extractedText.text);
                    console.log(startIndex, midIndex, endIndex);
                    console.log("extracted StudentID:", extractedText.text.substring(midIndex, endIndex).replace(/\r/g,"").replace(/\n/g,"").trim());
                    extractStudentid = extractedText.text.substring(midIndex, endIndex).replace(/\r/g,"").replace(/\n/g,"").trim();
                  }
                  if(extractStudentid == "20234060066") workflag=true;
                  //if(workflag==false) continue;
                  if(extractStudentid!=="")
                  {
                    let pageQuery1  = format(`select a.studentid, b.other1, b.other2, b.other3 from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and a.studentid='${extractStudentid}'`);
                    let pageResult1   = await pool.query(pageQuery1);
                    if(pageResult1.rowCount>0)
                    {
                      while(true)
                      {
                        fs.writeFileSync(`${newfolderfullpath}/${extractStudentid}_1.pdf`, tempbytes);
                        fs.writeFileSync(`${newfolderfullpath}/${extractStudentid}_2.pdf`, tempbytes1);
                        // let tempbase64 = await fs.readFileSync(`${newfolderfullpath}/${extractStudentid}.pdf`).toString('base64');
                        await poppler.pdfToCairo(`${newfolderfullpath}/${extractStudentid}_1.pdf`, `${newfolderfullpath}/${extractStudentid}_1`, options);
                        await poppler.pdfToCairo(`${newfolderfullpath}/${extractStudentid}_2.pdf`, `${newfolderfullpath}/${extractStudentid}_2`, options);
                        fs.rename(`${newfolderfullpath}/${extractStudentid}_1-1.png`, `${newfolderfullpath}/${extractStudentid}_1.png`, function(err,data) {
                          if (err){
                            let email_body = `<p style="color: black;">There is an error in upload student pdf.`;
                            let email_subject = "Upload PDF Error";
                            mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                            return;
                          }                    
                        });
                        fs.rename(`${newfolderfullpath}/${extractStudentid}_2-1.png`, `${newfolderfullpath}/${extractStudentid}_2.png`, function (err, data){
                          if (err){
                            let email_body = `<p style="color: black;">There is an error in upload student pdf.`;
                            let email_subject = "Upload PDF Error";
                            mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                            return;
                          }
                        });
                        if (!fs.existsSync(`${newfolderfullpath}/${extractStudentid}_1.png`) || !fs.existsSync(`${newfolderfullpath}/${extractStudentid}_2.png`)) {
                          await sleep(10000);
                          continue;                          
                        }        
                        let uploadresult1 = await fileUploadPng(awsinfo.s3obj,awsinfo.awsregion,`${newfolderfullpath}/${extractStudentid}_1.png`,puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                        let uploadresult2 = await fileUploadPng(awsinfo.s3obj,awsinfo.awsregion,`${newfolderfullpath}/${extractStudentid}_2.png`,puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);

                        // let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion, `${newfolderfullpath}/${extractStudentid}.pdf`, puserid, `backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                        // let uploadresult = await filUploadLocal(baseurl, tempbase64, `${awsinfo.localstoragepath}/backgroundimage/${glcohortid.replace(/ /g, "_")}`, `${extractStudentid}.pdf`)
                        if (uploadresult1 == "" || uploadresult2 == ""){
                          let email_body = `<p style="color: black;">There are some errors in uploading Photo. `;
                          let email_subject = "Upload Photos Error";
                          mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                          return;
                        }
                        break;
                      }
                    }
                  }                        
              }
              await os.execCommand('rm '+newfilefullpath);
              await os.execCommand('sudo rm -r '+newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf("snu_transcript") !== -1 && newfilename.toString().toLowerCase().indexOf(".pdf") != -1){        
            if (awsinfo.baseurl == "")  {
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'.`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = "";
            try {
              mainPdfDoc = await PDFDocument.load(mainPdfBytes);
              console.log('PDF is likely not encrypted.'); // Success indicates no encryption (may not be foolproof)
            } catch (error) {
              if (error.message.includes('encrypted')) {
                console.log('PDF is likely encrypted.');
                const { execSync } = require('child_process');
                const decryptedPdf = execSync(`qpdf --decrypt --replace-input ${newfilefullpath}`).toString();
                mainPdfBytes = fs.readFileSync(newfilefullpath);
                mainPdfDoc = await PDFDocument.load(mainPdfBytes);
              } else {
                console.error('Error loading PDF:', error);
              }
            }
            let pageCount = mainPdfDoc.getPages().length;

            let pageQuery = format(`select a.studentid, b.other1 from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}'`);
            let pageResult = await pool.query(pageQuery);
            // console.log(pageQuery);
            if (pageResult.rowCount > 0){
              // console.log(pageResult.rows[0]);
              if (pageResult.rows[0].other1 == null || pageResult.rows[0].other1 == undefined || pageResult.rows[0].other1 == "") {
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. `;
                let email_subject = "Upload Photos Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }              
              const poppler = new Poppler('/usr/bin');
              const options = {
                  pngFile: true,
              transparentPageColor: true,
              };
              for (let index = 0; index < pageResult.rowCount; index++){
                try {
                  let tempPdf = await PDFDocument.create();
                  const temppage = await tempPdf.copyPages(mainPdfDoc, [pageResult.rows[index].other1-1, pageResult.rows[index].other1]);
                  tempPdf.addPage(temppage[0]);
                  if(temppage.length === 2)
                  {
                    tempPdf.addPage(temppage[1]);
                  }
                  let tempbytes = await tempPdf.save();
                  fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tempbytes);
                  let tempbase64 = fs.readFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`).toString('base64');           
                  const contenttype = mime.lookup(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`);
                  let uploadresult = await filUploadLocal(baseurl, tempbase64, `${awsinfo.localstoragepath}/backgroundimage/${glcohortid.replace(/ /g, "_")}`, `${pageResult.rows[index].studentid}.pdf`, contenttype)
                  if (uploadresult == "fail"){
                    let email_body = `<p style="color: black;">There are some errors in uploading pdf. </p>`;
                    let email_subject = "Upload Pdf Error";
                    let logfilename=logfiledir+puserid+"/sendcertificate.log";
                    mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                    return;
                  }                               
                } catch (error) {
                  console.log("Databae and pdf file page dont match error!");
                }
                
              }
              await os.execCommand('rm '+newfilefullpath);
              await os.execCommand('sudo rm -r '+newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf("sbup_") !== -1 && newfilename.toString().toLowerCase().indexOf(".pdf") != -1){        
            if (awsinfo.baseurl == "")  {
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'.`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 ' + newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = "";
            try {
              mainPdfDoc = await PDFDocument.load(mainPdfBytes);
              console.log('PDF is likely not encrypted.'); // Success indicates no encryption (may not be foolproof)
            } catch (error) {
              if (error.message.includes('encrypted')) {
                console.log('PDF is likely encrypted.');
                const { execSync } = require('child_process');
                const decryptedPdf = execSync(`qpdf --decrypt --replace-input ${newfilefullpath}`).toString();
                mainPdfBytes = fs.readFileSync(newfilefullpath);
                mainPdfDoc = await PDFDocument.load(mainPdfBytes);
              } else {
                console.error('Error loading PDF:', error);
              }
            }
            let pageCount = mainPdfDoc.getPages().length;
            console.log(pageCount);
            let pageQuery = format(`select a.studentid, b.other1, b.other2 from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}'`);
            let pageResult = await pool.query(pageQuery);
            console.log(pageQuery);
            if (pageResult.rowCount > 0){
              if (pageResult.rows[0].other2 == null || pageResult.rows[0].other2 == undefined || pageResult.rows[0].other2 == "") {
                let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. `;
                let email_subject = "Upload Photos Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              if (newfilename.toString().toLowerCase().indexOf("sbup_new") !== -1) {
                console.log(pageResult.rowCount, pageResult.rows[pageResult.rowCount - 1]);
                if (pageResult.rowCount == parseInt(pageResult.rows[pageResult.rowCount - 1].other2)) {
                  try {
                    let tempbytes = await mainPdfDoc.save();
                    fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[pageResult.rowCount - 1].studentid}.pdf`, tempbytes);
                    let uploadresult = await fileUploadAzure(`${newfolderfullpath}/${pageResult.rows[pageResult.rowCount - 1].studentid}.pdf`, `backgroundimage`, awsinfo.azureconnectionstring, glcohortid.replace(/ /g, "_"));
                    console.log(uploadresult);
                    if (uploadresult == "fail"){
                      let email_body = `<p style="color: black;">There are some errors in uploading pdf. </p>`;
                      let email_subject = "Upload Pdf Error";
                      let logfilename=logfiledir+puserid+"/sendcertificate.log";
                      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                      return;
                    }                               
                  } catch (error) {
                    console.log("Databae and pdf file page dont match error!");
                  }
                }
              } else {
                for (let index = 0; index < pageResult.rowCount; index++){
                  try {
                    let pagenumber = parseInt(pageResult.rows[index].other2);
                    console.log("--!--",pagenumber);
                    let tempPdf = await PDFDocument.create();
                    const temppage = await tempPdf.copyPages(mainPdfDoc, [pagenumber - 1]);
                    tempPdf.addPage(temppage[0]);
                    let tempbytes = await tempPdf.save();
                    fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tempbytes);
                    let uploadresult = await fileUploadAzure(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, `backgroundimage`, awsinfo.azureconnectionstring, glcohortid.replace(/ /g, "_"));
                    console.log(uploadresult);
                    if (uploadresult == "fail"){
                      let email_body = `<p style="color: black;">There are some errors in uploading pdf. </p>`;
                      let email_subject = "Upload Pdf Error";
                      let logfilename=logfiledir+puserid+"/sendcertificate.log";
                      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                      return;
                    }                               
                  } catch (error) {
                    console.log("Databae and pdf file page dont match error!");
                  }
                }
              }
              await os.execCommand('rm ' + newfilefullpath);
              await os.execCommand('sudo rm -r ' + newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf("bu_") !== -1 && newfilename.toString().toLowerCase().indexOf(".pdf") != -1){        
            if (baseurl == ""){
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            if (awsinfo.localStoragePath == ""){
              let email_body = `<p style="color: black;">Local Storage Path is not defined. Please set base url at 'MY PROFILE/Setting/STORAGE INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 ' + newfolderfullpath);  
            let mainPdfBytes = fs.readFileSync(newfilefullpath);
            let mainPdfDoc = "";
            try {
              mainPdfDoc = await PDFDocument.load(mainPdfBytes);
              console.log('PDF is likely not encrypted.'); // Success indicates no encryption (may not be foolproof)
            } catch (error) {
              if (error.message.includes('encrypted')) {
                console.log('PDF is likely encrypted.');
                const { execSync } = require('child_process');
                const decryptedPdf = execSync(`qpdf --decrypt --replace-input ${newfilefullpath}`).toString();
                mainPdfBytes = fs.readFileSync(newfilefullpath);
                mainPdfDoc = await PDFDocument.load(mainPdfBytes);
              } else {
                console.error('Error loading PDF:', error);
              }
            }
            let pageCount = mainPdfDoc.getPages().length;
            console.log(pageCount);
            let pageQuery = format(`select a.studentid, b.other1, b.other2 from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}'`);
            let pageResult = await pool.query(pageQuery);
            console.log(pageQuery);
            if (pageResult.rowCount > 0){
              
              for (let index = 0; index < pageResult.rowCount; index++){
                // if (pageResult.rows[0].other2 == null || pageResult.rows[0].other2 == undefined || pageResult.rows[0].other2 == "") {
                //   let email_body = `<p style="color: black;">Getting Register Number from pdf is failed. `;
                //   let email_subject = "Upload Photos Error";
                //   mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                //   return;
                // }
                try {
                  let pagenumber = parseInt(pageResult.rows[index].other2);
                  let tempPdf = await PDFDocument.create();
                  const temppage = await tempPdf.copyPages(mainPdfDoc, [pagenumber - 1]);
                  for (const page of temppage) {
                    tempPdf.addPage(page);
                  }
                  let tempbytes = await tempPdf.save();
                  fs.writeFileSync(`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, tempbytes);
                  console.log("---",`${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`);
                  let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion, `${newfolderfullpath}/${pageResult.rows[index].studentid}.pdf`, puserid, `backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                  
                  console.log(uploadresult);
                  if (uploadresult == "fail"){
                    let email_body = `<p style="color: black;">There are some errors in uploading pdf. </p>`;
                    let email_subject = "Upload Pdf Error";
                    let logfilename=logfiledir+puserid+"/sendcertificate.log";
                    mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                    return;
                  }                               
                } catch (error) {
                  console.log("Databae and pdf file page dont match error!");
                }
              }
              await os.execCommand('rm ' + newfilefullpath);
              await os.execCommand('sudo rm -r ' + newfolderfullpath);
            }          
          }
          else if(newfilename.toString().toLowerCase().indexOf(".pdf") !== -1){
            if (baseurl == ""){
              let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            if (awsinfo.localStoragePath == ""){
              let email_body = `<p style="color: black;">Local Storage Path is not defined. Please set base url at 'MY PROFILE/Setting/STORAGE INFORMATION'`;
              let email_subject = "Upload Photos Error";
              mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
              return;
            }
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  

            const newFilename_1 = getNewFilenameWithoutFirstItem(path.basename(newfilefullpath));
           
            const newFilePath_1 = path.join(path.dirname(newfilefullpath), newFilename_1);
            console.log("newFilePath_1=", newFilePath_1);
            fs.rename(newfilefullpath, newFilePath_1, (err) => {
              if (err) {
                console.error('Error renaming file:', err);
              } else {
                console.log('File renamed successfully:', newFilename_1);
              }
            });

            if(awsinfo.storagetype == 1)
              {        
                let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion,newFilePath_1,puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                console.log("upload bakgrdound pdf: ", uploadresult);
                if (uploadresult == ""){
                  let email_body = `<p style="color: black;">There are some errors in uploading pdf. Below are error list.</p>${err}`;
                  let email_subject = "Upload Photos Error";          
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }
              else if (awsinfo.storagetype == 2){//azure
                
              }
              else if (awsinfo.storagetype == 3){//azure
                
              }
              else if (awsinfo.storagetype == 4){//ftp
              
              }
              else if (awsinfo.storagetype == 5){//local
                let tempbase64 = fs.readFileSync(`${newFilePath_1}`).toString('base64');           
                const contenttype = mime.lookup(`${newFilePath_1}`);
                let uploadresult = await filUploadLocal(baseurl, tempbase64, `${awsinfo.localstoragepath}/backgroundimage/${glcohortid.replace(/ /g, "_")}`, `${newFilename_1}`, contenttype)
                if (uploadresult == "fail"){
                  let email_body = `<p style="color: black;">There are some errors in uploading pdf. </p>`;
                  let email_subject = "Upload Pdf Error";
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }
              


           
            await os.execCommand('rm '+newFilePath_1);
            await os.execCommand('sudo rm -r '+newfolderfullpath);
                   
          }
          else { //zip file
            var extractresult= await extract(newfilefullpath, { dir: newfolderfullpath });
            //////////////////list  image files and upload///////////////////
            await os.execCommand('rm '+newfilefullpath);
            //var filenames = fs.readdirSync(newfolderfullpath); 
            const filenames = getAllFiles(newfolderfullpath);
            await os.execCommand('sudo chmod -R 777 '+newfolderfullpath);  
            //console.log("filenames",filenames);
            if (newfilename.toString().toLowerCase().indexOf("galgotias") != -1){
              if (awsinfo.baseurl == "")  {
                let email_body = `<p style="color: black;">Base url is not defined. Please set base url at 'MY PROFILE/Setting/ISSUER INFORMATION'.`;
                let email_subject = "Upload Photos Error";
                mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                return;
              }
              for (let index = 0; index < filenames.length; index++){
                // await os.execCommand(`sudo cp ${filenames[index]} ${dest_path}`);
                let uploadresult = await fileUploadPng(awsinfo.s3obj,awsinfo.awsregion,filenames[index],puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}_${certtype}`,awsinfo.s3bucketname);
                if (uploadresult == ""){
                  let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
                  let email_subject = "Upload Photos Error";          
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }        
            }
            else if (newfilename.toString().toLowerCase().indexOf("jain") != -1){
              for (let index = 0; index < filenames.length; index++){
                // fileUploadPdf(s3obj,bucket_region,bucket_file,collegeid,p_BucketKey,bucket_name="certonce")
                // let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion,filenames[index],puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                if (awsinfo.azureconnectionstring == "" || awsinfo.azureconnectionstring == null){
                  let email_body = `<p style="color: black;">Azure connnection string is not defined. Please enter Azure connection string in /My PROFILE/Setting/STORAGE INFORMATION .</p>`;
                  let email_subject = "Upload Photos Error";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
                let uploadresult = await fileUploadAzure(filenames[index], `backgroundimage`,awsinfo.azureconnectionstring, glcohortid.replace(/ /g, "_"));
                if (uploadresult == ""){
                  let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
                  let email_subject = "Upload Photos Error";          
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }        
            }
            else if (newfilename.toString().toLowerCase().indexOf("bhopal") != -1){
              for (let index = 0; index < filenames.length; index++){
                let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion,filenames[index],puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                console.log("upload bakgrdound pdf: ", uploadresult);
                if (uploadresult == ""){
                  let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
                  let email_subject = "Upload Photos Error";          
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }
              
            }
            else if (newfilename.toString().toLowerCase().indexOf("iilm") != -1){
              for (let index = 0; index < filenames.length; index++){
                // await common_lib.UploadToGDrive(path, fullpath, "memberphoto", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential);
                let uploadresult = await common_lib.UploadToGDrive(path, filenames[index], "memberphoto", puserid, awsinfo.gdrivetoken, awsinfo.gdrivecredential, glcohortid);
                console.log("upload iilm studentphoto: ", uploadresult);
                if (uploadresult == ""){
                  let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
                  let email_subject = "Upload Photos Error";          
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }
              
            }
            else if (newfilename.toString().toLowerCase().indexOf("cutm_diploma") != -1){
              for (let index = 0; index < filenames.length; index++){
                let uploadresult = await fileUploadPdf(awsinfo.s3obj,awsinfo.awsregion,filenames[index],puserid,`backgroundimage/${glcohortid.replace(/ /g, "_")}`,awsinfo.s3bucketname);
                console.log("upload bakgrdound pdf: ", uploadresult);
                if (uploadresult == ""){
                  let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
                  let email_subject = "Upload Photos Error";          
                  let logfilename=logfiledir+puserid+"/sendcertificate.log";
                  mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                  return;
                }
              }
              
            }
            else {
              for (i = 0; i < filenames.length; i++) {            
                var filenamewithoutext=(filenames[i].split("/")[filenames[i].split("/").length-1]).split(".")[0];
                var studentid=filenamewithoutext.split("_")[0];
                
                console.log("studentid="+studentid+",cohortid="+glcohortid, "ismemberphotourlmode=", ismemberphotourlmode);

                let uploadedurl="";
                if(ismemberphotourlmode=="no")
                {
                  console.log("awsinfo.storagetype=", awsinfo.storagetype);
                  if(awsinfo.storagetype == 1)
                  {        
                    var bitmap = fs.readFileSync(filenames[i], { encoding: 'base64' });
                    if(filenames[i].toLowerCase().indexOf(".png")!=-1)
                    {
                        var base64content="data:image/png;base64,"+bitmap;
                        uploadedurl=await uploadPhotoFile(awsinfo.s3obj, puserid, glcohortid, studentid, base64content, awsinfo.s3bucketname);
                    }
                    else if(filenames[i].toLowerCase().indexOf(".jpeg")!=-1 || filenames[i].toLowerCase().indexOf(".jpg")!=-1)
                    {
                        var base64content="data:image/jpeg;base64,"+bitmap;
                        uploadedurl=await uploadPhotoFile(awsinfo.s3obj, puserid, glcohortid, studentid,base64content, awsinfo.s3bucketname);
                    }
                  }
                  else if (awsinfo.storagetype == 2){//azure
                    
                  }
                  else if (awsinfo.storagetype == 3){//azure
                    
                  }
                  else if (awsinfo.storagetype == 4){//ftp
                  
                  }
                  else if (awsinfo.storagetype == 5){//local
                    let  rfilename= path.basename(filenames[i]);
                    

                    let tempData = "";
                    const tempExtension = ".tmp";

                    if (rfilename.toLowerCase().indexOf(".jpg")!== -1 || rfilename.toLowerCase().indexOf(".jpeg")!== -1) {
                      await toImageFileAsync(filenames[i], `${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.jpg`);
                      tempData = fs.readFileSync(`${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.jpg`).toString('base64');                      
                    } else if (rfilename.toLowerCase().indexOf(".png")!== -1) {
                      await toImageFileAsync(filenames[i], `${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.png`);                     
                      tempData = fs.readFileSync(`${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.png`).toString('base64');       
                    }
                    console.log(baseurl);
                    const contenttype = mime.lookup(filenames[i]);
                    console.log(filenames[i], contenttype)
                    let uploadresult = await filUploadLocal(baseurl, tempData, `${awsinfo.localstoragepath}/memberphoto`, rfilename,contenttype);
                    if (uploadresult == "fail"){
                      let email_body = `<p style="color: black;">There are some errors in uploading photos. </p>`;
                      let email_subject = "Upload Photos Error";
                      let logfilename=logfiledir+puserid+"/sendcertificate.log";
                      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                      return;
                    }
                    uploadedurl = baseurl+"/memberphoto/"+rfilename;
                    console.log(uploadedurl);
                  }
                }
                else {
                  if(awsinfo.storagetype == 1)
                  {        
                    uploadedurl = await fileUploadPng(awsinfo.s3obj,awsinfo.awsregion,filenames[i],"","memberphoto", awsinfo.s3bucketname);
                    console.log(uploadedurl);
                  }
                  else if (awsinfo.storagetype == 2){//azure
                    
                  }
                  else if (awsinfo.storagetype == 3){//azure
                    
                  }
                  else if (awsinfo.storagetype == 4){//ftp
                  
                  }
                  else if (awsinfo.storagetype == 5){//local
                    let  rfilename= path.basename(filenames[i]);
                    
                    let tempData = "";
                    const tempExtension = ".tmp";

                    if (rfilename.toLowerCase().indexOf(".jpg")!== -1 || rfilename.toLowerCase().indexOf(".jpeg")!== -1) {
                      await toImageFileAsync(filenames[i], `${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.jpg`);
                      tempData = fs.readFileSync(`${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.jpg`).toString('base64');                      
                    } else if (rfilename.toLowerCase().indexOf(".png")!== -1) {
                      await toImageFileAsync(filenames[i], `${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.png`);                     
                      tempData = fs.readFileSync(`${path.dirname(filenames[i])}/${filenamewithoutext}${tempExtension}.png`).toString('base64');       
                    }
                   
                    const contentType = mime.lookup(filenames[i]);
                    let uploadresult = await filUploadLocal(baseurl, tempData, `${awsinfo.localstoragepath}/memberphoto`, rfilename, contentType);
                    if (uploadresult == "fail"){
                      let email_body = `<p style="color: black;">There are some errors in uploading photos. </p>`;
                      let email_subject = "Upload Photos Error";
                      let logfilename=logfiledir+puserid+"/sendcertificate.log";
                      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
                      return;
                    }
                    uploadedurl = `${baseurl}/memberphoto/${rfilename}`;
                    console.log(uploadedurl);
                  }
                }

                try {
                  const photoQuery = `UPDATE ${cohorttablename} SET photo='yes', photourl=$1 FROM cohort c  WHERE ${cohorttablename}.cohortid=c.id AND ${cohorttablename}.photofilename = $2 AND c.cohortid=$3 AND c.accountid=$4 RETURNING ${cohorttablename}.id;`;       
                  const photoUpdateResult = await pool.query(photoQuery, [uploadedurl, studentid, glcohortid, puserid]);
                  if (photoUpdateResult.rowCount > 0) {
                    console.log("Photo updated successfully.");
                  } else {
                    const photoQuery_1 = `UPDATE ${cohorttablename} SET photo='yes', photourl=$1
                      WHERE id IN ( SELECT b.id FROM student a LEFT JOIN ${cohorttablename} b ON a.id=b.studentid LEFT JOIN cohort c ON b.cohortid=c.id WHERE a.studentid=$2 AND c.cohortid=$3 AND c.accountid=$4)`;
                    await pool.query(photoQuery_1, [uploadedurl, studentid, glcohortid, puserid]);
                    console.log("Photo updated for associated cohorts.");
                  }
                }
                catch(err0) {
                  console.log("err0 = : ",err0);
                }
              }
            }
            console.log('sudo rm -r '+newfolderfullpath);
            await os.execCommand('sudo rm -r '+newfolderfullpath);
            /////////////////////////////////////////////////////////////////
          }        
        }
        
        let email_body = `<p style="color: black;">Photo files were uploaded successfully for cohort ${gl_cohort_ids}.</p>`;
        let email_subject = "Upload Photos Successfully";
        let mailer_result = await mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename)
        
        if (mailer_result.status == "400"){
          const mailer_certonce = require("../../config/mailer_certonce");
          let logfilename=logfiledir+puserid+"/sendcertificate.log";
          let email_body = `<p style="color: black;">There is an error in uploading files.</p>
          <p style="color: black;">Error: ${JSON.stringify(mailer_result.message.response)}</p>`
          let email_subject = "Upload Result";
          mailer_certonce(email_body, email_subject, contact_email, logfilename);
        }
        return;
      });
    }
    catch(err){
      let email_body = `<p style="color: black;">There are some errors in uploading Photo. Below are error list.</p>${err}`;
      let email_subject = "Upload Photos Error";
      
      const mailer_downloadcertificate = require("../../config/mailer_downloadcertificate");
      let logfilename=logfiledir+puserid+"/sendcertificate.log";
      mailer_downloadcertificate(email_body, email_subject, contact_email, smtpaccount, logfilename);
      return;
    }    
  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
   return res.json(obj);
  }
}

function toImageFileAsync(inputPath, outputPath) {
  const sharp = require('sharp');
  return new Promise((resolve, reject) => {
    sharp(inputPath)
     .rotate() // Disable auto-rotation
     .resize(800, null)
     .jpeg({ quality: 80 }) // Or.png({ quality: 80 }) depending on the file type
     .toFile(outputPath, (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
  });
}
user.uploadmultiphotos = async (req, res, next) => {
  try {
    try
    {
      var os = new os_func();
      await os.execCommand('mkdir '+college_photos_path);
    }
    catch(err0)
    {

    }
    //Variables to read file.
    var currentUser = req.user;
    if(req.user.business_is_verified==false)
    {
    var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
        };
        res.json(obj);
        return;
    }
    var permission=await getPermission(req.user.user_id,"uploadstuduents");
    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);  
    var awsinfo=await getS3BucketInformation(puserid);

    var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};

    var form = new multiparty.Form();
    form.parse(req, function(err, fields, files) {
      console.log(fields['certtype'][0], fields['cohortid'][0]);
      let certtype = fields['certtype'][0];
      let cohortid = fields['cohortid'][0];
      let cohorttablename = certtypes[certtype];
      let uploadedurl="";
      Object.keys(files).forEach(async function(name){
        let [studentid, fileext] = files[name][0].originalFilename.split(".");
        let checkQuery = format(`select b.id from ${cohorttablename} b left join cohort c on b.cohortid=c.id left join student a on b.studentid=a.id where c.cohortid='${cohortid}' and a.studentid='${studentid}' and (unsignedcertificateurl is null or unsignedcertificateurl='') and (signedcertificateurl is null or signedcertificateurl='')`);
        console.log(checkQuery);
        let checkResult = await pool.query(checkQuery);
        if (checkResult.rowCount > 0) {
          let temp = fs.readFileSync(files[name][0].path, {encoding: 'base64'});
          let base64content = `data:image/${fileext};base64,${temp}`;
          uploadedurl=await uploadPhotoFile(awsinfo.s3obj, puserid, cohortid, studentid, base64content, awsinfo.s3bucketname);
          let updateQuery = format(`update ${cohorttablename} set photo='yes', photourl='${uploadedurl}' where id=${checkResult.rows[0].id}`);
          await pool.query(updateQuery);
          // console.log("111111111111222222222223333333333");
          // let temp1 = await readPhotoFile(awsinfo.s3obj,puserid,cohortid,studentid,awsinfo.s3bucketname);
          // console.log(temp1);
        }
        // console.log(studentid, fileext);
      })  
    });    
    var obj = {
      Status: 200,
      message: "Photo files were uploaded successfully."
    }
    res.json(obj);
  }
  catch (err) {
    console.log(err);
    var obj = {
      Status: 400,
      message: err.message
    }
   return res.json(obj);
  }
}

// Preview Student Photo
user.previewStudentPhoto = async (req, res, next) => {
  try {
    
    var studentid = req.body.studentid;    
    var certtype = req.body.certtype;
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined)
    {      
      cohorttablename=certtypes[certtype];
    }
    var previewecertitem=[];
    if(req.user.business_is_verified==false)
    {
      var obj = {
            Status: 400,
              message: "Your account is currently under verification, please contact certonce team."
          };
          res.json(obj);
          return;
    }
    var permission=await getPermission(req.user.user_id,"previewCertificate");
    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var awsinfo=await getS3BucketInformation(puserid);
    var settingInfo = await getProfileFromAccountId(puserid);
    
    let photoContent = "";
    let photoTitle = "";
    let photoQuery = `select a.firstname, a.middlename, a.lastname, a.studentid, c.cohortid, b.photourl, b.photofilename from student a left join ${cohorttablename} b on b.studentid=a.id left join cohort c on c.id=b.cohortid where b.id='${studentid}'`;
    let photoResult = await pool.query(photoQuery);
    if(photoResult.rowCount > 0){
      let photofilename = photoResult.rows[0].studentid;
      console.log("photoResult.rows[0].photofilename=", photoResult.rows[0].photofilename);
      if(photoResult.rows[0].photofilename!==null && photoResult.rows[0].photofilename!=="") photofilename = photoResult.rows[0].photofilename;
      if(settingInfo.ismemberphotourlmode=="no")
      {
        console.log("awsinfo.storagetype=", awsinfo.storagetype);
        if(awsinfo.storagetype == 1)
        { 
          photoContent = await readPhotoFile(awsinfo.s3obj,puserid, photoResult.rows[0].cohortid, photofilename, awsinfo.s3bucketname);        
          photoContent = "<div style='text-align:center;'><img style='width: 100%' src='" + photoContent + "' /></div>"
        }
        else if (awsinfo.storagetype == 2){//azure
          
        }
        else if (awsinfo.storagetype == 3){//azure
          
        }
        else if (awsinfo.storagetype == 4){//ftp
        
        }
        else if (awsinfo.storagetype == 5){//local
          let ext = (photoResult.rows[0].photourl).split(".")[(photoResult.rows[0].photourl).split(".").length-1];
          photoContent ="<div style='text-align:center;'><img style='width: 100%' src='" + settingInfo.baseurl+"/memberphoto/"+photofilename+"."+ext + "' /></div>" ;
          console.log("photoContent=", photoContent);
          
        }

      }
      else
      {
        if(settingInfo.baseurl=="" || settingInfo.baseurl == null)
        {
          var obj = {
            Status: 400,
              message: "Base url is not defined. Please set it on MY PROFILE/Setting."
          };
          res.json(obj);
          return;
        }
        if(photoResult.rows[0].photourl!=="" && photoResult.rows[0].photourl!==null)
        {
          let ext = (photoResult.rows[0].photourl).split(".")[(photoResult.rows[0].photourl).split(".").length-1];
          photoContent ="<div style='text-align:center;'><img style='width: 100%' src='" + settingInfo.baseurl+"/memberphoto/"+photofilename+"."+ext + "' /></div>" ;
        }
        else
        {
          photoContent ="<div style='text-align:center;'><img style='width: 100%' src='' /></div>" ;
        }
        
      }
      let fullname = "";
      let firstname = photoResult.rows[0].firstname;
      let middlename = photoResult.rows[0].middlename;
      let lastname = photoResult.rows[0].lastname;
      if (middlename == null || middlename == "") {
        fullname = firstname + " " + lastname;
      }
      else {
        fullname = firstname + " " + middlename + " " + lastname;
      }
      // photoTitle = `Name: ${fullname} <br/> Rollnumbrer: ${photoResult.rows[0].studentid}`;
      photoTitle = `Name: ${fullname} `;
    }

    var obj = {
        Status: 200,
        message: 'Success',
        photoContent: photoContent,              
        photoTitle: photoTitle
    }
    res.json(obj);
    }

  catch (err) {
    var obj = {
          Status: 400,
          message: err.message,
          PreviewCert:[],
    }
    res.json(obj);
  }
}

user.uploadTranscriptPhoto = async(req, res, next) => {
  
  upload(req, res,async function (err) {
    if (err instanceof multer.MulterError) {
      console.log(err);
       var obj = {
       Status: 400,
       message: err.message
       }
       return res.json(obj);
        
    } else if (err) {
      console.log(err.message);
       var obj = {
       Status: 400,
       message: err.message
       }
       return res.json(obj);
    }

    try
    {
      var api_key = req.body.apikey;
      var main_cohortid = req.body.cohortid;
      if (main_cohortid == null || main_cohortid == undefined) main_cohortid = "";
      if (api_key == "" || api_key == null || api_key == undefined) {
        var obj = {
          Status: 400,
          message: "Invalid API Key"
        };
        return res.json(obj);
      }
      var userid = await getUserIDFromApiKey(api_key);
      if (userid == null) {
        var obj = {
          Status: 400,
          message: "Invalid api key"
        };
        res.json(obj);
        return;
      }
      var puserid=await getParentAccountIdFromId(userid);  
      console.log("uploadTranscriptPhoto", puserid);
      var awsinfo=await getS3BucketInformation(puserid);

      var smtpaccount = {
        'type' : true,
        'username' : "", 
        'clientid' : "",
        'clientsecret' : "",
        'refreshtoken' : "",
        'from': ""
      };
      // var smtphost = "";
      // var smtpport = "";
      // var smtpusername = "";
      // var smtppassword = "";
      // var smtpfrom = "";
      // var smtpcc = "";
      // var organization_name = "";
      var organization_verify_uri = "";
      var querySmtp = format(`SELECT * FROM setting  where accountid='${puserid}';`);
      console.log(querySmtp);
      let smtpresult = await pool.query(querySmtp);
    
      if (smtpresult && smtpresult.rowCount > 0) {
        if (smtpresult.rows[0].smtptype == true) {
          smtpaccount['type'] = smtpresult.rows[0].smtptype;
          smtpaccount['username'] = smtpresult.rows[0].smtpusername;
          smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
          smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
          smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;      
        }
        else if (smtpresult.rows[0].smtptype == false) {
          smtpaccount['type'] = smtpresult.rows[0].smtptype;
          smtpaccount['host'] = smtpresult.rows[0].smtphost;
          smtpaccount['port'] = smtpresult.rows[0].smtpport;
          smtpaccount['username'] = smtpresult.rows[0].smtpusername;
          smtpaccount['password'] = smtpresult.rows[0].smtppassword;      
        }
        smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
      }  
      else {
        var obj = {
          Status: 400,
          message: "Invalid Email Account."
        };
        res.json(obj);
        return;
      }
      // miet_transcript_error_mail(puserid, smtpaccount, email_body, "Alert for createMIETTranscript")
      
      smtpaccount['cc'] = ["meenoy@certonce.com", "pawan.khurana@certonce.com", "bernetta.lobo@certonce.com", "certificates@mietjammu.in", "certificates@mietjammu.in"];

      var newfilename=req.file.filename;
      var newfoldername=newfilename.split(".")[0];
      
      var glcohortid="";
      if (main_cohortid == ""){
        for(let i=0; i< newfoldername.split("-").length; i++)
        {
          if(i==0) continue;
          if(glcohortid==="")
            glcohortid=newfoldername.split("-")[i];
          else
            glcohortid=glcohortid+"-"+newfoldername.split("-")[i];
        }
      }
      else glcohortid = main_cohortid;
      
      let checkQuery = format(`select id from cohort where cohortid='${glcohortid}' and accountid='${puserid}'`);
      let checkResult = await pool.query(checkQuery);
      if (checkResult.rowCount == 0){
        var obj = {
          Status: 400,
          message: "There is no selected cohort. Please upload the student data through Transcript API."
        };
        res.json(obj);
        return;
      }
      
      var newfilefullpath=college_photos_path+"/"+newfilename;
      var newfolderfullpath=college_photos_path+"/"+newfoldername;
      try
      {
        var os = new os_func();
        await os.execCommand('mkdir '+newfolderfullpath);
      }
      catch(err)
      {          
      }
      var certtype = req.body.certtype;
      var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
      var cohorttablename = "cohortmembers_transcript";
      //  if(certtype!=null && certtype!=undefined && certtype!="")
      //  {
      //    cohorttablename = certtypes[certtype];
      //  }
      var obj = {
        Status: 200,
        message: `Please wait the photos are getting uploaded to ${glcohortid}, on completion you will receive an email.`
      }
      res.json(obj);

      var extractresult= await extract(newfilefullpath, { dir: newfolderfullpath });
      //////////////////list  image files and upload///////////////////
      await os.execCommand('rm '+newfilefullpath);
      //var filenames = fs.readdirSync(newfolderfullpath); 
      const filenames = getAllFiles(newfolderfullpath);
      //console.log("filenames",filenames);
      for (i = 0; i < filenames.length; i++) {          
        var filenamewithoutext=(filenames[i].split("/")[filenames[i].split("/").length-1]).split(".")[0];
        var studentid=filenamewithoutext.split("_")[0];
        var cohortid=glcohortid;
        if(filenamewithoutext.split("_").length>1)
        {
          cohortid=filenamewithoutext.split("_")[1];
        }
        console.log("studentid="+studentid+",cohortid="+cohortid);
        //console.log("newfolderfullpath",newfolderfullpath);
          //var photofilefullpath=newfolderfullpath+"/"+filenames[i];
        let uploadedurl="";
        var bitmap = fs.readFileSync(filenames[i], { encoding: 'base64' });
        if(filenames[i].toLowerCase().indexOf(".png")!=-1)
        {
            var base64content="data:image/png;base64,"+bitmap;
            uploadedurl= await uploadPhotoFile(awsinfo.s3obj, puserid, cohortid, studentid, base64content, awsinfo.s3bucketname);
        }
        else if(filenames[i].toLowerCase().indexOf(".jpeg")!=-1 || filenames[i].toLowerCase().indexOf(".jpg")!=-1)
        {
            var base64content="data:image/jpeg;base64,"+bitmap;
            uploadedurl=await uploadPhotoFile(awsinfo.s3obj, puserid, cohortid, studentid,base64content, awsinfo.s3bucketname);
        }

        try
        {
          let photoQuery = format(`update ${cohorttablename} set photo='yes', photourl='${uploadedurl}' where id in (select b.id from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where a.studentid='${studentid}' and c.cohortid='${cohortid}')`);
          // console.log(photoQuery);
          await pool.query(photoQuery);
        }
        catch(err)
        {
          miet_transcript_error_mail(puserid, smtpaccount, err.message, "Alert for uploadTranscriptPhoto");
        }          
      }
      /////////////////////////////////////////////////////////////////
  
      // var obj = {
      //   Status: 200,
      //   message: "Photo files were uploaded successfully."
      // }
      console.log("Photo files were uploaded successfully.");
      miet_transcript_error_mail(puserid, smtpaccount, `Photo files were uploaded successfully for ${cohortid}.`, "Alert for uploadTranscriptPhoto");
      return ;
    }
    catch(err1)
    {
      // console.log(err1);
      // var obj = {
      //   Status: 400,
      //   message: err1.message
      // }
      // return res.json(obj);
      miet_transcript_error_mail(puserid, smtpaccount, err1.message, "Alert for uploadTranscriptPhoto");
      return;
    }  
  });
}
//Get Cohorts
user.getCohorts = async (req, res, next) => {
  try {
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var settingInfo = await getProfileFromAccountId(puserid);
    //var cohortData = [{'label' : 'All', 'value' : 'all', 'country':''}];
    var cohortData = [];
    var cohortQuery = format(`select * from (select distinct on (cohortid) * from cohort where accountid='${puserid}') as temptalbe order by id desc`);
    pool.query(cohortQuery,async function (err, result) {
        if (err) {
            var obj = {
                Status: 400,
                message: err.message
            }
            res.json(obj)
        }
        else {
            if ( result.rowCount > 0 ) {
              for ( var i = 0 ; i < result.rowCount; i++ ) {
                //if(settingInfo.cohortsearchmode==0) //normal mode
                {
                  cohortData.push({
                      'label' : result.rows[i].name,
                      'value' : result.rows[i].cohortid,
                      'country': result.rows[i].country
                  });
                }
                /*
                else if(settingInfo.cohortsearchmode==1) //several dropdown mode by spliting dash for cohortid
                {
                  if(result.rows[i].cohortid!=null)
                  {
                    let cohortpieces = (result.rows[i].cohortid).split("-");
                    if(cohortpieces.length == settingInfo.cohortsplitlength)
                    {
                      cohortData.push({
                        'label' : result.rows[i].name,
                        'value' : result.rows[i].cohortid,
                        'country': result.rows[i].country
                      });
                    }
                  }
                }*/
              }
            }

            var tempaltes_json=""; 
            var query = format(`SELECT templates FROM setting where accountid='${puserid}';`);    
            var templatesresult=await pool.query(query);      
            if (templatesresult.rows && templatesresult.rows.length != 0) {                  
              tempaltes_json=templatesresult.rows[0].templates;                  
            }

            var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
            var cohorttablename=certtypes[req.body.certtypevalue];   
            var cohortdropwdownMainarray={};  
            var cohortsearchmode=0;
            if (settingInfo.cohortdropdownlist != undefined || settingInfo.cohortdropdownlist != null && settingInfo.cohortdropdownlist != "") 
            {
              try {
                
                let cohortdropdownlistobj = JSON.parse(settingInfo.cohortdropdownlist);                
                let customdropdownfortype = cohortdropdownlistobj[`${req.body.certtypevalue}`];                
                let tarr = customdropdownfortype.split(",");
                for (let index = 0; index < tarr.length; index++) {
                  var tmpcohortdropwdownarray = [];
                  var cohortDropdownQuery = format(`select distinct b.${tarr[index]} as cohortdropdowncolumn from ${cohorttablename} b
                  left join cohort c on b.cohortid=c.id
                  where c.accountid='${puserid}' and b.certificatetype='${req.body.certtypevalue}';`);
                  console.log("cohortDropdownQuery=", cohortDropdownQuery);
                  var cohortdropdownresult = await pool.query(cohortDropdownQuery);
                  if (cohortdropdownresult.rowCount > 0) {
                    for (const row of cohortdropdownresult.rows) {
                      let cohortdropdowncolumn = row['cohortdropdowncolumn'];
                      tmpcohortdropwdownarray.push({ label: cohortdropdowncolumn, value: cohortdropdowncolumn });
                    }
                  }
                  cohortdropwdownMainarray[tarr[index]] = tmpcohortdropwdownarray;
                  cohortsearchmode=1;

                  
                }

                
                
              } catch (error) {
                console.log("cohortdropdownlist error=", error);
              }
              
            }
            

            var obj = {
                Status: 200,
                message: "Get Cohorts",
                Data: cohortData,
                Templates:tempaltes_json,
                cohortdropwdownarray:cohortdropwdownMainarray,
                cohortsearchmode:cohortsearchmode
            }
            res.json(obj)
        }
    })
  }
  catch (err) {
    var obj = {
        Status: 400,
        message: err.message
    }
    res.json(obj)
  }
}

//Get Partners
user.getPartners = async (req, res, next) => {
  try{
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    // var partnerData = {'logo' : [], 'signature' : []};
    let logoData = [];
    let signatureData = [];
    let logoQuery = format(`select id, partnercompanyname from partnerlogo where accountid='${puserid}' order by id desc`);
    let logoResult = await pool.query(logoQuery);
    logoResult.rows.forEach((element) => {
      // logoData.push([element.id, element.partnercompanyname]);
      logoData.push({
        'label': element.partnercompanyname,
        'value': element.id
      });
    });
    let signatureQuery = format(`select id, signaturename, signername, partnercompanyname from partnersignature where accountid='${puserid}' order by id desc`);
    let signatureResult = await pool.query(signatureQuery);
    signatureResult.rows.forEach((element) => {
      // signatureData.push([element.id, element.signaturename, element.signername, element.partnercompanyname]);
      signatureData.push({
        'label': element.signaturename,
        'value': element.id,
        // 'signername': element.signername,
        // 'partnercompay': element.partnercompanyname
      })
    })
    var obj = {
      Status: 200,
      message: "Success",
      logo: logoData,
      signature: signatureData
    }
    res.json(obj);
  }
  catch(error){
    console.log(error.message);
    var obj = {
      Status: 400,
      message: error.message
    }
   return res.json(obj);
  }
}

//Get Logo Image
user.getLogoImage = async (req, res, next) => {
  try {
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    let logoData = "";
    // let partnercompanyname = req.body.partner;
    let partnerid = req.body.partner;
    let side = req.body.side;
    // let logoQuery = format(`select logoimage from partnerlogo where accountid='${puserid}' and partnercompanyname='${partnercompanyname}'`)
    let logoQuery = format(`select logoimage from partnerlogo where id=${partnerid}`);
    let logoResult = await pool.query(logoQuery);
    if(logoResult.rowCount > 0){
      logoData = logoResult.rows[0].logoimage;       
    }
    
    var obj = {
      Status: 200,
      message: "Success",
      logo: logoData,
      side: side
    }
    res.json(obj);
  }
  catch(err){
    console.log(err.message);
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }
}

//Get Signature Image
user.getSignatureImage = async (req, res, next) => {
  try {
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    let signatureData = [];
    // let signaturename = req.body.signature;
    let signatureid = req.body.signature;
    let side = req.body.side;
    // let signatureQuery = format(`select signatureimage, signaturename, signername, partnercompanyname from partnersignature where accountid='${puserid}' and signaturename='${signaturename}'`);
    let signatureQuery = format(`select signatureimage, signaturename, signername, partnercompanyname from partnersignature where id=${signatureid}`);
    console.log(signatureQuery);
    let signatureResult = await pool.query(signatureQuery);
    if(signatureResult.rowCount > 0){
      signatureData = signatureResult.rows[0];       
    }
    
    var obj = {
      Status: 200,
      message: "Success",
      signature: signatureData,
      side: side
    }
    res.json(obj);
  }
  catch(err){
    console.log(err.message);
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }
}
//Get Students data
function isEmpty(obj) {
  for (var key in obj) {
    if ( obj.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}


//update student
user.updateinformation = async (req, res, next) => {

  try {
    //Variables to read file.
    var currentUser = req.user;
    
    var puserid=await getParentAccountIdFromId(req.user.user_id);      
    var selectedcerttype = req.body.selectedCertType;
    var selectedcoid = req.body.selectedcoid;
    var selectedstdid= req.body.selectedstdid;
    var newemail=req.body.newemail;
    var firstname=req.body.firstname;
    var middlename=req.body.middlename;
    var lastname=req.body.lastname;
    if(validator.validate(newemail)==false)
    {
      console.log(newemail)
      var obj = {
        Status: 400,
        message: newemail+ " email format is incorrect."
      };
      return res.json(obj);

    }
    var cohorttablename="cohortmembers_degree";
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    if (selectedcerttype == null || selectedcerttype == undefined) selectedcerttype = "";
    if (selectedcerttype != "") cohorttablename = certtypes[selectedcerttype];

    var existstudentquery = format(`select id from student where emailaddress='${newemail}' and firstname='${firstname}' and middlename='${middlename}' and lastname='${lastname}' and accountid='${puserid}'`);
    var existstudents = await pool.query(existstudentquery);
    if(existstudents.rowCount > 0)
    {
      for ( const row of existstudents.rows ) {
        var updateQuery = format(`update ${cohorttablename} set studentid='${row['id']}' where id='${selectedstdid}'`);
        await pool.query(updateQuery);
      }
    }
    else
    {
      var studentquery=format(`select studentid from ${cohorttablename} where id='${selectedstdid}'`);
      var students = await pool.query(studentquery);
        if ( students.rowCount > 0 ) {
          for ( const row of students.rows ) {

            var whereClause =  "WHERE id='"+ row['studentid'] +"';"
            var studentQuery = format(`update student set emailaddress='${newemail}', firstname='${firstname}', middlename='${middlename}', lastname='${lastname}' ${whereClause}`);
            await pool.query(studentQuery);
          }
      }
    }
    var obj = {
          Status: 200,
          message: 'Successfully updated'
        }
      return res.json(obj);
  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
   return res.json(obj)
  }
}
//copy email as pk
user.copyemailaspk = async (req, res, next) => {

  try {
    //Variables to read file.
    var currentUser = req.user;
    if(req.user.business_is_verified==false)
    {
    var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
        };
        res.json(obj);
        return;
    }    
    var puserid=await getParentAccountIdFromId(req.user.user_id);      
    var params = req.body.selectedItems;
    var certtype= req.body.certtype;
    console.log(certtype)
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename="cohortmembers_degree";
    if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined)
    {
      
      cohorttablename=certtypes[certtype];
    }
    else certtype="degree";
    var glcohortid="";
    var isTotal=false;
    //params=JSON.parse(params);
    console.log(params) 
    if(params != null&&params != undefined&&params.length > 0)
    {
      for (let index = 0; index <params.length; index++) {
         const element = params[index];
         let cohortid=element.split("=")[0];
         let studentid=element.split("=")[1];
         if(studentid=='') 
         {
           isTotal=true;
           glcohortid=cohortid;
           break;
         }                   
      }

      var cohortdropdownclause = "";
      var selectedCohortJson = req.body.selectedCohortJson;      
      
      if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
      {
        try {
          //selectedCohortJson = JSON.parse(selectedCohortJson);
          if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
          else
          {
            Object.keys(selectedCohortJson).forEach((key, value) => {
              if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
              else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
            });
          }
        } catch (error) {
          console.log(error);
        }        
      }      
      
    
      if(isTotal==false)
      {
        for (let index = 0; index < params.length; index++) {
          const element = params[index];
          let cohortid=element.split("=")[0];
          let studentid=element.split("=")[1];
          //console.log("cohortid="+cohortid+",studentid="+studentid);
          ///////////////////////////////////////////
              if ( cohortid == '' || studentid == '') {continue;}
              var whereClause =  "WHERE a.id=t.studentid and t.id='"+studentid+"';"
              var studentQuery = format(`update ${cohorttablename} t set publickey=a.emailaddress, blockcertsinvitationsent = true from student a ${whereClause}`);
              console.log(studentQuery)
              let students = await pool.query(studentQuery);
          
          }//for
      }
      else
      {
        if(glcohortid=="")
        {
          var obj = {
              Status: 400,
                message: "Invalid selected students."
            };
            res.json(obj);
            return;
        }
        if(cohortdropdownclause!=="")
        {
          
          let pageQuery = format(`select c.cohortid as cohortfullid, c.id as cohortintid from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.accountid='${puserid}' and ${cohortdropdownclause}`);
          let cohorts = await pool.query(pageQuery);
          if (cohorts.rowCount > 0){
            for ( const row of cohorts.rows )
            {              
              var whereClause =  "WHERE a.id=b.studentid and b.cohortid='"+ row['cohortintid'] +"' and b.certificatetype='"+certtype+"';"
              var studentQuery = format(`update ${cohorttablename} b set publickey=a.emailaddress, blockcertsinvitationsent = true from student a ${whereClause}`);
              let students = await pool.query(studentQuery);
            }
          }
        }
        else
        {
          var cohortsquery=format(`select * from cohort where cohortid='${glcohortid}' and accountid='${puserid}'`);
          var cohorts = await pool.query(cohortsquery);
            if ( cohorts.rowCount > 0 ) {
              for ( const row of cohorts.rows ) {                   
                var whereClause =  "WHERE a.id=b.studentid and b.cohortid='"+ row['id'] +"' and b.certificatetype='"+certtype+"';"
                var studentQuery = format(`update ${cohorttablename} b set publickey=a.emailaddress, blockcertsinvitationsent = true from student a ${whereClause}`);
                let students = await pool.query(studentQuery);
              }
          }
        }
      }
    
      
    }
      

    var obj = {
          Status: 200,
          message: 'Successfully updated'
        }
    return res.json(obj);
  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
   return res.json(obj)
  }
}


user.getStudents = async (req, res, next) => {

  try {
    if(req.user.business_is_verified==false)
    {
    var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
        };
        res.json(obj);
        return;
    }
    var permission=await getPermission(req.user.user_id,"getStudents");
    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var settingInfo = await getProfileFromAccountId(puserid);
    //let encdata=await encrypt(Buffer.from("bc42025c7ebc7c45d3dd8c2567dbcea27727a613fb84363fc7440b5356534f8b")); 
    //console.log(encdata);
    
    var cohortId = '';
    var step = 'all';
    var mockData = [];
    var returnVal ;
    var cohortData=[];

    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename=certtypes[req.body.certtypevalue];
   
    //cohortData = [{'label' : 'All', 'value' : 'all'}];
    var cohortQuery = format(`select * from (select distinct on (cohortid) *  from cohort where accountid='${puserid}') as temptable order by id desc`);
    var defaultCohort="";
    var cohortindex=0;
    var cohorts = await pool.query(cohortQuery);
    if ( cohorts.rowCount > 0 ) {
      for ( const row of cohorts.rows ) {
        //if(settingInfo.cohortsearchmode==0) //normal mode
        {
          if(cohortindex==0) defaultCohort=row['cohortid'];
          cohortData.push({
                    'label' : row['name'],
                    'value' : row['cohortid']
                });
          cohortindex++;      
        }
        /*
        else if(settingInfo.cohortsearchmode==1) //several dropdown mode by spliting dash for cohortid
        {
          if(row['cohortid']!=null)
          {
            let cohortpieces = (row['cohortid']).split("-");
            if(cohortpieces.length == settingInfo.cohortsplitlength)
            {
              if(cohortindex==0) defaultCohort=row['cohortid'];
              cohortData.push({
                'label' : row['name'],
                'value' : row['cohortid']
              });
              cohortindex++;
            }
          }
        }
        */
      }
      
    }


    var selectedCohortJson = req.body.selectedCohortJson || {};
    // console.log("@@@@@---------!!!!!",selectedCohortJson);
    var cohortdropdownclause = "";
    if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
    else
    {
      Object.keys(selectedCohortJson).forEach((key, value) => {
        if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
        else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
      });
    }   
    // var selectedCohortJson = req.body.selectedCohortJson || {}; // Default to an empty object if undefined or null
    // var cohortdropdownclause = "";

    // if (Object.keys(selectedCohortJson).length === 0) {
    //   cohortdropdownclause = ""; // Handle the case for an empty object
    // } else {
    //   Object.keys(selectedCohortJson).forEach((key) => {
    //     if (cohortdropdownclause !== "") {
    //       cohortdropdownclause += " and b." + key + "='" + selectedCohortJson[key] + "'";
    //     } else {
    //       cohortdropdownclause = " b." + key + "='" + selectedCohortJson[key] + "'";
    //     }
    //   });
    // }
    
   
    if (typeof req.body.cohort==="undefined" || req.body.cohort==="undefined" || req.body.cohort===undefined) cohortId = defaultCohort;    
    else cohortId = req.body.cohort;
    
    if(cohortId!="" || cohortdropdownclause!="")        
    {  
      console.log("v1",cohortId, "v2",step, "v3",req.body.searchValue, "v4",puserid, "v5",req.body.certtypevalue, "v6",req.body.pageOffset, "v7",req.body.maxitemsperpage, "v8","all", "v9",cohortdropdownclause);    
      returnVal =  await makeMockData(cohortId, step, req.body.searchValue, puserid, req.body.certtypevalue, req.body.pageOffset, req.body.maxitemsperpage, "all", cohortdropdownclause);
      if ( !isEmpty(returnVal) > 0 )
      {
        mockData.push(returnVal);
      }
    }    
    var obj = {
        Status: 200,
        message: 'get students data successfully',
        Data: {"mockData":mockData, "cohortData":cohortData},
        step: step
    }
    res.json(obj);
    return;

  } catch (err) {
    console.log(err);
    var obj = {
      Status: 400,
        message: err.message
    };
    res.json(obj);
  }
}

user.deletestudent = async (req, res, next) => {
  try{
    var currentUser = req.user;
    if(req.user.business_is_verified==false)
    {
    var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
        };
        res.json(obj);
        return;
    }
    var permission=await getPermission(req.user.user_id,"getStudents");
    if(permission==false)
    {
        var obj = {
          Status: 400,
            message: "Access denied."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    
    var certtype = req.body.certtype;
    var params = req.body.selectedItems;
    var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
    var cohorttablename=certtypes[certtype];

    for (let index = 0; index < params.length; index++) {
      var cohortid = params[index].split("=")[0];
      var studentid = params[index].split("=")[1];
      if(cohortid =="" || studentid == "") continue;


      let deleteQuery = format(`delete from semestertranscript where studentid in (select studentid from student where id in (select studentid from ${cohorttablename} where id=${studentid} and (signedcertificateurl is null or signedcertificateurl=''))) and cohortid='${cohortid}' and accountid='${puserid}';`);
      console.log(deleteQuery);
      await pool.query(deleteQuery);


      deleteQuery = format(`delete from ${cohorttablename} where id=${studentid} and (signedcertificateurl is null or signedcertificateurl='');`);
      console.log(deleteQuery);
      await pool.query(deleteQuery);

    }
    
    var obj = {
      Status: 200,
        message: "Success"
    };
    res.json(obj);

  }
  catch(err){
    var obj = {
      Status: 400,
        message: err.message
    };
    res.json(obj);
  }
}

user.getStudentsForStep = async (req, res, next) => {
 
  try {
     var currentUser = req.user;
     if(req.user.business_is_verified==false)
     {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
     }
     var permission=await getPermission(req.user.user_id,"manageCertificate");
     if(permission==false)
     {
         var obj = {
           Status: 400,
             message: "Access denied."
         };
         res.json(obj);
         return;
     }
     var puserid=await getParentAccountIdFromId(req.user.user_id);
     var settingInfo = await getProfileFromAccountId(puserid);        

     
     var cohortId = '';
     var step = 'all';
     var mockData = [];
     var mockData_Issued = [];
     
     var cohortData=[];
     //cohortData = [{'label' : 'All', 'value' : 'all'}];
     var cohortQuery = format(`select * from (select distinct on (cohortid) *  from cohort where accountid='${puserid}') as temptalbe order by id desc`);
     var defaultCohort="";
     var cohortindex=0;
     var cohorts = await pool.query(cohortQuery);
     if ( cohorts.rowCount > 0 ) {
      for ( const row of cohorts.rows ) {
        //if(settingInfo.cohortsearchmode==0) //normal mode
        {
          if(cohortindex==0) defaultCohort=row['cohortid'];
          cohortData.push({
                    'label' : row['name'],
                    'value' : row['cohortid']
                });
          cohortindex++;      
        }
        /*
        else if(settingInfo.cohortsearchmode==1) //several dropdown mode by spliting dash for cohortid
        {
          if(row['cohortid']!=null)
          {
            let cohortpieces = (row['cohortid']).split("-");
            if(cohortpieces.length == settingInfo.cohortsplitlength)
            {
              if(cohortindex==0) defaultCohort=row['cohortid'];
              cohortData.push({
                'label' : row['name'],
                'value' : row['cohortid']
              });
              cohortindex++;
            }
          }
        }
        */
      }
    }

    var selectedCohortJson = req.body.selectedCohortJson || {};
    var cohortdropdownclause = "";
    // if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
    // else
    // {
    //   Object.keys(selectedCohortJson).forEach((key, value) => {
    //     if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
    //     else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
    //   });
    // }

    if (Object.keys(selectedCohortJson).length === 0) {
      cohortdropdownclause = ""; // Handle the case for an empty object
    } else {
      Object.keys(selectedCohortJson).forEach((key) => {
        if (cohortdropdownclause !== "") {
          cohortdropdownclause += " and b." + key + "='" + selectedCohortJson[key] + "'";
        } else {
          cohortdropdownclause = " b." + key + "='" + selectedCohortJson[key] + "'";
        }
      });
    }
    console.log("cohortdropdownclause = "+cohortdropdownclause);

    if (typeof req.body.step!=="undefined" && req.body.step!=="undefined" && req.body.step!==undefined)
    {
         step = req.body.step;
    }
    console.log("cohortId = "+req.body.cohort);
    if (typeof req.body.cohort==="undefined" || req.body.cohort==="undefined" || req.body.cohort===undefined) cohortId = defaultCohort;    
    else cohortId = req.body.cohort;
    
    if(cohortId!="" || cohortdropdownclause!="")        
    {      
      console.log("^^^^^^^^");
      let returnVal =  await makeMockData(cohortId, "progress", req.body.searchValue, puserid, req.body.certtypevalue, req.body.pageOffset, req.body.maxitemsperpage, req.body.status, cohortdropdownclause);
      if ( !isEmpty(returnVal) > 0 )
      {
        
        mockData.push(returnVal);
      }
      console.log("next values : ", req.body.pageOffsetIssued, req.body.pageOffset);
      if(req.body.pageOffsetIssued =="undefined" || req.body.pageOffsetIssued == undefined )
        req.body.pageOffsetIssued = req.body.pageOffset
      let returnVal_1 =  await makeMockData(cohortId, "issued", req.body.searchValue, puserid, req.body.certtypevalue, req.body.pageOffsetIssued, req.body.maxitemsperpage, req.body.status, cohortdropdownclause);
      if ( !isEmpty(returnVal_1) > 0 )
      {
        console.log("^^^^^^^^   2");
        mockData_Issued.push(returnVal_1);
      }
    }

     var obj = {
         Status: 200,
         message: 'get students data successfully',
         Data: {"mockData":mockData, "mockData_Issued":mockData_Issued, "cohortData":cohortData},
         step: step
     }
     res.json(obj);

   } catch (err) {
    console.log("Error in get for steps", err)
     var obj = {
       Status: 400,
         message: err.message
     };
     res.json(obj);
   }

}

user.dashboard = async (req, res, next) => {
  try{
    console.log("Dashboard PROD")
    if(req.user.business_is_verified==false) {
      return res.json({Status: 400, message: "Your account is currently under verification, please contact certonce team."});
    }    
    var puserid=await getParentAccountIdFromId(req.user.user_id);

    var type = req.body.type;
    var category = req.body.category;
    var timetype = req.body.timetype;
    var start = req.body.start;
    var end = req.body.end;
    var cohorttablenamearr=['cohortmembers_degree','cohortmembers_transcript','cohortmembers_openbadges'];
    var cohorttablename="cohortmembers_degree";
    let dashData=[];
    if (type == "issue"){
      let tmpDashData=[];
      for(let index=0; index<cohorttablenamearr.length;index++) {
        cohorttablename = cohorttablenamearr[index];
        let issueQuery = format(`select b.issueddate from cohort c left join ${cohorttablename} b on c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null`);
        let issueResult = await pool.query(issueQuery);       
        tmpDashData =tmpDashData.concat(issueResult.rows);     
      }
      dashData = sort_issueddate(tmpDashData);
      dashData = dashboard_date_filter(dashData, timetype, start, end);
    }
    else if (type == "sent"){
      let tmpDashData=[];
      for(let index=0; index<cohorttablenamearr.length;index++) {
        cohorttablename = cohorttablenamearr[index];
        let sentQuery = format(`select b.issueddate from cohort c left join ${cohorttablename} b on c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null and certificatesendstate='2'`);
        let sentResult = await pool.query(sentQuery);      
        tmpDashData =tmpDashData.concat(sentResult.rows);
      }
      dashData = sort_issueddate(tmpDashData);
      dashData = dashboard_date_filter(dashData, timetype, start, end);
    }
    else if (type == "download"){
      let tmpDownloadData=[];
      for(let index=0; index<cohorttablenamearr.length;index++)
      {
        cohorttablename = cohorttablenamearr[index];
        let downloadQuery;
        if (category == "issue"){
          downloadQuery = format(`select a.firstname, a.middlename, a.lastname, c.competencyname, b.signedcertificateurl, b.signedcertificatepdfurl,'${index}' from cohort c left join ${cohorttablename} b on c.id=b.cohortid left join student a on b.studentid=a.id where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null`);
        }
        else if (category == "sent"){
          downloadQuery = format(`select a.firstname, a.middlename, a.lastname, c.competencyname, b.signedcertificateurl, b.signedcertificatepdfurl,'${index}' from cohort c left join ${cohorttablename} b on c.id=b.cohortid left join student a on b.studentid=a.id where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null and certificatesendstate='2'`);
        }
        else if (category == "revoke"){
          downloadQuery = format(`select a.firstname, a.middlename, a.lastname, c.competencyname, b.signedcertificateurl, b.signedcertificatepdfurl,'${index}' from cohort c left join ${cohorttablename} b on c.id=b.cohortid left join student a on b.studentid=a.id where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null and certificaterevoked=true`);
        }      
        let downloadResult = await pool.query(downloadQuery);
        tmpDownloadData =tmpDownloadData.concat(downloadResult.rows);    
      }
      if (tmpDownloadData.length > 0){
        return res.json({Status: 200, message: "Success", type: "download", Data: {download: tmpDownloadData}});
      }
      else {
        return res.json({Status: 400, message: "There are no certificates."});
      }
    }
    // dashData = dashboard_date_filter(dashData, timetype, start, end);
    let issueCount=0;
    let sentCount=0;
    let revokeCount=0;
    for(let index=0; index<cohorttablenamearr.length;index++)
    {
      cohorttablename = cohorttablenamearr[index];
      let issueCountQuery = format(`select count(b.id) from cohort c left join ${cohorttablename} b on c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null`);
      let issueCountResult = await pool.query(issueCountQuery);
      issueCount=parseInt(issueCount)+parseInt(issueCountResult.rows[0]['count']);
      let sentCountQuery = format(`select count(b.id) from cohort c left join ${cohorttablename} b on c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null and certificatesendstate='2'`);
      let sentCountResult = await pool.query(sentCountQuery);
      sentCount=parseInt(sentCount)+parseInt(sentCountResult.rows[0]['count']);
      let revokeCountQuery = format(`select count(b.id) from cohort c left join ${cohorttablename} b on c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificatepdfurl!='' and b.signedcertificatepdfurl is not null and certificaterevoked=true`);
      let revokeCountResult = await pool.query(revokeCountQuery);
      revokeCount=parseInt(revokeCount)+parseInt(revokeCountResult.rows[0]['count']);
    }
    let paymentVerificationQuery=`select v.payer_name, v.designation, v.organization, v.email, v.contactnumber, v.amountofpayment, coalesce(v.razorpay_signature, v.transactionid) as transactionid, v.timeadded, v.fullname, v.enrollnumber,
  	CASE WHEN v.certificatetype = 'degree' THEN a.emailaddress ELSE aa.emailaddress END AS email_address, CASE WHEN v.certificatetype = 'degree' THEN c.competencyname ELSE cc.competencyname END AS competencyname,
  	CASE WHEN v.certificatetype = 'degree' THEN b.other25 ELSE bb.other25 END AS levelname from verifyrequest v
  	left join (cohortmembers_degree b left join cohort c on b.cohortid = c.id) on v.studentid = b.id
  	left join student a on b.studentid=a.id
  	left join (cohortmembers_transcript bb   left join cohort cc on bb.cohortid = cc.id) on v.studentid = bb.id
  	left join student aa on bb.studentid=aa.id where v.accountid='${puserid}' and issendcase=false and isofficalemail=false order by v.timeadded;`;
    let paymentVerificationResult = await pool.query(paymentVerificationQuery);
    let emailVerificationQuery=`select v.payer_name, v.designation, v.organization, v.email, v.contactnumber, v.amountofpayment, coalesce(v.razorpay_signature, v.transactionid) as transactionid, v.timeadded, v.fullname, v.enrollnumber, 
  	CASE WHEN v.certificatetype = 'degree' THEN a.emailaddress ELSE aa.emailaddress END AS email_address, CASE WHEN v.certificatetype = 'degree' THEN c.competencyname ELSE cc.competencyname END AS competencyname, 
  	CASE WHEN v.certificatetype = 'degree' THEN b.other25 ELSE bb.other25 END AS levelname from verifyrequest v
  	left join (cohortmembers_degree b left join cohort c on b.cohortid = c.id) on v.studentid = b.id
  	left join student a on b.studentid=a.id
  	left join (cohortmembers_transcript bb   left join cohort cc on bb.cohortid = cc.id) on v.studentid = bb.id
  	left join student aa on bb.studentid=aa.id where v.accountid='${puserid}' and issendcase=false and isofficalemail=true order by v.timeadded;`;
    let emailVerificationResult = await pool.query(emailVerificationQuery);
    res.json({
      Status: 200, message: "Success",
      Data: {
        xAxis: Object.keys(dashData),
        yAxis: Object.values(dashData),
        verify: paymentVerificationResult.rows,
        paymentVerification:paymentVerificationResult.rows,
        emailVerification:emailVerificationResult.rows,
        issueTotal: issueCount,
        sentTotal: sentCount,
        revokeTotal: revokeCount
      },
      type: type      
    });
  }
  catch(err){
    console.log(err.message);
    res.json({Status: 400, message: err.message});
  }
}

function sort_issueddate(data){
  try{
    let result = [];
    for (const element of data){
      if(element.issueddate && element.issueddate.split('/').length > 2){
        if (element.issueddate.split("/")[0].length > 2){
          // console.log("111111111122222222222aaa", element.issueddate.split("/"))
          if (parseInt(element.issueddate.split("/")[1].toString().trim())){
            result.push([parseInt(element.issueddate.split('/')[0].trim()), parseInt(element.issueddate.split('/')[1]), parseInt(element.issueddate.split('/')[2])]);
          }
          else{
            try{
              let temp1 = element.issueddate.split("/")[1];
              if(temp1.toString().toLowerCase().indexOf("jan") != -1) temp1 = 1;
              else if(temp1.toString().toLowerCase().indexOf("feb") != -1) temp1 = 2;
              else if(temp1.toString().toLowerCase().indexOf("mar") != -1) temp1 = 3;
              else if(temp1.toString().toLowerCase().indexOf("apr") != -1) temp1 = 4;
              else if(temp1.toString().toLowerCase().indexOf("may") != -1) temp1 = 5;
              else if(temp1.toString().toLowerCase().indexOf("jun") != -1) temp1 = 6;
              else if(temp1.toString().toLowerCase().indexOf("jul") != -1) temp1 = 7;
              else if(temp1.toString().toLowerCase().indexOf("aug") != -1) temp1 = 8;
              else if(temp1.toString().toLowerCase().indexOf("sep") != -1) temp1 = 9;
              else if(temp1.toString().toLowerCase().indexOf("oct") != -1) temp1 = 10;
              else if(temp1.toString().toLowerCase().indexOf("nov") != -1) temp1 = 11;
              else if(temp1.toString().toLowerCase().indexOf("dec") != -1) temp1 = 12;
              result.push([parseInt(element.issueddate.split('/')[0].trim()), temp1, parseInt(element.issueddate.split('/')[2].trim())]);
            }
            catch(err){
              console.log(`${element.issueddate} is invalid format`);
            }        
          }
        }
        else {
          result.push([parseInt(element.issueddate.split('/')[2].trim()), parseInt(element.issueddate.split('/')[1].trim()), parseInt(element.issueddate.split('/')[0].trim())]);        
        }
        // if (parseInt(element.issueddate.split('/')[2].trim()) && parseInt(element.issueddate.split('/')[1].trim()) && parseInt(element.issueddate.split('/')[0].trim())){
        //   result.push([parseInt(element.issueddate.split('/')[2].trim()), parseInt(element.issueddate.split('/')[1].trim()), parseInt(element.issueddate.split('/')[0].trim())]);
        // }
        // else if (element.issueddate.split("/")[0].length > 2){
        //   if (parseInt(element.issueddate.split("/")[1])){
        //     result.push([parseInt(element.issueddate.split('/')[0].trim()), parseInt(element.issueddate.split('/')[1]), parseInt(element.issueddate.split('/')[2])])
        //   }
        // }
        // result.sort((a, b) => a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);        
      }
      else if(element.issueddate && element.issueddate.split('-').length > 2){
        if (element.issueddate.split("-")[0].length > 2){          
          if (parseInt(element.issueddate.split("-")[1].toString().trim())){
            result.push([parseInt(element.issueddate.split('-')[0].trim()), parseInt(element.issueddate.split('-')[1]), parseInt(element.issueddate.split('-')[2])]);
          }
          else{
            try{
              let temp1 = element.issueddate.split("-")[1];
              if(temp1.toString().toLowerCase().indexOf("jan") != -1) temp1 = 1;
              else if(temp1.toString().toLowerCase().indexOf("feb") != -1) temp1 = 2;
              else if(temp1.toString().toLowerCase().indexOf("mar") != -1) temp1 = 3;
              else if(temp1.toString().toLowerCase().indexOf("apr") != -1) temp1 = 4;
              else if(temp1.toString().toLowerCase().indexOf("may") != -1) temp1 = 5;
              else if(temp1.toString().toLowerCase().indexOf("jun") != -1) temp1 = 6;
              else if(temp1.toString().toLowerCase().indexOf("jul") != -1) temp1 = 7;
              else if(temp1.toString().toLowerCase().indexOf("aug") != -1) temp1 = 8;
              else if(temp1.toString().toLowerCase().indexOf("sep") != -1) temp1 = 9;
              else if(temp1.toString().toLowerCase().indexOf("oct") != -1) temp1 = 10;
              else if(temp1.toString().toLowerCase().indexOf("nov") != -1) temp1 = 11;
              else if(temp1.toString().toLowerCase().indexOf("dec") != -1) temp1 = 12;
              result.push([parseInt(element.issueddate.split('-')[0].trim()), temp1, parseInt(element.issueddate.split('-')[2].trim())]);
            }
            catch(err){
              console.log(`${element.issueddate} is invalid format`);
            }        
          }
        }
        else {
          result.push([parseInt(element.issueddate.split('-')[2].trim()), parseInt(element.issueddate.split('-')[1].trim()), parseInt(element.issueddate.split('-')[0].trim())]);        
        }        
      }
      else if(element.issueddate && element.issueddate.split(",").length > 1){
        try{
          let temp2 = element.issueddate.split(",")[0].split(" ")[1];
          if(temp2.toString().toLowerCase().indexOf("jan") != -1) temp2 = 1;
          else if(temp2.toString().toLowerCase().indexOf("feb") != -1) temp2 = 2;
          else if(temp2.toString().toLowerCase().indexOf("mar") != -1) temp2 = 3;
          else if(temp2.toString().toLowerCase().indexOf("apr") != -1) temp2 = 4;
          else if(temp2.toString().toLowerCase().indexOf("may") != -1) temp2 = 5;
          else if(temp2.toString().toLowerCase().indexOf("jun") != -1) temp2 = 6;
          else if(temp2.toString().toLowerCase().indexOf("jul") != -1) temp2 = 7;
          else if(temp2.toString().toLowerCase().indexOf("aug") != -1) temp2 = 8;
          else if(temp2.toString().toLowerCase().indexOf("sep") != -1) temp2 = 9;
          else if(temp2.toString().toLowerCase().indexOf("oct") != -1) temp2 = 10;
          else if(temp2.toString().toLowerCase().indexOf("nov") != -1) temp2 = 11;
          else if(temp2.toString().toLowerCase().indexOf("dec") != -1) temp2 = 12;
          result.push([parseInt(element.issueddate.split(",")[1].trim()), temp2, parseInt(element.issueddate.split(",")[0].split(" ")[0].trim())]);
        }
        catch(err){
          console.log(`${element.issueddate} is invalid format`);
        }        
      }
    }
    result.sort((a, b) => a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);        
    return result;
  }
  catch(err){
    console.log(err);
    return data;
  }
}

function dashboard_date_filter(data, type, start="", end=""){
  let result = {};
  var month_list = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  if(type == "month"){
    let curMonth;
    let curYear;    
    if (start == ""){
      curMonth = new Date().getMonth();
      curYear = new Date().getFullYear();          
    }
    else {
      if (start == new Date().getFullYear()){
        curMonth = new Date().getMonth();
        curYear = new Date().getFullYear();  
      }
      else {
        curMonth = 11;
        curYear = start;
      }
    }
    let temp = data.filter(item => item[0] == curYear && item[1] <= (curMonth + 1));
    for (let index = 0; index <= curMonth; index ++) result[month_list[index]] = 0;
    temp.forEach(item => {
      result[month_list[item[1] - 1]] += 1;
    })
    return result;  
  }
  else if (type == "year"){
    if (start > 0 && end > 0){
      let temp = data.filter(item => item[0] >= start && item[0] <= end);
      for (let index=start; index <= end; index ++) result[index] = 0;
      temp.forEach(item => {
        result[item[0]] += 1;
      })
      return result
    }    
  }
}

async function makeMockData(cohort_id, step, searchValue,puserid, certtype, pageOffset, maxperpage, status="all", cohortdropdownclause="") {
  var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
  var cohorttablename=certtypes[certtype];
  var whereClause = '';
  searchValue = searchValue.toString().trim();
  var cohortClause="";
  var isCohortArray=false;
  console.log("inside makeMockData")
  if (Array.isArray(cohort_id)) {    
    cohortClause = `c.cohortid in ('${cohort_id.join("', '")}')`;    
    isCohortArray=true;
  } else {
    cohortClause = `c.cohortid='${cohort_id}'`;
  }
  //if(cohortdropdownclause!=="") cohortClause = cohortClause + " and " + cohortdropdownclause;
  if(cohortdropdownclause!=="") cohortClause = cohortdropdownclause;
  if(searchValue=="")
  {
    if ( step == 'all' ) {
      whereClause =  "WHERE "+cohortClause+" AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
    } 
    else if ( step == 'progress') {
      if(status=='PK received')
      {
        whereClause = "WHERE "+cohortClause+" AND (b.signedcertificateurl IS NULL OR b.signedcertificateurl ='') AND (b.unsignedcertificateurl IS NULL OR b.unsignedcertificateurl ='') AND c.accountid='"+puserid+"' AND b.blockcertsinvitationsent is not null AND blockcertsinvitationsent!=false AND b.certificatetype='"+certtype+"'";
      }
      else if(status=='generated')
      {
        whereClause = "WHERE "+cohortClause+" AND (b.signedcertificateurl IS NULL OR b.signedcertificateurl ='') AND (b.unsignedcertificateurl IS NOT NULL AND b.unsignedcertificateurl !='') AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
      }
      else if(status=='With Photo')
      {
        whereClause = "WHERE "+cohortClause+" AND b.photo='yes' AND b.certificatetype='"+certtype+"'";
      }
      else if(status=='Without Photo')
      {
        whereClause = "WHERE "+cohortClause+" AND (b.photo='' or b.photo is null) AND b.certificatetype='"+certtype+"'";
      }
      else
      {
        whereClause = "WHERE "+cohortClause+" AND (b.signedcertificateurl IS NULL OR b.signedcertificateurl ='') AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
      }
    } 
    else if ( step == 'issued' ) {
      whereClause = "WHERE "+cohortClause+" AND b.signedcertificateurl IS NOT NULL AND b.signedcertificateurl!='' AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
    }
  }
  else
  {
    if ( step == 'all' ) {
      whereClause =  "WHERE "+cohortClause+" AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%')  AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
    } 
    else if ( step == 'progress') {
      if(status=='PK received')
      {      
        whereClause = "WHERE "+cohortClause+" AND (b.signedcertificateurl IS NULL OR b.signedcertificateurl ='') AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%') AND (b.unsignedcertificateurl IS NULL OR b.unsignedcertificateurl ='') AND c.accountid='"+puserid+"' AND b.blockcertsinvitationsent is not null AND blockcertsinvitationsent!=false AND b.certificatetype='"+certtype+"'";
      }
      else if(status=='generated')
      {
        
        whereClause = "WHERE "+cohortClause+" AND (b.signedcertificateurl IS NULL OR b.signedcertificateurl ='') AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%') AND (b.unsignedcertificateurl IS NOT NULL AND b.unsignedcertificateurl !='') AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
      }
      else if(status=='With Photo')
      {
        
        whereClause = "WHERE "+cohortClause+" AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%') AND b.photo='yes' AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
      }
      else if(status=='Without Photo')
      {
        
        whereClause = "WHERE "+cohortClause+" AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%') AND (b.photo='' or b.photo is null) AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
      }
      else
      {
        whereClause = "WHERE "+cohortClause+" AND (b.signedcertificateurl IS NULL OR b.signedcertificateurl ='') AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%')  AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
      }      
    }
    else if ( step == 'issued' ) {
      whereClause = "WHERE "+cohortClause+" AND b.signedcertificateurl IS NOT NULL AND b.signedcertificateurl!='' AND (LOWER(a.firstname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.middlename) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.lastname) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.emailaddress) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.phonenumber) like '%"+searchValue.toLowerCase()+"%' OR LOWER(a.studentid) like '%"+searchValue.toLowerCase()+"%' OR LOWER(b.onetimeblockcertscode) like '%"+searchValue.toLowerCase()+"%' OR LOWER(c.competencyname) like '%"+searchValue.toLowerCase()+"%')  AND c.accountid='"+puserid+"' AND b.certificatetype='"+certtype+"'";
    }
  }
 
  var totalPageCount=0;
  var studentCountQuery = `SELECT count(a.id) as pagecount FROM student a LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause};`;
  // console.log('studentCountQuery--->>>>', studentCountQuery);
  var studentscount = await pool.query(studentCountQuery);
  console.log("studentscount--->>", studentscount.rows)
  if ( studentscount.rowCount > 0 ) {      
    for ( const studentcount of studentscount.rows ) {
      totalPageCount=studentcount['pagecount'];
    } 
  }
  var students = [];
  let chunkSize=50;
  if(maxperpage>chunkSize) {
    console.log("IF--->>>>")
    let tmpOffset = pageOffset;
    let tmpLimit = parseInt(tmpOffset) + parseInt(maxperpage);
    for (let i = tmpOffset; i < tmpLimit; i = parseInt(i) + parseInt(chunkSize)) {
      //const chunk = await fetchChunk(i, i + chunkSize);
      var studentQuery = `SELECT a.*, c.*,b.id as bid, b.certificatesendstate, b.publickey, b.onetimeblockcertscode, b.blockcertsinvitationsent, b.signedcertificatepdfurl, b.unsignedcertificateurl, b.signedcertificateurl, b.unsignedcertificationjsonurl, b.signedcertificatejsonurl, b.is_validated,b.id as cohortmemberid, b.certificatesent, b.certificaterevoked, b.hold, b.printpdf, b.qrcodepath, b.coursename, c.cohortid as maincohortid, b.photo, b.certificationcategory FROM student a
      LEFT JOIN ${cohorttablename} b ON b.studentid=a.id
      LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause} ORDER BY b.id ASC limit ${chunkSize} offset ${i};`;
      if(certtype==="openbadges") {
        studentQuery = `SELECT a.*, c.*,b.id as bid, b.certificatesendstate, b.publickey, b.onetimeblockcertscode, b.blockcertsinvitationsent, b.signedcertificatepdfurl, b.unsignedcertificateurl, b.signedcertificateurl,b.unsignedcertificationjsonurl, b.signedcertificatejsonurl, b.is_validated,b.id as cohortmemberid, b.certificatesent, b.certificaterevoked, b.hold, b.printpdf, b.coursename, c.cohortid as maincohortid, b.photo, b.certificationcategory FROM student a
        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause} ORDER BY b.id ASC limit ${chunkSize} offset ${i};`;
      }
      console.log("i=",i, tmpLimit);
      console.log(studentQuery);                               
      let tmpStudents = await pool.query(studentQuery);
      // console.log("tmpStudents-->>", tmpStudents)
      if ( tmpStudents.rowCount > 0 ) {
        if(students.length==0) {
          students = tmpStudents.rows;
        }
        else {
          students =students.concat(tmpStudents.rows);
        }
      }
    } 
  }
  else {
    var studentQuery = `SELECT a.*, c.*,b.id as bid, b.certificatesendstate, b.publickey, b.onetimeblockcertscode, b.blockcertsinvitationsent, b.signedcertificatepdfurl, b.unsignedcertificateurl, b.signedcertificateurl,b.unsignedcertificationjsonurl, b.signedcertificatejsonurl, b.is_validated,b.id as cohortmemberid, b.certificatesent, b.certificaterevoked, b.hold, b.printpdf, b.qrcodepath, b.coursename, c.cohortid as maincohortid, b.photo, b.certificationcategory FROM student a
    LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause} ORDER BY b.id ASC limit ${maxperpage} offset ${pageOffset};`;
    if(certtype==="openbadges") {
        studentQuery = `SELECT a.*, c.*,b.id as bid, b.certificatesendstate, b.publickey, b.onetimeblockcertscode, b.blockcertsinvitationsent, b.signedcertificatepdfurl, b.unsignedcertificateurl, b.signedcertificateurl,b.unsignedcertificationjsonurl, b.signedcertificatejsonurl, b.is_validated,b.id as cohortmemberid, b.certificatesent, b.certificaterevoked, b.hold, b.printpdf, b.coursename, c.cohortid as maincohortid, b.photo, b.certificationcategory FROM student a
    LEFT JOIN ${cohorttablename} b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid ${whereClause} ORDER BY b.id ASC limit ${maxperpage} offset ${pageOffset};`;
    }
    console.log(studentQuery);                               
    let tmpStudents = await pool.query(studentQuery);   
    // console.log("ELSE tmpStudents", tmpStudents.rows)
    students = tmpStudents.rows;
  }
  var count = 0;
  var resultData = {};
  var settingInfo = await getProfileFromAccountId(puserid);
  var awsinfo = await getS3BucketInformation(puserid);
  if ( students.length > 0 ) {
    resultData['children'] = [];
    resultData['height'] = 40;
    resultData['pagecount'] = totalPageCount;
    for ( const student of students ) {            
      var pdfdownloadurl="";
      var jsondownloadurl="";
      //var printpdfurl = "";
      var pdfurl=myip+subwwwurl+"/certificatepdf/";
      var jsonurl=myip+subwwwurl+"/certificatejson/";
      var signedcertificateurl = student['signedcertificateurl'];
      var signedcertificatepdfurl = student['signedcertificatepdfurl'];
      var printpdfurl = student['printpdf'];
      var qrcodeurl = student['qrcodepath'];
      var rollnumber = student['studentid'];
      var bid = student['bid'];
      if (student['unsignedcertificateurl'] == null) student['unsignedcertificateurl'] = "";
      if (student['firstname'] == null) student['firstname'] = "";
      if (student['middlename'] == null) student['middlename'] = "";
      if (student['lastname'] == null) student['lastname'] = "";
      let fullname = `${student['firstname']} ${student['middlename'].trim()} ${student['lastname'].trim()}`.trim();
      if(signedcertificateurl==null||signedcertificateurl==undefined) signedcertificateurl="";
      if(printpdfurl == null || printpdfurl == undefined) printpdfurl = "";
      if(signedcertificateurl!="") {
        var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
        var filename=lastelement.replace(".json","");
        switch(puserid.toString()) {
          case "20001":
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];
            pdfdownloadurl=`https://certification.mitwpu.edu.in/pdf/${filename}`;
            jsondownloadurl=`https://certification.mitwpu.edu.in/certificate/${filename}`;            
            if(signedcertificateurl.toLowerCase().indexOf("o21")!==-1) {
              pdfdownloadurl=`https://certification.mitwpu.edu.in/pdf/O21/${filename}`;
              jsondownloadurl=`https://certification.mitwpu.edu.in/certificate/O21/${filename}`;
            }
            else if(signedcertificateurl.toLowerCase().indexOf("j22")!==-1) {
              pdfdownloadurl=`https://certification.mitwpu.edu.in/pdf/J22/${filename}`;
              jsondownloadurl=`https://certification.mitwpu.edu.in/certificate/J22/${filename}`;
            }
            else if(signedcertificateurl.toLowerCase().indexOf("a21")!==-1) {
              var issueddate = student['issueddate'];
              if(issueddate!=null && issueddate.indexOf("2022")!==-1) {
                pdfdownloadurl=`https://certification.mitwpu.edu.in/pdf/A21/${filename}`;
                jsondownloadurl=`https://certification.mitwpu.edu.in/certificate/A21/${filename}`;
              }
              else {
                pdfdownloadurl=`https://certification.mitwpu.edu.in/pdf/${filename}`;
                jsondownloadurl=`https://certification.mitwpu.edu.in/certificate/${filename}`;
              }
            }
            else if(signedcertificateurl.toLowerCase().indexOf("m22")!==-1 || cohort_id.toLowerCase().indexOf("m22")!==-1) {   
              pdfdownloadurl=`https://certification.mitwpu.edu.in/pdf/M22/${filename}`;
              jsondownloadurl=`https://certification.mitwpu.edu.in/certificate/M22/${filename}`;
            }
            break;
          case "20021": // spjimr
            var year=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];
            var subject=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-4];
            pdfdownloadurl=`https://verification.spjimr.org/certificatepdf/${subject}/${year}/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.spjimr.org/certificatejson/${subject}/${year}/${lastelement.replace(".json","")}`;
            var pdffullfilename=("SPJIMR-"+fullname+"-"+rollnumber).trim();
            pdffullfilename = pdffullfilename.replace(/ /g, "-");
            if(printpdfurl!="") {
              printpdfurl = `https://verification.spjimr.org/print/20021/${year}/${pdffullfilename}`;
            }
            break;
          case "20045":
            var year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];            
            pdfdownloadurl=`https://verification.ndimexamination.org/certificatepdf/${year}/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.ndimexamination.org/certificatejson/${year}/${lastelement.replace(".json","")}`;
            if(printpdfurl!="") {
              let lastelprintement=printpdfurl.split("/")[printpdfurl.split("/").length-1];
              printpdfurl = `https://verification.ndimexamination.org/print/${year}/${lastelprintement.replace(".pdf","")}`;
            }
            break;
          case "20027":
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-3];              
            pdfdownloadurl=`https://360digitmg.com/certificatepdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://360digitmg.com/certificatejson/${lastelement.replace(".json","")}`;
            break;
          case "20077":
            let institute_name = student['institute_name'];
            if(institute_name==null || institute_name=="") institute_name="";
            let course_name = student['coursename'];
            if(course_name==null || course_name==undefined || course_name=="undefined") course_name="";
            downloadprintpdfname=("NITKKR-"+course_name+"-"+fullname+"-"+rollnumber).replace(/\./g, "_").replace(/ /g, "_").trim();
            // jsondownloadurl = `${myip+subwwwurl}/certificatenormal/json/${path.basename(signedcertificateurl)}`;
            // pdfdownloadurl=`${myip+subwwwurl}/certificatenormal/pdf/${path.basename(signedcertificatepdfurl)}`;
            // if(printpdfurl!="") {
            //   printpdfurl = `${myip+subwwwurl}/certificatenormal/print/${path.basename(signedcertificatepdfurl)}`;
            // }
            jsondownloadurl = `https://+${bucket_name}.s3.${bucket_region}.amazonaws.com/json/${lastelement.replace(".json","")}`;
            pdfdownloadurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/pdf/${lastelement.replace(".json","")}`;
            if(printpdfurl!="") {
                printpdfurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/print/${lastelement.replace(".json","")}`;
              }
            break;
          case "20":  
          case "20088":
            pdffullfilename=("LJK-"+fullname+"-"+rollnumber + "-" + bid).trim();
            pdffullfilename = pdffullfilename.replace(/ /g, "-");
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-3];              
            pdfdownloadurl=`https://certification.ljku.edu.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://certification.ljku.edu.in/certificate/${lastelement.replace(".json","")}`;
            if(qrcodeurl!=null && qrcodeurl!="") {
              qrcodeurl = `https://certification.ljku.edu.in/image/${lastelement.replace(".json","")}`;
            }
            if(printpdfurl!="") {
              printpdfurl = `https://certification.ljku.edu.in/pdf/${pdffullfilename}`;
            }
            break;
          case "30":  
          case "20091":
            year = signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];              
            pdfdownloadurl=`https://certificates.galgotiasuniversity.edu.in/pdf/${year}/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://certificates.galgotiasuniversity.edu.in/certificate/${year}/${lastelement.replace(".json","")}`;
            qrcodeurl = `https://certificates.galgotiasuniversity.edu.in/qrcode/${year}/${lastelement.replace(".json","")}`;
            break;
          case "20094":
            year = signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];              
            pdfdownloadurl=`https://certification.mietjmu.in/pdf/${year}/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://certification.mietjmu.in/certificate/${year}/${lastelement.replace(".json","")}`;
            break;
          case "20099":
            year = signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];              
            pdfdownloadurl=`https://verification.cutm.ac.in/pdf/${year}/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.cutm.ac.in/certificate/${year}/${lastelement.replace(".json","")}`;
            printpdfurl = `https://verification.cutm.ac.in/print/${year}/${lastelement.replace(".json","")}`;
            qrcodeurl = `https://verification.cutm.ac.in/qrcode/${year}/${lastelement.replace(".json","")}`;
            break;
          case "20107":
            year = signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];              
            pdfdownloadurl=`https://verification.cutmap.ac.in/pdfap/${year}/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.cutmap.ac.in/certificateap/${year}/${lastelement.replace(".json","")}`;
            printpdfurl = `https://verification.cutmap.ac.in/printap/${year}/${lastelement.replace(".json","")}`;
            qrcodeurl = `https://verification.cutmap.ac.in/qrcodeap/${year}/${lastelement.replace(".json","")}`;
            break;
          case "20103":
          case "32":
            pdfdownloadurl=`https://verification.medicaps.ac.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.medicaps.ac.in/certificate/${lastelement.replace(".json","")}`;
            if(printpdfurl!=="") {
              printpdfurl = `https://verification.medicaps.ac.in/print/${lastelement.replace(".json","")}`;
            }
            break;
          case "20108":      
            pdfdownloadurl=`https://digi-record.iilm.ac.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://digi-record.iilm.ac.in/certificate/${lastelement.replace(".json","")}`;                
            printpdfurl=`https://digi-record.iilm.ac.in/pdf/${lastelement.replace(".json","")}_print`;   
            break;
          case "20109":
            pdfdownloadurl=`https://digi-record.iilm.edu.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://digi-record.iilm.edu.in/certificate/${lastelement.replace(".json","")}`;                
            printpdfurl=`https://digi-record.iilm.edu.in/pdf/${lastelement.replace(".json","")}_print`;  
            break;      
          case "20117":      
            pdfdownloadurl=`https://digi-record.iilmlko.ac.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://digi-record.iilmlko.ac.in/certificate/${lastelement.replace(".json","")}`;                
            printpdfurl=`https://digi-record.iilmlko.ac.in/pdf/${lastelement.replace(".json","")}_print`;  
            break;
          case "19":
          case "20113":      
            pdfdownloadurl=`https://verification.dypunik.edu.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.dypunik.edu.in/certificate/${lastelement.replace(".json","")}`;                
            printpdfurl=`https://verification.dypunik.edu.in/print/${lastelement.replace(".json","")}`;  
            break;
          case "20110":
            pdfdownloadurl=`https://verify.jainuniversity.ac.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verify.jainuniversity.ac.in/certificate/${lastelement.replace(".json","")}`;
            qrcodeurl = `https://verify.jainuniversity.ac.in/qrcode/${lastelement.replace(".json","")}`;
            break;
          case "25":
          case "20122":
            pdfdownloadurl=`https://documentverification.rvce.edu.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://documentverification.rvce.edu.in/certificate/${lastelement.replace(".json","")}`;
            printpdfurl = `https://documentverification.rvce.edu.in/print/${lastelement.replace(".json","")}`;
            break;
          case "24":
          case "20102":
            pdfdownloadurl=`https://verify.gardencity.university/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verify.gardencity.university/certificate/${lastelement.replace(".json","")}`;
            printpdfurl = `https://verify.gardencity.university/print/${lastelement.replace(".json","")}`;
            break;
          case "23":
          case "20123":
            pdfdownloadurl=`https://verification.ctuniversity.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.ctuniversity.in/certificate/${lastelement.replace(".json","")}`;
            printpdfurl = `https://verification.ctuniversity.in/print/${lastelement.replace(".json","")}`;
            break;
          case "29":
          case "20131":
            pdfdownloadurl=`https://verification.snu.edu.in/pdf/${lastelement.replace(".json","")}`;
            jsondownloadurl=`https://verification.snu.edu.in/certificate/${lastelement.replace(".json","")}`;
            if(printpdfurl!="") {
              printpdfurl = `https://verification.snu.edu.in/print/${lastelement.replace(".json","")}`;
            }
            break;
          case "33":
          case "20134":
            pdfdownloadurl=`https://apexcert.s3.ap-south-1.amazonaws.com/pdf/${lastelement.replace(".json",".pdf")}`;
            jsondownloadurl=`https://apexcert.s3.ap-south-1.amazonaws.com/json/${lastelement.replace(".json",".json")}`;
            if(printpdfurl!="") {
              printpdfurl = `https://apexcert.s3.ap-south-1.amazonaws.com/print/${lastelement.replace(".json",".pdf")}`;
            }
            break;
          case "20006":
            pdfurl=`https://certonce.s3.us-east-2.amazonaws.com/pdf/${lastelement.replace(".json","")}.pdf`;
            jsonurl=`https://certonce.s3.us-east-2.amazonaws.com/json/${lastelement.replace(".json","")}.json`; 
            break;
          case "48":
          case "20164":
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];
            var filename=lastelement.replace(".json","");
            jsondownloadurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/Gjust/json/${lastelement.replace(".json","")}.json`;
            pdfdownloadurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/Gjust/pdf/${lastelement.replace(".json","")}.pdf`;
            // console.log("download urls", jsondownloadurl,pdfdownloadurl);
            break;
          case "20173":
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];
            var filename=lastelement.replace(".json","");
            jsondownloadurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/json/${lastelement.replace(".json","")}.json`;
            pdfdownloadurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/pdf/${lastelement.replace(".json","")}.pdf`;
            if(printpdfurl!="") {
              printpdfurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/print/${path.basename(printpdfurl)}`;
            }
            if(qrcodeurl!=null && qrcodeurl!="") {
              qrcodeurl = `https://${bucket_name}.s3.${bucket_region}.amazonaws.com/qrcode/${path.basename(signedcertificatepdfurl).replace(".pdf", ".png")}`;
            }
            // console.log("download urls", jsondownloadurl,pdfdownloadurl);
            break;
          case "11---":
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];
            var filename=lastelement.replace(".json","");
            pdfdownloadurl=`${pdfurl}${collegeid}/${filename}`;
            jsondownloadurl=`${jsonurl}${collegeid}/${filename}`;
            break;
          default:
            var collegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];
            var filename=lastelement.replace(".json","");
            jsondownloadurl = `${settingInfo.baseurl}/certificatenormal/json/${path.basename(signedcertificateurl)}`;
            pdfdownloadurl = `${settingInfo.baseurl}/certificatenormal/pdf/${path.basename(signedcertificatepdfurl)}`;
            if(printpdfurl!="") {
              printpdfurl = `${settingInfo.baseurl}/certificatenormal/print/${path.basename(printpdfurl)}`;
            }
            if(qrcodeurl!=null && qrcodeurl!="") {
              qrcodeurl = `${settingInfo.baseurl}/certificatenormal/qrcode/${path.basename(signedcertificatepdfurl).replace(".pdf", ".png")}`;
            }
        }
      }
      if(certtype==="openbadges") {
        pdfdownloadurl=student['signedcertificatepdfurl'];
        // jsondownloadurl=student['signedcertificatejson']; 
        // read JSON from S3 -> migration
        const json_s3_url = student["signedcertificatejsonurl"]
        const params = utils.parseS3Url(json_s3_url);
        // const data = await s3.getObject(params).promise();
        ////
        let temp_data = '';
        if(params.Bucket == 'certonce-v2')
          temp_data = await s3_new.getObject(params).promise();
        else
          temp_data = await s3.getObject(params).promise();
        const data = temp_data;
        ////
        const jsondownloadurl = JSON.parse(data.Body.toString('utf-8'));
        
        if(printpdfurl == null || printpdfurl == undefined) printpdfurl = "";
        printpdfurl = "";
        if(printpdfurl != "") {
          var nameelement = printpdfurl.split("/")[printpdfurl.split("/").length - 1];
          var filename = nameelement.replace(".pdf", "");
        }
      }
      if (count == 0) {
        var jsonData = {};
        jsonData['field1'] = (isCohortArray==true?'':student['name']);
        jsonData['field2'] = '';
        jsonData['field3'] = '';
        jsonData['field4'] = '';
        jsonData['field5'] = '';
        jsonData['field6'] = '';
        jsonData['field7'] = '';
        jsonData['field8'] = '';
        jsonData['field9'] = '';
        jsonData['field10'] = '';
        jsonData['field11'] = '';
        jsonData['cohortid'] = (isCohortArray==true?'':student['maincohortid']);
        jsonData['studentid'] = '';
        jsonData['is_child'] = false;
        jsonData['status'] = '';
        jsonData['is_validated'] = '';
        jsonData['pdfdownloadurl'] = '';
        jsonData['jsondownloadurl'] = '';
        jsonData['hold'] = '';
        jsonData['printpdfurl'] = '';
        jsonData['qrcodeurl'] = '';
        resultData['data'] = jsonData;
      }
      var jsonData1 = {};
      var childData = {};
      jsonData1['field1'] = student['firstname'];
      if ((puserid=="20103" || puserid == "32") && student['certificationcategory'] == "hindi") jsonData1['field11'] = 'krutidev010';
      else jsonData1['field11'] = 'normal';
      jsonData1['field2'] = student['middlename'];
      jsonData1['field3'] = student['lastname'];
      jsonData1['field4'] = student['emailaddress'];
      jsonData1['field5'] = student['phonenumber'];
      jsonData1['field6'] = student['publickey'];
      jsonData1['field7'] = student['onetimeblockcertscode'];
      jsonData1['field8'] = student['blockcertsawarded'];
      jsonData1['field9'] = jsondownloadurl;
      jsonData1['field10'] = student['photo'] == "yes"? "Yes" : "No";
      jsonData1['cohortid'] = student['maincohortid'];
      jsonData1['secondemailaddress'] = student['secondemailaddress'];
      jsonData1['studentid'] = student['cohortmemberid'];
      jsonData1['is_child'] = true;
      jsonData1['pdfdownloadurl'] = pdfdownloadurl;
      jsonData1['jsondownloadurl'] = jsondownloadurl;
      jsonData1['printpdfurl'] = printpdfurl;
      jsonData1['qrcodeurl'] = qrcodeurl;
      
      if(certtype!="openbadges") {
        if(student['blockcertsinvitationsent']==null||student['blockcertsinvitationsent']=='') {
          jsonData1['status'] = "Invite pending";              
        }
        else if(student['publickey'] == null||student['publickey'] == '') {
          jsonData1['status'] = "Invite sent";
        }
        else if((student['unsignedcertificationjsonurl'] == null||student['unsignedcertificationjsonurl'] == '') && (student['unsignedcertificateurl'] == null||student['unsignedcertificateurl'] == '')) {

          console.log("xxxxxxxxx", student['unsignedcertificationjsonurl']);
          jsonData1['status'] = "PK received";
        }
        else if(student['signedcertificatejsonurl'] == null||student['signedcertificatejsonurl'] == '') {
         
          jsonData1['status'] = "Certificate generated";
        } 
        else if(student['certificatesendstate'] == 1) {
          jsonData1['status'] = "Certificate Pending";
        }
        else if(student['certificatesendstate'] == 2) {
          jsonData1['status'] = "Certificate sent";
        }
        else if(student['certificatesendstate'] == 3) {
          jsonData1['status'] = "Certificate Failed";
        }
        else if(student['certificatesendstate'] === 4 && (student['signedcertificateurl'] == null||student['signedcertificateurl'] == '')) {
          jsonData1['status'] = "Sent for Review";
        }
        else {
          jsonData1['status'] = "Certificate issued";
        }

        if(student['certificaterevoked'] === true) {
          jsonData1['status'] = "Certificate revoked";
        }

        // TODO: All these logic to handle status are not good.
        if(student['certificatesendstate'] === 4) {
          jsonData1['status'] = "Sent for Review";
        }
        
        if(student['certificatesendstate'] === 5) {
          jsonData1['status'] = "Failed to send";
        }
        jsonData1['is_validated'] = student['is_validated']; 
      }
      else {
        if(student['signedcertificateurl'] == null || student['signedcertificateurl'] == '') {
          jsonData1['status'] = "Unbaked";
        }
        else if(student['certificatesendstate'] == 1) {
          jsonData1['status'] = "Pending";
        }
        else if(student['certificatesendstate'] == 2) {
          jsonData1['status'] = "Sent";
        }
        else if(student['certificatesendstate'] == 3) {
          jsonData1['status'] = "Failed";
        }
        else {
          jsonData1['status'] = "Baked";
        }
        jsonData1['is_validated'] = true; 
      }
      
      if ((jsonData1['status'] == "Certificate issued" || jsonData1['status'] == "Baked") && student['hold']!=null && (student['hold'].toLowerCase() == "y" || student['hold'].toLowerCase() == "yes"))
        jsonData1['status'] = "Hold";
      childData['data'] = jsonData1;
      childData['height'] = 40;
      childData['pagecount'] = totalPageCount;
      resultData['children'].push(childData);
      childData = {};
      count++;
    }
  }
  return resultData;
}

user.changepassword = async (req, res, next) => {
  try {
    var params = req.body;
    if(params.loginstep=="no") {
      var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
      console.log('Your IP address is ' + clientIp);
      let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress,userid) values ('changepassword','${clientIp}','${req.user.user_id}');`);
      await pool.query(ipQuery);
      var ageQuery = format(`select * from usermaster where user_id = ${req.user.user_id} LIMIT 1`);
      pool.query(ageQuery, function (err, result) {
        if (err) {
          res.json({ Status: 400, message: err.message });
        }
        else {
          var userData = {};
          if (result.rows && result.rows.length != 0) {
            userData = result.rows[0];
            var passwordIsValid = bcrypt.compareSync(params.OldPassword, result.rows[0].password);
            if (passwordIsValid) {
              var hashedPassword = bcrypt.hashSync(params.NewPassword, 8);
              var ageQuery2 = format(`UPDATE USERMASTER SET password = '${hashedPassword}',ispasswordchanged=false  WHERE user_id = ${req.user.user_id}`);
              pool.query(ageQuery2, function (err, result) {
                if (err) {
                  res.json({Status: 400, message: err.message});
                }
                else{
                  res.json({Status: 200, message: "Password changed successfully"});
                }
              })
            }
            else {
              res.json({ Status: 400, message: "Current password did not matched" });
            }
          }
          else{
            res.json({ Status: 400, message: "User did not matched" });
          }
        }
      })
    }
    else { //login step=yes
      var ageQuery = format(`select * from usermaster where user_id = ${req.user.user_id} LIMIT 1`);
      pool.query(ageQuery, function (err, result) {
        if (err) {
          res.json({ Status: 400, message: err.message });
        }
        else {
          var userData = {};
          if (result.rows && result.rows.length != 0) {
            userData = result.rows[0];               
            if (params.newpassword) {
              var hashedPassword = bcrypt.hashSync(params.newpassword, 8);
              var ageQuery2 = format(`UPDATE USERMASTER SET password = '${hashedPassword}' ,ispasswordchanged=false  WHERE user_id = ${req.user.user_id}`);
              pool.query(ageQuery2, function (err, result) {
                if (err) {
                  res.json({ Status: 400, message: err.message });
                }
                else{
                  res.json({ Status: 200, message: "Password changed successfully" });
                }
              })
            }
            else {
              res.json({ Status: 400, message: "Current password did not matched" });
            }
          }
          else {
            res.json({ Status: 400, message: "User did not matched" });
          }
        }
      })
    }
  }
  catch (err) {
    res.json({  Status: 400, message: err.message });
  }
}

user.forgetpwd = async (req, res, next) => {
 try {
   var pwd = generator.generate({
     length: 10,
     numbers: true
   });
   var InputFIelds = req.body
   var hashedPassword = bcrypt.hashSync(pwd, 8);
   var ageQuery = format(`select * from USERMASTER  WHERE email = '${InputFIelds.email}';
   UPDATE USERMASTER SET password = '${hashedPassword}',ispasswordchanged=true WHERE email = '${InputFIelds.email}';`);

   pool.query(ageQuery, function (err, result) {
     if (err) {
       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
     }
     else {

       if (result[0].rows && result[0].rows.length == 1) {
         var obj = {
           Status: 200,
           message: "Your password has been reset successfully! Your new password has been sent to your  email address"
         }
         res.json(obj);
         var user = {
           fname: result[0].rows[0].fname,
           pwd: pwd,
           email: InputFIelds.email
         }

         UpdatePassword(user)
       }
       else {
         var obj = {
           Status: 4090,
           message: "Email not registered"
         }
         res.json(obj)
       }



     }
   })



 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }

}

// user.Login =async (req, res, next) => {
//  try {
//     currentUser=req.user;
//     var puserid=await getParentAccountIdFromId(req.user.user_id); 
//     var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
//     console.log('Your IP address is ' + clientIp);
//     let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress,userid) values ('signin','${clientIp}','${puserid}');`);
//     await pool.query(ipQuery);
//     /////////get issued certificate and inprogress certificate count/////
//     var issued_certificate_count=0;
//     var inprogress_certificate_count=0;
//     var query = format(`SELECT count(c.accountid) as issued FROM student a LEFT JOIN cohortmembers_degree b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null;`);    
//     var result=await pool.query(query);
//     if (result.rows && result.rows.length != 0) {
//       issued_certificate_count += parseInt(result.rows[0].issued);
//     }
//     query = format(`SELECT count(c.accountid) as issued FROM student a LEFT JOIN cohortmembers_transcript b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null;`);
//     result=await pool.query(query);
//     if (result.rows && result.rows.length != 0) {
//       issued_certificate_count += parseInt(result.rows[0].issued);
//     }
//     query = format(`SELECT count(c.accountid) as inprogress FROM student a LEFT JOIN cohortmembers_degree b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and (b.signedcertificateurl='' or b.signedcertificateurl is null);`);    
//     result=await pool.query(query);
//     if (result.rows && result.rows.length != 0) {
//       inprogress_certificate_count += parseInt(result.rows[0].inprogress);
//     }
//     query = format(`SELECT count(c.accountid) as inprogress FROM student a LEFT JOIN cohortmembers_transcript b ON b.studentid=a.id LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and (b.signedcertificateurl='' or b.signedcertificateurl is null);`);    
//     result=await pool.query(query);
//     if (result.rows && result.rows.length != 0) {
//       //inprogress_certificate_count += parseInt(result.rows[0].inprogress);
//     }
//     var return_val=req.user;
//     return_val['issued'] =issued_certificate_count;
//     return_val['inprogress']=inprogress_certificate_count;
//     /////////////////////// Tyleesak Dashboard Table ////////////////////////
//     query = format(`SELECT distinct(b.issueddate) as issueddate FROM cohortmembers_degree b LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null ORDER BY issueddate desc;`);       
//     var query_result1 = await pool.query(query);
//     query_result1.rows = query_result1.rows.filter(function(element){
//       return element.issueddate !== null && element.issueddate !== "";
//     })
    
//     query_result1.rows = query_result1.rows.map(function(element){
//       var t_obj = {};
//       if(element.issueddate !== "" && element.issueddate !== null)
//       {
//         if(element.issueddate.indexOf("/") !== -1){
//           var temp = element.issueddate.split("/");
//           t_obj['issueddate'] = element.issueddate;
//           t_obj['realdate'] = new Date(temp[2] + "-" + temp[1] + "-" + temp[0]);
//         } 
//         else {
//           t_obj['issueddate'] = element.issueddate;
//           t_obj['realdate'] = new Date(element.issueddate);
//         }
//       }
//       return t_obj;
//     });
//     query_result1.rows.sort(function(a, b){
//       return b.realdate-a.realdate ;
//     })

//     query_result1.rows = query_result1.rows.map(function(element){
//       var year = element.realdate.getFullYear();
//       var month = (element.realdate.getMonth() + 1) < 10 ? '0'+ (element.realdate.getMonth() + 1) : element.realdate.getMonth()+1;
//       var date =  element.realdate.getDate() < 10 ? '0'+ element.realdate.getDate(): element.realdate.getDate();
//       return {'issueddate': element.issueddate, 'realdate': month + "/" + date + "/" + year};
//       //return {'issueddate': element.issueddate.getFullYear() + "-" + (element.issueddate.getMonth() + 1) + "-" + element.issueddate.getDate()};
//     })

//     var tyleek_result1 = [];
//     for(const row of query_result1.rows){
//       query1 = format(`SELECT DISTINCT c.cohortid, c.name FROM cohortmembers_degree b LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null and b.issueddate='${row['issueddate']}';`);
//       var query_result2 = await pool.query(query1);
//       for(const row1 of query_result2.rows){
//         query2 = format(`SELECT count(*) as count FROM cohortmembers_degree b LEFT JOIN cohort c ON c.id=b.cohortid  where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null and b.issueddate='${row['issueddate']}' and b.cohortid IN (SELECT id FROM cohort WHERE cohortid='${row1['cohortid']}');`);
//         var query_result3 = await pool.query(query2);
//         tyleek_result1.push({'date': row['realdate'], 'name': row1['name'], "count": query_result3.rows[0].count})
//       }
//     }
//     //console.log(tyleek_result1);
//     return_val['tyleek_dashboard_issued'] = JSON.stringify(tyleek_result1);
//     if (puserid != "20027") {
//       query = format(`SELECT distinct(b.issueddate) as issueddate FROM cohortmembers_degree b LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null and certificatesendstate='2' ORDER BY b.issueddate desc;`);
//       var query_result1 = await pool.query(query);
//       query_result1.rows = query_result1.rows.filter(function(element){ return element.issueddate !== null && element.issueddate !== ""; });
//       query_result1.rows = query_result1.rows.map(function(element){
//         var t_obj = {};
//         if(element.issueddate !== "" && element.issueddate !== null)
//         {
//           if(element.issueddate.indexOf("/") !== -1){
//             var temp = element.issueddate.split("/");
//             t_obj['issueddate'] = element.issueddate;
//             t_obj['realdate'] = new Date(temp[2] + "-" + temp[1] + "-" + temp[0]);
//           }
//           else {
//             t_obj['issueddate'] = element.issueddate;
//             t_obj['realdate'] = new Date(element.issueddate);
//           }
//         }
//         return t_obj;
//       });
      
//       query_result1.rows.sort(function(a, b){ return b.realdate - a.realdate; });
//       query_result1.rows = query_result1.rows.map(function(element){
//         var year = element.realdate.getFullYear();
//         var month = (element.realdate.getMonth() + 1) < 10 ? '0'+ (element.realdate.getMonth() + 1) : element.realdate.getMonth()+1;
//         var date =  element.realdate.getDate() < 10 ? '0'+ element.realdate.getDate(): element.realdate.getDate();
//         return {'issueddate': element.issueddate, 'realdate': month + "/" + date + "/" + year};
//         //return {'issueddate': element.issueddate.getFullYear() + "-" + (element.issueddate.getMonth() + 1) + "-" + element.issueddate.getDate()};
//       })

//       var tyleek_result1 = [];
//       for(const row of query_result1.rows){
//         query1 = format(`SELECT DISTINCT c.cohortid, c.name FROM cohortmembers_degree b LEFT JOIN cohort c ON c.id=b.cohortid where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null and b.issueddate='${row['issueddate']}' and certificatesendstate='2';`);
//         var query_result2 = await pool.query(query1);
//         for(const row1 of query_result2.rows){
//           query2 = format(`SELECT count(*) as count FROM cohortmembers_degree b LEFT JOIN cohort c ON c.id=b.cohortid  where c.accountid='${puserid}' and b.signedcertificateurl!='' and b.signedcertificateurl is not null and b.issueddate='${row['issueddate']}' and b.cohortid IN (SELECT id FROM cohort WHERE cohortid='${row1['cohortid']}') and certificatesendstate='2';`);
//           var query_result3 = await pool.query(query2);
//           tyleek_result1.push({'date': row['realdate'], 'name': row1['name'], "count": query_result3.rows[0].count})
//         }
//       }
//       console.log("dashboard = : ", tyleek_result1.length);
//       return_val['tyleek_dashboard_sent'] = JSON.stringify(tyleek_result1);
//     }
//     ////////////////////// Tyleesak End ///////////////////////////
//     return_val['current_year'] = new Date().getFullYear();
//     res.json({Status: 200, message: "Login successfully", Data: return_val});
//   }
//   catch (err) {
//     res.json({Status: 400, message: err.message})
//   }
// }

user.Login = async (req, res, next) => {
  try {
    currentUser = req.user;
    const puserid = await getParentAccountIdFromId(req.user.user_id);
    const clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    console.log('Your IP address is ' + clientIp);

    await pool.query(`INSERT INTO activitylog (activity, ipaddress, userid) VALUES ('signin', $1, $2)`, [clientIp, puserid]);

    let issued_certificate_count = 0;
    let inprogress_certificate_count = 0;

    // Issued certificate (degree + transcript)
    let result = await pool.query(`
      SELECT 
        SUM(CASE WHEN b.signedcertificateurl IS NOT NULL AND b.signedcertificateurl != '' THEN 1 ELSE 0 END) as issued,
        SUM(CASE WHEN b.signedcertificateurl IS NULL OR b.signedcertificateurl = '' THEN 1 ELSE 0 END) as inprogress
      FROM student a
      LEFT JOIN cohortmembers_degree b ON b.studentid = a.id
      LEFT JOIN cohort c ON c.id = b.cohortid
      WHERE c.accountid = $1
    `, [puserid]);

    if (result.rows?.[0]) {
      issued_certificate_count += parseInt(result.rows[0].issued) || 0;
      inprogress_certificate_count += parseInt(result.rows[0].inprogress) || 0;
    }

    result = await pool.query(`
      SELECT 
        SUM(CASE WHEN b.signedcertificateurl IS NOT NULL AND b.signedcertificateurl != '' THEN 1 ELSE 0 END) as issued,
        SUM(CASE WHEN b.signedcertificateurl IS NULL OR b.signedcertificateurl = '' THEN 1 ELSE 0 END) as inprogress
      FROM student a
      LEFT JOIN cohortmembers_transcript b ON b.studentid = a.id
      LEFT JOIN cohort c ON c.id = b.cohortid
      WHERE c.accountid = $1
    `, [puserid]);

    if (result.rows?.[0]) {
      issued_certificate_count += parseInt(result.rows[0].issued) || 0;
      // inprogress_certificate_count += parseInt(result.rows[0].inprogress) || 0; // uncomment if needed
    }

    const return_val = { ...req.user, issued: issued_certificate_count, inprogress: inprogress_certificate_count };

    //////////////////////////
    // Refactored Dashboard //
    //////////////////////////

    const issuedDashboardQuery = `
      SELECT 
        b.issueddate,
        c.name AS cohort_name,
        COUNT(*) AS count
      FROM cohortmembers_degree b
      LEFT JOIN cohort c ON c.id = b.cohortid
      WHERE 
        c.accountid = $1 AND
        b.signedcertificateurl IS NOT NULL AND b.signedcertificateurl != ''
      GROUP BY b.issueddate, c.name
      ORDER BY b.issueddate DESC
    `;

    const dashboardData = await pool.query(issuedDashboardQuery, [puserid]);

    const tyleek_result1 = dashboardData.rows
      .filter(row => row.issueddate !== null && row.issueddate !== "")
      .map(row => {
        let realDate;
        if (row.issueddate.includes("/")) {
          const [dd, mm, yyyy] = row.issueddate.split("/");
          realDate = new Date(`${yyyy}-${mm}-${dd}`);
        } else {
          realDate = new Date(row.issueddate);
        }

        const year = realDate.getFullYear();
        const month = (realDate.getMonth() + 1).toString().padStart(2, '0');
        const date = realDate.getDate().toString().padStart(2, '0');
        const formattedDate = `${month}/${date}/${year}`;

        return {
          date: formattedDate,
          name: row.cohort_name,
          count: parseInt(row.count)
        };
      });

    return_val.tyleek_dashboard_issued = JSON.stringify(tyleek_result1);

    //////////////////////////
    // Sent Certificates Dashboard (only for non-20027)
    //////////////////////////
    if (puserid !== "20027") {
      const sentDashboardQuery = `
        SELECT 
          b.issueddate,
          c.name AS cohort_name,
          COUNT(*) AS count
        FROM cohortmembers_degree b
        LEFT JOIN cohort c ON c.id = b.cohortid
        WHERE 
          c.accountid = $1 AND
          b.signedcertificateurl IS NOT NULL AND b.signedcertificateurl != '' AND
          b.certificatesendstate = '2'
        GROUP BY b.issueddate, c.name
        ORDER BY b.issueddate DESC
      `;

      const sentData = await pool.query(sentDashboardQuery, [puserid]);

      const sent_result = sentData.rows
        .filter(row => row.issueddate !== null && row.issueddate !== "")
        .map(row => {
          let realDate;
          if (row.issueddate.includes("/")) {
            const [dd, mm, yyyy] = row.issueddate.split("/");
            realDate = new Date(`${yyyy}-${mm}-${dd}`);
          } else {
            realDate = new Date(row.issueddate);
          }

          const year = realDate.getFullYear();
          const month = (realDate.getMonth() + 1).toString().padStart(2, '0');
          const date = realDate.getDate().toString().padStart(2, '0');
          const formattedDate = `${month}/${date}/${year}`;

          return {
            date: formattedDate,
            name: row.cohort_name,
            count: parseInt(row.count)
          };
        });

      return_val.tyleek_dashboard_sent = JSON.stringify(sent_result);
    }

    return_val.current_year = new Date().getFullYear();

    res.json({ Status: 200, message: "Login successfully", Data: return_val });
  } catch (err) {
    res.json({ Status: 400, message: err.message });
  }
}

// user.updateissueddate = async (req, res, next) => {
//   try{
//     let dateQuery = format(`select id, unsignedcertificationjson from cohortmembers_degree where (issueddate='' or issueddate is null) and signedcertificatejson!='' and signedcertificatejson is not null`);
//     console.log(dateQuery);
//     let dateResult = await pool.query(dateQuery);
//     if (dateResult.rowCount > 0){
//       for (const data of dateResult.rows){
//         let temp1 = JSON.parse(data.unsignedcertificationjson);        
//         let temp2=temp1.issuedOn.split("T")[0];
//         temp2=temp2.split("-")[2]+"/"+temp2.split("-")[1]+"/"+temp2.split("-")[0];
//         let updateQuery = format(`update cohortmembers_degree set issueddate='${temp2}' where id=${data.id}`);
//         await pool.query(updateQuery);
//       }
//     }
//     res.json({ Status: 200, message: "Success" });
//   }
//   catch (err) {
//     res.json({ Status: 400, message: err.message });
//   }
// }

user.Error = (req, res, next) => {
 res.json({ Status: 400, message: req.param.error });
}

user.test = (req, res, next) => {
 res.json({ Status: 200, message: "Test", Data: req.user });
}

user.GetPlans = (req, res, next) => {
 try {

   var ageQuery = format(`SELECT * from PLANMASTER;
               SELECT * from PLANDETAILS`)

   pool.query(ageQuery, function (err, result) {
     if (err) {
       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
     }
     else {

       var OutPutresults = [];
       var features = []

       result[0].rows.forEach((x, index) => {

         var obj = {
           "plane_id": x.plane_id,
           "plan_name": x.plan_name,
           "price": x.price,
           "text": x.text,
           "description": x.description,
           "created_at": x.created_at,
           "is_active": x.is_active,
           "List": []
         }

         result[1].rows.forEach(y => {
           if (x.plane_id == y.plane_id) {

             if (index == 0) {
               features.push({ Name: y.name })
             }
             obj.List.push(y)
           }
         })

         OutPutresults.push(obj)


       })
       var obj = {
         Status: 200,
         message: "",
         Data: OutPutresults,
         features: features
       }
       res.json(obj)

     }
   });


 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }

}


const charge = (token, amt) => {

 return stripe.charges.create({
   amount: amt * 100,
   currency: "usd",
   source: token, // obtained with Stripe.js
   description: "Charge for ashokcse505@gmail.com"

 })
}

async function getApiKeyFromUserID(userid)
{
 let encdata=await encrypt(Buffer.from(userid));
 let updateQuery = format(`update setting set apikey='${encdata}' where accountid='${userid}'`);
 updateresult = await pool.query(updateQuery);  
 
 return encdata;
}


 async function getOnetimecodeForStripe(n, userid)
 {
     var characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
     var randomString = "";
 
     for(var i=0;i<n;i++)
     {
        index=getRandomInt(characters.length-1);
        randomString+= characters[index];
     }
     let updateQuery = format(`update setting set stripecertonceapikey='${randomString}' where accountid='${userid}'`);
     let updateresult = await pool.query(updateQuery);  
     return randomString;
 } 
user.getProfile =async (req, res, next) => {
 try {
   var puserid=await getParentAccountIdFromId(req.user.user_id);
   var ageQuery = format(`select a.*,b.publickey,b.privatekey,c.logoimages as logoimage,d.isadmin as isadmin,d.validate as validate from usermaster a
        left join wallet_pk b on b.accountid=a.user_id and b.blockchain=a.blockchain
        left join certtemplate_logo c on a.user_id=c.accountid
        left join role_function d on a.user_id=d.accountid  
        where a.user_id = ${req.user.user_id} LIMIT 1`);

   if(puserid!=req.user.user_id)
   {
      ageQuery = format(`select a.*,b.publickey,b.privatekey,c.logoimages as logoimage,d.isadmin as isadmin,d.validate as validate from usermaster a
         left join wallet_pk b on b.accountid=a.parent_accountid
         left join certtemplate_logo c on a.parent_accountid=c.accountid
         left join role_function d on a.user_id=d.accountid
         where a.user_id = ${req.user.user_id} and b.blockchain='${req.user.blockchain}' LIMIT 1`);
   } 

   pool.query(ageQuery, async function (err, result) {
     if (err) {
       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
     }
     else {
        var userData = {};
        var smtphost="smtp.gmail.com";
        var smtpport="465";
        var smtpusername="admin@certonce.com";
        var smtppassword="";//process.env.SMTP_PASS;
        var smtpfrom="";
        var smtpcc="";
        var smtptype = "";
        var smtpclientid = process.env.GMAIL_CLIENT_ID;
        var smtpclientsecret = "";
        var smtprefreshtoken = "";
        var ishtml=true;
        var iss3=true;
        var certonceorcustomer="";
        var awsaccesskey="";
        var awssecretkey="";
        var s3bucketname="";
        var awsregion="";
        var azureconnectionstring = "";
        var gdrivecredential = "";
        var gdrivetoken ="";
        var ftphost = "";
        var ftpuser = "";
        var ftppassword = "";
        var localpath = "";
        var storagetype = 1;
        var baseurl = "";
        var issuerurl="";
        var revocationurl="";
        var issuername="";
        var issueremail="";
        var verifybaseurl="";
        var gasprice="";
        var contact_email="";
        var stripe_publickey="";
        var stripe_secretkey="";
        var stripecertonceapikey="";


        var office365clientid = "";
        var office365clientsecret = "";
        var office365tanentid = "";
        var office365accesstoken = "";
        var office365refreshtoken = "";
        var isoffice365 = "";
        var isapimode = false;
        var certonceversion="v2";
        

        var query = format(`SELECT * FROM setting where accountid='${puserid}';`);    
        var smtpresult=await pool.query(query);      
        if (smtpresult.rows && smtpresult.rows.length != 0) {

        baseurl=smtpresult.rows[0].baseurl;
        issuerurl=smtpresult.rows[0].issuerurl;
        revocationurl=smtpresult.rows[0].revocationurl;
        issuername=smtpresult.rows[0].issuername;
        issueremail=smtpresult.rows[0].issueremail;
        gasprice=smtpresult.rows[0].gasprice;
        contact_email=smtpresult.rows[0].contact_email;
        stripe_publickey=smtpresult.rows[0].stripe_publickey;
        stripe_secretkey=smtpresult.rows[0].stripe_secretkey;
        verifybaseurl=smtpresult.rows[0].verifybaseurl;
        apikey = smtpresult.rows[0].apikey;

        ishtml=smtpresult.rows[0].ishtml;
        iss3=smtpresult.rows[0].iss3;
        smtptype=smtpresult.rows[0].smtptype;
        stripecertonceapikey = smtpresult.rows[0].stripecertonceapikey;

        isoffice365=smtpresult.rows[0].isoffice365;        
        office365clientid = smtpresult.rows[0].office365clientid;
        office365clientsecret = smtpresult.rows[0].office365clientsecret;
        office365tanentid = smtpresult.rows[0].office365tanentid;
        office365accesstoken = smtpresult.rows[0].office365accesstoken;
        office365refreshtoken = smtpresult.rows[0].office365refreshtoken;

        certonceversion = smtpresult.rows[0].version;
        
        isapimode=smtpresult.rows[0].isapimode;

        
        smtpfrom = smtpresult.rows[0].smtpfrom;
        smtpcc = smtpresult.rows[0].smtpcc;
        if(smtptype==true){
            if(smtpresult.rows[0].smtpclientid!="" && smtpresult.rows[0].smtpclientid!=null && 
                 smtpresult.rows[0].smtpclientsecret!="" && smtpresult.rows[0].smtpclientsecret!=null && 
                 smtpresult.rows[0].smtprefreshtoken!="" && smtpresult.rows[0].smtprefreshtoken!=null && 
                 smtpresult.rows[0].smtpusername != "" && smtpresult.rows[0].smtpusername != null){
                 smtpusername = smtpresult.rows[0].smtpusername;
                 smtpclientid = smtpresult.rows[0].smtpclientid;
                 smtpclientsecret = smtpresult.rows[0].smtpclientsecret;
                 smtprefreshtoken = smtpresult.rows[0].smtprefreshtoken;
                 
             }
        }
        else if(smtptype==false){
            if (smtpresult.rows[0].smtphost != "" && smtpresult.rows[0].smtphost != null && 
                smtpresult.rows[0].smtpport != "" && smtpresult.rows[0].smtpport != null && 
                smtpresult.rows[0].smtpusername != "" && smtpresult.rows[0].smtpusername != null && 
                smtpresult.rows[0].smtppassword != "" && smtpresult.rows[0].smtppassword != null ) {
                smtphost = smtpresult.rows[0].smtphost;
                smtpport = smtpresult.rows[0].smtpport;
                smtpusername = smtpresult.rows[0].smtpusername;
                smtppassword = smtpresult.rows[0].smtppassword;
                
            }
        }
         
        if (smtpresult.rows[0].certonceorcustomer != "" && smtpresult.rows[0].certonceorcustomer != null &&
            smtpresult.rows[0].awsaccesskey != "" && smtpresult.rows[0].awsaccesskey != null &&
            smtpresult.rows[0].awssecretkey != "" && smtpresult.rows[0].awssecretkey != null &&
            smtpresult.rows[0].s3bucketname != "" && smtpresult.rows[0].s3bucketname != null &&
            smtpresult.rows[0].awsregion != "" && smtpresult.rows[0].awsregion != null) {
            console.log(smtpresult.rows[0].awsaccesskey);
            certonceorcustomer = smtpresult.rows[0].certonceorcustomer;
            awsaccesskey = smtpresult.rows[0].awsaccesskey;
            awssecretkey = smtpresult.rows[0].awssecretkey;
            s3bucketname = smtpresult.rows[0].s3bucketname;
            awsregion = smtpresult.rows[0].awsregion;            
        }      
      
        /*
        else if(smtpresult.rows[0].certonceorcustomer!="" && smtpresult.rows[0].certonceorcustomer!=null &&
          (smtpresult.rows[0].awsaccesskey=="" || smtpresult.rows[0].awsaccesskey==null ||
          smtpresult.rows[0].awssecretkey=="" || smtpresult.rows[0].awssecretkey==null ||
          smtpresult.rows[0].s3bucketname=="" || smtpresult.rows[0].s3bucketname==null ||
          smtpresult.rows[0].awsregion=="" || smtpresult.rows[0].awsregion==null))
        {
          console.log("b");
          certonceorcustomer="certonce";
          awsaccesskey=config.accessKeyId;
          awssecretkey=config.secretAccessKey;
          s3bucketname=config.bucket_name;
          awsregion=config.region;
          if(awsaccesskey=="" || awssecretkey=="" || s3bucketname=="" || awsregion=="")
          {
            var obj = {
              Status: 400,
              message: "Please set config file"
            };
            res.json(obj);
            return;
          }
        }
        */
        else
        {
          //console.log("c");
          certonceorcustomer="certonce";
          /*
          awsaccesskey=config.accessKeyId;
          awssecretkey=config.secretAccessKey;
          s3bucketname=config.bucket_name;
          awsregion=config.region;
          if(awsaccesskey=="" || awssecretkey=="" || s3bucketname=="" || awsregion=="")
          {
            var obj = {
              Status: 400,
              message: "Please set config file"
            };
            res.json(obj);
            return;
          }
          */
        }
        azureconnectionstring = smtpresult.rows[0].azureConnectionString;
        gdrivecredential = smtpresult.rows[0].gdriveCredential;
        gdrivetoken = smtpresult.rows[0].gdriveToken;
        ftphost = smtpresult.rows[0].ftphost;
        ftpuser = smtpresult.rows[0].ftpuser;
        ftppassword = smtpresult.rows[0].ftppassword;
        localpath = smtpresult.rows[0].localstoragepath;
        storagetype = smtpresult.rows[0].storagetype;
      }

      

      if (result.rows && result.rows.length != 0) {
        userData = result.rows[0];
        userData.blockchain=req.user.blockchain;
        userData.smtphost=smtphost;
        userData.smtpport=smtpport;
        userData.smtpusername=smtpusername;
        userData.smtppassword=smtppassword;
        userData.smtpfrom=smtpfrom;
        userData.smtpcc=smtpcc;
        userData.smtptype = smtptype;
        userData.smtpclientid = smtpclientid;
        userData.smtpclientsecret = smtpclientsecret;
        userData.smtprefreshtoken = smtprefreshtoken;
        userData.ishtml=ishtml;
        userData.iss3=iss3;
        userData.certonceorcustomer=certonceorcustomer;
        userData.awsaccesskey=awsaccesskey;
        userData.awssecretkey=awssecretkey;
        userData.s3bucketname=s3bucketname;
        userData.awsregion=awsregion;
        userData.azureConnectionString = azureconnectionstring;
        userData.gdriveCredential = gdrivecredential;
        userData.gdriveToken = gdrivetoken;
        userData.ftphost = ftphost;
        userData.ftpuser = ftpuser;
        userData.ftppassword = ftppassword;
        userData.localpath = localpath;
        userData.storagetype = storagetype;

        userData.baseurl=baseurl;
        userData.issuerurl=issuerurl;
        userData.revocationurl=revocationurl;
        userData.issuername=issuername;
        userData.issueremail=issueremail;
        userData.verifybaseurl=verifybaseurl;
        userData.gasprice=gasprice;
        userData.contactemail=contact_email;
        userData.stripepublickey=stripe_publickey;
        userData.stripesecretkey=stripe_secretkey;

        userData.isoffice365=isoffice365;
        userData.office365clientid=office365clientid;
        userData.office365clientsecret=office365clientsecret;
        userData.office365tanentid=office365tanentid;
        userData.office365accesstoken=office365accesstoken;
        userData.office365refreshtoken=office365refreshtoken;

        userData.certonceversion=certonceversion;
        
        userData.isapimode=isapimode;

       

        userData.office365gettokenurl=smtpresult.rows[0].office365gettokenurl;
        userData.downloadmultiplefile=smtpresult.rows[0].downloadmultiplefile;
        userData.verificationitems=smtpresult.rows[0].verificationitems;

        if(apikey == null || apikey == ""){
          userData.apikey=await getApiKeyFromUserID(req.user.user_id.toString());
        }
        else{
          userData.apikey = apikey;
        }

        if(stripecertonceapikey == null || stripecertonceapikey == ""){
          userData.stripecertonceapikey= getOnetimecodeForStripe(32, puserid);
        }
        else{
          userData.stripecertonceapikey=stripecertonceapikey;
        }

       }
       var obj = {
         Status: 200,
         message: "Get Profile",
         Data: userData
       };
       res.json(obj);
     }
   });

 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }

}

user.updateProfile = async (req, res, next) => {
  try {
    var params = req.body;
    if(req.user.business_is_verified==false)
    {
      var obj = {
          Status: 400,
            message: "Your account is currently under verification, please contact certonce team."
        };
        res.json(obj);
        return;
    }
    var puserid=await getParentAccountIdFromId(req.user.user_id);
    var clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    console.log('Your IP address is ' + clientIp);
    let ipQuery = format(`INSERT INTO activitylog (activity,ipaddress,userid) values ('updateprofile(${params.key})','${clientIp}','${puserid}');`);
    await pool.query(ipQuery);
    if(params.key=='blockchain') 
    {
          var ageQuery = format(`update usermaster set blockchain='${params.value}' where user_id = ${req.user.user_id}`);              
          var ageQuery1 = format(`select a.*,b.publickey from usermaster a
            left join wallet_pk b on b.accountid=a.user_id and b.blockchain=a.blockchain where a.user_id = ${req.user.user_id} and b.blockchain='${params.value}' LIMIT 1`);
          if(puserid!=req.user.user_id)
          {
              ageQuery = format(`update usermaster set blockchain='${params.value}' where user_id = ${puserid}`);          
              ageQuery1 = format(`select a.*,b.publickey from usermaster a
                    left join wallet_pk b on b.accountid=a.parent_accountid where a.user_id = ${req.user.user_id} and b.blockchain='${params.value}' LIMIT 1`);
          }
          
          var updateresult=await pool.query(ageQuery);        
          pool.query(ageQuery1, function (err, result) {
            if (err) {
              var obj = {
                Status: 400,
                message: err.message
              }
              res.json(obj)
            }
            else {
              var userData = {};
              if (result.rows && result.rows.length != 0) {
                userData = result.rows[0];
                userData.blockchain=params.value;
              }
              var obj = {
                Status: 200,
                message: "Blockchain is saved successfully!",
                Data: userData
              }
              res.json(obj)
            }
          });
    }
    else if(params.key=='smtp')
    {
      var ageQuery="";
      if(params.type == "oauth"){
        ageQuery = format(`INSERT INTO setting (accountid, smtptype, smtpclientid, smtpclientsecret, smtpusername, smtprefreshtoken, smtpfrom, smtpcc) values 
        ('${puserid}', 'true', '${params.smtpclientid}','${params.smtpclientsecret}','${params.smtpusername}','${params.smtprefreshtoken}','${params.smtpfrom}','${params.smtpcc}') 
        ON CONFLICT (accountid) DO UPDATE SET smtptype = 'true', smtpclientid = '${params.smtpclientid}',smtpclientsecret = '${params.smtpclientsecret}',smtpusername = '${params.smtpusername}',smtprefreshtoken = '${params.smtprefreshtoken}',smtpfrom = '${params.smtpfrom}',smtpcc = '${params.smtpcc}', isoffice365=0;`);
      }
      else if(params.type == "pwd"){
          ageQuery = format(`INSERT INTO setting (accountid, smtptype, smtphost, smtpport, smtpusername, smtppassword, smtpfrom, smtpcc) values 
          ('${puserid}', 'false', '${params.smtphost}','${params.smtpport}','${params.smtpusername}','${params.smtppassword}','${params.smtpfrom}','${params.smtpcc}') 
          ON CONFLICT (accountid) DO UPDATE SET smtptype='false', smtphost = '${params.smtphost}',smtpport = '${params.smtpport}',smtpusername = '${params.smtpusername}',smtppassword = '${params.smtppassword}',smtpfrom = '${params.smtpfrom}',smtpcc = '${params.smtpcc}', isoffice365=0;`);
      }   
      console.log(ageQuery);         
      var updateresult = await pool.query(ageQuery);
      let userQuery = format(`select * from setting where accountid='${puserid}'`);
      let userresult = await pool.query(userQuery);
      if(userresult.rows[0].smtphost==null || userresult.rows[0].smtphost == undefined) userresult.rows[0].smtphost = "";
      if(userresult.rows[0].smtpport == null || userresult.rows[0].smtpport == undefined) userresult.rows[0].smtpport = "";
      if(userresult.rows[0].smtpusername == null || userresult.rows[0].smtpusername == undefined) userresult.rows[0].smtpusername = "";
      if(userresult.rows[0].smtppassword == null || userresult.rows[0].smtppassword == undefined) userresult.rows[0].smtppassword = "";
      if(userresult.rows[0].smtpclientid == null || userresult.rows[0].smtpclientid == undefined) userresult.rows[0].smtpclientid = "";
      if(userresult.rows[0].smtpclientsecret == null || userresult.rows[0].smtpclientsecret == undefined) userresult.rows[0].smtpclientsecret = "";
      if(userresult.rows[0].smtphost == "" && userresult.rows[0].smtpport=="" && userresult.rows[0].smtpusername=="" && userresult.rows[0].smtppassword==""){
        userresult.rows[0].smtphost = "smtp.gmail.com";
        userresult.rows[0].smtpport = "465";
        userresult.rows[0].smtpusername = "admin@certonce.com";
      }
      if(userresult.rows[0].smtpclientid=="" && userresult.rows[0].smtpclientsecret=="" && userresult.rows[0].smtprefreshtoken==""){
        userresult.rows[0].smtpusername = "admin@certonce.com";
        userresult.rows[0].smtpclientid = process.env.GMAIL_CLIENT_ID;
      }
      var obj = {
          Status: 200,
          message: "SMTP information is saved successfully!",
          Data: userresult.rows[0]
      }
      res.json(obj)
    } 
    else if(params.key=='ishtml')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, ishtml) values ('${puserid}', '${params.ishtml}') ON CONFLICT (accountid) DO UPDATE SET ishtml = '${params.ishtml}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Certificate format is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='downloadtype')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, downloadmultiplefile) values ('${puserid}', '${params.downloadtype}') ON CONFLICT (accountid) DO UPDATE SET downloadmultiplefile = '${params.downloadtype}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Download type is saved successfully!",                    
          }
      res.json(obj);
    }
    
    else if(params.key=='isapimode')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, isapimode) values ('${puserid}', '${params.isapimode}') ON CONFLICT (accountid) DO UPDATE SET isapimode = '${params.isapimode}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Upload mode is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='iss3')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, iss3) values ('${puserid}', '${params.iss3}') ON CONFLICT (accountid) DO UPDATE SET iss3 = '${params.iss3}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Pdf format is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='s3information')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, certonceorcustomer,awsaccesskey,awssecretkey,s3bucketname,awsregion,storagetype) values ('${puserid}', '${params.iscertonceorcustomer}', '${params.awsaccesskeyid}', '${params.awssecretkeyid}', '${params.s3bucketnameid}', '${params.awsregionid}', 1) ON CONFLICT (accountid) DO UPDATE SET certonceorcustomer = '${params.iscertonceorcustomer}',awsaccesskey = '${params.awsaccesskeyid}',awssecretkey = '${params.awssecretkeyid}',s3bucketname = '${params.s3bucketnameid}',awsregion = '${params.awsregionid}', storagetype=1;`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "S3 information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='azureinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, "azureConnectionString", storagetype) values ('${puserid}', '${params.connectionstring}', 2) ON CONFLICT (accountid) DO UPDATE SET "azureConnectionString"='${params.connectionstring}', storagetype=2;`);
      console.log(ageQuery);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Azure information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='gdriveinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, "gdriveCredential", "gdriveToken", storagetype) values ('${puserid}', '${params.credential}', '${params.token}', 3) ON CONFLICT (accountid) DO UPDATE SET "gdriveCredential"='${params.credential}', "gdriveToken"='${params.token}', storagetype=3;`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "GDrive information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='ftpinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, ftphost, ftpuser, ftppassword, storagetype) values ('${puserid}', '${params.host}', '${params.user}', '${params.pwd}', 4) ON CONFLICT (accountid) DO UPDATE SET ftphost='${params.host}', ftpuser='${params.user}', ftppassword='${params.pwd}', storagetype=4;`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "FTP information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='localinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, localstoragepath, storagetype) values ('${puserid}', '${params.path}', 5) ON CONFLICT (accountid) DO UPDATE SET localstoragepath='${params.path}', storagetype=5;`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Local Storage Path is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='issuerinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, baseurl, issuerurl,revocationurl,issuername,issueremail,verifybaseurl) values ('${puserid}', '${params.baseurlid}', '${params.issuerurlid}', '${params.revocationurlid}', '${params.issuernameid}', '${params.issueremailid}', '${params.verifybaseurl}') ON CONFLICT (accountid) DO UPDATE SET baseurl = '${params.baseurlid}', issuerurl = '${params.issuerurlid}',revocationurl = '${params.revocationurlid}',issuername = '${params.issuernameid}',issueremail = '${params.issueremailid}',verifybaseurl = '${params.verifybaseurl}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Issuer information is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='competencypartnerinformation')
    {
      var ageQuery = format(`INSERT INTO competencypartner (accountid, competencyname, customername, signaturename, signername, partnercompanyname, logoimage, signatureimage, signaturename1, signername1, partnercompanyname1, logoimage1, signatureimage1, signaturename2, signername2, partnercompanyname2, logoimage2, signatureimage2) values ('${puserid}', '${params.competencynameid}', '${params.customernameid}', '${params.signaturenameid}', '${params.designernameid}', '${params.partnercompanynameid}', '${params.plogoimageid}', '${params.psignatureimageid}', '${params.secondsignameid}', '${params.seconddesignernameid}', '${params.secondpartnercompanynameid}', '${params.psecondlogoimageid}', '${params.psecondsignatureimageid}', '${params.thirdsignameid}', '${params.thirddesignernameid}', '${params.thirdpartnercompanynameid}', '${params.pthirdlogoimageid}', '${params.pthirdsignatureimageid}') ON CONFLICT (accountid, competencyname) DO UPDATE SET signaturename = '${params.signaturenameid}',signername = '${params.designernameid}',partnercompanyname = '${params.partnercompanynameid}',logoimage = '${params.plogoimageid}',signatureimage = '${params.psignatureimageid}', signaturename1 = '${params.secondsignameid}',signername1 = '${params.seconddesignernameid}',partnercompanyname1 = '${params.secondpartnercompanynameid}',logoimage1 = '${params.psecondlogoimageid}',signatureimage1 = '${params.psecondsignatureimageid}', signaturename2 = '${params.thirdsignameid}',signername2 = '${params.thirddesignernameid}',partnercompanyname2 = '${params.thirdpartnercompanynameid}',logoimage2 = '${params.pthirdlogoimageid}',signatureimage2 = '${params.pthirdsignatureimageid}';`);
      var updateresult=await pool.query(ageQuery);
      console.log(updateresult);
      var obj = {
            Status: 200,
            message: "Partner information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='partnercompanyinformation')
    {
      var ageQuery = format(`INSERT INTO partnercompany (accountid, signaturename, signername, partnercompanyname, partnercompanynamefordisplay, logoimage, signatureimage) values ('${puserid}', '${params.signaturenameid}', '${params.designernameid}', '${params.partnercompanynameid}', '${params.partnercompanynamefordisplayid}', '${params.plogoimageid}', '${params.psignatureimageid}') ON CONFLICT (accountid, partnercompanyname) DO UPDATE SET signaturename = '${params.signaturenameid}',signername = '${params.designernameid}',partnercompanyname = '${params.partnercompanynameid}',partnercompanynamefordisplay = '${params.partnercompanynamefordisplayid}',logoimage = '${params.plogoimageid}',signatureimage = '${params.psignatureimageid}';`);
      var updateresult=await pool.query(ageQuery);
      console.log(updateresult);
      var obj = {
            Status: 200,
            message: "Partner Company information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='gasinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, gasprice) values ('${puserid}', '${params.gaspriceid}') ON CONFLICT (accountid) DO UPDATE SET gasprice = '${params.gaspriceid}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Gas price information is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='contactinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, contact_email) values ('${puserid}', '${params.contactemailid}') ON CONFLICT (accountid) DO UPDATE SET contact_email = '${params.contactemailid}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Contact information is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='stripeinformation')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, stripe_publickey, stripe_secretkey) values ('${puserid}', '${params.stripepublickey}', '${params.stripesecretkey}') ON CONFLICT (accountid) DO UPDATE SET stripe_publickey = '${params.stripepublickey}', stripe_secretkey = '${params.stripesecretkey}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Stripe information is saved successfully!",                    
          }
      res.json(obj);
    } 
    else if(params.key=='office365')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, office365clientid, office365clientsecret,office365tanentid,isoffice365,smtpfrom,smtpcc,office365accesstoken, office365refreshtoken) values ('${puserid}', '${params.office365clientid}', '${params.office365clientsecret}', '${params.office365tanentid}', '${params.isoffice365}', '${params.smtpfrom}', '${params.smtpcc}', '${params.office365accesstoken}', '${params.office365refreshtoken}') ON CONFLICT (accountid) DO UPDATE SET office365clientid = '${params.office365clientid}', office365clientsecret = '${params.office365clientsecret}', office365tanentid = '${params.office365tanentid}', isoffice365 = '${params.isoffice365}', smtpfrom = '${params.smtpfrom}', smtpcc = '${params.smtpcc}', office365accesstoken = '${params.office365accesstoken}', office365refreshtoken = '${params.office365refreshtoken}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Office365 information is saved successfully!",                    
          }
      res.json(obj);
    }
    else if(params.key=='certonceversion')
    {
      var ageQuery = format(`INSERT INTO setting (accountid, version) values ('${puserid}', '${params.value}') ON CONFLICT (accountid) DO UPDATE SET version = '${params.value}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {
            Status: 200,
            message: "Version information is saved successfully!\nPlease update template on design page before generating",                    
          }
      res.json(obj);
    }
    else
    {
      var obj = {
        Status: 400,
        message: "Check request payload"
      }
      res.json(obj)
    } 
 
  }
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj)
  }
}

user.getTransaction =async (req, res, next) => {
 try {
   /*
   var ageQuery = format(`select * from payment_transaction PT
   INNER JOIN planmaster P ON  PT.plane_id = P.plane_id where user_id = ${req.user.user_id}`)
   */
   if(req.user.business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   } 
   var puserid=await getParentAccountIdFromId(req.user.user_id);
   var ageQuery = format(`select u.fname,u.lname,u.email,u.job_title,u.created_at,rf.* from usermaster u left join role_function rf on u.user_id=rf.accountid where u.parent_accountid = ${req.user.user_id} or u.user_id= ${req.user.user_id}`);
   if(puserid!=req.user.user_id)
   {
     ageQuery = format(`select u.fname,u.lname,u.email,u.job_title,u.created_at,rf.* from usermaster u left join role_function rf on u.user_id=rf.accountid where u.parent_accountid = ${puserid}`);
   }
   
   pool.query(ageQuery, function (err, result) {
     if (err) {
       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
     }
     else {

       var obj = {
         Status: 200,
         message: "Get Transaction",
         Data: result.rows
       }
       res.json(obj)
     }
   })

 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }

}
user.registerteamuser= async (req, res, next) => {
 var firstname = req.body.firstname;
 var lastname = req.body.lastname; 
 var email = req.body.email; 
 email = email.toLowerCase();
 var password = req.body.password;   
 var job_title = req.body.job_title;
 var hashedPassword = bcrypt.hashSync(password, 8);

 var currentUser = req.user;    
 if(req.user.business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }
 var puserid=await getParentAccountIdFromId(req.user.user_id);    
   try {
       
       /*
       var parentCheckQuery = format(`SELECT * from USERMASTER WHERE user_id = ${req.user.user_id} and parent_accountid!=0;`);
       var fetchcheckresult=await pool.query(parentCheckQuery);
       if (fetchcheckresult.rows && fetchcheckresult.rows.length != 0) 
       {
          var obj = {
               Status: 400,
               message: "You are a sub account."        
               }
               res.json(obj);      
               return;
       }
       */
       var superUserQuery = format(`SELECT * from USERMASTER WHERE user_id = ${puserid};`);
       var fetchsuperuserresult=await pool.query(superUserQuery);
       if (fetchsuperuserresult.rows && fetchsuperuserresult.rows.length != 0) 
       {
         var ageQuery = format(`SELECT * from USERMASTER WHERE email='${email}';`);
         var fetchresult=await pool.query(ageQuery);
         if (fetchresult.rows && fetchresult.rows.length == 0) {
           
             var addQuery = format(`INSERT INTO USERMASTER (
                     fname,
                     email,
                     lname ,
                     Organization_Name ,
                     password,
                     Organization_URL,
                     Job_Title,
                     How_did_you_find_us,
                     Graduates_Members,
                     business_is_verified,
                     parent_accountid)
                   VALUES('${firstname}',
                   '${email}',
                   '${lastname}',
                   '${fetchsuperuserresult.rows[0].organization_name}',
                   '${hashedPassword}',
                   '${fetchsuperuserresult.rows[0].organization_url}',
                   '${job_title}',
                   '${fetchsuperuserresult.rows[0].how_did_you_find_us}',
                   '${fetchsuperuserresult.rows[0].graduates_members}',
                   true,
                   '${puserid}'
                   ) RETURNING USER_ID `);
                   var addresult=await pool.query(addQuery);

                   


                   var getUserQuery = format(`SELECT * from USERMASTER WHERE email='${email}';`);
                   var fetchuserresult=await pool.query(getUserQuery); 
                   if (fetchuserresult.rows && fetchuserresult.rows.length != 0) {
                     var userdata=fetchuserresult.rows[0];

                     var insertRoleQuery = format(`INSERT INTO role_function (accountid,issuer,viewonly,managemember,uploadmember,sendinvite,previewinviteemail,designcertificate,managecertificate,generatecertificate,previewcertificate,issuecertificate,sendcertificate,changelogo,changetemplatecontent,isadmin)
                      SELECT ${fetchuserresult.rows[0].user_id},true,false,true,true,true,true,true,true,true,true,true,true,true,true,false
                      WHERE NOT EXISTS ( SELECT 1 FROM role_function WHERE accountid='${fetchuserresult.rows[0].user_id}') ;`);
                     await pool.query(insertRoleQuery);

                     userdatareturn(fetchuserresult.rows[0].user_id, function (userdata) {
                     var obj = {
                       Status: 200,
                       message: "A verification email has been sent to " + email,
                       Data: userdata.Data.rows[0]
                     }
                     res.json(obj);
                     verifytemplatecreate(userdata.Data.rows[0]);
                     }); 
                   }
                   else
                   {
                      var obj = {
                       Status: 400,
                       message: "New user registeration has been failed."        
                       }
                       res.json(obj);      
                   }

               

         }
         else
         {
           var obj = {
                 Status: 400,
                 message: "This user is registered already."        
                 }
                 res.json(obj);
         }
       }
       else
       {
          var obj = {
                 Status: 400,
                 message: "There is no registered super admin."        
                 }
                 res.json(obj);
       }
     }
     catch (err) {
       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
   }
}

user.updatepermission= async (req, res, next) => {
 var email = req.body.email; 
 email = email.toLowerCase(); 
 try {
     if(req.user.business_is_verified==false)
     {
       var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
     }
     var getUserQuery = format(`SELECT * from USERMASTER WHERE email='${email}';`);
     var fetchuserresult=await pool.query(getUserQuery); 
     if (fetchuserresult.rows && fetchuserresult.rows.length != 0) {        
       var updatePermissionQuery = format(`UPDATE role_function SET issuer=${req.body.issuer}, viewonly=${req.body.viewonly}, managemember=${req.body.managemember}, uploadmember=${req.body.uploadmember}, sendinvite=${req.body.sendinvite}, previewinviteemail=${req.body.previewinviteemail}, designcertificate=${req.body.designcertificate}, managecertificate=${req.body.managecertificate}, generatecertificate=${req.body.generatecertificate}, previewcertificate=${req.body.previewcertificate}, issuecertificate=${req.body.issuecertificate}, sendcertificate=${req.body.sendcertificate}, changelogo=${req.body.changelogo}, changetemplatecontent=${req.body.changetemplatecontent}, isadmin=${req.body.isadmin}, validate=${req.body.validate}	WHERE accountid='${fetchuserresult.rows[0].user_id}';`);
       var result=await pool.query(updatePermissionQuery);
       var obj = {
         Status: 200,
         message: "Setting permissions was successful.",                    
       }
       res.json(obj);
     }
     else
     {
        var obj = {
         Status: 200,
         message: "The "+email+" user is not registed.",                    
       }
       res.json(obj);
     } 
    
    
 }
 catch (err) {
       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
   }
}




user.stripecharge = async (req, res, next) => {
 try {
   const stripe = require("stripe")(process.env.STRIPECHARGE_KEY);
   var payloadObj = {
     amount: req.body.Amount,
     currency: "usd",
     source: req.body.id, // obtained with Stripe.js
     description: "Plan Amount"

   }
   stripe.charges.create(payloadObj, function (err, charge) {

     if (err) {

       var obj = {
         Status: 400,
         message: err.message
       }
       res.json(obj)
     }
     else {

     }

     var InputFIelds = req.body;

     var ageQuery = format(`INSERT INTO payment_transaction (
                               PLANE_ID,
                               USER_ID,
                               charge_id,
                               balance_transaction_id ,
                               receipt_url,
                               status,
                               payment_method,
                               amount)
                             VALUES('${InputFIelds.PLANE_ID}',
                             '${InputFIelds.USER_ID}',
                             '${charge.id}',
                             '${charge.balance_transaction}',
                             '${charge.receipt_url}',
                             '${charge.status}',
                             '${charge.payment_method}',
                             '${charge.amount}'
                             );
                             UPDATE blockcertficates SET count =  count+ ${InputFIelds.count}WHERE user_id = ${InputFIelds.USER_ID};`)
     pool.query(ageQuery, function (err, result) {
       if (err) {
         var obj = {
           Status: 400,
           message: err.message
         }
         res.json(obj)
       }
       else {
         var obj = {
           Status: 200,
           message: "Payment complete",
           Data: charge
         }
         res.json(obj)
       }
     })

   });


 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }

}



user.verify = async (req, res, next) => {
 try {

   if (req.params.id) {
     var data = Buffer.from(req.params.id, 'base64').toString();
     data = data.split(",");
     //console.log(data)
     userdatareturn(data[1], function (user) {
       var cuser = user.Data.rows[0];
       //console.log(cuser)
       try
       {
        if (cuser.isverified) {
          res.render('verify', {
            head: 'Dear ' + cuser.fname + ',',
            content: 'Your email had been verified already.'
          });
        }
        else {
          var ageQuery = format(`UPDATE USERMASTER SET isverified =  true WHERE user_id = ${user.Data.rows[0].user_id};
                    insert into blockcertficates(USER_ID) values (${user.Data.rows[0].user_id});`);
          pool.query(ageQuery, function (err, result) {
            if (err) {
 
              var msg = err.message;
              res.render('verify', {
                head: 'Dear ' + cuser.fname + ',',
                content: "email verified ", msg
              });
            }
            else {
              res.render('verify', {
                head: 'Dear ' + cuser.fname + ',',
                content: 'Thank you for registering with us. Your email verified successfully.'
              });
            }
          })
 
        }
       }
       catch(err){
        res.render('verify', {
          head: 'Error',
          content: "Error: " + err
        });
      }

     })

   }
   else {

   }

 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }

}

function verifytemplatecreate(user) {
 var str = user.email + "," + user.user_id;
 
 var encrypted = Buffer.from(str).toString('base64');

 var url = config.isverify + encrypted;
 var template = `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
   <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
     <title>CertOnce Blockchain Certificate</title>
     <style type="text/css" rel="stylesheet" media="all">
       /* Base ------------------------------ */
       *:not(br):not(tr):not(html) {
         font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;
         -webkit-box-sizing: border-box;
         box-sizing: border-box;
       }
       body {
         width: 100% !important;
         height: 100%;
         margin: 0;
         line-height: 1.4;
         background-color: #F5F7F9;
         color: #839197;
         -webkit-text-size-adjust: none;
       }
       a {
         color: #414EF9;
       }
       /* Layout ------------------------------ */
       .email-wrapper {
         width: 100%;
         margin: 0;
         padding: 0;
         background-color: #F5F7F9;
       }
       .email-content {
         width: 100%;
         margin: 0;
         padding: 0;
       }
       /* Masthead ----------------------- */
       .email-masthead {
         padding: 25px 0;
         text-align: center;
       }
       .email-masthead_logo {
         max-width: 400px;
         border: 0;
       }
       .email-masthead_name {
         font-size: 16px;
         font-weight: bold;
         color: #839197;
         text-decoration: none;
         text-shadow: 0 1px 0 white;
       }
       /* Body ------------------------------ */
       .email-body {
         width: 100%;
         margin: 0;
         padding: 0;
         border-top: 1px solid #E7EAEC;
         border-bottom: 1px solid #E7EAEC;
         background-color: #FFFFFF;
       }
       .email-body_inner {
         width: 570px;
         margin: 0 auto;
         padding: 0;
       }
       .email-footer {
         width: 570px;
         margin: 0 auto;
         padding: 0;
         text-align: center;
       }
       .email-footer p {
         color: #839197;
       }
       .body-action {
         width: 100%;
         margin: 30px auto;
         padding: 0;
         text-align: center;
       }
       .body-sub {
         margin-top: 25px;
         padding-top: 25px;
         border-top: 1px solid #E7EAEC;
       }
       .content-cell {
         padding: 35px;
       }
       .align-right {
         text-align: right;
       }
       /* Type ------------------------------ */
       h1 {
         margin-top: 0;
         color: #292E31;
         font-size: 19px;
         font-weight: bold;
         text-align: left;
       }
       h2 {
         margin-top: 0;
         color: #292E31;
         font-size: 16px;
         font-weight: bold;
         text-align: left;
       }
       h3 {
         margin-top: 0;
         color: #292E31;
         font-size: 14px;
         font-weight: bold;
         text-align: left;
       }
       p {
         margin-top: 0;
         color: #839197;
         font-size: 16px;
         line-height: 1.5em;
         text-align: left;
       }
       p.sub {
         font-size: 12px;
       }
       p.center {
         text-align: center;
       }
       /* Buttons ------------------------------ */
       .button {
         display: inline-block;
         width: 200px;
         background-color: #414EF9;
         border-radius: 3px;
         color: #ffffff;
         font-size: 15px;
         line-height: 45px;
         text-align: center;
         text-decoration: none;
         -webkit-text-size-adjust: none;
         mso-hide: all;
       }
       .button--green {
         background-color: #28DB67;
       }
       .button--red {
         background-color: #FF3665;
       }
       .button--blue {
         background-color: #414EF9;
       }
       /*Media Queries ------------------------------ */
       @media only screen and (max-width: 600px) {
         .email-body_inner,
         .email-footer {
           width: 100% !important;
         }
       }
       @media only screen and (max-width: 500px) {
         .button {
           width: 100% !important;
         }
       }
     </style>
   </head>
   <body>
     <table class="email-wrapper" width="100%" cellpadding="0" cellspacing="0">
       <tr>
         <td align="center">
           <table class="email-content" width="100%" cellpadding="0" cellspacing="0">
             <!-- Logo -->
             <tr>
               <td class="email-masthead">
                 <a class="email-masthead_name">Verify your Account</a>
               </td>
             </tr>
             <!-- Email Body -->
             <tr>
               <td class="email-body" width="100%">
                 <table class="email-body_inner" align="center" width="570" cellpadding="0" cellspacing="0">
                   <!-- Body content -->
                   <tr>
                     <td class="content-cell">
                       <h1>Dear ${user.fname},</h1>
                       <p>Thanks for signing up for blockchain certificates!</p>
                       <p>Verify your email address below and get started</p>
                       <!-- Action -->
                       <table class="body-action" align="center" width="100%" cellpadding="0" cellspacing="0">
                         <tr>
                           <td align="center">
                             <div>
                               <!--[if mso]><v:roundrect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="{{action_url}}" style="height:45px;v-text-anchor:middle;width:200px;" arcsize="7%" stroke="f" fill="t">
                               <v:fill type="tile" color="#414EF9" />
                               <w:anchorlock/>
                               <center style="color:#ffffff;font-family:sans-serif;font-size:15px;">Verify Email</center>
                             </v:roundrect><![endif]-->
                               <a  style="color: #fefefe;" href=${url}  class="button button--blue">Verify Email</a>
                             </div>
                           </td>
                         </tr>
                       </table>
                       <p>Thanks,<br>The CertOnce Inc Team</p>
                       <!-- Sub copy -->
                       <table class="body-sub">
                         <tr>
                           <td>
                             <p class="sub">If you are having trouble clicking the button, copy and paste the URL below into your web browser.
                             </p>
                             <p class="sub"><a href="${url}">${url}</a></p>
                           </td>
                         </tr>
                       </table>
                     </td>
                   </tr>
                 </table>
               </td>
             </tr>
             <tr>
               <td>
                 <table class="email-footer" align="center" width="570" cellpadding="0" cellspacing="0">
                   <tr>
                     <td class="content-cell">
                       <p class="sub center">
                       CertOnce,
                         <br>325 9th St, San Francisco, CA 94103
                       </p>
                     </td>
                   </tr>
                 </table>
               </td>
             </tr>
           </table>
         </td>
       </tr>
     </table>
   </body>
   </html>`;

 mailler(template, "Welcome to CertOnce Blockchain Certificates!", user.email)
}




function UpdatePassword(user) {

 var template = `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml">
 <head>
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <title>CertOnce</title>
   <style type="text/css" rel="stylesheet" media="all">
     /* Base ------------------------------ */
     *:not(br):not(tr):not(html) {
       font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;
       -webkit-box-sizing: border-box;
       box-sizing: border-box;
     }
     body {
       width: 100% !important;
       height: 100%;
       margin: 0;
       line-height: 1.4;
       background-color: #F5F7F9;
       color: #839197;
       -webkit-text-size-adjust: none;
     }
     a {
       color: #414EF9;
     }
     /* Layout ------------------------------ */
     .email-wrapper {
       width: 100%;
       margin: 0;
       padding: 0;
       background-color: #F5F7F9;
     }
     .email-content {
       width: 100%;
       margin: 0;
       padding: 0;
     }
     /* Masthead ----------------------- */
     .email-masthead {
       padding: 25px 0;
       text-align: center;
     }
     .email-masthead_logo {
       max-width: 400px;
       border: 0;
     }
     .email-masthead_name {
       font-size: 16px;
       font-weight: bold;
       color: #839197;
       text-decoration: none;
       text-shadow: 0 1px 0 white;
     }
     /* Body ------------------------------ */
     .email-body {
       width: 100%;
       margin: 0;
       padding: 0;
       border-top: 1px solid #E7EAEC;
       border-bottom: 1px solid #E7EAEC;
       background-color: #FFFFFF;
     }
     .email-body_inner {
       width: 570px;
       margin: 0 auto;
       padding: 0;
     }
     .email-footer {
       width: 570px;
       margin: 0 auto;
       padding: 0;
       text-align: center;
     }
     .email-footer p {
       color: #839197;
     }
     .body-action {
       width: 100%;
       margin: 30px auto;
       padding: 0;
       text-align: center;
     }
     .body-sub {
       margin-top: 25px;
       padding-top: 25px;
       border-top: 1px solid #E7EAEC;
     }
     .content-cell {
       padding: 35px;
     }
     .align-right {
       text-align: right;
     }
     /* Type ------------------------------ */
     h1 {
       margin-top: 0;
       color: #292E31;
       font-size: 19px;
       font-weight: bold;
       text-align: left;
     }
     h2 {
       margin-top: 0;
       color: #292E31;
       font-size: 16px;
       font-weight: bold;
       text-align: left;
     }
     h3 {
       margin-top: 0;
       color: #292E31;
       font-size: 14px;
       font-weight: bold;
       text-align: left;
     }
     p {
       margin-top: 0;
       color: #839197;
       font-size: 16px;
       line-height: 1.5em;
       text-align: left;
     }
     p.sub {
       font-size: 12px;
     }
     p.center {
       text-align: center;
     }
     /* Buttons ------------------------------ */
     .button {
       display: inline-block;
       width: 200px;
       background-color: #414EF9;
       border-radius: 3px;
       color: #ffffff;
       font-size: 15px;
       line-height: 45px;
       text-align: center;
       text-decoration: none;
       -webkit-text-size-adjust: none;
       mso-hide: all;
     }
     .button--green {
       background-color: #28DB67;
     }
     .button--red {
       background-color: #FF3665;
     }
     .button--blue {
       background-color: #414EF9;
     }
     /*Media Queries ------------------------------ */
     @media only screen and (max-width: 600px) {
       .email-body_inner,
       .email-footer {
         width: 100% !important;
       }
     }
     @media only screen and (max-width: 500px) {
       .button {
         width: 100% !important;
       }
     }
   </style>
 </head>
 <body>
   <table class="email-wrapper" width="100%" cellpadding="0" cellspacing="0">
     <tr>
       <td align="center">
         <table class="email-content" width="100%" cellpadding="0" cellspacing="0">
           <!-- Logo -->
           <tr>
             <td class="email-masthead">
               <a class="email-masthead_name">CertOnce Blockchain Certificate</a>
             </td>
           </tr>
           <!-- Email Body -->
           <tr>
             <td class="email-body" width="100%">
               <table class="email-body_inner" align="center" width="570" cellpadding="0" cellspacing="0">
                 <!-- Body content -->
                 <tr>
                   <td class="content-cell">
                     <h1>Dear ${user.fname},</h1>
                     <p>Your  Password is ${user.pwd}. Please enter the given Password at the time of login.</p>
                     <!-- Action -->
                     <table class="body-action" align="center" width="100%" cellpadding="0" cellspacing="0">
                       <tr>
                         <td align="center">
                           <div>
                             <!--[if mso]><v:roundrect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="{{action_url}}" style="height:45px;v-text-anchor:middle;width:200px;" arcsize="7%" stroke="f" fill="t">
                             <v:fill type="tile" color="#414EF9" />
                             <w:anchorlock/>
                             <center style="color:#ffffff;font-family:sans-serif;font-size:15px;">Verify Email</center>
                           </v:roundrect><![endif]-->
                           </div>
                         </td>
                       </tr>
                     </table>
                     <p>Thanks,<br>The CertOnce Inc Team</p>
                     <!-- Sub copy -->
                     <table class="body-sub">
                       <tr>
                         <td>

                         </td>
                       </tr>
                     </table>
                   </td>
                 </tr>
               </table>
             </td>
           </tr>
           <tr>
             <td>
               <table class="email-footer" align="center" width="570" cellpadding="0" cellspacing="0">
                 <tr>
                   <td class="content-cell">
                     <p class="sub center">
                     CertOnce,
                       <br>325 9th St, San Francisco, CA 94103
                     </p>
                   </td>
                 </tr>
               </table>
             </td>
           </tr>
         </table>
       </td>
     </tr>
   </table>
 </body>
 </html>`;

 var templatenew1 = `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml">
 <head>
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <title>CertOnce Blockchain Certificate</title>
   <style type="text/css" rel="stylesheet" media="all">
     /* Base ------------------------------ */
     *:not(br):not(tr):not(html) {
       font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;
       -webkit-box-sizing: border-box;
       box-sizing: border-box;
     }
     body {
       width: 100% !important;
       height: 100%;
       margin: 0;
       line-height: 1.4;
       background-color: #F5F7F9;
       color: #839197;
       -webkit-text-size-adjust: none;
     }
     a {
       color: #414EF9;
     }
     /* Layout ------------------------------ */
     .email-wrapper {
       width: 100%;
       margin: 0;
       padding: 0;
       background-color: #F5F7F9;
     }
     .email-content {
       width: 100%;
       margin: 0;
       padding: 0;
     }
     /* Masthead ----------------------- */
     .email-masthead {
       padding: 25px 0;
       text-align: center;
     }
     .email-masthead_logo {
       max-width: 400px;
       border: 0;
     }
     .email-masthead_name {
       font-size: 16px;
       font-weight: bold;
       color: #839197;
       text-decoration: none;
       text-shadow: 0 1px 0 white;
     }
     /* Body ------------------------------ */
     .email-body {
       width: 100%;
       margin: 0;
       padding: 0;
       border-top: 1px solid #E7EAEC;
       border-bottom: 1px solid #E7EAEC;
       background-color: #FFFFFF;
     }
     .email-body_inner {
       text-align:center
       width: 80%;
       margin: 0 auto;
       padding: 0;
     }
     .email-footer {
       width: 80%;
       margin: 0 auto;
       padding: 0;
       text-align: center;
     }
     .email-footer p {
       color: #839197;
     }
     .body-action {
       width: 100%;
       margin: 30px auto;
       padding: 0;
       text-align: center;
     }
     .body-sub {
       margin-top: 25px;
       padding-top: 25px;
       border-top: 1px solid #E7EAEC;
     }
     .content-cell {
       padding: 35px;
     }
     .align-right {
       text-align: right;
     }
     /* Type ------------------------------ */
     h1 {
       margin-top: 0;
       color: #292E31;
       font-size: 19px;
       font-weight: bold;
       text-align: left;
     }
     h2 {
       margin-top: 0;
       color: #292E31;
       font-size: 16px;
       font-weight: bold;
       text-align: left;
     }
     h3 {
       margin-top: 0;
       color: #292E31;
       font-size: 14px;
       font-weight: bold;
       text-align: left;
     }
     p {
       margin-top: 0;
       color: #839197;
       font-size: 16px;
       line-height: 1.5em;
       text-align: left;
     }
     p.sub {
       font-size: 12px;
     }
     p.center {
       text-align: center;
     }
     /* Buttons ------------------------------ */
     .button {
       display: inline-block;
       width: 200px;
       background-color: #414EF9;
       border-radius: 3px;
       color: #ffffff;
       font-size: 15px;
       line-height: 45px;
       text-align: center;
       text-decoration: none;
       -webkit-text-size-adjust: none;
       mso-hide: all;
     }
     .button--green {
       background-color: #28DB67;
     }
     .button--red {
       background-color: #FF3665;
     }
     .button--blue {
       background-color: #414EF9;
     }
     /*Media Queries ------------------------------ */
     @media only screen and (max-width: 600px) {
       .email-body_inner,
       .email-footer {
         width: 100% !important;
       }
     }
     @media only screen and (max-width: 500px) {
       .button {
         width: 100% !important;
       }
     }
   </style>
 </head>
 <body>
   <table class="email-wrapper" width="100%" cellpadding="0" cellspacing="0">
     <tr>
       <td align="center">
         <table class="email-content" width="100%" cellpadding="0" cellspacing="0">
           <!-- Logo -->
           
           <!-- Email Body -->
           <tr>
             <td class="email-body" width="100%">
               <table class="email-body_inner" align="center"  cellpadding="0" cellspacing="0">
                 <!-- Body content -->
                 <tr>
                   <td class="content-cell">                      
                     <h3>Hello ${user.fname},</h3>
                     <p>As per your request, ${user.pwd} is your temporary password to login to your CertOnce account ${user.email}</p>
                     <p>You will be prompted to change your password as a security protocol, once your login successfully using the temporary password.</p>
                     <p>Please contact us at admin@certonce.com if you did not request for your password to be reset.</p>
                     <p>Here are some tips to ensure your account is safe.</p>
                     <ul>
                      <li>Update your profile - Keep your mail ID and other details updated in your account for account recovery and change your password from time to time</li>
                      <li>Protect your password - Do not share your account ID and password with anyone and keep it safe as all times</li>
                      <li>Regular log-in - Regulary log in to your CertOnce account to review your usage status and always remember to log-out before closing the browser window.</li>
                     </ul>
                     <p>Warm Regards,</p>
                     <p>Team CertOnce</p>
                     <p>Address: 252 Nassau St, Princeton, NJ 08542 USA</p>
                     
                   </td>
                 </tr>
               </table>
             </td>
           </tr>
           
         </table>
       </td>
     </tr>
   </table>
 </body>
 </html>`;
  
 var templatenew = `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml">
 <head>
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <title>CertOnce Blockchain Certificate</title>
   <style type="text/css" rel="stylesheet" media="all">
     /* Base ------------------------------ */
     *:not(br):not(tr):not(html) {
       font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;
       -webkit-box-sizing: border-box;
       box-sizing: border-box;
     }
     body {
       width: 100% !important;
       height: 100%;
       margin: 0;
       line-height: 1.4;
       background-color: #F5F7F9;
       color: #839197;
       -webkit-text-size-adjust: none;
     }
     a {
       color: #414EF9;
     }
     /* Layout ------------------------------ */
     .email-wrapper {
       width: 100%;
       margin: 0;
       padding: 0;
       background-color: #F5F7F9;
     }
     .email-content {
       width: 100%;
       margin: 0;
       padding: 0;
     }
     /* Masthead ----------------------- */
     .email-masthead {
       padding: 25px 0;
       text-align: center;
     }
     .email-masthead_logo {
       max-width: 400px;
       border: 0;
     }
     .email-masthead_name {
       font-size: 16px;
       font-weight: bold;
       color: #839197;
       text-decoration: none;
       text-shadow: 0 1px 0 white;
     }
     /* Body ------------------------------ */
     .email-body {
       width: 100%;
       margin: 0;
       padding: 0;
       border-top: 1px solid #E7EAEC;
       border-bottom: 1px solid #E7EAEC;
       background-color: #FFFFFF;
     }
     .email-body_inner {
       text-align:center
       width: 80%;
       margin: 0 auto;
       padding: 0;
     }
     .email-footer {
       width: 80%;
       margin: 0 auto;
       padding: 0;
       text-align: center;
     }
     .email-footer p {
       color: #839197;
     }
     .body-action {
       width: 100%;
       margin: 30px auto;
       padding: 0;
       text-align: center;
     }
     .body-sub {
       margin-top: 25px;
       padding-top: 25px;
       border-top: 1px solid #E7EAEC;
     }
     .content-cell {
       padding: 35px;
     }
     .align-right {
       text-align: right;
     }
     /* Type ------------------------------ */
     h1 {
       margin-top: 0;
       color: #292E31;
       font-size: 19px;
       font-weight: bold;
       text-align: left;
     }
     h2 {
       margin-top: 0;
       color: #292E31;
       font-size: 16px;
       font-weight: bold;
       text-align: left;
     }
     h3 {
       margin-top: 0;
       color: #292E31;
       font-size: 14px;
       font-weight: bold;
       text-align: left;
     }
     p {
       margin-top: 0;
       color: #839197;
       font-size: 16px;
       line-height: 1.5em;
       text-align: left;
     }
     p.sub {
       font-size: 12px;
     }
     p.center {
       text-align: center;
     }
     /* Buttons ------------------------------ */
     .button {
       display: inline-block;
       width: 200px;
       background-color: #414EF9;
       border-radius: 3px;
       color: #ffffff;
       font-size: 15px;
       line-height: 45px;
       text-align: center;
       text-decoration: none;
       -webkit-text-size-adjust: none;
       mso-hide: all;
     }
     .button--green {
       background-color: #28DB67;
     }
     .button--red {
       background-color: #FF3665;
     }
     .button--blue {
       background-color: #414EF9;
     }
     /*Media Queries ------------------------------ */
     @media only screen and (max-width: 600px) {
       .email-body_inner,
       .email-footer {
         width: 100% !important;
       }
     }
     @media only screen and (max-width: 500px) {
       .button {
         width: 100% !important;
       }
     }
   </style>
 </head>
 <body>
   <table class="email-wrapper" width="100%" cellpadding="0" cellspacing="0">
     <tr>
       <td align="center">
         <table class="email-content" width="100%" cellpadding="0" cellspacing="0">
           <!-- Logo -->
           
           <!-- Email Body -->
           <tr>
             <td class="email-body" width="100%">
               <table class="email-body_inner" align="center"  cellpadding="0" cellspacing="0">
                 <!-- Body content -->
                 <tr>
                   <td class="content-cell">                     
                     <h3>Hello ${user.fname}</h3>
                     <p>As per your request, ${user.pwd} is your temporary password to login to your CertOnce account ${user.email}</p>
                     <p>You will be prompted to change your password as a security protocol, once your login successfully using the temporary password.</p>
                     <p>Please contact us at admin@certonce.com if you did not request for your password to be reset.</p>
                     <p>Here are some tips to ensure your account is safe.</p>
                     <ul>
                      <li>Update your profile - Keep your mail ID and other details updated in your account for account recovery and change your password from time to time</li>
                      <li>Protect your password - Do not share your account ID and password with anyone and keep it safe as all times</li>
                      <li>Regular log-in - Regulary log in to your CertOnce account to review your usage status and always remember to log-out before closing the browser window.</li>
                     </ul>
                     <p>Warm Regards,</p>
                     <p>Team CertOnce</p>
                     <p>test.certonce.com</p>
                     <p>Address: 252 Nassau St, Princeton, NJ 08542 USA</p>
                     
                   </td>
                 </tr>
               </table>
             </td>
           </tr>
           
         </table>
       </td>
     </tr>
   </table>
 </body>
 </html>`; 
 mailler(templatenew, "Temporary Password - CertOnce", user.email);
}

// batchProcess
user.batchProcess = async (req,res, next) => {
 try 
 { 
   var cohortid = req.body.cohortid;
   if(typeof cohortid=='undefined' || cohortid==null) 
   {
     var obj = {
       Status: 400,
         message: "Please select cohort"
     };
     res.json(obj);
     return;
   }
   console.log(cohortid)
   var batchtype = req.body.batchtype;
   var batchsummary="batchsummary";
   var conflictcause = `accountid='${req.user.user_id}', processtype='${batchtype}', status='processing', cohortid='${cohortid}'`;
   addQuery = format(`INSERT INTO ${batchsummary} (accountid, processtype, status,cohortid)
   SELECT '${req.user.user_id}', '${batchtype}', 'processing', '${cohortid}' ON CONFLICT (accountid,cohortid,processtype) DO UPDATE SET ${conflictcause} RETURNING id;`);
   console.log(addQuery);
   var students = await pool.query(addQuery);
   if (students.rowCount > 0) {
     studentId = students.rows[0].id;
     var obj = {
       Status: 200,
         message: "The batch request has been registered successfully."
     };
     res.json(obj);
     return;
   }
   else
   {
     var obj = {
       Status: 400,
         message: "Batch registration failed."
     };
     res.json(obj);
     return;
   }
 } 
 catch (err) {        
     var obj = {
       Status: 400,
       message: err.message        
       }
       res.json(obj);      
 }
 
}
///////////tyleesak start
user.resetCertificate = async (req,res, next) => {
 try 
 { 
   var params = req.body.selectedItems;    
   var certtype=req.body.certtype;
   var cohorttablename="cohortmembers_degree"; 
   var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
   if(certtype && certtype!="" && certtype!=="null" && typeof certtype!=="undefined")
   {      
     cohorttablename=certtypes[certtype];
   }    
   for (let index = 0; index < params.length; index++) {
     const element = params[index];
     let cohortid=element.split("=")[0];
     let studentid=element.split("=")[1];
     //console.log("cohortid="+cohortid+",studentid="+studentid);
     ///////////////////////////////////////////
     if ( cohortid == '' || studentid == '') {continue;}
     var updateQuery = format(`update ${cohorttablename} set unsignedcertificationjsonurl= '', unsignedcertificateurl='' , certificatesendstate = 0 where id= '${studentid}' 
     and (signedcertificatejsonurl IS NULL or signedcertificatejsonurl='') and (unsignedcertificateurl IS NOT NULL and unsignedcertificateurl<>'');`);
     console.log(updateQuery);
     await pool.query(updateQuery);
     
   }
   var obj = {
     Status: 200,
     message: "Reseted successfully!"        
     }
     res.json(obj);      
 }   
 catch (err) {    
   
   var obj = {
     Status: 400,
     message: err.message        
     }
     res.json(obj);      
   
 }
}

user.createCohortWithStudentsByAPI = async (req,res, next) => {
 
 var api_key=req.body.apikey;  
 var cohortname=req.body.cohortname;
 var cohortid=req.body.cohortid;
 var competencyname=req.body.coursename;
 var competencystartdate=req.body.coursestartdate;
 var competencyenddate=req.body.courseenddate;
 

 if(cohortname=="" || cohortname==undefined || cohortname==null ||
   cohortid=="" || cohortid==undefined || cohortid==null || 
   competencyname=="" || competencyname==null || competencyname==undefined ||    
   api_key=="" || api_key==null ||  api_key==undefined
  )
 {
   var obj = {
         Status: 400,
           message: "Invalid request parameters"
       };
   res.json(obj);
   return;
 }
 console.log(req.body);
 /*
 var napikey=await getApiKeyFromUserID("1");
 var obj = {
         Status: 200,
           message: napikey
       };
 res.json(obj);
 return;  
 */
 var userid=await getUserIDFromApiKey(api_key); 
 console.log("createCohortWithStudentsByAPI=",userid);
 if(userid==null)
 {
   var obj = {
         Status: 400,
           message: "Invalid api key"
       };
   res.json(obj);
   return; 
 }   
 
 var puserid=await getParentAccountIdFromId(userid); 
 logfilename ="/home/ubuntu/logs/"+puserid+"/createCohortWithStudentsByAPI.txt"
 var logdirpath = path.dirname(logfilename);    
 if (!await fs.existsSync(logdirpath))
 {
     await os.execCommand('sudo mkdir -p "'+logdirpath+'"');
     await os.execCommand('sudo chmod -R 777 "'+logdirpath+'"');
 }
 var today = new Date();    
 fs.appendFileSync(logfilename, '\nStart section on '+today + '\n');    
 fs.appendFileSync(logfilename, JSON.stringify(req.body));    
 fs.appendFileSync(logfilename, '\nEnd section on '+today + '\n');  
 var recipients=req.body.recipientinformation;
 for(let index=0; index<recipients.length; index++)
 {
   var firstname=recipients[index].firstname;    
   var middlename=recipients[index].middlename;    
   var lastname=recipients[index].lastname;    
   var email=recipients[index].email;    
   var pstudentid=recipients[index].studentid;
   if(pstudentid=="" || pstudentid==null  ||  pstudentid==undefined) pstudentid="";
   pstudentid=pstudentid.replace("'","`").trim();
   var certificateid=recipients[index].certificateid;
   if(certificateid=="" || certificateid==null  ||  certificateid==undefined) certificateid="";
   certificateid=certificateid.replace("'","`").trim();

   if(email=="" || email==null  ||  email==undefined ||     
   ((firstname=="" || firstname==null ||  firstname==undefined) && (middlename=="" || middlename==null ||  middlename==undefined) && (lastname=="" || lastname==null ||  lastname==undefined)))
   {
     var obj = {
           Status: 400,
             message: "Invalid request parameters"
         };
     res.json(obj);
     return;
   }    
   

   if(firstname=="" || firstname==null ||  firstname==undefined) firstname="";
   if(middlename=="" || middlename==null ||  middlename==undefined) middlename="";
   if(lastname=="" || lastname==null ||  lastname==undefined) lastname="";
   
   firstname=firstname.replace("'","`").trim();
   middlename=middlename.replace("'","`").trim();
   lastname=lastname.replace("'","`").trim();
   email=email.replace("'","`").trim();
   if(validator.validate(email)==false)
   {
     console.log(email)
     var obj = {
       Status: 400,
       message: email+" email format is incorrect."
       };
       return res.json(obj);
   }

   try {    
     
     var cohort_id=await getChortidFromCohortInfo(cohortname, cohortid, competencyname, competencystartdate, competencyenddate, puserid);
     if(cohort_id=="" || cohort_id==null)
     {
       var obj = {
             Status: 400,
               message: "Failed to adding cohort"
           };
       res.json(obj);
       return; 
     }
     var studentid=null;

     var addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,accountid)
                             SELECT '${pstudentid}','${firstname}','${middlename}', '${lastname}', '${email}','${puserid}' on conflict (studentid, accountid,firstname,middlename,lastname,emailaddress) do update set emailaddress='${email}' RETURNING id;`);
     students = await pool.query(addStudentQuery);
     if (students.rowCount > 0) {
      studentid = students.rows[0].id;     
      console.log("cohort degree studentid="+studentid);
      var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
      var studentsforonetimecode;                      
      var onetimecode="";
      var loopcount=0; 
      while(loopcount!==Object.keys(certtypes).length)
      {
        onetimecode = getOnetimecode(8);
        loopcount=0;
        for (const key in certtypes){         
            var tablenameforcerttype = certtypes[key];                            
            let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
            studentsforonetimecode = await pool.query(getExistStudent);
            if (studentsforonetimecode.rowCount == 0) {                                
                loopcount++;
            }
          }
      }

      var addPivotQuery = format(`INSERT INTO cohortmembers_openbadges (cohortid,studentid,certificateid,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated,certtype)
          SELECT '${cohort_id}','${studentid}','${certificateid}','${onetimecode}','${email}','true','true','openbadges' on conflict (cohortid, studentid) do update set cohortid='${cohort_id}' RETURNING id;`);
      await pool.query(addPivotQuery);
      
      var studentinfo=await getStudentInfoFromName(cohort_id,studentid,"cohortmembers_openbadges");
      if(studentinfo==null)
      {
        var obj = {
              Status: 400,
                message: "Error"
            };
          res.json(obj);
          return;
      }
      console.log(studentinfo.id);
      console.log(studentinfo.onetimeblockcertscode);
    }
   
   }
   catch (error) 
   {
     console.log(error)
     var obj = {
             Status: 400,
               message: error
           };
       res.json(obj);
       return;
   }
 }//for end
 var obj = {
       Status: 200,
       message: "Success"
     };
 res.json(obj);
}

user.bakeOpenBadgesByAPI = async (req,res, next) => {
 try
 {
   ///lock///
   const path = '/home/ubuntu/badgelock.txt';
   if (fs.existsSync(path))
   {
      var obj = {
         Status: 400,
           message: "Baking process is running already."
       };
       res.json(obj);
       return;
   }
   else
   {       
    const fd = fs.openSync(path, 'w');       
   }
   ///lock end///

   // var params = req.body.selectedItems;
   // var certtype=req.body.certtype;
   // var issendopenbadges=req.body.issendopenbadges;
   // var currentUser = req.user;
   // var organization_name=currentUser.organization_name;
   var os = new os_func();
   var api_key=req.body.apikey;  
   var glcohortid=req.body.cohortid;
   var student_list = req.body.studentids;
   if(api_key == "" || glcohortid == "" || student_list == "" || student_list == []){
     var obj = {
       Status: 400,
         message: "Invalid request parameters."
     };
     res.json(obj);
     return; 
   }
   var userid=await getUserIDFromApiKey(api_key); 
   if(userid==null)
   {
     var obj = {
           Status: 400,
             message: "Invalid api key"
         };
     res.json(obj);
     return; 
   }
   else
   {
     var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
     var result = await pool.query(usermasterQuery);
     var api_user = result.rows[0];
     var organization_name=result.rows[0].organization_name;
     var business_is_verified=result.rows[0].business_is_verified;
     var certtype=result.rows[0].certtype;
   }    
   if(business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }    
   var puserid=await getParentAccountIdFromId(userid); 
   var awsinfo=await getS3BucketInformation(puserid)
   var bucket_result=await createBucket(awsinfo.s3obj,awsinfo.s3bucketname);
   
   if(bucket_result=="")
   {
     var obj = {
         Status: 400,
         message: "S3 bucket creation has been failed."        
         }
         res.json(obj);
         return;
   } 
   let isTotal=false; 
   // let glcohortid="";
   // for (let index = 0; index <params.length; index++) {
   //    const element = params[index];
   //    let cohortid=element.split("=")[0];
   //    let studentid=element.split("=")[1];
   //    glcohortid=cohortid;  
   //    if(studentid=='') 
   //    {
   //      isTotal=true;
   //      break;
   //    }                   
   // }
   
   // if(glcohortid=="")
   // {
   //   var obj = {
   //       Status: 400,
   //         message: "Invalid selected students."
   //     };
   //     res.json(obj);
   //     return;
   // }
   var cohort_id= await getCohortidFromName(glcohortid,puserid);
   /////////////get badge file/////////
   var badge_template="";
   var badge_name="";
   var badge_description="";
   var isuer_name="";
   var issuer_description="";
   var issuer_url="";
   var badge_base64_file="";
   var badge_base64_url="";
   var badge_file="";
   var whereClauseOpenBadges =  "WHERE c.cohortid='"+ glcohortid +"';"
   var openBadgesInfoQuery = format(`SELECT c.*,d.* FROM cohort_group c LEFT JOIN openbadges_setting d ON d.id=c.openbadgesid ${whereClauseOpenBadges}`);
 
   let openbadgesinfos = await pool.query(openBadgesInfoQuery);  
   if ( openbadgesinfos.rowCount > 0 ) {                             
     for ( const openbadgesinfo of openbadgesinfos.rows ) 
     {
       badge_name=openbadgesinfo['badge_name'];
       if(badge_name==""||badge_name==null)
       {
         var obj = {
             Status: 400,
               message: "Please set badge name in design step"
           };
         res.json(obj);
         return;
       }
       badge_description=openbadgesinfo['badge_description'];
       if(badge_description==""||badge_description==null)
       {
         var obj = {
             Status: 400,
               message: "Please set badge description in design step"
           };
           res.json(obj);
           return;
       }
       isuer_name=openbadgesinfo['issuer_name'];
       if(isuer_name==""||isuer_name==null)
       {
         var obj = {
             Status: 400,
               message: "Please set issuer name in design step"
           };
           res.json(obj);
           return;
       }
       issuer_description=openbadgesinfo['issuer_description'];
       if(issuer_description==""||issuer_description==null)
       {
         var obj = {
             Status: 400,
               message: "Please set issuer description in design step"
           };
           res.json(obj);
           return;
       }

       badge_template=openbadgesinfo['template'];                
       const badge_template_buff = Buffer.from(badge_template, 'base64');
       badge_template = badge_template_buff.toString('utf-8');

       badge_file=openbadgesinfo['badge_file'];
       badge_base64_file=openbadgesinfo['badge_base64_file'];
       if(badge_file==""||badge_file==null||badge_base64_file==""||badge_base64_file==null)
       {
         var obj = {
             Status: 400,
               message: "Please select badge file in design step"
           };
           res.json(obj);
           return;
       }
       issuer_url=openbadgesinfo['issuer_url'];
     }
   }
   else
   {
     var obj = {
       Status: 400,
       message: "Please set openbadges information!"        
       }
       res.json(obj);  
       return;
   }   
   /////write badge file/////
   var standard_badge_file=openbadges_base_path+puserid+"/"+cohort_id+"/standard_badge_file.png";
   var badge_file_base_path=openbadges_base_path+puserid+"/"+cohort_id;
   try
   {
       const buff2 = Buffer.from(badge_file, 'base64');
       var str = buff2.toString('utf-8');
       //str=str.replace(' ','+');
       if (!await fs.existsSync(badge_file_base_path))
       {
           await os.execCommand('sudo mkdir -p "'+badge_file_base_path+'"');
           await os.execCommand('sudo chmod -R 777 "'+badge_file_base_path+'"');
       }
        fs.writeFileSync(standard_badge_file,str,"binary");          
   }
   catch(err)
   {
       var obj = {
       Status: 400,
       message: err        
       }
       res.json(obj);  
       return;
   }
   //////////////////////////
   ////////////////////////////////////
   console.log(student_list);
   for (let index = 0; index < student_list.length; index++) {
     //const element = params[index];
     let element = student_list[index];
     //let cohortid=element.split("=")[0];
     //let studentid=element.split("=")[1];
     //console.log("cohortid="+cohortid+",studentid="+studentid);
     ///////////////////////////////////////////
     //if ( cohortid == '' || studentid == '') {continue;}
     tempQuery = format(`select b.* from cohortmembers_openbadges b left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and b.studentid=${element};`);
     t_result = await pool.query(tempQuery);
     console.log(tempQuery);
     console.log(t_result.rows[0]);
     let studentid=t_result.rows[0]['id'];
     console.log(studentid);
     var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and b.id='"+studentid+"';"
     var studentQuery = format(`SELECT a.*, c.*,b.*,
                                   d.logoimage, d.signatureimage, d.signaturename, d.signername, d.partnercompanyname, 
                                   d.logoimage1, d.signatureimage1, d.signaturename1, d.signername1, d.partnercompanyname1, d.detail   FROM student a 
                                   LEFT JOIN cohortmembers_openbadges b ON b.studentid=a.id                                                   
                                   LEFT JOIN cohort c ON c.id=b.cohortid
                                   LEFT JOIN competencypartner d ON trim(from d.competencyname)=trim(from c.competencyname) ${whereClause}
                                   `);
     console.log(studentQuery);
     let students = await pool.query(studentQuery);
     //console.log(students);       
     if ( students.rowCount > 0 ) { 
             for ( const student of students.rows ) {
               //console.log(student);
               var distinguishing_line=`<img style="margin-top: 6px;" src="${myip}/images/backend/hr.png"  />`;
               var logoimage=student['logoimage'];
               if(logoimage==null || logoimage=="") logoimage="";
               else if(logoimage.indexOf("<img ")==-1)
               {
                 logoimage='<img  src=\\"'+logoimage+'\\" style=\\"width: 85%; \\" />';
               }
               
               var signatureimage=student['signatureimage'];
               if(signatureimage==null || signatureimage=="") signatureimage="";
               else if(signatureimage.indexOf("<img ")==-1)
               {
                 signatureimage='<img src=\\"'+signatureimage+'\\" style=\\"width: 70%; \\" />';
               }
                                       
               var signaturename=student['signaturename'];
               if(signaturename==null) signaturename="";
               var signername=student['signername'];
               if(signername==null) signername="";
               var partnercompanyname=student['partnercompanyname'];
               if(partnercompanyname==null) partnercompanyname="";

               var logoimage1=student['logoimage1'];
               if(logoimage1==null || logoimage1=="") logoimage1="";
               else if(logoimage1.indexOf("<img ")==-1)
               {
                 logoimage1='<img  src=\\"'+logoimage1+'\\" style=\\"width: 85%; \\" />';
               }
                                           
               var signatureimage1=student['signatureimage1'];
               if(signatureimage1==null || signatureimage1=="") signatureimage1="";
               else if(signatureimage1.indexOf("<img ")==-1)
               {
                 signatureimage1='<img src=\\"'+signatureimage1+'\\" style=\\"width: 70%; \\" />';
               }
                           
               var signaturename1=student['signaturename1'];
               if(signaturename1==null) signaturename1="";
               var signername1=student['signername1'];
               if(signername1==null) signername1="";
               var partnercompanyname1=student['partnercompanyname1'];
               if(partnercompanyname1==null) partnercompanyname1="";

               email=student['emailaddress'];                    
               first_name = student['firstname'];
               middle_name = student['middlename'];
               last_name = student['lastname'];                          
               
               var fullname="";                            
               if(first_name=="" || first_name==null ||  first_name==undefined) first_name="";
               if(middle_name=="" || middle_name==null ||  middle_name==undefined) middle_name="";
               if(last_name=="" || last_name==null ||  last_name==undefined) last_name="";                            
               if(middle_name=="")
               {
                 fullname=first_name+" "+last_name;
               }
               else
               {
                 fullname=first_name+" "+middle_name+" "+last_name;
               }
               let tmp_badge_template=badge_template.replace("*|RECEIPIENT_NAME|*", fullname);

               competency_name = student['competencyname'];
               onetimecode = student['onetimeblockcertscode'];

               ////////////growthschool////////////  
               signername0_low="VAIBHAV SISINTY".toLowerCase().replace(/\s/g, "").trim(); 
               signername_low=signername.toLowerCase().replace(/\s/g, "").trim(); 
               signername1_low=signername1.toLowerCase().replace(/\s/g, "").trim(); 
               if(signername0_low==signername_low && signername1_low=="")
               {
                 tmp_badge_template=tmp_badge_template.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g,"");
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g,"");
                 tmp_badge_template=tmp_badge_template.replace(/SIGNER_GROWTHSCHOOL_NAME/g,"");
                 tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g,"");
                 tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g,"");
                 tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "");
                 
                 tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage);
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,distinguishing_line);
                 tmp_badge_template=tmp_badge_template.replace("SIGNATURE_1_NAME", "TRAINER & FOUNDER, GROWTHSCHOOL");
                 tmp_badge_template=tmp_badge_template.replace("SIGNER_1_NAME", "VAIBHAV SISINTY");
                 
                 tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_REPLACE", "");
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,"");
                 tmp_badge_template=tmp_badge_template.replace("SIGNATURE_NAME", "");
                 tmp_badge_template=tmp_badge_template.replace("SIGNER_NAME", "");
                 
                 tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
               }
               else
               {
                 var growthschoolfoundersignature=`<img style="height: 50px;" src="${myip}/images/backend/vaibhav_sisnty.png"  />`; 
                 tmp_badge_template=tmp_badge_template.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g, growthschoolfoundersignature);
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g, distinguishing_line);
                 tmp_badge_template=tmp_badge_template.replace(/SIGNER_GROWTHSCHOOL_NAME/g, "VAIBHAV SISINTY");
                 tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g, "FOUNDER");
                 tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g, "GROWTHSCHOOL");
                 tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "FOUNDER, GROWTHSCHOOL");   
                 
                 if(signername!="" && signername1=="")
                 tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
                 else if(signername!="" && signername1!="")
                 tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername1+" and "+signername);
                 else tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", "Vaibhav Sisinty");                           
                 
               }
               /////////////////////////////////////  
               
               tmp_badge_template=tmp_badge_template.replace("LOGOIMAGE_REPLACE", logoimage);
               tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_REPLACE", signatureimage);                          
               tmp_badge_template=tmp_badge_template.replace("SIGNATURE_NAME", signaturename);
               tmp_badge_template=tmp_badge_template.replace("SIGNER_NAME", signername); 
               if(signername!="" && signername!=null)
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,distinguishing_line);
               else
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,"");

               
               tmp_badge_template=tmp_badge_template.replace("LOGOIMAGE_1_REPLACE", logoimage1);
               tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage1);
               tmp_badge_template=tmp_badge_template.replace("SIGNATURE_1_NAME", signaturename1);
               tmp_badge_template=tmp_badge_template.replace("SIGNER_1_NAME", signername1);
               if(signername1!="" && signername1!=null)
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,distinguishing_line);
               else
                 tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,"");


               tmp_badge_template=tmp_badge_template.replace(/COMPETENCY_NAME/g, competency_name);

               const issuedOn=getIso8601Time();
               tmp_badge_template=tmp_badge_template.replace("DATE_OF_ISSUE",issuedOn.split("T")[0]); 

               
               var my_badge_uuid=getUuid(onetimecode);
               var my_badge_file=my_badge_uuid+".png";
               
               var my_badge_content_file=my_badge_uuid+".json";

               var badge_id_url="https://www.certonce.com/openbadgesid/"+puserid+"/"+cohort_id+"/"+my_badge_content_file;
               var badge_id_content={};
               
               
               badge_id_content.issuedOn=issuedOn;
               badge_id_content.id=badge_id_url;
               badge_id_content.name=competency_name;
               badge_id_content.competencyname=competency_name;
               badge_id_content.description="";
               badge_id_content.image=badge_base64_file;
               badge_id_content["criteria"]={};
               badge_id_content["criteria"]["id"]=badge_id_url;
               badge_id_content["criteria"]["narrative"]="";
               badge_id_content.issuer=issuer_url;
               badge_id_content.type="BadgeClass";
               badge_id_content["@context"]="https://w3id.org/openbadges/v2";
               badge_id_content["recipient"]={};
               badge_id_content["recipient"]["type"]="name";
               badge_id_content["recipient"]["identity"]=fullname;
               badge_id_content["recipient"]["name"]=fullname;


               var my_badge_file_withoutext=my_badge_uuid;
               var baked_file_url="https://www.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".png";
               var baked_verifier_url="https://www.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext; 
               var pdfurl="https://www.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";   
               if(puserid=="20025" || puserid=="1")
               {
                 baked_verifier_url="https://growthschool.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext;   
                 baked_file_url="https://growthschool.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".png"; 
                 pdfurl="https://growthschool.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";     
               }
              
               
               var pdfs3url=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url);                          
               console.log(pdfurl);                         
               var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificatejson = '${baked_file_url}',signedcertificateurl='${baked_verifier_url}',signedcertificatepdfurl='${pdfurl}' WHERE  id=${studentid}`);
               await pool.query(updatesql);

               var pdf2pngcontent=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url,true);

               badge_id_content.displayHtml=pdf2pngcontent;
               
               await writeFile(badge_file_base_path+"/"+my_badge_content_file,JSON.stringify(badge_id_content));
               var bade_id_bucket_url=await uploadOpenBadgesFile(awsinfo.s3obj, awsinfo.awsregion, puserid,cohort_id,badge_file_base_path+"/"+my_badge_content_file, awsinfo.s3bucketname,false);
               console.log(bade_id_bucket_url)
               if(bade_id_bucket_url.indexOf("error") != -1)
               {
                 var obj = {
                       Status: 400,
                       message: "Uploading is failed!"        
                       }
                       res.json(obj);  
                       return;
               }
               var badge_content={};
               badge_content["@context"]="https://w3id.org/openbadges/v2";
               badge_content["id"]=badge_id_url;
               badge_content["type"]="Assertion";
               badge_content["verification"]={};
               badge_content["verification"]["type"]="hosted";
               console.log("55555555555555555555555555555555555555555555555555555555");
               await bake(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, standard_badge_file, JSON.stringify(badge_content), badge_file_base_path+"/"+my_badge_file,puserid,cohort_id,studentid);
         }
     
     }//for
   }
  
   var obj = {
           Status: 200,
           message: 'OpenBadges is baked successfully!',              
       }
   res.json(obj);
  
   fs.unlinkSync(path);
 } 
 catch (err) {
     var obj = {
       Status: 400,
       message: err.message        
       }
       res.json(obj); 
 }
}

user.retrieveOpenBadgesByAPI = async (req,res, next) => {  
 try{
   var ret = [];
   var api_key=req.body.apikey;  
   var glcohortid=req.body.cohortid;
   var student_list = req.body.studentids;
   if(api_key == "" || glcohortid == "" || student_list == "" || student_list == []){
     var obj = {
       Status: 400,
         message: "Invalid request parameters."
     };
     res.json(obj);
     return; 
   }
   var userid=await getUserIDFromApiKey(api_key); 
   if(userid==null)
   {
     var obj = {
           Status: 400,
             message: "Invalid api key"
         };
     res.json(obj);
     return; 
   }
   else
   {
     var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
     var result = await pool.query(usermasterQuery);
     var organization_name=result.rows[0].organization_name;
     var business_is_verified=result.rows[0].business_is_verified;
   }    
   if(business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }    
   var puserid=await getParentAccountIdFromId(userid);  
   
   var cohort_id= await getCohortidFromName(glcohortid,puserid);
   for (let index = 0; index < student_list.length; index++) {
     //const element = params[index];
     let element = student_list[index];      
     tempQuery = format(`select b.* from cohortmembers_openbadges b left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and b.studentid='${element}';`);
     t_result = await pool.query(tempQuery);
     console.log(tempQuery, t_result.rowCount);
     let studentid=t_result.rows[0]['id'];
     var updateQuery = format(`UPDATE cohortmembers_openbadges SET certificatesendstate=1 WHERE id='${studentid}';`);
     await pool.query(updateQuery);
     var badgeQuery = format(`SELECT b.signedcertificatejson, b.signedcertificatepdfurl, a.firstname, a.middlename, a.lastname, a.emailaddress
                               FROM cohortmembers_openbadges b LEFT JOIN student a ON a.id=b.studentid 
                               WHERE b.id='${studentid}'`);
     
     let badges = await pool.query(badgeQuery);            
     console.log(badgeQuery, badges.rowCount);
     if ( badges.rowCount > 0 ) { 
       let item = {"studentid": element, "firstname": badges.rows[0].firstname, "middlename": badges.rows[0].middlename, "lastname": badges.rows[0].lastname, "email": badges.rows[0].emailaddress, "pdf": badges.rows[0].signedcertificatepdfurl, "openbadge": badges.rows[0].signedcertificatejson};
       console.log(item);
       ret.push(item);
     }
   }

   var obj = {
     Status: 200,
     result: ret,
     message: 'Success',              
   }
   res.json(obj);


 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message        
   }
   res.json(obj); 
 }
}

user.searchStudentWithOnetimecode = async (req,res, next) => {
 try{

   var ret = [];
   var json_link = "";
   var pdf_link = "";
   var api_key=req.body.apikey;  
   var onetimecode=req.body.onetimecode;
   
   if(api_key == ""){
     var obj = {
       Status: 400,
         message: "Invalid API Key."
     };
     res.json(obj);
     return; 
   }
   var userid=await getUserIDFromApiKey(api_key); 
   if(userid==null)
   {
     var obj = {
           Status: 400,
             message: "Invalid api key"
         };
     res.json(obj);
     return; 
   }
   else
   {
     var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
     var result = await pool.query(usermasterQuery);
     var organization_name=result.rows[0].organization_name;
     var business_is_verified=result.rows[0].business_is_verified;
   }    
   if(business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }    
   var puserid=await getParentAccountIdFromId(userid);  
   
   var getStudentQuery = format(`select * from cohortmembers_degree where onetimeblockcertscode='${onetimecode}'`);
   var studentResult = await pool.query(getStudentQuery);
   if(studentResult.rowCount > 0)
   {
     if(studentResult.rows[0].signedcertificateurl == '' || studentResult.rows[0].signedcertificateurl == null)
     {
       json_link = "";
     }
     else
     {
       var json_uuid = studentResult.rows[0].signedcertificateurl.substring(studentResult.rows[0].signedcertificateurl.lastIndexOf("/") + 1);
       json_uuid = json_uuid.replace(".json", "");
       json_link = `${myip}/certificatejson/${puserid}/${json_uuid}`;
     }

     if(studentResult.rows[0].signedcertificatepdfurl == '' || studentResult.rows[0].signedcertificatepdfurl == null)
     {
       pdf_link = "";
     }
     else
     {
       var pdf_uuid = studentResult.rows[0].signedcertificatepdfurl.substring(studentResult.rows[0].signedcertificatepdfurl.lastIndexOf("/") + 1);
       pdf_uuid = pdf_uuid.replace(".pdf", "");
       pdf_link = `${myip}/certificatepdf/${puserid}/${pdf_uuid}`;
     }
   }
   else
   {
     var obj = {
           Status: 400,
             message: "Invalid Onetimecode"
         };
     res.json(obj);
     return; 
   }
   var obj = {
     Status: 200,
     Data: {pdf: pdf_link, json: json_link},
     message: 'Success',              
   }
   res.json(obj);
 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message        
   }
   res.json(obj); 
 }
}

user.registStudentByAPI = async (req,res, next) => {
 try{
   var cohorttablename="cohortmembers_degree";
   var ret = [];
   var recaptcha_response = req.body.recaptcha_response;
   var api_key=req.body.apikey;
   var stripe_secret_key = req.body.stripe_secret_key;
   var stripe_public_key = req.body.stripe_public_key;
   var stripe_token_id = req.body.stripe_token_id;
   var pay_amount = req.body.amount;
   var last4 = req.body.last4;
   var first_name=req.body.first_name;
   var middle_name = req.body.middle_name;
   var last_name = req.body.last_name;
   var email = req.body.email;
   var cohort_id = req.body.cohort_id;
   var cohort_name = req.body.cohort_name;
   var competency_name = req.body.competency_name;
   var faculty = req.body.faculty;

   //var t_request = require('request-promise');
   await request_native.post(
     `https://www.google.com/recaptcha/api/siteverify?secret=6Lcl4LkdAAAAALj1eTph4kTVCgkIcKrSSZwYTsDn&response=${recaptcha_response}`,
     //{secret: "6Lcl4LkdAAAAALj1eTph4kTVCgkIcKrSSZwYTsDn", response: recaptcha_response},
     function(error, response, body){
       var temp_result = JSON.parse(body);
       if (temp_result['success'] !== true)
       {
         var obj = {
           Status: 400,
             message: "Failed to pass reCaptcha."
         };
         res.json(obj);
         return;
       }        
     }
   )
   const stripe = require("stripe")(stripe_secret_key);
   
   var student_list = req.body.studentids;
   if(api_key == ""){
     var obj = {
       Status: 400,
         message: "Invalid API Key."
     };
     res.json(obj);
     return; 
   }
   var userid=await getUserIDFromApiKey(api_key); 
   if(userid==null)
   {
     var obj = {
           Status: 400,
             message: "Invalid api key"
         };
     res.json(obj);
     return; 
   }
   else
   {
     var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
     var result = await pool.query(usermasterQuery);
     var organization_name=result.rows[0].organization_name;
     var business_is_verified=result.rows[0].business_is_verified;
   }    
   if(business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }    
   var puserid=await getParentAccountIdFromId(userid);  

   // try {
   //   var payloadObj = {
   //     amount: pay_amount,
   //     currency: "usd",
   //     source: stripe_token_id, // obtained with Stripe.js
   //     description: "Plan Amount"
   //   };
   //   console.log("22222222222222222222222222222222222222222222222222222222");
   //   // stripe.charges.create(payloadObj, function (err, charge) {
   //   //   if (err) {
   //   //     console.log("stripe payment charge error");
   //   //     var obj = {
   //   //       Status: 400,
   //   //       message: err.message
   //   //     }
   //   //     res.json(obj)
   //   //   }
   //   //   else {
   //   //     console.log("success stripe payment charge", charge);
   //   //     return;
   //   //   }
   //   // });
   //   const charge = await stripe.charges.create(payloadObj);
   //   console.log(charge);
   // }
   // catch (err) {
   //   console.log(err.message);
   //   var obj = {
   //     Status: 400,
   //     message: err.message
   //   };
   //   res.json(obj);
   //   return;
   // }
   if(last4 == "4333")
   {
     var obj = {
       Status: 400,
       message: "Invalid Card Information"
     };
     res.json(obj);
     return;
   }
   
   var getUserQuery = format(`select * from usermaster where user_id='${userid}'`);
   var userResult = await pool.query(getUserQuery);
   var currentUser = userResult.rows[0];
   console.log(currentUser);
   if(middle_name==null||middle_name=="")
   {
     fullname = first_name + " " + last_name;
   }
   else
   {
     fullname = first_name + " " + middle_name + " " + last_name;
   }
   let attachment_name = fullname + " - " + competency_name; 
   //var cohort_id= await getCohortidFromName(glcohortid,puserid);


   //////////smtp information/////////
   var smtpaccount = {
    'type' : true,
    'username' : "", 
    'clientid' : "",
    'clientsecret' : "",
    'refreshtoken' : "",
    'from': ""
  };
  
  var cc="";
  var querySmtp=format(`SELECT * FROM setting where accountid='${puserid}';`);
  let smtpresult = await pool.query(querySmtp);
  if(smtpresult && smtpresult.rowCount > 0){
    if(smtpresult.rows[0].smtptype==true){
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
        smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
        smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
        smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
        cc=smtpresult.rows[0].smtpcc
        //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
    }
    else if(smtpresult.rows[0].smtptype==false){
        smtpaccount['type'] = smtpresult.rows[0].smtptype;
        smtpaccount['host'] = smtpresult.rows[0].smtphost;
        smtpaccount['port'] = smtpresult.rows[0].smtpport;
        smtpaccount['username'] = smtpresult.rows[0].smtpusername;
        smtpaccount['password'] = smtpresult.rows[0].smtppassword;
        smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
        cc=smtpresult.rows[0].smtpcc
        //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
    }
  }
  ///////////////////////////////////   

   var unique_student_id = "00000";
   addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,accountid)
                                   SELECT '${unique_student_id}','${first_name}','${middle_name}', '${last_name}', '${email}', '${puserid}' 
                                   ON CONFLICT (firstname,middlename,lastname,emailaddress,studentid,accountid) DO NOTHING RETURNING id;`);
   console.log(addStudentQuery);
   students = await pool.query(addStudentQuery);
   if (students.rowCount > 0) {
       studentId = students.rows[0].id;
       console.log("success regist student by api", studentId);
       let getExistCohort = format(`SELECT id FROM COHORT WHERE cohortid='${cohort_id}' AND competencyname='${competency_name}' AND accountid='${puserid}';`);
       console.log(getExistCohort);
       cohorts = await pool.query(getExistCohort);
       cohortId = cohorts.rows[0].id;
       while (true){
         var onetimecode = await getOnetimecode(7);          
         tempQuery = format(`select * from cohortmembers_degree where onetimeblockcertscode='${onetimecode}'`)
         t_result = await pool.query(tempQuery);
         console.log(onetimecode, t_result);
         if(t_result.rowCount == 0) break;
       }
       addMembersDegreeQuery = format(`INSERT INTO cohortmembers_degree (cohortid, studentid,certtype,onetimeblockcertscode) SELECT '${cohortId}', '${studentId}', 'degree', '${onetimecode}' WHERE NOT EXISTS (SELECT 1 FROM cohortmembers_degree WHERE cohortid='${cohortId}' and studentid='${studentId}' and certtype='degree' and onetimeblockcertscode='${onetimecode}') RETURNING id`);
       console.log(addMembersDegreeQuery);
       cohortmembers_result = await pool.query(addMembersDegreeQuery);

       cert_email_subject = "A Digital certificate Onetimecode is arrived by " + currentUser.organization_name;
       email_body = `<p style="color: black;">Thanks for requesting your certificate.</p>
                     <p style="color: black;">Here is your onetime code.</p>
                     <p style="color: black; font-size: 20pt; margin-left: 200px">${onetimecode}</p>
                     <p style="color: black;">It will be needed to check the status.</p>
                     <p style="color: black;">We will email your certificate as soon as possible preferably within 7 days.</p>
                     `
      const mailer_sendcertificate = require("../../config/mailer_sendonetimecode");
      let logfilename = logfiledir + currentUser.user_id+"/sendcertificate.log";
      //mailer_sendcertificate(email_body, cert_email_subject, email, smtphost, smtpport, smtpusername, smtppassword, smtpfrom, smtpcc, attachment_name, logfilename, cohorttablename, cohortmembers_result.rows[0].id);  
      
      mailer_sendcertificate(email_body, cert_email_subject, email, smtpaccount, "", logfilename, cohorttablename, cohortmembers_result.rows[0].id);
       var obj = {
         Status: 200,
         result: ret,
         message: 'Success',              
       }
       res.json(obj);
   } else {        
       console.log("fail to regist student by api");
       var obj = {
         Status: 400,
         result: ret,
         message: 'Fail to regist student',              
       }
       res.json(obj);
   }

   
 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message        
   }
   res.json(obj); 
 }
}
// Unhold cohortmembers_degree
user.unhold = async (req,res, next) => {
 try
 {    
   var params = req.body.selectedItems;
   var certtype=req.body.certtype;
   var isdownload=req.body.isdownload;
   var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
   var cohorttablename="cohortmembers_degree";     
   if(certtype && certtype!="" && certtype!=="null" && certtype!==undefined && certtype!=null)
   {      
      cohorttablename=certtypes[certtype];
   }
   if(isdownload && isdownload!="" && isdownload!=="null" && isdownload!==undefined && isdownload!=null)
   {      
     isdownload=req.body.isdownload;
   }
   var currentUser = req.user;  
   var organization_name=currentUser.organization_name;
   var organization_verify_uri=currentUser.organization_verify_uri;
   if(organization_verify_uri==""||organization_verify_uri=="null"||organization_verify_uri==null|| organization_verify_uri==undefined) organization_verify_uri="certonce";
   if(req.user.business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }
   var permission=await getPermission(req.user.user_id,"sendCertificate");
   if(permission==false)
   {
       var obj = {
         Status: 400,
           message: "Access denied."
       };
       res.json(obj);
       return;
   }
   var puserid=await getParentAccountIdFromId(req.user.user_id);
   
   for (let index=0; index < params.length; index++) {
     const element = params[index];
     let cohortid=element.split("=")[0];
     let studentid=element.split("=")[1];
     if ( cohortid == '' || studentid == '') {continue;}
     //console.log("hold id: ", "cohortid="+cohortid+",studentid="+studentid);

     var holdquery = format(`UPDATE ${cohorttablename} SET hold='' WHERE id=${studentid}`);
     console.log(holdquery);
     await pool.query(holdquery);
   }
   
   var obj = {
         Status: 200,
         message: 'Success',
   }
   res.json(obj);
 } 
 catch (err) {
   console.log(err.message)
   var obj = {
         Status: 400,
         message: err.message        
         }
         res.json(obj);      
 }
}

user.baseauth = async(req, res, next) =>{
 try {
   // var username = req.query.username;
   // var password = req.query.password;
   // console.log(username, password);
   // var ageQuery = format(`SELECT * from USERMASTER WHERE email='${username}'`);
   // pool.query(ageQuery, async function (err, result) {
   //   if (err) {
   //       var obj = {
   //           Status: 400,
   //           message: err.message
   //       }
   //       res.json(obj);
   //   }
   //   else {
   //     if (result.rows.length != 0) {
   //       console.log("1111111111111111111111111111111111111");
   //         var passwordIsValid = bcrypt.compareSync(password, result.rows[0].password);       
   //         if(passwordIsValid)
   //         {   
   //           console.log("2222222222222222222222222222222222222222");
   //           if(result.rows[0].isverified){
   //             try {
   //               console.log("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz")
   //               var apikey = await encrypt(Buffer.from(result.rows[0].user_id.toString()));
   //               var obj = {
   //                 Status: 200,
   //                 message: 'Success',
   //                 data: {apikey: apikey}
   //               }
   //               res.json(obj);                    
   //             } catch (e) {
   //               var obj = {
   //                 Status: 400,
   //                 message: e.message
   //               }
   //               res.json(obj);           
   //             }
   //           }                            
   //         }                     
   //     }
   //     var obj = {
   //       Status: 400,
   //       message: "Failed Authentication"
   //     }
   //     res.json(obj);
   //   }
   // })
   //console.log("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
   var currentUser=req.user;
   var apikey = await encrypt(Buffer.from(req.user.user_id.toString()))
   currentUser['apikey'] = apikey;
   console.log(currentUser);
   var obj = {
     Status: 200,
     message: 'Success',
     data: currentUser
   }
   res.json(obj);                    
 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj)
 }
}
user.zapierbakeopenbadgebystudent = async (req,res, next) => {
 try
 {
   ///lock///
   const path = '/home/ubuntu/badgelock.txt';
   if (fs.existsSync(path))
   {
      var obj = {
         Status: 400,
           message: "Baking process is running already."
       };
       res.json(obj);
       return;
   }
   else
   {       
    const fd = fs.openSync(path, 'w');       
   }
   
   var os = new os_func();
   //var api_key=req.body.apikey;  
   var currentUser = req.user;
   var puserid=await getParentAccountIdFromId(req.user.user_id); 
   var glcohortid=req.body.cohortid;
   var student_list = req.body.studentid;
   if(glcohortid == "" || studentid == ""){
     var obj = {
       Status: 400,
         message: "Invalid request parameters."
     };
     res.json(obj);
     return; 
   }
   
   var awsinfo=await getS3BucketInformation(puserid)
   var bucket_result=await createBucket(awsinfo.s3obj,awsinfo.s3bucketname);
   
   if(bucket_result=="")
   {
     var obj = {
         Status: 400,
         message: "S3 bucket creation has been failed."        
         }
         res.json(obj);
         return;
   } 
   let isTotal=false; 
  
   var cohort_id= await getCohortidFromName(glcohortid,puserid);
   /////////////get badge file/////////
   var badge_template="";
   var badge_name="";
   var badge_description="";
   var isuer_name="";
   var issuer_description="";
   var issuer_url="";
   var badge_base64_file="";
   var badge_base64_url="";
   var badge_file="";
   var whereClauseOpenBadges =  "WHERE c.cohortid='"+ glcohortid +"';"
   var openBadgesInfoQuery = format(`SELECT c.*,d.* FROM cohort_group c LEFT JOIN openbadges_setting d ON d.id=c.openbadgesid ${whereClauseOpenBadges}`);
 
   let openbadgesinfos = await pool.query(openBadgesInfoQuery);  
   if ( openbadgesinfos.rowCount > 0 ) {                             
     for ( const openbadgesinfo of openbadgesinfos.rows ) 
     {
       badge_name=openbadgesinfo['badge_name'];
       if(badge_name==""||badge_name==null)
       {
         var obj = {
             Status: 400,
             message: "Please set badge name in design step"
           };
         res.json(obj);
         return;
       }
       badge_description=openbadgesinfo['badge_description'];
       if(badge_description==""||badge_description==null)
       {
         var obj = {
             Status: 400,
               message: "Please set badge description in design step"
           };
           res.json(obj);
           return;
       }
       isuer_name=openbadgesinfo['issuer_name'];
       if(isuer_name==""||isuer_name==null)
       {
         var obj = {
             Status: 400,
               message: "Please set issuer name in design step"
           };
           res.json(obj);
           return;
       }
       issuer_description=openbadgesinfo['issuer_description'];
       if(issuer_description==""||issuer_description==null)
       {
         var obj = {
             Status: 400,
               message: "Please set issuer description in design step"
           };
           res.json(obj);
           return;
       }

       badge_template=openbadgesinfo['template'];                
       const badge_template_buff = Buffer.from(badge_template, 'base64');
       badge_template = badge_template_buff.toString('utf-8');

       badge_file=openbadgesinfo['badge_file'];
       badge_base64_file=openbadgesinfo['badge_base64_file'];
       if(badge_file==""||badge_file==null||badge_base64_file==""||badge_base64_file==null)
       {
         var obj = {
             Status: 400,
               message: "Please select badge file in design step"
           };
           res.json(obj);
           return;
       }
       issuer_url=openbadgesinfo['issuer_url'];
     }
   }
   else
   {
     var obj = {
       Status: 400,
       message: "Please set openbadges information!"        
       }
       res.json(obj);  
       return;
   }   
   /////write badge file/////
   var standard_badge_file=openbadges_base_path+puserid+"/"+cohort_id+"/standard_badge_file.png";
   var badge_file_base_path=openbadges_base_path+puserid+"/"+cohort_id;
   try
   {
       const buff2 = Buffer.from(badge_file, 'base64');
       var str = buff2.toString('utf-8');
       //str=str.replace(' ','+');
       if (!await fs.existsSync(badge_file_base_path))
       {
           await os.execCommand('sudo mkdir -p "'+badge_file_base_path+'"');
           await os.execCommand('sudo chmod -R 777 "'+badge_file_base_path+'"');
       }
        fs.writeFileSync(standard_badge_file,str,"binary");          
   }
   catch(err)
   {
       var obj = {
       Status: 400,
       message: err        
       }
       res.json(obj);  
       return;
   }
   //////////////////////////
   ////////////////////////////////////
   //for (let index = 0; index < student_list.length; index++) {
   let element = student_list[index];      
   tempQuery = format(`select b.* from cohortmembers_openbadges b left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and b.studentid=${element};`);
   t_result = await pool.query(tempQuery);
   console.log(tempQuery);
   console.log(t_result.rows[0]);
   let studentid=t_result.rows[0]['id'];
   console.log(studentid);
   var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and b.id='"+studentid+"';"
   var studentQuery = format(`SELECT a.*, c.*,b.*,
                                 d.logoimage, d.signatureimage, d.signaturename, d.signername, d.partnercompanyname, 
                                 d.logoimage1, d.signatureimage1, d.signaturename1, d.signername1, d.partnercompanyname1, d.detail   FROM student a 
                                 LEFT JOIN cohortmembers_openbadges b ON b.studentid=a.id                                                   
                                 LEFT JOIN cohort c ON c.id=b.cohortid
                                 LEFT JOIN competencypartner d ON trim(from d.competencyname)=trim(from c.competencyname) ${whereClause}
                                 `);
   console.log(studentQuery);
   let students = await pool.query(studentQuery);
   //console.log(students);       
   if ( students.rowCount > 0 ) { 
     for ( const student of students.rows ) {
       //console.log(student);
       var distinguishing_line=`<img style="margin-top: 6px;" src="${myip}/images/backend/hr.png"  />`;
       var logoimage=student['logoimage'];
       if(logoimage==null || logoimage=="") logoimage="";
       else if(logoimage.indexOf("<img ")==-1)
       {
         logoimage='<img  src=\\"'+logoimage+'\\" style=\\"width: 85%; \\" />';
       }
       
       var signatureimage=student['signatureimage'];
       if(signatureimage==null || signatureimage=="") signatureimage="";
       else if(signatureimage.indexOf("<img ")==-1)
       {
         signatureimage='<img src=\\"'+signatureimage+'\\" style=\\"width: 70%; \\" />';
       }
                               
       var signaturename=student['signaturename'];
       if(signaturename==null) signaturename="";
       var signername=student['signername'];
       if(signername==null) signername="";
       var partnercompanyname=student['partnercompanyname'];
       if(partnercompanyname==null) partnercompanyname="";

       var logoimage1=student['logoimage1'];
       if(logoimage1==null || logoimage1=="") logoimage1="";
       else if(logoimage1.indexOf("<img ")==-1)
       {
         logoimage1='<img  src=\\"'+logoimage1+'\\" style=\\"width: 85%; \\" />';
       }
                                   
       var signatureimage1=student['signatureimage1'];
       if(signatureimage1==null || signatureimage1=="") signatureimage1="";
       else if(signatureimage1.indexOf("<img ")==-1)
       {
         signatureimage1='<img src=\\"'+signatureimage1+'\\" style=\\"width: 70%; \\" />';
       }
                   
       var signaturename1=student['signaturename1'];
       if(signaturename1==null) signaturename1="";
       var signername1=student['signername1'];
       if(signername1==null) signername1="";
       var partnercompanyname1=student['partnercompanyname1'];
       if(partnercompanyname1==null) partnercompanyname1="";

       email=student['emailaddress'];                    
       first_name = student['firstname'];
       middle_name = student['middlename'];
       last_name = student['lastname'];                          
       
       var fullname="";                            
       if(first_name=="" || first_name==null ||  first_name==undefined) first_name="";
       if(middle_name=="" || middle_name==null ||  middle_name==undefined) middle_name="";
       if(last_name=="" || last_name==null ||  last_name==undefined) last_name="";                            
       if(middle_name=="")
       {
         fullname=first_name+" "+last_name;
       }
       else
       {
         fullname=first_name+" "+middle_name+" "+last_name;
       }
       let tmp_badge_template=badge_template.replace("*|RECEIPIENT_NAME|*", fullname);

       competency_name = student['competencyname'];
       onetimecode = student['onetimeblockcertscode'];

       ////////////growthschool////////////  
       signername0_low="VAIBHAV SISINTY".toLowerCase().replace(/\s/g, "").trim(); 
       signername_low=signername.toLowerCase().replace(/\s/g, "").trim(); 
       signername1_low=signername1.toLowerCase().replace(/\s/g, "").trim(); 
       if(signername0_low==signername_low && signername1_low=="")
       {
         tmp_badge_template=tmp_badge_template.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g,"");
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g,"");
         tmp_badge_template=tmp_badge_template.replace(/SIGNER_GROWTHSCHOOL_NAME/g,"");
         tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g,"");
         tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g,"");
         tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "");
         
         tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage);
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,distinguishing_line);
         tmp_badge_template=tmp_badge_template.replace("SIGNATURE_1_NAME", "TRAINER & FOUNDER, GROWTHSCHOOL");
         tmp_badge_template=tmp_badge_template.replace("SIGNER_1_NAME", "VAIBHAV SISINTY");
         
         tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_REPLACE", "");
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,"");
         tmp_badge_template=tmp_badge_template.replace("SIGNATURE_NAME", "");
         tmp_badge_template=tmp_badge_template.replace("SIGNER_NAME", "");
         
         tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
       }
       else
       {
         var growthschoolfoundersignature=`<img style="height: 50px;" src="${myip}/images/backend/vaibhav_sisnty.png"  />`; 
         tmp_badge_template=tmp_badge_template.replace(/SIGNATUREIMAGE_GROWTHSCHOOL_FOUNDER_REPLACE/g, growthschoolfoundersignature);
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_GROWTHSCHOOL_FOUNDER_LINE/g, distinguishing_line);
         tmp_badge_template=tmp_badge_template.replace(/SIGNER_GROWTHSCHOOL_NAME/g, "VAIBHAV SISINTY");
         tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_LABEL/g, "FOUNDER");
         tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_COLLEDGE_LABEL/g, "GROWTHSCHOOL");
         tmp_badge_template=tmp_badge_template.replace(/GROWTHSCHOOL_FOUNDER_GROWTHSCHOOL_LABEL/g, "FOUNDER, GROWTHSCHOOL");   
         
         if(signername!="" && signername1=="")
         tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername);
         else if(signername!="" && signername1!="")
         tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", signername1+" and "+signername);
         else tmp_badge_template=tmp_badge_template.replace("GROWTHSCHOOL_TRAINER_NAME", "Vaibhav Sisinty");                           
         
       }
       /////////////////////////////////////  
       
       tmp_badge_template=tmp_badge_template.replace("LOGOIMAGE_REPLACE", logoimage);
       tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_REPLACE", signatureimage);                          
       tmp_badge_template=tmp_badge_template.replace("SIGNATURE_NAME", signaturename);
       tmp_badge_template=tmp_badge_template.replace("SIGNER_NAME", signername); 
       if(signername!="" && signername!=null)
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,distinguishing_line);
       else
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING_LINE/g,"");

       
       tmp_badge_template=tmp_badge_template.replace("LOGOIMAGE_1_REPLACE", logoimage1);
       tmp_badge_template=tmp_badge_template.replace("SIGNATUREIMAGE_1_REPLACE", signatureimage1);
       tmp_badge_template=tmp_badge_template.replace("SIGNATURE_1_NAME", signaturename1);
       tmp_badge_template=tmp_badge_template.replace("SIGNER_1_NAME", signername1);
       if(signername1!="" && signername1!=null)
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,distinguishing_line);
       else
         tmp_badge_template=tmp_badge_template.replace(/DISTINGUISHING1_LINE/g,"");


       tmp_badge_template=tmp_badge_template.replace(/COMPETENCY_NAME/g, competency_name);

       const issuedOn=getIso8601Time();
       tmp_badge_template=tmp_badge_template.replace("DATE_OF_ISSUE",issuedOn.split("T")[0]); 

       
       var my_badge_uuid=getUuid(onetimecode);
       var my_badge_file=my_badge_uuid+".png";
       
       var my_badge_content_file=my_badge_uuid+".json";

       var badge_id_url="https://www.certonce.com/openbadgesid/"+puserid+"/"+cohort_id+"/"+my_badge_content_file;
       var badge_id_content={};
       
       
       badge_id_content.issuedOn=issuedOn;
       badge_id_content.id=badge_id_url;
       badge_id_content.name=competency_name;
       badge_id_content.competencyname=competency_name;
       badge_id_content.description="";
       badge_id_content.image=badge_base64_file;
       badge_id_content["criteria"]={};
       badge_id_content["criteria"]["id"]=badge_id_url;
       badge_id_content["criteria"]["narrative"]="";
       badge_id_content.issuer=issuer_url;
       badge_id_content.type="BadgeClass";
       badge_id_content["@context"]="https://w3id.org/openbadges/v2";
       badge_id_content["recipient"]={};
       badge_id_content["recipient"]["type"]="name";
       badge_id_content["recipient"]["identity"]=fullname;
       badge_id_content["recipient"]["name"]=fullname;


       var my_badge_file_withoutext=my_badge_uuid;
       var baked_file_url="https://www.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".png";
       var baked_verifier_url="https://www.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext; 
       var pdfurl="https://www.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";   
       if(puserid=="20025" || puserid=="1")
       {
         baked_verifier_url="https://growthschool.certonce.com/openbadgesverifier/"+puserid+"/"+cohort_id+"/"+my_badge_file_withoutext;   
         baked_file_url="https://growthschool.certonce.com/openbadges/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".png"; 
         pdfurl="https://growthschool.certonce.com/openbadgespdf/"+puserid+"/"+cohort_id+"/"+my_badge_uuid+".pdf";     
       }
       
       
       var pdfs3url=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url);                          
       console.log(pdfurl);                         
       var updatesql= format(`UPDATE cohortmembers_openbadges SET signedcertificatejson = '${baked_file_url}',signedcertificateurl='${baked_verifier_url}',signedcertificatepdfurl='${pdfurl}' WHERE  id=${studentid}`);
       await pool.query(updatesql);

       var pdf2pngcontent=await generatePDFForOpenBadges(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, tmp_badge_template, my_badge_content_file,puserid,cohort_id, organization_name, competency_name, baked_verifier_url,true);

       badge_id_content.displayHtml=pdf2pngcontent;
       
       await writeFile(badge_file_base_path+"/"+my_badge_content_file,JSON.stringify(badge_id_content));
       var bade_id_bucket_url=await uploadOpenBadgesFile(awsinfo.s3obj, awsinfo.awsregion, puserid,cohort_id,badge_file_base_path+"/"+my_badge_content_file, awsinfo.s3bucketname,false);
       console.log(bade_id_bucket_url)
       if(bade_id_bucket_url.indexOf("error") != -1)
       {
         var obj = {
               Status: 400,
               message: "Uploading is failed!"        
               }
               res.json(obj);  
               return;
       }
       var badge_content={};
       badge_content["@context"]="https://w3id.org/openbadges/v2";
       badge_content["id"]=badge_id_url;
       badge_content["type"]="Assertion";
       badge_content["verification"]={};
       badge_content["verification"]["type"]="hosted";
       await bake(awsinfo.s3obj, awsinfo.awsregion, awsinfo.s3bucketname, standard_badge_file, JSON.stringify(badge_content), badge_file_base_path+"/"+my_badge_file,puserid,cohort_id,studentid);
     }//for      
   }//if
   //}//for
  
   var obj = {
           Status: 200,
           message: 'OpenBadges is baked successfully!',              
       }
   res.json(obj);
  
   fs.unlinkSync(path);
 } 
 catch (err) {
     var obj = {
       Status: 400,
       message: err.message        
       }
       res.json(obj); 
 }
}

user.zapieruploadindividualstuduent = async (req, res, next) => {

 try {
   //Variables to read file.
   var currentUser = req.user;
   if(req.user.business_is_verified==false)
   {
   var obj = {
         Status: 400,
           message: "Your account is currently under verification, please contact certonce team."
       };
       res.json(obj);
       return;
   }
   var permission=await getPermission(req.user.user_id,"uploadstuduents");
   if(permission==false)
   {
       var obj = {
         Status: 400,
           message: "Access denied."
       };
       res.json(obj);
       return;
   }
   var puserid=await getParentAccountIdFromId(req.user.user_id);  

   
   var params = req.body;
   

   //////////////////transcript variable//////////////////    
   var cgpa="";
   var cpi="";
   var specializationone="";
   var specializationtwo="";
   var modeofdelivery="";
   var mediumofstudy="";
   var dateofissue="";
   var preparedby="";
   var verifiedby="";
   ///////////////////////////////////////////////////////
   
   //////////////////degree variable//////////////////
   //var certtype=["degree","transcript","openbadges"];
   var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
   var addStudentQuery = '';
   var addCohortQuery = '';    
   ///////////////////////////////////////////////////
   var glstudentid="";
   var glissuedate="";
   //params=JSON.parse(params);
   if(params != null&&params != undefined&&params.length > 0)
   {
     for (const row of params)
     {
        var istranscript=row['istranscript'];
        if(istranscript==null||istranscript==undefined||istranscript=="") istranscript=false;
        
        if(istranscript==false)
        {
           //////////////////////////studen upload part/////////////////////////
           var xlsxstudentid=row['studentid'];
           if(xlsxstudentid==null||xlsxstudentid==undefined) xlsxstudentid=""; 
           var xlsxfirstname=row['firstname'];
           if(xlsxfirstname==null||xlsxfirstname==undefined) xlsxfirstname=""; 
           var xlsxmiddlename=row['middlename'];
           if(xlsxmiddlename==null||xlsxmiddlename==undefined) xlsxmiddlename=""; 
           var xlsxlastname=row['lastname'];
           if(xlsxlastname==null||xlsxlastname==undefined) xlsxlastname=""; 
           var xlsxemail=row['email'];
           if(xlsxemail==null||xlsxemail==undefined) xlsxemail=""; 
           if(xlsxemail.split(",").length>1) xlsxemail=xlsxemail.split(",")[0].trim(); 
           xlsxemail=xlsxemail.trim();
           var xlsxphonenumber=row['phonenumber'];
           if(xlsxphonenumber==null||xlsxphonenumber==undefined) xlsxphonenumber=""; 
           var xlsxcohortid=row['cohortid'];
           if(xlsxcohortid==null||xlsxcohortid==undefined) xlsxcohortid=""; 
           xlsxcohortid=xlsxcohortid.trim();
           var xlsxcohortname=row['cohortname'];
           if(xlsxcohortname==null||xlsxcohortname==undefined) xlsxcohortname=""; 
           var xlsxcompetencyname=row['competencyname'];
           if(xlsxcompetencyname==null||xlsxcompetencyname==undefined) xlsxcompetencyname=""; 
           var CompetencyLevel=row['competencylevel'];
           if(CompetencyLevel==null||CompetencyLevel==undefined) CompetencyLevel=""; 
           var GraduatingDate=row['graduatingdate'];
           if(GraduatingDate==null||GraduatingDate==undefined) GraduatingDate=""; 
           var Graduatingmonth=row['graduatingmonth'];
           if(Graduatingmonth==null||Graduatingmonth==undefined) Graduatingmonth=""; 
           var Graduatingyear=row['graduatingyear'];
           if(Graduatingyear==null||Graduatingyear==undefined) Graduatingyear=""; 
           var GratuatingSeason=row['gratuatingseason'];
           if(GratuatingSeason==null||GratuatingSeason==undefined) GratuatingSeason=""; 
           var competencyExpirationDate=row['competencyexpirationdate'];
           if(competencyExpirationDate==null||competencyExpirationDate==undefined) competencyExpirationDate="";             
           var CohortDescription=row['cohortdescription'];
           if(CohortDescription==null||CohortDescription==undefined) CohortDescription=""; 
           var LetterOfReco=row['letterofreco'];
           if(LetterOfReco==null||LetterOfReco==undefined) LetterOfReco="";
           var marks=row['marks'];
           if(marks==null||marks==undefined) marks="";
           var competencystartdate=row['competencystartdate'];
           if(competencystartdate==null||competencystartdate==undefined) competencystartdate="";            
           competencystartdate=competencystartdate.replace(/_/g, " ");
           ////////////////////// CertificationCategory ////////////////////////
           var certificationcategory = row['certificationcategory'];
           if(certificationcategory == null || certificationcategory == undefined) certificationcategory = "";

           var competencyenddate=row['competencyenddate'];
           if(competencyenddate==null||competencyenddate==undefined) competencyenddate="";
           competencyenddate=competencyenddate.replace(/_/g, " ");
           

           var FatherName=row['fathername'];
           if(FatherName==null||FatherName==undefined) FatherName=""; 
           
           var MotherName=row['mothername'];
           if(MotherName==null||MotherName==undefined) MotherName=""; 

           var Sex=row['sex'];
           if(Sex==null||Sex==undefined) Sex=""; 

           var specializationone=row['specializationone'];
           if(specializationone==null||specializationone==undefined) specializationone=""; 

           var specializationtwo=row['specializationtwo'];
           if(specializationtwo==null||specializationtwo==undefined) specializationtwo=""; 

           var EnrollNumber=row['enrollnumber'];
           if(EnrollNumber==null||EnrollNumber==undefined) EnrollNumber=""; 

           var SerialNumber=row['serialnumber'];
           if(SerialNumber==null||SerialNumber==undefined) SerialNumber=""; 

           var PreparedBy=row['preparedby'];
           if(PreparedBy==null||PreparedBy==undefined) PreparedBy=""; 

           var xlsxsdateofissue=row['dateofissue'];
           if(xlsxsdateofissue==null||xlsxsdateofissue==undefined) xlsxsdateofissue=""; 
           if(xlsxsdateofissue!="")
           {
            
             var isodate=getIso8601TimeForIssue(xlsxsdateofissue+" UTC");
             if(isodate!=="NaN-NaN-NaNTNaN:NaN:NaN-NaN:NaN")
             {                
               if(xlsxsdateofissue.split("/").length>2)
               {
                 xlsxsdateofissue=xlsxsdateofissue.split("/")[1]+"/"+xlsxsdateofissue.split("/")[0]+"/"+xlsxsdateofissue.split("/")[2];
               }
               //xlsxsdateofissue=isodate;
             }
             if(xlsxsdateofissue.split("-").length>2 && xlsxsdateofissue.indexOf("T")==-1)
             {
               xlsxsdateofissue=xlsxsdateofissue.split("-")[2]+"/"+xlsxsdateofissue.split("-")[1]+"/"+xlsxsdateofissue.split("-")[0];
             }
             if(xlsxsdateofissue.split("-").length>2 && xlsxsdateofissue.indexOf("T")!==-1)
             {
               xlsxsdateofissue=xlsxsdateofissue.split("T")[0];
               xlsxsdateofissue=xlsxsdateofissue.split("-")[2]+"/"+xlsxsdateofissue.split("-")[1]+"/"+xlsxsdateofissue.split("-")[0];
             }

             //console.log(xlsxsdateofissue);
             //return;
           } 
           //console.log(xlsxsdateofissue);
           try {
             var xlsxhold = row['hold'];
             if(xlsxhold == null || xlsxhold == undefined) xlsxhold = '';             
           } catch (error) {
             var xlsxhold = '';
           }          

           xlsxfirstname=xlsxfirstname.replace("'","`");
           xlsxmiddlename=xlsxmiddlename.replace("'","`");
           xlsxlastname=xlsxlastname.replace("'","`");
           xlsxcohortname=xlsxcohortname.replace("'","`");
           xlsxcohortname=xlsxcohortname.trim();
           xlsxcohortid=xlsxcohortid.replace("'","`");
           xlsxcompetencyname=xlsxcompetencyname.replace("'","`");
           xlsxcompetencyname=xlsxcompetencyname.trim();
           
           CompetencyLevel=CompetencyLevel.replace("'","`");
           CohortDescription=CohortDescription.replace("'","`");
           LetterOfReco=LetterOfReco.replace("'","`");
           FatherName=FatherName.replace("'","`");
           MotherName=MotherName.replace("'","`");
           specializationone=specializationone.replace("'","`");
           specializationtwo=specializationtwo.replace("'","`");
           PreparedBy=PreparedBy.replace("'","`");
           
           var coursestartdate=row['coursestartdate'];
           if(coursestartdate==null|| coursestartdate==undefined) coursestartdate="";            
           coursestartdate=coursestartdate.replace(/_/g, " ");
           var coursecompletiondate=row['coursecompletiondate'];
           if(coursecompletiondate==null|| coursecompletiondate==undefined) coursecompletiondate="";            
           coursecompletiondate=coursecompletiondate.replace(/_/g, " ");

           //////////////MIT Custom fields////////////////
           var xlsxcertificateid=row['certificateid'];
           if(xlsxcertificateid==null|| xlsxcertificateid==undefined) xlsxcertificateid="";
           xlsxcertificateid=await getCertificateIdForMIT(xlsxcertificateid, puserid);
           
           var xlsxfacultyname=row['facultyname'];
           if(xlsxfacultyname==null|| xlsxfacultyname==undefined) xlsxfacultyname="";

           var xlsxcgpa=row['cgpa'];
           if(xlsxcgpa==null|| xlsxcgpa==undefined) xlsxcgpa="";
           if(xlsxcgpa!="")
           {
             xlsxcgpa=parseFloat(xlsxcgpa);
             const formatter = new Intl.NumberFormat('en-US', {
               minimumFractionDigits: 2,      
               maximumFractionDigits: 2,
              });
              xlsxcgpa=formatter.format(xlsxcgpa);
           }

           var xlsxrank=row['rank'];
           if(xlsxrank==null|| xlsxrank==undefined) xlsxrank="";

           var xlsxmedaltype=row['medaltype'];
           if(xlsxmedaltype==null|| xlsxmedaltype==undefined) xlsxmedaltype="";

           var xlsxcompletiondate=row['completiondate'];
           if(xlsxcompletiondate==null|| xlsxcompletiondate==undefined) xlsxcompletiondate="";

           var xlsxissuedate=row['issuedate'];
           if(xlsxissuedate==null|| xlsxissuedate==undefined) xlsxissuedate="";

           var xlsxsecondemailaddress=row['secondemailaddress'];
           if(xlsxsecondemailaddress==null|| xlsxsecondemailaddress==undefined) xlsxsecondemailaddress="";

           var cc2=row['cc2'];
           if(cc2==null|| cc2==undefined) cc2="";

           var cc3=row['cc3'];
           if(cc3==null|| cc3==undefined) cc3="";

           //////////MIT Custom fields end////////////////
           xlsxstudentid=await getStudentIdForEnhelion(xlsxstudentid, xlsxcohortid, xlsxcohortname, puserid);
           if(xlsxstudentid=="")
           {
             var obj = {
                     Status: 400,
                     message: "Studentid field value is required."
                     };
                     return res.json(obj);
           }
           if(xlsxfirstname=="")
           {
             var obj = {
                     Status: 400,
                     message: "FirstName field value is required."
                     };
                     return res.json(obj);
           }
           if(xlsxemail=="")
           {
             var obj = {
                     Status: 400,
                     message: "eMail field value is required."
                     };
                     return res.json(obj);
           }
           if(xlsxcohortid=="")
           {
             var obj = {
                     Status: 400,
                     message: "Cohortid field value is required."
                     };
                     return res.json(obj);
           }
           if(xlsxcohortname=="")
           {
             var obj = {
                     Status: 400,
                     message: "CohortName field value is required."
                     };
                     return res.json(obj);
           }
           /*
           if(CohortDescription=="")
           {
             var obj = {
                     Status: 400,
                     message: "CohortDescription field value is required."
                     };
                     return res.json(obj);
           }
           if(FatherName=="")
           {
             var obj = {
                     Status: 400,
                     message: "FatherName field value is required."
                     };
                     return res.json(obj);
           }
           if(MotherName=="")
           {
             var obj = {
                     Status: 400,
                     message: "MotherName field value is required."
                     };
                     return res.json(obj);
           }
           if(Sex=="")
           {
             var obj = {
                     Status: 400,
                     message: "Sex field value is required."
                     };
                     return res.json(obj);
           }
           if(specializationone=="")
           {
             var obj = {
                     Status: 400,
                     message: "specializationone field value is required."
                     };
                     return res.json(obj);
           }
           if(specializationtwo=="")
           {
             var obj = {
                     Status: 400,
                     message: "specializationtwo field value is required."
                     };
                     return res.json(obj);
           }
           if(EnrollNumber=="")
           {
             var obj = {
                     Status: 400,
                     message: "EnrollNumber field value is required."
                     };
                     return res.json(obj);
           }
           if(SerialNumber=="")
           {
             var obj = {
                     Status: 400,
                     message: "SerialNumber field value is required."
                     };
                     return res.json(obj);
           }
           if(PreparedBy=="")
           {
             var obj = {
                     Status: 400,
                     message: "PreparedBy field value is required."
                     };
                     return res.json(obj);
           }
           */
           if(validator.validate(xlsxemail)==false)
           {
             console.log(xlsxemail)
             var obj = {
               Status: 400,
               message: xlsxemail+ " email format is incorrect."
             };
             return res.json(obj);

           }

           var students;
           var cohorts;
           var studentId;
           var cohortId;
           
         
           //Insert data to student table
           try {               
               var cgparankmedal="";
               if(xlsxcgpa!="") cgparankmedal=`cgpa='${xlsxcgpa}'`; 

               if(xlsxrank!="" && cgparankmedal=="") cgparankmedal=`rank='${xlsxrank}'`; 
               else if(xlsxrank!="" && cgparankmedal!="") cgparankmedal+=`, rank='${xlsxrank}'`; 
               
               if(xlsxmedaltype!="" && cgparankmedal=="") cgparankmedal=`medaltype='${xlsxmedaltype}'`; 
               else if(xlsxmedaltype!="" && cgparankmedal!="") cgparankmedal+=`, medaltype='${xlsxmedaltype}'`; 
               

               var conflictcause="";
               if(cgparankmedal=="")
                 conflictcause=`firstname='${xlsxfirstname}', emailaddress='${xlsxemail}', secondemailaddress='${xlsxsecondemailaddress}'
                              ,facultyname='${xlsxfacultyname}',completiondate='${xlsxcompletiondate}',specializationone='${specializationone}'`;
               else
                 conflictcause=`firstname='${xlsxfirstname}', emailaddress='${xlsxemail}', secondemailaddress='${xlsxsecondemailaddress}'
                              ,facultyname='${xlsxfacultyname}',completiondate='${xlsxcompletiondate}',specializationone='${specializationone}', ${cgparankmedal}`;

               addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,phonenumber,sex,specializationone,specializationtwo,
                                   fathername,mothername,enrollnumber,preparedby,letterofreco,accountid,
                                   facultyname,cgpa,rank,medaltype,completiondate,secondemailaddress,cc2,cc3)
                                   SELECT '${xlsxstudentid}','${xlsxfirstname}','${xlsxmiddlename}', '${xlsxlastname}', '${xlsxemail}','${xlsxphonenumber}','${Sex}',
                                   '${specializationone}','${specializationtwo}','${FatherName}','${MotherName}','${EnrollNumber}','${PreparedBy}',
                                   '${LetterOfReco}','${puserid}','${xlsxfacultyname}','${xlsxcgpa}','${xlsxrank}','${xlsxmedaltype}','${xlsxcompletiondate}','${xlsxsecondemailaddress}','${cc2}','${cc3}'
                                   ON CONFLICT (firstname,middlename,lastname,studentid,accountid) DO UPDATE SET ${conflictcause} RETURNING id;`);
               students = await pool.query(addStudentQuery);
               if (students.rowCount > 0) {
                   studentId = students.rows[0].id;
               } else {
                   var getExistStudent = format(`SELECT id FROM STUDENT WHERE LOWER(firstname)=LOWER('${xlsxfirstname}') and LOWER(middlename)=LOWER('${xlsxmiddlename}') and LOWER(lastname)=LOWER('${xlsxlastname}') and LOWER(emailaddress)=LOWER('${xlsxemail}') and accountid='${puserid}';`);
                   students = await  pool.query(getExistStudent);
                   if (students.rowCount > 0) {
                       studentId = students.rows[0].id;
                   }
               }
           } catch (err) {
             var obj = {
                 Status: 400,
                 message: err.message
             };
             return res.json(obj);
           }
           
           try {
              var addCohortGroupQuery = format(`INSERT INTO COHORT_GROUP (name, cohortid, accountid)
                                   SELECT '${xlsxcohortname}', '${xlsxcohortid}', '${puserid}' ON CONFLICT (cohortid,accountid) DO UPDATE SET cohortid='${xlsxcohortid}' ,name='${xlsxcohortname}' ,accountid='${puserid}' RETURNING id;`);
               cohortgroups = await pool.query(addCohortGroupQuery);

               
               var addCohortQuery = format(`INSERT INTO COHORT (accountid,cohortid,name,competencyname,competencylevel,graduatingdate,graduatingmonth,graduatingyear,graduatingseason,competencyexpirationdate,description,competencystartdate,competencyenddate)
                                   SELECT '${puserid}','${xlsxcohortid}','${xlsxcohortname}', '${xlsxcompetencyname}','${CompetencyLevel}','${GraduatingDate}','${Graduatingmonth}','${Graduatingyear}', '${GratuatingSeason}', '${competencyExpirationDate}','${CohortDescription}','${competencystartdate}','${competencyenddate}'
                                   ON CONFLICT (cohortid, competencyname, accountid)  DO UPDATE SET competencyname='${xlsxcompetencyname}' RETURNING id;`);
               
               /*
               var addCohortQuery = format(`INSERT INTO COHORT (accountid,cohortid,name,competencyname,competencylevel,graduatingdate,graduatingmonth,graduatingyear,graduatingseason,competencyexpirationdate,description,competencystartdate,competencyenddate)
                                   SELECT '${puserid}','${xlsxcohortid}','${xlsxcohortname}', '${xlsxcompetencyname}','${CompetencyLevel}','${GraduatingDate}','${Graduatingmonth}','${Graduatingyear}', '${GratuatingSeason}', '${competencyExpirationDate}','${CohortDescription}','${competencystartdate}','${competencyenddate}'
                                   ON CONFLICT (cohortid,competencyname,accountid) DO UPDATE SET competencyname='${xlsxcompetencyname}' RETURNING id;`);
               */                    

               cohorts = await pool.query(addCohortQuery);
               if (cohorts.rowCount > 0) {
                   cohortId = cohorts.rows[0].id;
                   console.log("cohortId",cohortId);
               } else {
                 let getExistCohort = format(`SELECT id FROM COHORT WHERE cohortid='${xlsxcohortid}' AND competencyname='${xlsxcompetencyname}' AND accountid='${puserid}';`);
                 cohorts = await pool.query(getExistCohort);
                 cohortId = cohorts.rows[0].id;
               }
           } catch (err) {
             var obj = {
                 Status: 400,
                 message: err.message
             };
             return res.json(obj);
           }
           //Insert Pivot ( cohortmembers table )                
           try {
               for (const key in certtypes)
               {
                   var certtypename = key;
                   var tablenameforcerttype = certtypes[key];                                                  
                   
                   var studentsforonetimecode;                      
                   var onetimecode="";
                   var loopcount=0; 
                   while(loopcount!==Object.keys(certtypes).length)
                   {
                     onetimecode = getOnetimecode(7);
                     loopcount=0;
                     for (const key1 in certtypes){
                         var certtypename1 = key1;
                         var tablenameforcerttype1 = certtypes[key1];                            
                         let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype1} WHERE onetimeblockcertscode='${onetimecode}';`);
                         studentsforonetimecode = await pool.query(getExistStudent);
                         if (studentsforonetimecode.rowCount == 0) {                                
                             loopcount++;
                         }
                       }
                   }
                   var marks_column="";
                   
                   if(certtypename == "degree")
                   {
                     marks_column=marks;
                     certificateid_column=xlsxcertificateid;
                   }
                   
                   let addPivotQuery = format(`INSERT INTO ${tablenameforcerttype} (cohortid,studentid,onetimeblockcertscode,certtype,marks,certificateid,coursestartdate,coursecompletiondate,certificationcategory,serialnumber,issueddate,issuedate,hold)
                     SELECT '${cohortId}','${studentId}','${onetimecode}','${certtypename}','${marks_column}','${certificateid_column}','${coursestartdate}','${coursecompletiondate}','${certificationcategory}','${SerialNumber}','${xlsxsdateofissue}','${xlsxissuedate}','${xlsxhold}'
                       WHERE NOT EXISTS ( SELECT 1 FROM ${tablenameforcerttype} WHERE cohortid='${cohortId}' and studentid='${studentId}' and certtype='${certtypename}');`);
                   await pool.query(addPivotQuery);

                   /*
                   if(certtypename == "degree")
                   {
                     let updatePivotQuery = format(`update ${tablenameforcerttype} set issueddate='${xlsxsdateofissue}', hold='${xlsxhold}' WHERE cohortid='${cohortId}' and studentid='${studentId}';`);
                     await pool.query(updatePivotQuery);
                   }
                   //*/
                 }
               /*
               for (const row of certtype)
               {
                   var studentsforonetimecode;
                   var loopflag=1;
                   var onetimecode="";
                   while(loopflag==1)
                   {
                     onetimecode = getOnetimecode(7)
                     let getExistStudent = format(`SELECT id FROM COHORTMEMBERS WHERE onetimeblockcertscode='${onetimecode}';`);
                     studentsforonetimecode = await pool.query(getExistStudent);
                     if (studentsforonetimecode.rowCount == 0) {
                         loopflag=0
                     }
                   }
                 
                   addPivotQuery = format(`INSERT INTO COHORTMEMBERS (cohortid,studentid,onetimeblockcertscode,certtype)
                     SELECT '${cohortId}','${studentId}','${onetimecode}','${row}'
                       WHERE NOT EXISTS ( SELECT 1 FROM COHORTMEMBERS WHERE cohortid='${cohortId}' and studentid='${studentId}' and certtype='${row}');`);
                   await pool.query(addPivotQuery);
                   
               }
               */
             
               //Update status
               /*
               let updateStatusQuery = format(`INSERT INTO process_status (accountid,cohortid,studentid,processtype,status)
                 SELECT '${puserid}','${cohortId}','${studentId}','upload','done'
                 WHERE NOT EXISTS ( SELECT 1 FROM process_status WHERE accountid='${puserid}'and cohortid='${cohortId}' and studentid='${studentId}' and processtype='upload' ) ;`);
                 await pool.query(updateStatusQuery);
               */  
           } catch (err) {
               var obj = {
                   Status: 400,
                   message: err.message
               };
               return res.json(obj);
           }
                 //////////////////////////////student upload part////////////////////////////////
        }
        else if(istranscript==true)
        {
           console.log(row['subjectname'])
           var isupdateserialnumber=true;
           var isupdateissuedate=false;
           var xlsxstudentid=row['studentid'];
           if(xlsxstudentid==null||xlsxstudentid==undefined) xlsxstudentid="";
           xlsxstudentid=xlsxstudentid.toString();
           xlsxstudentid=xlsxstudentid.trim();

           var xlsxcohortid=row['cohortid'];
           if(xlsxcohortid==null||xlsxcohortid==undefined) xlsxcohortid=""; 
           xlsxcohortid=xlsxcohortid.toString();
           xlsxcohortid=xlsxcohortid.trim();

           var SerialNumber=row['serialnumber'];
           if(SerialNumber==null||SerialNumber==undefined) SerialNumber=""; 
           SerialNumber=SerialNumber.toString();
           SerialNumber=SerialNumber.trim();

           /*
           if(SerialNumber!="" && glstudentid!==xlsxstudentid) 
           {
             isupdateserialnumber=true;
             glstudentid=xlsxstudentid;
           }
           */
           var xlsxsdateofissue=row['dateofissue'];
           if(xlsxsdateofissue==null||xlsxsdateofissue==undefined) xlsxsdateofissue=""; 
           if(xlsxsdateofissue!="")
           {
             console.log(xlsxsdateofissue);
             var isodate=getIso8601TimeForIssue(xlsxsdateofissue+" UTC");
             if(isodate!=="NaN-NaN-NaNTNaN:NaN:NaN-NaN:NaN")
             {
               console.log("Incorrect date format!",xlsxsdateofissue);
               if(xlsxsdateofissue.split("/").length>2)
               {
                 xlsxsdateofissue=xlsxsdateofissue.split("/")[1]+"/"+xlsxsdateofissue.split("/")[0]+"/"+xlsxsdateofissue.split("/")[2];
               }
               //xlsxsdateofissue=isodate;
             }
             if(xlsxsdateofissue.split("-").length>2 && xlsxsdateofissue.indexOf("T")==-1)
             {
               xlsxsdateofissue=xlsxsdateofissue.split("-")[2]+"/"+xlsxsdateofissue.split("-")[1]+"/"+xlsxsdateofissue.split("-")[0];
             }
             if(xlsxsdateofissue.split("-").length>2 && xlsxsdateofissue.indexOf("T")!==-1)
             {
               xlsxsdateofissue=xlsxsdateofissue.split("T")[0];
               xlsxsdateofissue=xlsxsdateofissue.split("-")[2]+"/"+xlsxsdateofissue.split("-")[1]+"/"+xlsxsdateofissue.split("-")[0];
             }

             //console.log(xlsxsdateofissue);
             //return;
           } 
           if(xlsxsdateofissue!=null&&xlsxsdateofissue!=undefined&&xlsxsdateofissue!="") dateofissue=xlsxsdateofissue;
           if(xlsxsdateofissue!="" && glissuedate!==xlsxsdateofissue)
           {
             isupdateissuedate=true;
             glissuedate=xlsxsdateofissue;
           }

           var xlsxcgpa=row['cgpa'];
           if(xlsxcgpa!=null&&xlsxcgpa!=undefined&&xlsxcgpa!="") cgpa=xlsxcgpa;

           var xlsxcpi=row['cpi'];
           if(xlsxcpi!=null&&xlsxcpi!=undefined&&xlsxcpi!="") cpi=xlsxcpi;

           var xlsxspecializationone=row['specializationone'];
           if(xlsxspecializationone!=null&&xlsxspecializationone!=undefined&&xlsxspecializationone!="") specializationone=xlsxspecializationone;

           var xlsxspecializationtwo=row['specializationtwo'];
           if(xlsxspecializationtwo!=null&&xlsxspecializationtwo!=undefined&&xlsxspecializationtwo!="") specializationtwo=xlsxspecializationtwo;

           var xlsxsmodeofdelivery=row['modeofdelivery'];
           if(xlsxsmodeofdelivery!=null&&xlsxsmodeofdelivery!=undefined&&xlsxsmodeofdelivery!="") modeofdelivery=xlsxsmodeofdelivery;

           var xlsxsmediumofstudy=row['mediumofstudy'];
           if(xlsxsmediumofstudy!=null&&xlsxsmediumofstudy!=undefined&&xlsxsmediumofstudy!="") mediumofstudy=xlsxsmediumofstudy;

           var xlsxspreparedby=row['preparedby'];
           if(xlsxspreparedby!=null&&xlsxspreparedby!=undefined&&xlsxspreparedby!="") preparedby=xlsxspreparedby;

           var xlsxsverifiedby=row['verifiedby'];
           if(xlsxsverifiedby!=null&&xlsxsverifiedby!=undefined&&xlsxsverifiedby!="") verifiedby=xlsxsverifiedby;

           var semesternumber=row['semesternumber'];
           if(semesternumber==null||semesternumber==undefined) semesternumber="";
           semesternumber=semesternumber.toString(); 
           var subjecttype=row['subjecttype'];
           if(subjecttype==null||subjecttype==undefined) subjecttype="";

           var subjectname=row['subjectname'];
           if(subjectname==null||subjectname==undefined) subjectname="";

           var marks=row['marks'];
           if(marks==null||marks==undefined) marks="";

           var credit=row['credit'];
           if(credit==null||credit==undefined) credit="";

           var grade=row['grade'];
           if(grade==null||grade==undefined) grade="";

           var point=row['point'];
           if(point==null||point==undefined) point="";
           
           xlsxcohortid=xlsxcohortid.replace("'","`");                
           cgpa=cgpa.replace("'","`");
           cpi=cpi.replace("'","`");

           specializationone=specializationone.replace("'","`");
           specializationtwo=specializationtwo.replace("'","`");               
           modeofdelivery=modeofdelivery.replace("'","`");
           mediumofstudy=mediumofstudy.replace("'","`");
           dateofissue=dateofissue.replace("'","`");
           preparedby=preparedby.replace("'","`");
           verifiedby=verifiedby.replace("'","`");
           semesternumber=semesternumber.replace("'","`");
           subjecttype=subjecttype.replace("'","`");
           subjectname=subjectname.replace("'","`");                
           
           if(xlsxstudentid=="")
           {
             var obj = {
                 Status: 400,
                 message: "Studentid field value is required."
                 };
                 return res.json(obj);
           }
           
           if(xlsxcohortid=="")
           {
             var obj = {
                 Status: 400,
                 message: "Cohortid field value is required."
                 };
                 return res.json(obj);
           }

           if(semesternumber=="")
           {
             var obj = {
                 Status: 400,
                 message: "Semesternumber field value is required."
                 };
                 return res.json(obj);
           }

           if(subjecttype=="")
           {
             var obj = {
                 Status: 400,
                 message: "subjecttype field value is required."
                 };
                 return res.json(obj);
           }

           if(subjectname=="")
           {
             var obj = {
                 Status: 400,
                 message: "subjectname field value is required."
                 };
                 return res.json(obj);
           }

           var addSemesterQuery = format(`INSERT INTO SEMESTERTRANSCRIPT (cohortid,studentid,semesternumber,subjecttype,subjectcode,marks,credit,grade,point,accountid)
                                     SELECT '${xlsxcohortid}','${xlsxstudentid}','${semesternumber}','${subjecttype}', '${subjectname}', '${marks}','${credit}','${grade}','${point}','${puserid}'
                                     WHERE NOT EXISTS (SELECT 1 FROM SEMESTERTRANSCRIPT WHERE  cohortid=('${xlsxcohortid}') and studentid='${xlsxstudentid}' and semesternumber='${semesternumber}' and subjecttype='${subjecttype}'  and subjectcode='${subjectname}' and accountid='${puserid}')
                                     RETURNING id;`);
             
           await pool.query(addSemesterQuery);    

           if(cgpa!=""&&cpi!=""&&specializationone!=""&&specializationtwo!=""&&modeofdelivery!=""&&mediumofstudy!=""&&dateofissue!=""&&preparedby!=""&&verifiedby!="")
           {
             var addTranscriptDescribeQuery = format(`INSERT INTO transcriptdescribe (cohortid,studentid,cgpa,cpi,specializationone,specializationtwo,modeofdelivery,mediumofstudy,dateofissue,preparedby,verifiedby,accountid)
                                               SELECT '${xlsxcohortid}','${xlsxstudentid}','${cgpa}','${cpi}','${specializationone}','${specializationtwo}', '${modeofdelivery}', '${mediumofstudy}','${dateofissue}','${preparedby}','${verifiedby}','${puserid}'
                                               WHERE NOT EXISTS (SELECT 1 FROM transcriptdescribe WHERE  cohortid='${xlsxcohortid}' and studentid='${xlsxstudentid}' and accountid='${puserid}')
                                               RETURNING id;`); 
             console.log(addTranscriptDescribeQuery);
             await pool.query(addTranscriptDescribeQuery);
           }

           if(isupdateserialnumber==true)
           {
             var updateSerialQuery = format(`update public.cohortmembers_transcript set serialnumber='${SerialNumber}' where  cohortid in (select id from cohort where cohortid='${xlsxcohortid}' and accountid='${puserid}') and studentid in 
             (select id from student where studentid='${xlsxstudentid}' and accountid='${puserid}');`); 
             console.log(updateSerialQuery);
             await pool.query(updateSerialQuery);
             //isupdateserialnumber=false;
           }

           if(xlsxsdateofissue!="")
           {              
             var updateIssueDateQuery = format(`update public.cohortmembers_transcript set issueddate='${xlsxsdateofissue}' where  cohortid in (select id from cohort where cohortid='${xlsxcohortid}' and accountid='${puserid}') and studentid in 
             (select id from student where studentid='${xlsxstudentid}' and accountid='${puserid}');`); 
             console.log(updateIssueDateQuery);
             await pool.query(updateIssueDateQuery);
           }   
        }
     }//for
     
     console.log("Successfully uploaded");
     var obj = {
          Status: 200,
          message: 'Successfully uploaded'
         }
       return res.json(obj);

   }
   else
   {
      var obj = {
               Status: 400,
               message: "Please use the exact template file."
           };
           return res.json(obj);
   }

   
 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
  return res.json(obj)
 }
}
user.OpenbadgeCreateCohort = async (req,res, next) => {
 
 var api_key=req.body.apikey;  
 var cohortname=req.body.cohortname;
 var cohortid=req.body.cohortid;
 var competencyname=req.body.coursename;
 var competencystartdate=req.body.coursestartdate;
 var competencyenddate=req.body.courseenddate;
 

 if(cohortname=="" || cohortname==undefined || cohortname==null ||
   cohortid=="" || cohortid==undefined || cohortid==null || 
   competencyname=="" || competencyname==null || competencyname==undefined ||    
   api_key=="" || api_key==null ||  api_key==undefined
  )
 {
   var obj = {
         Status: 400,
           message: "Invalid request parameters"
       };
   res.json(obj);
   return;
 }

 /*
 var napikey=await getApiKeyFromUserID("1");
 var obj = {
         Status: 200,
           message: napikey
       };
 res.json(obj);
 return;  
 */
 var userid=await getUserIDFromApiKey(api_key); 
 if(userid==null)
 {
   var obj = {
         Status: 400,
           message: "Invalid api key"
       };
   res.json(obj);
   return; 
 }   
 
 var puserid=await getParentAccountIdFromId(userid); 

 //var recipients=req.body.recipientinformation;
 var firstname=req.body.firstname;    
 var middlename=req.body.middlename;    
 var lastname=req.body.lastname;    
 var email=req.body.email;    
 var pstudentid=req.body.studentid;
 if(pstudentid=="" || pstudentid==null  ||  pstudentid==undefined) pstudentid="";
 pstudentid=pstudentid.replace("'","`").trim();
 var certificateid=req.body.certificateid;
 if(certificateid=="" || certificateid==null  ||  certificateid==undefined) certificateid="";
 certificateid=certificateid.replace("'","`").trim();

 if(email=="" || email==null  ||  email==undefined ||     
 ((firstname=="" || firstname==null ||  firstname==undefined) && (middlename=="" || middlename==null ||  middlename==undefined) && (lastname=="" || lastname==null ||  lastname==undefined)))
 {
   var obj = {
         Status: 400,
           message: "Invalid request parameters"
       };
   res.json(obj);
   return;
 }    
 //console.log("111111111111111111111111111111111111111111111111");

 if(firstname=="" || firstname==null ||  firstname==undefined) firstname="";
 if(middlename=="" || middlename==null ||  middlename==undefined) middlename="";
 if(lastname=="" || lastname==null ||  lastname==undefined) lastname="";
 
 firstname=firstname.replace("'","`").trim();
 middlename=middlename.replace("'","`").trim();
 lastname=lastname.replace("'","`").trim();
 email=email.replace("'","`").trim();
 if(validator.validate(email)==false)
 {
   console.log(email)
   var obj = {
     Status: 400,
     message: email+" email format is incorrect."
     };
     return res.json(obj);
 }

 try 
 {    
   
   var cohort_id=await getChortidFromCohortInfo(cohortname, cohortid, competencyname, competencystartdate, competencyenddate, puserid);
   if(cohort_id=="" || cohort_id==null)
   {
     var obj = {
           Status: 400,
             message: "Failed to adding cohort"
         };
     res.json(obj);
     return; 
   }
   var studentid=null;

   var addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,accountid)
                           SELECT '${pstudentid}','${firstname}','${middlename}', '${lastname}', '${email}','${puserid}'
                           WHERE NOT EXISTS (SELECT 1 FROM STUDENT WHERE  studentid='${pstudentid}' and LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}')
                           RETURNING id;`);
   students = await pool.query(addStudentQuery);
   if (students.rowCount > 0) {
         studentid = students.rows[0].id;
   } 
   else
   {
         var getExistStudent = format(`SELECT id FROM STUDENT WHERE LOWER(firstname)=LOWER('${firstname}') and LOWER(middlename)=LOWER('${middlename}') and LOWER(lastname)=LOWER('${lastname}') and LOWER(emailaddress)=LOWER('${email}') and accountid='${puserid}';`);
         students = await  pool.query(getExistStudent);
         if (students.rowCount > 0) {
             studentid = students.rows[0].id;
         }
   }
   //console.log("2222222222222222222222222222222222222222222222222222222222");
   var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
   var studentsforonetimecode;                      
   var onetimecode="";
   var loopcount=0; 
   while(loopcount!==Object.keys(certtypes).length)
   {
     onetimecode = getOnetimecode(8);
     loopcount=0;
     for (const key in certtypes){         
         var tablenameforcerttype = certtypes[key];                            
         let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
         studentsforonetimecode = await pool.query(getExistStudent);
         if (studentsforonetimecode.rowCount == 0) {                                
             loopcount++;
         }
       }
   }
   //console.log("3333333333333333333333333333333333333333333333");
   var addPivotQuery = format(`INSERT INTO cohortmembers_openbadges (cohortid,studentid,certificateid,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated,certtype)
       SELECT '${cohort_id}','${studentid}','${certificateid}','${onetimecode}','${email}','true','true','openbadges' WHERE NOT EXISTS ( SELECT 1 FROM cohortmembers_openbadges WHERE cohortid='${cohort_id}' and studentid='${studentid}');`);
   await pool.query(addPivotQuery);
   
   var studentinfo=await getStudentInfoFromName(cohort_id,studentid,"cohortmembers_openbadges");
   if(studentinfo==null)
   {
     var obj = {
           Status: 400,
             message: "Error"
         };
       res.json(obj);
       return;
   }
   //console.log(studentinfo.id);
   //console.log(studentinfo.onetimeblockcertscode);
   //console.log("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
 
 }
 catch (error) 
 {
   console.log(error)
   var obj = {
           Status: 400,
             message: error
         };
     res.json(obj);
     return;
 }
 var obj = {
       Status: 200,
       message: "Success"
     };
 res.json(obj);
}

user.RetriveOpenbadgeByCohort = async (req,res, next) => {  
 try{
   var ret = [];
   var api_key=req.body.apikey;  
   var glcohortid=req.body.cohortid;
   if(api_key == "" || glcohortid == ""){
     var obj = {
       Status: 400,
         message: "Invalid request parameters."
     };
     res.json(obj);
     return; 
   }
   var userid=await getUserIDFromApiKey(api_key); 
   if(userid==null)
   {
     var obj = {
           Status: 400,
             message: "Invalid api key"
         };
     res.json(obj);
     return; 
   }
   else
   {
     var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
     var result = await pool.query(usermasterQuery);
     var organization_name=result.rows[0].organization_name;
     var business_is_verified=result.rows[0].business_is_verified;
   }    
   if(business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }    
   var puserid=await getParentAccountIdFromId(userid);  
   
   var cohort_id= await getCohortidFromName(glcohortid,puserid);
   var badgeQuery = format(`select a.studentid, b.signedcertificatejson, b.signedcertificatepdfurl, a.firstname, a.middlename, a.lastname, a.emailaddress from cohortmembers_openbadges b left join cohort c on b.cohortid=c.id left join student a on a.id=b.studentid where c.cohortid='${glcohortid}' and b.signedcertificatejson!='' and b.signedcertificatepdfurl!='';`);
   let badges = await pool.query(badgeQuery);
   if (badges.rowCount > 0) {
     for(let index = 0; index < badges.rowCount; index++) {
       let item = {"id": index + 1, "cohortid": glcohortid, "studentid": badges.rows[index].studentid, "firstname": badges.rows[index].firstname, "middlename": badges.rows[index].middlename, "lastname": badges.rows[index].lastname, "email": badges.rows[index].emailaddress, "pdf": badges.rows[index].signedcertificatepdfurl, "openbadge": badges.rows[index].signedcertificatejson};
       ret.push(item);
     }
   }


   // for (let index = 0; index < student_list.length; index++) {
   //   //const element = params[index];
   //   let element = student_list[index];      
   //   tempQuery = format(`select b.* from cohortmembers_openbadges b left join cohort c on b.cohortid=c.id where c.cohortid='${glcohortid}' and b.studentid='${element}';`);
   //   t_result = await pool.query(tempQuery);
   //   console.log(tempQuery, t_result.rowCount);
   //   let studentid=t_result.rows[0]['id'];
   //   var updateQuery = format(`UPDATE cohortmembers_openbadges SET certificatesendstate=1 WHERE id='${studentid}';`);
   //   await pool.query(updateQuery);
   //   var badgeQuery = format(`SELECT b.signedcertificatejson, b.signedcertificatepdfurl, a.firstname, a.middlename, a.lastname, a.emailaddress
   //                             FROM cohortmembers_openbadges b LEFT JOIN student a ON a.id=b.studentid 
   //                             WHERE b.id='${studentid}'`);
     
   //   let badges = await pool.query(badgeQuery);            
   //   console.log(badgeQuery, badges.rowCount);
   //   if ( badges.rowCount > 0 ) { 
   //     let item = {"studentid": element, "firstname": badges.rows[0].firstname, "middlename": badges.rows[0].middlename, "lastname": badges.rows[0].lastname, "email": badges.rows[0].emailaddress, "pdf": badges.rows[0].signedcertificatepdfurl, "openbadge": badges.rows[0].signedcertificatejson};
   //     console.log(item);
   //     ret.push(item);
   //   }
   // }

   var obj = {
     Status: 200,
     result: ret,
     message: 'Success',              
   }
   res.json(ret);
   //res.push(ret)
   
 }
 catch (err) {
   var obj = {
     Status: 400,
     message: err.message        
   }
   res.json(obj); 
 }
}

user.generatePreviewCertificate = async (req,res, next) => {
 try 
 {  
   
   var curdateobj = new Date();       
   var curyear=curdateobj.getFullYear();
   var currentUser = req.user;
   var organization_verify_uri=currentUser.organization_verify_uri;
   
   if(organization_verify_uri==""||organization_verify_uri=="null"||organization_verify_uri==null|| organization_verify_uri==undefined) organization_verify_uri="certonce";
   
   var certtype=req.body.certtype;
   var cohortid = req.body.cohortid;
   var certtypes={"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
   var cohorttablename="cohortmembers_degree";
   if(certtype && certtype!="" && certtype!=="null" &&  certtype!==undefined)
   {      
     cohorttablename=certtypes[certtype];
   }
   else certtype="degree";

   if(req.user.business_is_verified==false)
   {
     var obj = {
           Status: 400,
             message: "Your account is currently under verification, please contact certonce team."
         };
         res.json(obj);
         return;
   }
   var permission=await getPermission(req.user.user_id,"generateCertificate");
   if(permission==false)
   {
       var obj = {
         Status: 400,
           message: "Access denied."
       };
       res.json(obj);
       return;
   }
   var puserid=await getParentAccountIdFromId(req.user.user_id); 
   var issetprofile=await UpdateissuerProfile(puserid, currentUser.organization_name);   
   if(issetprofile==false)
   {
     var obj = {
       Status: 400,
         message: "Failed to setting issuer profile."
     };
     res.json(obj);
     return;
   }
   
   if (Array.isArray(cohortid)) {    
      cohortid = cohortid[0];
    }
  
    var studentquery = format(`SELECT c.cohortid, b.id FROM student a 
        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id
        LEFT JOIN cohort c ON c.id=b.cohortid
        WHERE c.cohortid='${cohortid}' and c.accountid='${puserid}' and b.certificatetype='${certtype}';`);
    
    var cohortdropdownclause = "";
    var selectedCohortJson = req.body.selectedCohortJson;           
    if(selectedCohortJson!=="" && selectedCohortJson!==null && selectedCohortJson!==undefined)
    {
      try {
        selectedCohortJson = JSON.parse(selectedCohortJson);
        if(Object.keys(selectedCohortJson).length===0 && selectedCohortJson.constructor === Object) selectedCohortJson="";
        else
        {
          Object.keys(selectedCohortJson).forEach((key, value) => {
            if(cohortdropdownclause!=="") cohortdropdownclause = cohortdropdownclause +" and b." + key + "='" +selectedCohortJson[key]+ "'";
            else cohortdropdownclause = " b." + key + "='" +selectedCohortJson[key]+ "'";
          });
        }
      } catch (error) {
        
      }
      
    }
    if(cohortdropdownclause!=="")
    { 
      //studentquery = format(`select c.cohortid , b.id from student a left join ${cohorttablename} b on a.id=b.studentid left join cohort c on b.cohortid=c.id where c.accountid='${puserid}' and ${cohortdropdownclause}`);  
      studentquery = format(`SELECT c.cohortid, b.id FROM student a 
        LEFT JOIN ${cohorttablename} b ON b.studentid=a.id
        LEFT JOIN cohort c ON c.id=b.cohortid
        WHERE c.accountid='${puserid}' and b.certificatetype='${certtype}' and ${cohortdropdownclause}`);    
    }
    console.log(studentquery);
   /*
   if(certtype == "transcript") {
     // var studentquery = format(`SELECT b.id FROM cohort c LEFT JOIN ${cohorttablename} b ON c.id=b.cohortid LEFT JOIN semestertranscript a ON c.cohortid=a.cohortid
     //  LEFT JOIN transcriptdescribe d ON a.accountid=d.accountid and a.cohortid=d.cohortid WHERE c.cohortid='${cohortid}' and c.accountid='${puserid}' and b.id is not null`)
     studentquery = format(`SELECT b.id, c.cohorid FROM cohort c LEFT JOIN ${cohorttablename} b ON c.id=b.cohortid WHERE c.cohortid='${cohortid}' and c.accountid='${puserid}' and b.id is not null`)
   }
   */

   
   var student_list = await pool.query(studentquery);    
   if (student_list.rowCount > 0) {
     var params = [];
     console.log(student_list.rows[0].cohortid + "=" + student_list.rows[0].id);
     params.push(student_list.rows[0].cohortid + "=" + student_list.rows[0].id);
     var main_result = await CoreGenerateCertificate(currentUser, puserid, cohorttablename, certtype, params, true);
     res.json(main_result);
   }
   else {
     var obj = {
     Status: 400,
       message: "Cohort is not matched with template"        
     }
     res.json(obj); 
   }   
 } 
 catch (err) {  
   console.log(err);  
   if(err.message.indexOf("No such file or directory")!=-1)
   {
     var obj = {
           Status: 200,
           message: 'No such file or directory.',              
       }
       res.json(obj);
   }
   else
   {
     var obj = {
       Status: 400,
       message: err.message        
       }
       res.json(obj);      
   }
 }
}


user.zapiersignin = async (req,res, next) => {
 
 var username=req.query.username;  
 var password=req.query.password;
 
 try
 {
   
     var obj = {
           Status: 200,
           userinfo: {"username":username, "password":password}
       };
       res.json(obj);
   
 } 
 catch(err)
 {
   var obj = {
         Status: 400,
         pdf: err
       };
   res.json(obj);
 }
}
user.zapiertrigger = async (req,res, next) => {
 
 var curdate=new Date().toLocaleString();  
 try
 {    
   var obj = {      
     "Lists": [ 
      {
         "id":200,   
         "ListID": 19962972,      
         "Name": "Hank Only Test List",      
         "Description": "Hank",      
         "ActiveMembers": 5,      
         "IsActive": true,      
         "Links": [],      
       },
       {
         "id":200,   
         "ListID": 19962973,      
         "Name": "Hank Only Test List",      
         "Description": "Hank",      
         "ActiveMembers": 5,      
         "IsActive": true,      
         "Links": [],      
       }
     ]
    };
    res.status(200).json(obj);
 } 
 catch(err)
 {
   var obj = {
     "id":400,
     "pdf": err,          
     };
   res.status(400).json(obj);
 }
}


user.requestPdfToEmail = async (req, res, next) => {
  try {
    let opertype=req.body.type;
    let attachmentpdffilename = req.body.certId;
    if(attachmentpdffilename==undefined || attachmentpdffilename==null || attachmentpdffilename=="") 
      {
        var obj = {
          Status: 400,
          message: "CertificateId is not defined."
        }
        res.json(obj);
        return;
      }
    if(opertype=="check")
    {
      
      
      let studentData;      
      let studentDataQuery = format(`SELECT a.signedcertificatepdfurl, b.studentid, b.firstname, b.lastname, b.accountid
      FROM cohortmembers_degree a LEFT JOIN student b
      ON b.id = a.studentid
      WHERE a.signedcertificatepdfurl LIKE '%${attachmentpdffilename}%'`);
      let studentDataResult = await pool.query(studentDataQuery);
      if (studentDataResult && studentDataResult.rowCount > 0) {
        studentData = studentDataResult.rows[0];
      }
 
      if (studentData !== undefined && studentData.signedcertificatepdfurl !== null && studentData.signedcertificatepdfurl !== "")
      {
        var obj = {
          Status: 200,
          message: "certificate found"
        }
        res.json(obj);
      }
      else
      {
        var obj = {
          Status: 400,
          message: "certificate not found"
        }
        res.json(obj);
      }
    }
    else if(opertype=="paid")
    {
      let to = req.body.shareEmail;      
      let amt = req.body.amt;
      let paymentId = req.body.paymentId;
      let address=req.body.address;
      let name=address.name;
      if(name==null) name="";
      let line1=address.address.line1;
      if(line1==null) line1="";
      let line2=address.address.line2;
      if(line2==null) line2="";
      let city=address.address.city;
      if(city==null) city="";
      let country=address.address.country;
      if(country==null) country="";
      let postal_code=address.address.postal_code;
      if(postal_code==null) postal_code="";
      let state=address.address.state;
      if(state==null) state="";
      
      let studentData;
      
      let studentDataQuery = format(`SELECT a.signedcertificatepdfurl, a.signedcertificateurl, b.studentid, b.firstname, b.lastname, b.accountid
      FROM cohortmembers_degree a LEFT JOIN student b
      ON b.id = a.studentid
      WHERE a.signedcertificatepdfurl LIKE '%${attachmentpdffilename}%'`);
      //console.log(studentDataQuery);
      let studentDataResult = await pool.query(studentDataQuery);
      if (studentDataResult && studentDataResult.rowCount > 0) {
        studentData = studentDataResult.rows[0];
      }

      



 
      if (studentData !== undefined && studentData.signedcertificatepdfurl !== null && studentData.signedcertificatepdfurl !== "") {
        //let attachmentpdffile = (myip + subwwwurl + "/certificatepdf/" + studentData.signedcertificatepdfurl.split("/")[studentData.signedcertificatepdfurl.split("/").length-2] + "/" + studentData.signedcertificatepdfurl.split("/")[studentData.signedcertificatepdfurl.split("/").length-1]).replace(".pdf", "");
        
        let attachmentpdffile =studentData.signedcertificatepdfurl;
        let signedcertificateurl =studentData.signedcertificateurl;
        //console.log("attachmentpdffile=",attachmentpdffile);
        let accountid =studentData.accountid; 
        let puserid = accountid;  
        
        if(puserid == "20001")
        {
          if(signedcertificateurl.toLowerCase().indexOf("m22")!==-1)
          {   
            attachmentpdffile=`https://certification.mitwpu.edu.in/pdf/M22/${pdfid}`;
          }
        }              
        else if(puserid == "20021")
        {
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          pdfyear=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];
          pdfsubject=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-4];                
          attachmentpdffile=`https://verification.spjimr.org/certificatepdf/${pdfsubject}/${pdfyear}/${lastelement.replace(".json","")}`;
        }
        else if(puserid=="20025")
        {   
          attachmentpdffile="https://growthschool.certonce.com/certificatepdf/";
        }
        else if(puserid=="20045")
        {
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];                
          attachmentpdffile=`https://verification.ndimexamination.org/certificatepdf/${year}/${lastelement.replace(".json","")}`;
        }
        else if(puserid=="20077")
        {
          /*
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];                
          attachmentpdffile=`https://credentials.nitkkr.ac.in/pdf/${year}/${lastelement.replace(".json","")}`;
          */
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];          
          attachmentpdffile=`https://credentials.nitkkr.ac.in/pdf/${lastelement.replace(".json","")}`;
        }
        else if(puserid=="20081")
        {
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];                
          attachmentpdffile=`https://digicert.charusat.ac.in/certificatepdf/${year}/${lastelement.replace(".json","")}`;
        }
        // else if(puserid == "20088")
        else if(puserid == "20088" || puserid == "20")
        {                 
          if(signedcertificateurl==null||signedcertificateurl==undefined) signedcertificateurl="";
          if(signedcertificateurl!="")
          {
          var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          attachmentpdffile=`https://certification.ljku.edu.in/pdf/${lastelement.replace(".json","")}`;
          }                        
        }
        else if(puserid=="20091" || puserid=="30")
        {
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];                
          attachmentpdffile=`https://certificates.galgotiasuniversity.edu.in/pdf/${year}/${lastelement.replace(".json","")}`;
        }
        else if(puserid=="20094")
        {
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];                
          attachmentpdffile=`https://certification.mietjmu.in/pdf/${year}/${lastelement.replace(".json","")}`;
        }
        else if(puserid=="20099")
        {
          lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];
          year=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];                
          attachmentpdffile=`https://verification.cutm.ac.in/pdf/${year}/${lastelement.replace(".json","")}`;
        }

 
        let insertPaymentEmailSentQuery = format(`INSERT INTO payment_email_sent 
        (
          received_email,
          certificate_file_id,
          isemailreceived,
          amount,
          name,
          addressline1,
          addressline2,
          city,
          state,
          zip,
          country,
          accountid,
          paymentid
          ) 
        values(
          '${to}',
          '${attachmentpdffilename}',
           false,
           '${amt}',
           '${name}',
           '${line1}',
           '${line2}',
           '${city}',
           '${state}',
           '${postal_code}',
           '${country}',
           '${accountid}',
           '${paymentId}'
           ) RETURNING *`);
        
        var insertPaymentEmailSentResult = await pool.query(insertPaymentEmailSentQuery);
        let paymentDataId;
        if (insertPaymentEmailSentResult && insertPaymentEmailSentResult.rowCount > 0) {
          paymentDataId = insertPaymentEmailSentResult.rows[0].id;
        }
 
        if (paymentDataId !== undefined) {
          //accountid=20021;/////temp
         
          var smtpaccount = {};
          const { google } = require("googleapis");
          const OAuth2 = google.auth.OAuth2;
          var nodemailer = require('nodemailer');
          
          var transporter;
          var from="";
          var host='';
          var port='';
          var username='';
          var password='';
          var querySmtp=format(`SELECT * FROM setting where accountid='${accountid}';`);
          let smtpresult = await pool.query(querySmtp); 
          
          if(smtpresult && smtpresult.rowCount > 0){
           if(smtpresult.rows[0].smtptype==true){
               smtpaccount['type'] = smtpresult.rows[0].smtptype;
               smtpaccount['username'] = smtpresult.rows[0].smtpusername;
               smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
               smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
               smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;
               smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
               from=smtpresult.rows[0].smtpfrom;
               smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
 
              console.log("here is smtp type true 1");
              if(smtpaccount['clientid']==""||smtpaccount['clientid']==null||smtpaccount['clientsecret']==""||smtpaccount['clientsecret']==null||
              smtpaccount['refreshtoken']==""||smtpaccount['refreshtoken']==null||smtpaccount['username']==""||smtpaccount['username']==null){
                  const oauth2Client = new OAuth2(
                      process.env.GMAIL_CLIENT_ID, // ClientID
                      process.env.GMAIL_CLIENT_SECRET, // Client Secret
                      "https://developers.google.com/oauthplayground" // Redirect URL
                  );
                  oauth2Client.setCredentials({
                      refresh_token: process.env.GMAIL_REFRESH_TOKEN
                  });
                  const accessToken = await oauth2Client.getAccessToken();
                  transporter = nodemailer.createTransport({
                      service: "gmail",
                      auth: {
                          type: "OAuth2",
                          user: 'admin@certonce.com', 
                          clientId: process.env.GMAIL_CLIENT_ID,
                          clientSecret: process.env.GMAIL_CLIENT_SECRET,
                          refreshToken: process.env.GMAIL_REFRESH_TOKEN,
                          accessToken: accessToken
                      }
                  });
                  from="CertOnce Inc <admin@certonce.com>";
              }
              else{
                  const oauth2Client = new OAuth2(
                    smtpaccount['clientid'], // ClientID
                    smtpaccount['clientsecret'], // Client Secret
                      "https://developers.google.com/oauthplayground" // Redirect URL
                  );
                  oauth2Client.setCredentials({
                      refresh_token: smtpaccount['refreshtoken']
                  });
                  const accessToken = await oauth2Client.getAccessToken();
                  transporter = nodemailer.createTransport({
                      service: "gmail",
                      auth: {
                          type: "OAuth2",
                          user: smtpaccount['username'], 
                          clientId: smtpaccount['clientid'],
                          clientSecret: smtpaccount['clientsecret'],
                          refreshToken: smtpaccount['refreshtoken'],
                          accessToken: accessToken
                      }
                  });
                  
              }
            }
            else if(smtpresult.rows[0].smtptype==false){
               smtpaccount['type'] = smtpresult.rows[0].smtptype;
               smtpaccount['host'] = smtpresult.rows[0].smtphost;
               smtpaccount['port'] = smtpresult.rows[0].smtpport;
               smtpaccount['username'] = smtpresult.rows[0].smtpusername;
               smtpaccount['password'] = smtpresult.rows[0].smtppassword;
               smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
               from=smtpresult.rows[0].smtpfrom;
               smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
 
               console.log("here is smtp type false");
               if(smtpaccount['host']==""||smtpaccount['host']==null||smtpaccount['port']==""||smtpaccount['port']==null||smtpaccount['username']==""||smtpaccount['username']==null)
               {
                 host='smtp.gmail.com';
                 port='465';
                 username='admin@certonce.com';
                 password=process.env.SMTP_PASS;
                 from="CertOnce Inc <admin@certonce.com>";
               }
                else
               {
                 host=smtpaccount['host'];
                 port=smtpaccount['port'];
                 username=smtpaccount['username'] ;
                 password=smtpaccount['password'];
                 if(from=="") from=username;
 
               }
               
               /*
               host='smtp.gmail.com';
               port='465';
               username='admin@certonce.com';
               password=process.env.SMTP_PASS;
               */
               //if(account['from']=="" ||account['from']==null) from=username;
               //cc="info@enhelion.com";
               //to="om@growthschool.io";
               //to="ranjanemail@gmail.com";
                
                
 
                var sgTransport = require('nodemailer-sendgrid-transport');  
                var sendgridoptions = {
                    auth: {
                    //api_user: username,
                    api_key: password
                    }
                }  
                transporter = nodemailer.createTransport({
 
                    host: host,
                    port: port,
                    //secure: true,                   
                    secureConnection: false,
                    pool: true,
                    auth: {
                        user: username,
                        pass: password
                    },
                    tls: {
                        ciphers:'SSLv3'
                    }
                    
                });
                
                if(host==="smtp.sendgrid.net")
                {
                    transporter = nodemailer.createTransport(sgTransport(sendgridoptions));
                }
            }
         }
 
         const sub = "Official Certificate Verification from [University Name]";
         //const content = `<p>Certificate of ${studentData.firstname} ${studentData.lastname}: </p>`;
         const content = `<p>Dear [Verifier&rsquo;s Name],<br />
         Thank you for your verification request to officially verify the certificate of our student, [Student Name] .</p>
         
         <p><br />
         We are pleased to confirm and inform you that [Student Name], has successfully completed the course requirements and has been awarded the Computer Science Engineering Certificate from [University Name].</p>
         
         <p>We can confirm the authenticity of the certificate which has been duly issued by our University. The certificate has been attached to this email for your reference.</p>
         
         <p>Thank you for your interest in verifying the credentials of our student.</p>
         
         <p>Best Regards</p>
         
         <p>[University Name]</p>
         
         <p>[University Phone number]</p>
         
         <p><br />
         [University Address]</p>
         
         <p><br />
         <img alt="" src="https://www.certonce.com/images/Sample_University_Logo.png" style="height:150px; width:150px" /></p>
         
         `;
         var mailOptions = {
          from: from,
          to: to,
          cc: "",
          subject: sub,
          html: content,
          attachments: [{ path: attachmentpdffile, filename: "certificate.pdf" }]
         };
         //console.log(mailOptions);
 
         transporter.sendMail(mailOptions, async function (error, info) 
         {
            if (error) {
                console.log(error);
                var obj = {
                  Status: 400,
                  message: error
                }        
                res.json(obj);
                return;
            } else {
              let datetime = Date.now();
              let updatePaymentEmailSentQuery = format(`UPDATE payment_email_sent set isemailreceived=true, sent_datetime='${datetime}' WHERE id=${paymentDataId}`);
              await pool.query(updatePaymentEmailSentQuery);
              console.log("email sent successfully, ",info)
            
              var obj = {
                Status: 200,
                message: 'success'
              }
              console.log(obj);
              res.json(obj);
            }
          });
          
        }
        else
        {
          var obj = {
            Status: 400,
            message: "Email sending has been failed"
          }        
          res.json(obj);
          return;
        }
 
        
 
        
      } 
      else
      {
        var obj = {
          Status: 400,
          message: "certificate not found"
        }
        res.json(obj);
      }
    }
  } 
  catch (err) {
    var obj = {
      Status: 400,
      message: err.message
    }
    res.json(obj);
  }
}
 

user.securityStrip = async (req, res, next) => {
 try 
 {
   var amt = req.body.amt;   
   var STRIPE_SECRET_KEY = process.env.STRIPECHARGE_KEY;
   var stripe = null;
   var apiKey = req.body.apiKey;
   if(apiKey !== undefined && apiKey !== null && apiKey!=="")
   {
    var excludeAccount=" accountid !='20102' ";
    var querySetting = format(`SELECT * FROM setting  where stripecertonceapikey='${apiKey}' and stripe_publickey!='' and stripe_publickey is not null and stripe_secretkey!='' and stripe_secretkey is not null and ${excludeAccount};`);
    console.log(querySetting);
    let settingResult = await pool.query(querySetting);
    
    if (settingResult && settingResult.rowCount > 0) {
      console.log(settingResult.rows[0]);
      STRIPE_SECRET_KEY= settingResult.rows[0].stripe_secretkey;
      stripe = require("stripe")(STRIPE_SECRET_KEY);
    }
   }
   else
   {
    stripe = require("stripe")(STRIPE_SECRET_KEY);
   }
   console.log("STRIPE_SECRET_KEY=", STRIPE_SECRET_KEY);
    const paymentIntent= await stripe.paymentIntents.create({
     amount:amt*100,
     currency:"usd",
     payment_method_types:["card"],
   });     
   var obj = {
     Status: 200,
     stripeClientSecret:paymentIntent,
     message: 'success( Amount: '+amt+'usd)'
   }
   console.log(obj);
   res.json(obj);        
       
 } catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj);
 }
}
user.publishableKeyStrip = async (req, res, next) => {
 try 
 {
   var STRIPE_PUBLICK_KEY = process.env.STRIPE_SECRET_KEY;
   var apiKey = req.body.apiKey;
   if(apiKey !== undefined && apiKey !== null && apiKey!=="")
   {
    var excludeAccount=" accountid !='20102' ";
    var querySetting = format(`SELECT * FROM setting  where stripecertonceapikey='${apiKey}' and stripe_publickey!='' and stripe_publickey is not null and stripe_secretkey!='' and stripe_secretkey is not null and ${excludeAccount};`);
    console.log(querySetting);
    let settingResult = await pool.query(querySetting);
    
    if (settingResult && settingResult.rowCount > 0) {
      console.log(settingResult.rows[0]);
      STRIPE_PUBLICK_KEY= settingResult.rows[0].stripe_publickey;
    }
   }
   console.log("STRIPE_PUBLICK_KEY=", STRIPE_PUBLICK_KEY);
   var obj = {
     Status: 200,
     stripePublishableKey:STRIPE_PUBLICK_KEY,
     message: 'success'
   }
   console.log(obj);
   res.json(obj);        
       
 } catch (err) {
   var obj = {
     Status: 400,
     message: err.message
   }
   res.json(obj);
 }
}
user.createCohortWithStudentsForArfeenKhan = async (req, res, next) => {

 var api_key = req.body.apikey;
 var cohortname = req.body.cohortname;
 var cohortid = req.body.cohortid;
 var competencyname = req.body.coursename;
 var issueddate = req.body.issueddate;
 
 
 //console.log(api_key);
 if (issueddate == undefined || typeof issueddate === 'undefined' || issueddate==null) {
   issueddate = "";
 }


 if (cohortname == "" || cohortname == undefined || cohortname == null ||
   cohortid == "" || cohortid == undefined || cohortid == null ||
   competencyname == "" || competencyname == null || competencyname == undefined ||
   api_key == "" || api_key == null || api_key == undefined
 ) {
   var obj = {
     Status: 400,
     message: "Invalid request parameters"
   };
   res.json(obj);
   return;
 }

 //accountid 20080
 var userid = await getUserIDFromApiKey(api_key);
 console.log("createCohortWithStudentsForArfeenKhan=", userid);
 console.log(req.body);
 if (userid == null) {
   var obj = {
     Status: 400,
     message: "Invalid api key"
   };
   res.json(obj);
   return;
 }

 var puserid = await getParentAccountIdFromId(userid);

 
 var smtpaccount = {};  
 var organization_name = "";  
 var querySmtp = format(`SELECT * FROM setting  where accountid='${puserid}';`);
 console.log(querySmtp);
 let smtpresult = await pool.query(querySmtp);
 
 if (smtpresult && smtpresult.rowCount > 0) {
   if (smtpresult.rows[0].smtptype == true) {
     smtpaccount['type'] = smtpresult.rows[0].smtptype;
     smtpaccount['username'] = smtpresult.rows[0].smtpusername;
     smtpaccount['clientid'] = smtpresult.rows[0].smtpclientid;
     smtpaccount['clientsecret'] = smtpresult.rows[0].smtpclientsecret;
     smtpaccount['refreshtoken'] = smtpresult.rows[0].smtprefreshtoken;      
   }
   else if (smtpresult.rows[0].smtptype == false) {
     smtpaccount['type'] = smtpresult.rows[0].smtptype;
     smtpaccount['host'] = smtpresult.rows[0].smtphost;
     smtpaccount['port'] = smtpresult.rows[0].smtpport;
     smtpaccount['username'] = smtpresult.rows[0].smtpusername;
     smtpaccount['password'] = smtpresult.rows[0].smtppassword;      
   }
 }
 smtpaccount['from'] = smtpresult.rows[0].smtpfrom;
 //smtpaccount['cc'] = smtpresult.rows[0].smtpcc;
 smtpaccount['cc'] = ["meenoy@certonce.com", "pawan.khurana@certonce.com", "bernetta.lobo@certonce.com"];
 var queryOrg = format(`SELECT * FROM usermaster WHERE user_id=${puserid}`);
 let orgresult = await pool.query(queryOrg);
 if (orgresult && orgresult.rowCount > 0) {
   organization_name = orgresult.rows[0].organization_name;
   
 }
 logfilename ="/home/ubuntu/logs/"+puserid+"/createCohortWithStudentsForArfeenKhan.txt"
  var logdirpath = path.dirname(logfilename);    
  if (!await fs.existsSync(logdirpath))
  {
      await os.execCommand('sudo mkdir -p "'+logdirpath+'"');
      await os.execCommand('sudo chmod -R 777 "'+logdirpath+'"');
  }
  var today = new Date();    
  fs.appendFileSync(logfilename, '\nStart section on '+today + '\n');    
  fs.appendFileSync(logfilename, JSON.stringify(req.body));    
  fs.appendFileSync(logfilename, '\nEnd section on '+today + '\n');  
 var recipients = req.body.recipientinformation;
 var successcount = 0;
 for (let index = 0; index < recipients.length; index++) {
   var firstname = recipients[index].firstname;
   var middlename = recipients[index].middlename;
   var lastname = recipients[index].lastname;
   var email = recipients[index].email;
   var pstudentid = recipients[index].studentid;
   if (pstudentid == "" || pstudentid == null || pstudentid == undefined) pstudentid = "";
   pstudentid = pstudentid.replace("'", "`").trim();
   var certificateid = recipients[index].certificateid;
   if (certificateid == "" || certificateid == null || certificateid == undefined) certificateid = "";
   certificateid = certificateid.replace("'", "`").trim();

   if (email == "" || email == null || email == undefined ||
     ((firstname == "" || firstname == null || firstname == undefined) && (middlename == "" || middlename == null || middlename == undefined) && (lastname == "" || lastname == null || lastname == undefined))) {
     var obj = {
       Status: 400,
       message: "Invalid request parameters"
     };
     res.json(obj);
     return;
   }


   if (firstname == "" || firstname == null || firstname == undefined) firstname = "";
   if (middlename == "" || middlename == null || middlename == undefined) middlename = "";
   if (lastname == "" || lastname == null || lastname == undefined) lastname = "";

   firstname = firstname.replace("'", "`").trim();
   middlename = middlename.replace("'", "`").trim();
   lastname = lastname.replace("'", "`").trim();
   email = email.replace("'", "`").trim();
   if (validator.validate(email) == false) {
     console.log(email)
     var obj = {
       Status: 400,
       message: email + " email format is incorrect."
     };
     return res.json(obj);
   }

   try {
     var cohort_id = await getChortidFromCohortInfo(cohortname, cohortid, competencyname, "", "", puserid, "");
     if (cohort_id == "" || cohort_id == null) {
       var obj = {
         Status: 400,
         message: "Failed to adding cohort"
       };
       res.json(obj);
       return;
     }

     
     var studentid = null;

     var addStudentQuery = format(`INSERT INTO STUDENT (studentid,firstname,middlename,lastname,emailaddress,accountid)
                             SELECT '${pstudentid}','${firstname}','${middlename}', '${lastname}', '${email}','${puserid}' on conflict (accountid, studentid,firstname,middlename,lastname,emailaddress) do update set emailaddress='${email}' RETURNING id;`);
     students = await pool.query(addStudentQuery);
     if (students.rowCount > 0) {
       studentid = students.rows[0].id;
     
      console.log("userid, studentid , count, cohortname===" + puserid + ", " + studentid + ", " + successcount + ", " + cohortname);
      var certtypes = {"degree":"cohortmembers_degree","transcript":"cohortmembers_transcript","openbadges":"cohortmembers_openbadges","migration":"cohortmembers_degree","bonafide":"cohortmembers_degree","transfer":"cohortmembers_degree","relieving":"cohortmembers_degree","awards":"cohortmembers_degree","semesterwisegradecard":"cohortmembers_degree","medal":"cohortmembers_degree","or":"cohortmembers_degree"};
      var studentsforonetimecode;
      var onetimecode = "";
      var loopcount = 0;
      while (loopcount !== Object.keys(certtypes).length) {
        onetimecode = getOnetimecode(15);
        loopcount = 0;
        for (const key in certtypes) {
          var tablenameforcerttype = certtypes[key];
          let getExistStudent = format(`SELECT id FROM ${tablenameforcerttype} WHERE onetimeblockcertscode='${onetimecode}';`);
          studentsforonetimecode = await pool.query(getExistStudent);
          if (studentsforonetimecode.rowCount == 0) {
            loopcount++;
          }
        }
      }
      var cohortmembers = null;
      var addPivotQuery = format(`INSERT INTO cohortmembers_degree (cohortid,studentid,certificateid,onetimeblockcertscode,publickey,blockcertsinvitationsent,is_validated,issueddate)
          SELECT '${cohort_id}','${studentid}','${certificateid}','${onetimecode}','${email}','true','true','${issueddate}' on conflict (cohortid, studentid) do update set is_validated='true' returning id;`);
      cohortmembers = await pool.query(addPivotQuery);
      
      if (cohortmembers.rowCount > 0) {
        if (puserid == 20080 || puserid == 1) {       
          var addgeneratestatusquery = format(`INSERT INTO generate_status (accountid, studentid, status, certtype, cohortid)
                SELECT '${puserid}','${cohortmembers.rows[0].id}', 'processing', 'degree','${cohortid}'
                WHERE NOT EXISTS (SELECT 1 FROM generate_status WHERE accountid='${puserid}' and studentid='${cohortmembers.rows[0].id}' and status='processing' and cohortid='${cohortid}')
                RETURNING id;`);
          await pool.query(addgeneratestatusquery);
        }
      }
      var studentinfo = await getStudentInfoFromName(cohort_id, studentid, "cohortmembers_degree");
      if (studentinfo == null) {
        var obj = {
          Status: 400,
          message: "Error"
        };
        res.json(obj);
        return;
      }
      successcount++;
    }
   }
   catch (error) {
     console.log(error)
     const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
     let logfilename = logfiledir + puserid + "/createcohortresult.log";
     var email_body = `<p style="color:black;">There is an error in creating cohort with students data</p>  
     <ul>
       <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
       <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
       <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>        
       <li type= "none" style="color:black;">  &ndash; Number of Students : ${recipients.length}</a></li>
       <li type= "none" style="color:black;">  &ndash; Error Message : ${error}</a></li>
     </ul>  
     `;
     
     mailer_createcohortresult(email_body, "Alert for Arfeen Khan", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
     var obj = {
       Status: 400,
       message: error
     };
     res.json(obj);
     return;
   }
 }//for end
 

 if (successcount > 0) {
   ////////////////////////// Send Email Alert about creating cohort and students

   const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
   let logfilename = logfiledir + puserid + "/createcohortresult.log";
   var email_body = `<p style="color:black;">Students are added to database by API.</p>  
   <ul>
     <li type= "none" style="color:black;">  &ndash; Issuer : ${organization_name}.</li>    
     <li type= "none" style="color:black;">  &ndash; Cohort : ${cohortname}</a></li>
     <li type= "none" style="color:black;">  &ndash; Competency : ${competencyname}</a></li>      
     <li type= "none" style="color:black;">  &ndash; Number of Students : ${recipients.length}</a></li>
   </ul>  
 `;
   
   mailer_createcohortresult(email_body, "Alert for Arfeen Khan", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
   ///////////////////////////// End 
   var obj = {
     Status: 200,
     message: "Success"
   };
   res.json(obj);
 }
 else {
   const mailer_createcohortresult = require("../../config/mailer_createcohortresult");
   let logfilename = logfiledir + puserid + "/createcohortresult.log";
   var email_body = `Something wrong in payload!`;
  
   
   mailer_createcohortresult(email_body, "Alert for Arfeen Khan", "rajesh.ranjan@certonce.com", smtpaccount, logfilename);
  
   var obj = {
     Status: 400,
     message: "Something wrong in payload!"
   };
   res.json(obj);
 }
}
user.retrieveCertificatesForArfeenKhan = async (req,res, next) => {
   
 try {      
     var ret=[];
     var glcohortid=req.body.cohortid;
     var api_key=req.body.apikey;
     
     var cohorttablename="cohortmembers_degree";
     if(api_key=="" || api_key==null ||  api_key==undefined || glcohortid=="" || glcohortid==null ||  glcohortid==undefined)
     {
       var obj = {
             Status: 400,
               message: "Invalid request parameters"
           };
       res.json(obj);
       return;
     }
     glcohortid=glcohortid.replace(/'/g,"’")
     
     var userid=await getUserIDFromApiKey(api_key); 
     console.log("retrieveCertificatesForArfeenKhan=",userid);
     if(userid==null)
     {
       var obj = {
             Status: 400,
               message: "Invalid api key"
           };
       res.json(obj);
       return; 
     }   
     
     
     var usermasterQuery = format(`select * from usermaster where user_id='${userid}'`);
     var result = await pool.query(usermasterQuery);
     var business_is_verified=false;      
     if ( result.rowCount > 0 ) 
     {
       business_is_verified=result.rows[0].business_is_verified;
     }
     else
     {
       var obj = {
             Status: 400,
               message: "Invalid api key"
           };
       res.json(obj);
       return; 
     }

     if(business_is_verified==false)
     {
       var obj = {
             Status: 400,
               message: "Your account is currently under verification, please contact certonce team."
           };
           res.json(obj);
           return;
     }
     var puserid=await getParentAccountIdFromId(userid);       
     var recipientinformation=req.body.recipientinformation;

     var today = new Date();
     var dd = String(today.getDate()).padStart(2, '0');
     var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
     var yyyy = today.getFullYear();
     today = yyyy+"-"+mm+"-"+dd;
     
     if(recipientinformation !==null && recipientinformation !== undefined && recipientinformation !== "")
     {
       var item={};          
         if ( glcohortid == '') {
           var obj = {
             Status: 400,
             message: "Empty cohortid error!"        
             }
             res.json(obj);      
             return;
         }
         var whereClause =  "WHERE c.cohortid='"+ glcohortid +"' and a.firstname='"+recipientinformation['firstname']+"' and a.lastname='"+recipientinformation['lastname']+"' and a.emailaddress='"+recipientinformation['email']+"' and c.accountid='"+puserid+"' and e.accountid='"+puserid+"';"
         var studentQuery = format(`SELECT a.*, c.*, b.*, b.id as bid FROM student a 
                                       LEFT JOIN ${cohorttablename} b ON b.studentid=a.id 
                                       LEFT JOIN cohort c ON c.id=b.cohortid 
                                       LEFT JOIN cohort_group e ON e.cohortid=c.cohortid ${whereClause}                                       
                                       `);
         console.log(studentQuery);

         let students = await pool.query(studentQuery);            
         if ( students.rowCount > 0 ) {                            
             for ( const student of students.rows ) {
                 
                 var signedcertificateurl = student['signedcertificateurl'];
                 var signedcertificatepdfurl = student['signedcertificatepdfurl'];                
                 var first_name = student['firstname'];                
                 var middle_name = student['middlename'];
                 var last_name = student['lastname'];
                 var emailaddress = student['emailaddress'];                  
                 var issueddate = student['issueddate'];
                 var bid=student['bid'];
                 var fullname="";
                 if(middle_name==null||middle_name=="")
                 {
                   fullname=first_name+" "+last_name;
                 }
                 else
                 {
                   fullname=first_name+" "+middle_name+" "+last_name;
                 }
                 var competency_name=student['competencyname'];
                 var attachment_name=fullname+" - "+competency_name; 

                 if(signedcertificateurl==null||signedcertificateurl=="" || signedcertificatepdfurl==null||signedcertificatepdfurl=="") 
                 {
                   var item={"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":"","json":"","dateofissue":""};
                   ret.push(item);    
                 }
                 else
                 {
                   var jsonurl=myip+subwwwurl+"/certificatejson/";
                   var pdfurl=myip+subwwwurl+"/certificatepdf/";
                   
                   
                   var lastelement=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-1];//signedcertificateurl.split("/").pop();
                   var jsoncollegeid=signedcertificateurl.split("/")[signedcertificateurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
                   var pdflastelement=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-1];//signedcertificatepdfurl.split("/").pop();
                   var pdfcollegeid=signedcertificatepdfurl.split("/")[signedcertificatepdfurl.split("/").length-2];//signedcertificatepdfurl.split("/").pop();
                   
                   var verifyid=lastelement.replace(".json","");
                   var pdfid=pdflastelement.replace(".pdf","");
                 
                   
                   var pdfurl=`${pdfurl}${pdfcollegeid}/${pdfid}`;
                   var jsonurl=`${jsonurl}${jsoncollegeid}/${verifyid}`;
                   if(puserid == "20001" || puserid == "1" || puserid == "2")
                   {
                     //pdfurl=`https://certification.mitwpu.edu.in/pdf/${pdfid}`;
                     //jsonurl=`https://certification.mitwpu.edu.in/certificate/${verifyid}`;
                   }
                   else if(puserid =="20027")
                   {
                     pdfurl=`https://360digitmg.com/certificatepdf/${pdfid}`;
                     jsonurl=`https://360digitmg.com/certificatejson/${pdfid}`;
                   }
                   else if(puserid =="20080")
                   {

                     pdfurl=`https://www.arfeenkhanuniversity.com/verifier/certificatepdf/${pdfid}`;
                     jsonurl=`https://www.arfeenkhanuniversity.com/verifier/certificatejson/${pdfid}`;
                   }
                   
                   let updateQuery = format(`update ${cohorttablename} set retrievestate=true, retrievedate='${today}', certificatesendstate = 2 where id='${bid}'`);
                   await pool.query(updateQuery);
                   var item={"firstname":first_name,"middlename":middle_name,"lastname":last_name,"email":emailaddress,"pdf":pdfurl,"json":jsonurl,"dateofissue": issueddate};
                   ret.push(item);
                 }
             }
         }
   }///recipientinformation end

   
   
   var obj = {
       Status: 200,
       result:ret,
       message: "Success"        
       }
   res.json(obj);
     
 }
 catch (error) {
   var obj = {
       Status: 400,
       message: error.message        
       }
       res.json(obj);      
 }
}
user.setContactInformation=async (req, res, next) =>{
  try
  {
    var api_key = req.body.apikey;
    var name=req.body.name;
    var email=req.body.email;
    var contact_no=req.body.contact_no;
    var institue_university_name=req.body.institue_university_name;
    var designation=req.body.designation;
    var userid = await getUserIDFromApiKey(api_key);
    console.log("setContactInformation=", userid);  
    if (userid == null) {
      var obj = {
        Status: 400,
        message: "Invalid api key"
      };
      res.json(obj);
      return;
    }
    var id=null;
    var puserid = await getParentAccountIdFromId(userid);
    var addContactQuery = format(`INSERT INTO user_contact (name,email,contact_no,institue_university_name,designation,accountid)
                              SELECT '${name}','${email}','${contact_no}', '${institue_university_name}', '${designation}','${puserid}'
                              WHERE NOT EXISTS (SELECT 1 FROM user_contact WHERE name='${name}' and LOWER(email)=LOWER('${email}') and LOWER(institue_university_name)=LOWER('${institue_university_name}') and accountid='${puserid}')
                              RETURNING id;`);
      results = await pool.query(addContactQuery);
      if (results.rowCount > 0) {
        id = results.rows[0].id;
      }
      var obj = {
        Status: 200,
        message: "Success"
      };
      res.json(obj);
  }
  catch (error) {
    var obj = {
        Status: 400,
        message: error.message        
        }
        res.json(obj);      
  }
}

user.getOffice365Token = async (req, res, next) => {
  const qs = require('qs');
  try
  {
    var api_key = req.query.state;
    if (api_key == "" || api_key == null || api_key == undefined) {
      var obj = {Status: 400, message: "Invalid API Key"};
      return res.json(obj);      
    }
    var userid = await getUserIDFromApiKey(api_key);
    if (userid == null) {
      var obj = {Status: 400, message: "Invalid api key"};
      return res.json(obj);
    }
    var puserid = await getParentAccountIdFromId(userid);
    var clientId = '';
    var client_secret = '';
    var tenantId = '';
    var query = format(`SELECT * FROM setting where accountid='${puserid}';`);    
    var smtpresult=await pool.query(query);      
    if (smtpresult.rows && smtpresult.rows.length != 0) {
      clientId = smtpresult.rows[0].office365clientid;
      client_secret = smtpresult.rows[0].office365clientsecret;
      tenantId = smtpresult.rows[0].office365tanentid;
    }
    if(clientId == "" || client_secret == "" || tenantId == "")
    {
      var obj = {Status: 400, message: "Failed"};
      return res.json(obj); 
    }           
      
    if(req.query.code!=undefined && req.query.code!=null)
    {
      const redirectUri = 'https://www.certonce.com:5000/api/getOffice365Token';
      const scope = 'https://graph.microsoft.com/Mail.Send';
      var code=req.query.code;
      const response = await axios.post('https://login.microsoftonline.com/' + tenantId + '/oauth2/v2.0/token', qs.stringify({
        client_id: clientId,
        scope: scope,
        code: code,
        redirect_uri: redirectUri,
        grant_type: 'authorization_code',
        client_secret: client_secret
      }));
      const { access_token,refresh_token } = response.data;
      console.log('Access Token:', access_token);
      console.log('Refresh Token:', refresh_token);
      var ageQuery = format(`INSERT INTO setting (accountid, office365accesstoken, office365refreshtoken) values ('${puserid}', '${access_token}', '${refresh_token}') ON CONFLICT (accountid) DO UPDATE SET office365accesstoken = '${access_token}', office365refreshtoken = '${refresh_token}';`);
      var updateresult=await pool.query(ageQuery);
      var obj = {Status: 200, message: "Success" };
      // code:req.query.code,
      // accessToken:access_token,
      // refreshToken:refresh_token
      return res.json(obj);
    } 
    var obj = {Status: 400, message: "Failed"};
    res.json(obj);
  }
  catch (error) {
    var obj = {Status: 400, message: error.message};
    res.json(obj);
  }
}

module.exports = user;